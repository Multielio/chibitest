
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002b9 	.word	0x080002b9
 8000008:	080002bb 	.word	0x080002bb
 800000c:	080002bb 	.word	0x080002bb
 8000010:	080002bb 	.word	0x080002bb
 8000014:	080002bb 	.word	0x080002bb
 8000018:	080002bb 	.word	0x080002bb
 800001c:	080002bb 	.word	0x080002bb
 8000020:	080002bb 	.word	0x080002bb
 8000024:	080002bb 	.word	0x080002bb
 8000028:	080002bb 	.word	0x080002bb
 800002c:	08003e81 	.word	0x08003e81
 8000030:	080002bb 	.word	0x080002bb
 8000034:	080002bb 	.word	0x080002bb
 8000038:	080002bb 	.word	0x080002bb
 800003c:	080002bb 	.word	0x080002bb
 8000040:	080002bb 	.word	0x080002bb
 8000044:	080002bb 	.word	0x080002bb
 8000048:	080002bb 	.word	0x080002bb
 800004c:	080002bb 	.word	0x080002bb
 8000050:	080002bb 	.word	0x080002bb
 8000054:	080002bb 	.word	0x080002bb
 8000058:	08005bf1 	.word	0x08005bf1
 800005c:	08005bc1 	.word	0x08005bc1
 8000060:	08005b91 	.word	0x08005b91
 8000064:	08005b61 	.word	0x08005b61
 8000068:	08005b31 	.word	0x08005b31
 800006c:	08005a11 	.word	0x08005a11
 8000070:	080059e1 	.word	0x080059e1
 8000074:	080059b1 	.word	0x080059b1
 8000078:	08005981 	.word	0x08005981
 800007c:	08005951 	.word	0x08005951
 8000080:	08005921 	.word	0x08005921
 8000084:	080058f1 	.word	0x080058f1
 8000088:	080002bb 	.word	0x080002bb
 800008c:	080002bb 	.word	0x080002bb
 8000090:	080002bb 	.word	0x080002bb
 8000094:	080002bb 	.word	0x080002bb
 8000098:	080002bb 	.word	0x080002bb
 800009c:	08005ac1 	.word	0x08005ac1
 80000a0:	080002bb 	.word	0x080002bb
 80000a4:	080002bb 	.word	0x080002bb
 80000a8:	080002bb 	.word	0x080002bb
 80000ac:	080002bb 	.word	0x080002bb
 80000b0:	08005681 	.word	0x08005681
 80000b4:	080002bb 	.word	0x080002bb
 80000b8:	080002bb 	.word	0x080002bb
 80000bc:	080002bb 	.word	0x080002bb
 80000c0:	080002bb 	.word	0x080002bb
 80000c4:	080002bb 	.word	0x080002bb
 80000c8:	080002bb 	.word	0x080002bb
 80000cc:	080002bb 	.word	0x080002bb
 80000d0:	080002bb 	.word	0x080002bb
 80000d4:	080002bb 	.word	0x080002bb
 80000d8:	080054d1 	.word	0x080054d1
 80000dc:	080002bb 	.word	0x080002bb
 80000e0:	08005a41 	.word	0x08005a41
 80000e4:	080002bb 	.word	0x080002bb
 80000e8:	080002bb 	.word	0x080002bb
 80000ec:	080002bb 	.word	0x080002bb
 80000f0:	080002bb 	.word	0x080002bb
 80000f4:	080002bb 	.word	0x080002bb
 80000f8:	080002bb 	.word	0x080002bb
 80000fc:	080058c1 	.word	0x080058c1
 8000100:	080002bb 	.word	0x080002bb
 8000104:	080002bb 	.word	0x080002bb
 8000108:	080002bb 	.word	0x080002bb
 800010c:	080002bb 	.word	0x080002bb
 8000110:	080002bb 	.word	0x080002bb
 8000114:	080002bb 	.word	0x080002bb
 8000118:	080002bb 	.word	0x080002bb
 800011c:	080002bb 	.word	0x080002bb
 8000120:	08005891 	.word	0x08005891
 8000124:	08005861 	.word	0x08005861
 8000128:	08005831 	.word	0x08005831
 800012c:	08005801 	.word	0x08005801
 8000130:	080057d1 	.word	0x080057d1
 8000134:	080002bb 	.word	0x080002bb
 8000138:	080002bb 	.word	0x080002bb
 800013c:	080002bb 	.word	0x080002bb
 8000140:	080002bb 	.word	0x080002bb
 8000144:	080002bb 	.word	0x080002bb
 8000148:	080002bb 	.word	0x080002bb
 800014c:	080002bb 	.word	0x080002bb
 8000150:	080057a1 	.word	0x080057a1
 8000154:	08005771 	.word	0x08005771
 8000158:	08005741 	.word	0x08005741
 800015c:	080002bb 	.word	0x080002bb
 8000160:	080002bb 	.word	0x080002bb
 8000164:	080002bb 	.word	0x080002bb
 8000168:	080002bb 	.word	0x080002bb
 800016c:	080002bb 	.word	0x080002bb
 8000170:	080002bb 	.word	0x080002bb
 8000174:	080002bb 	.word	0x080002bb
 8000178:	080002bb 	.word	0x080002bb
 800017c:	080002bb 	.word	0x080002bb
 8000180:	080002bb 	.word	0x080002bb
 8000184:	080002bb 	.word	0x080002bb
 8000188:	080002bb 	.word	0x080002bb
 800018c:	080002bb 	.word	0x080002bb
 8000190:	080002bb 	.word	0x080002bb
 8000194:	080002bb 	.word	0x080002bb
 8000198:	080002bb 	.word	0x080002bb
 800019c:	080002bb 	.word	0x080002bb
 80001a0:	080002bb 	.word	0x080002bb
 80001a4:	080002bb 	.word	0x080002bb
 80001a8:	080002bb 	.word	0x080002bb
 80001ac:	080002bb 	.word	0x080002bb
 80001b0:	080002bb 	.word	0x080002bb
 80001b4:	080002bb 	.word	0x080002bb
 80001b8:	080002bb 	.word	0x080002bb
 80001bc:	080002bb 	.word	0x080002bb
 80001c0:	080002bb 	.word	0x080002bb
 80001c4:	080002bb 	.word	0x080002bb
 80001c8:	080002bb 	.word	0x080002bb
 80001cc:	080002bb 	.word	0x080002bb
 80001d0:	080002bb 	.word	0x080002bb
 80001d4:	080002bb 	.word	0x080002bb
 80001d8:	080002bb 	.word	0x080002bb
 80001dc:	080002bb 	.word	0x080002bb

Disassembly of section .text:

080001e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001e2:	4827      	ldr	r0, [pc, #156]	; (8000280 <endfiniloop+0x4>)
                msr     MSP, r0
 80001e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001e8:	4826      	ldr	r0, [pc, #152]	; (8000284 <endfiniloop+0x8>)
                msr     PSP, r0
 80001ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80001ee:	4826      	ldr	r0, [pc, #152]	; (8000288 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80001f0:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 80001f4:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001f8:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 80001fa:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 80001fc:	f380 8814 	msr	CONTROL, r0
                isb
 8000200:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000204:	f005 fd54 	bl	8005cb0 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000208:	f005 f82a 	bl	8005260 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800020c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000210:	491e      	ldr	r1, [pc, #120]	; (800028c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000212:	4a1b      	ldr	r2, [pc, #108]	; (8000280 <endfiniloop+0x4>)

08000214 <msloop>:
msloop:
                cmp     r1, r2
 8000214:	4291      	cmp	r1, r2
                itt     lo
 8000216:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000218:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800021c:	e7fa      	bcc.n	8000214 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800021e:	491c      	ldr	r1, [pc, #112]	; (8000290 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 8000220:	4a18      	ldr	r2, [pc, #96]	; (8000284 <endfiniloop+0x8>)

08000222 <psloop>:
psloop:
                cmp     r1, r2
 8000222:	4291      	cmp	r1, r2
                itt     lo
 8000224:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000226:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800022a:	e7fa      	bcc.n	8000222 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 800022c:	4919      	ldr	r1, [pc, #100]	; (8000294 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 800022e:	4a1a      	ldr	r2, [pc, #104]	; (8000298 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 8000230:	4b1a      	ldr	r3, [pc, #104]	; (800029c <endfiniloop+0x20>)

08000232 <dloop>:
dloop:
                cmp     r2, r3
 8000232:	429a      	cmp	r2, r3
                ittt    lo
 8000234:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000236:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800023a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800023e:	e7f8      	bcc.n	8000232 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000240:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8000242:	4917      	ldr	r1, [pc, #92]	; (80002a0 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 8000244:	4a17      	ldr	r2, [pc, #92]	; (80002a4 <endfiniloop+0x28>)

08000246 <bloop>:
bloop:
                cmp     r1, r2
 8000246:	4291      	cmp	r1, r2
                itt     lo
 8000248:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800024a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800024e:	e7fa      	bcc.n	8000246 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000250:	f005 fce6 	bl	8005c20 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000254:	f005 fd24 	bl	8005ca0 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000258:	4c13      	ldr	r4, [pc, #76]	; (80002a8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 800025a:	4d14      	ldr	r5, [pc, #80]	; (80002ac <endfiniloop+0x30>)

0800025c <initloop>:
initloop:
                cmp     r4, r5
 800025c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800025e:	da03      	bge.n	8000268 <endinitloop>
                ldr     r1, [r4], #4
 8000260:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000264:	4788      	blx	r1
                b       initloop
 8000266:	e7f9      	b.n	800025c <initloop>

08000268 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000268:	f003 fa92 	bl	8003790 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 800026c:	4c10      	ldr	r4, [pc, #64]	; (80002b0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 800026e:	4d11      	ldr	r5, [pc, #68]	; (80002b4 <endfiniloop+0x38>)

08000270 <finiloop>:
finiloop:
                cmp     r4, r5
 8000270:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000272:	da03      	bge.n	800027c <endfiniloop>
                ldr     r1, [r4], #4
 8000274:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000278:	4788      	blx	r1
                b       finiloop
 800027a:	e7f9      	b.n	8000270 <finiloop>

0800027c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800027c:	f005 bd08 	b.w	8005c90 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000280:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000284:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000288:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800028c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000290:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000294:	080063a0 	.word	0x080063a0
                ldr     r2, =__data_base__
 8000298:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 800029c:	200010f0 	.word	0x200010f0
                ldr     r1, =__bss_base__
 80002a0:	200010f0 	.word	0x200010f0
                ldr     r2, =__bss_end__
 80002a4:	200014dc 	.word	0x200014dc
                ldr     r4, =__init_array_base__
 80002a8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end__
 80002ac:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_base__
 80002b0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end__
 80002b4:	080001e0 	.word	0x080001e0

080002b8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002b8:	e792      	b.n	80001e0 <_crt0_entry>

080002ba <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002ba:	f000 f800 	bl	80002be <_unhandled_exception>

080002be <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002be:	e7fe      	b.n	80002be <_unhandled_exception>

080002c0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002c4:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002c8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002ca:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002d0 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002d0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002d2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002d6:	4628      	mov	r0, r5
                blx     r4
 80002d8:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 80002da:	2000      	movs	r0, #0
                bl      chThdExit
 80002dc:	f003 fde0 	bl	8003ea0 <chThdExit>

080002e0 <_zombies>:
_zombies:       b       _zombies
 80002e0:	e7fe      	b.n	80002e0 <_zombies>

080002e2 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 80002e2:	f003 fe05 	bl	8003ef0 <chSchDoReschedule>

080002e6 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80002e6:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 80002e8:	e7fe      	b.n	80002e8 <_port_exit_from_isr+0x2>
	...

080002ec <__aeabi_frsub>:
 80002ec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002f0:	e002      	b.n	80002f8 <__addsf3>
 80002f2:	bf00      	nop

080002f4 <__aeabi_fsub>:
 80002f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002f8 <__addsf3>:
 80002f8:	0042      	lsls	r2, r0, #1
 80002fa:	bf1f      	itttt	ne
 80002fc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000300:	ea92 0f03 	teqne	r2, r3
 8000304:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000308:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800030c:	d06a      	beq.n	80003e4 <__addsf3+0xec>
 800030e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000312:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000316:	bfc1      	itttt	gt
 8000318:	18d2      	addgt	r2, r2, r3
 800031a:	4041      	eorgt	r1, r0
 800031c:	4048      	eorgt	r0, r1
 800031e:	4041      	eorgt	r1, r0
 8000320:	bfb8      	it	lt
 8000322:	425b      	neglt	r3, r3
 8000324:	2b19      	cmp	r3, #25
 8000326:	bf88      	it	hi
 8000328:	4770      	bxhi	lr
 800032a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800032e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000332:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000336:	bf18      	it	ne
 8000338:	4240      	negne	r0, r0
 800033a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800033e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000342:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000346:	bf18      	it	ne
 8000348:	4249      	negne	r1, r1
 800034a:	ea92 0f03 	teq	r2, r3
 800034e:	d03f      	beq.n	80003d0 <__addsf3+0xd8>
 8000350:	f1a2 0201 	sub.w	r2, r2, #1
 8000354:	fa41 fc03 	asr.w	ip, r1, r3
 8000358:	eb10 000c 	adds.w	r0, r0, ip
 800035c:	f1c3 0320 	rsb	r3, r3, #32
 8000360:	fa01 f103 	lsl.w	r1, r1, r3
 8000364:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000368:	d502      	bpl.n	8000370 <__addsf3+0x78>
 800036a:	4249      	negs	r1, r1
 800036c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000370:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000374:	d313      	bcc.n	800039e <__addsf3+0xa6>
 8000376:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800037a:	d306      	bcc.n	800038a <__addsf3+0x92>
 800037c:	0840      	lsrs	r0, r0, #1
 800037e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000382:	f102 0201 	add.w	r2, r2, #1
 8000386:	2afe      	cmp	r2, #254	; 0xfe
 8000388:	d251      	bcs.n	800042e <__addsf3+0x136>
 800038a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800038e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000392:	bf08      	it	eq
 8000394:	f020 0001 	biceq.w	r0, r0, #1
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	4770      	bx	lr
 800039e:	0049      	lsls	r1, r1, #1
 80003a0:	eb40 0000 	adc.w	r0, r0, r0
 80003a4:	3a01      	subs	r2, #1
 80003a6:	bf28      	it	cs
 80003a8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80003ac:	d2ed      	bcs.n	800038a <__addsf3+0x92>
 80003ae:	fab0 fc80 	clz	ip, r0
 80003b2:	f1ac 0c08 	sub.w	ip, ip, #8
 80003b6:	ebb2 020c 	subs.w	r2, r2, ip
 80003ba:	fa00 f00c 	lsl.w	r0, r0, ip
 80003be:	bfaa      	itet	ge
 80003c0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003c4:	4252      	neglt	r2, r2
 80003c6:	4318      	orrge	r0, r3
 80003c8:	bfbc      	itt	lt
 80003ca:	40d0      	lsrlt	r0, r2
 80003cc:	4318      	orrlt	r0, r3
 80003ce:	4770      	bx	lr
 80003d0:	f092 0f00 	teq	r2, #0
 80003d4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003d8:	bf06      	itte	eq
 80003da:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003de:	3201      	addeq	r2, #1
 80003e0:	3b01      	subne	r3, #1
 80003e2:	e7b5      	b.n	8000350 <__addsf3+0x58>
 80003e4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003e8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003ec:	bf18      	it	ne
 80003ee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003f2:	d021      	beq.n	8000438 <__addsf3+0x140>
 80003f4:	ea92 0f03 	teq	r2, r3
 80003f8:	d004      	beq.n	8000404 <__addsf3+0x10c>
 80003fa:	f092 0f00 	teq	r2, #0
 80003fe:	bf08      	it	eq
 8000400:	4608      	moveq	r0, r1
 8000402:	4770      	bx	lr
 8000404:	ea90 0f01 	teq	r0, r1
 8000408:	bf1c      	itt	ne
 800040a:	2000      	movne	r0, #0
 800040c:	4770      	bxne	lr
 800040e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000412:	d104      	bne.n	800041e <__addsf3+0x126>
 8000414:	0040      	lsls	r0, r0, #1
 8000416:	bf28      	it	cs
 8000418:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800041c:	4770      	bx	lr
 800041e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000422:	bf3c      	itt	cc
 8000424:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000428:	4770      	bxcc	lr
 800042a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800042e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000432:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000436:	4770      	bx	lr
 8000438:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800043c:	bf16      	itet	ne
 800043e:	4608      	movne	r0, r1
 8000440:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000444:	4601      	movne	r1, r0
 8000446:	0242      	lsls	r2, r0, #9
 8000448:	bf06      	itte	eq
 800044a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800044e:	ea90 0f01 	teqeq	r0, r1
 8000452:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000456:	4770      	bx	lr

08000458 <__aeabi_ui2f>:
 8000458:	f04f 0300 	mov.w	r3, #0
 800045c:	e004      	b.n	8000468 <__aeabi_i2f+0x8>
 800045e:	bf00      	nop

08000460 <__aeabi_i2f>:
 8000460:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000464:	bf48      	it	mi
 8000466:	4240      	negmi	r0, r0
 8000468:	ea5f 0c00 	movs.w	ip, r0
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000474:	4601      	mov	r1, r0
 8000476:	f04f 0000 	mov.w	r0, #0
 800047a:	e01c      	b.n	80004b6 <__aeabi_l2f+0x2a>

0800047c <__aeabi_ul2f>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	f04f 0300 	mov.w	r3, #0
 8000488:	e00a      	b.n	80004a0 <__aeabi_l2f+0x14>
 800048a:	bf00      	nop

0800048c <__aeabi_l2f>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000498:	d502      	bpl.n	80004a0 <__aeabi_l2f+0x14>
 800049a:	4240      	negs	r0, r0
 800049c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a0:	ea5f 0c01 	movs.w	ip, r1
 80004a4:	bf02      	ittt	eq
 80004a6:	4684      	moveq	ip, r0
 80004a8:	4601      	moveq	r1, r0
 80004aa:	2000      	moveq	r0, #0
 80004ac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80004b0:	bf08      	it	eq
 80004b2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80004b6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80004ba:	fabc f28c 	clz	r2, ip
 80004be:	3a08      	subs	r2, #8
 80004c0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004c4:	db10      	blt.n	80004e8 <__aeabi_l2f+0x5c>
 80004c6:	fa01 fc02 	lsl.w	ip, r1, r2
 80004ca:	4463      	add	r3, ip
 80004cc:	fa00 fc02 	lsl.w	ip, r0, r2
 80004d0:	f1c2 0220 	rsb	r2, r2, #32
 80004d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d8:	fa20 f202 	lsr.w	r2, r0, r2
 80004dc:	eb43 0002 	adc.w	r0, r3, r2
 80004e0:	bf08      	it	eq
 80004e2:	f020 0001 	biceq.w	r0, r0, #1
 80004e6:	4770      	bx	lr
 80004e8:	f102 0220 	add.w	r2, r2, #32
 80004ec:	fa01 fc02 	lsl.w	ip, r1, r2
 80004f0:	f1c2 0220 	rsb	r2, r2, #32
 80004f4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004f8:	fa21 f202 	lsr.w	r2, r1, r2
 80004fc:	eb43 0002 	adc.w	r0, r3, r2
 8000500:	bf08      	it	eq
 8000502:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000506:	4770      	bx	lr

08000508 <__aeabi_fmul>:
 8000508:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000510:	bf1e      	ittt	ne
 8000512:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000516:	ea92 0f0c 	teqne	r2, ip
 800051a:	ea93 0f0c 	teqne	r3, ip
 800051e:	d06f      	beq.n	8000600 <__aeabi_fmul+0xf8>
 8000520:	441a      	add	r2, r3
 8000522:	ea80 0c01 	eor.w	ip, r0, r1
 8000526:	0240      	lsls	r0, r0, #9
 8000528:	bf18      	it	ne
 800052a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800052e:	d01e      	beq.n	800056e <__aeabi_fmul+0x66>
 8000530:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000534:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000538:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800053c:	fba0 3101 	umull	r3, r1, r0, r1
 8000540:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000544:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000548:	bf3e      	ittt	cc
 800054a:	0049      	lslcc	r1, r1, #1
 800054c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000550:	005b      	lslcc	r3, r3, #1
 8000552:	ea40 0001 	orr.w	r0, r0, r1
 8000556:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800055a:	2afd      	cmp	r2, #253	; 0xfd
 800055c:	d81d      	bhi.n	800059a <__aeabi_fmul+0x92>
 800055e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000562:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000566:	bf08      	it	eq
 8000568:	f020 0001 	biceq.w	r0, r0, #1
 800056c:	4770      	bx	lr
 800056e:	f090 0f00 	teq	r0, #0
 8000572:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000576:	bf08      	it	eq
 8000578:	0249      	lsleq	r1, r1, #9
 800057a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800057e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000582:	3a7f      	subs	r2, #127	; 0x7f
 8000584:	bfc2      	ittt	gt
 8000586:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800058a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058e:	4770      	bxgt	lr
 8000590:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000594:	f04f 0300 	mov.w	r3, #0
 8000598:	3a01      	subs	r2, #1
 800059a:	dc5d      	bgt.n	8000658 <__aeabi_fmul+0x150>
 800059c:	f112 0f19 	cmn.w	r2, #25
 80005a0:	bfdc      	itt	le
 80005a2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80005a6:	4770      	bxle	lr
 80005a8:	f1c2 0200 	rsb	r2, r2, #0
 80005ac:	0041      	lsls	r1, r0, #1
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	f1c2 0220 	rsb	r2, r2, #32
 80005b6:	fa00 fc02 	lsl.w	ip, r0, r2
 80005ba:	ea5f 0031 	movs.w	r0, r1, rrx
 80005be:	f140 0000 	adc.w	r0, r0, #0
 80005c2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80005c6:	bf08      	it	eq
 80005c8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005cc:	4770      	bx	lr
 80005ce:	f092 0f00 	teq	r2, #0
 80005d2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005d6:	bf02      	ittt	eq
 80005d8:	0040      	lsleq	r0, r0, #1
 80005da:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005de:	3a01      	subeq	r2, #1
 80005e0:	d0f9      	beq.n	80005d6 <__aeabi_fmul+0xce>
 80005e2:	ea40 000c 	orr.w	r0, r0, ip
 80005e6:	f093 0f00 	teq	r3, #0
 80005ea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ee:	bf02      	ittt	eq
 80005f0:	0049      	lsleq	r1, r1, #1
 80005f2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005f6:	3b01      	subeq	r3, #1
 80005f8:	d0f9      	beq.n	80005ee <__aeabi_fmul+0xe6>
 80005fa:	ea41 010c 	orr.w	r1, r1, ip
 80005fe:	e78f      	b.n	8000520 <__aeabi_fmul+0x18>
 8000600:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000604:	ea92 0f0c 	teq	r2, ip
 8000608:	bf18      	it	ne
 800060a:	ea93 0f0c 	teqne	r3, ip
 800060e:	d00a      	beq.n	8000626 <__aeabi_fmul+0x11e>
 8000610:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000614:	bf18      	it	ne
 8000616:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800061a:	d1d8      	bne.n	80005ce <__aeabi_fmul+0xc6>
 800061c:	ea80 0001 	eor.w	r0, r0, r1
 8000620:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000624:	4770      	bx	lr
 8000626:	f090 0f00 	teq	r0, #0
 800062a:	bf17      	itett	ne
 800062c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000630:	4608      	moveq	r0, r1
 8000632:	f091 0f00 	teqne	r1, #0
 8000636:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800063a:	d014      	beq.n	8000666 <__aeabi_fmul+0x15e>
 800063c:	ea92 0f0c 	teq	r2, ip
 8000640:	d101      	bne.n	8000646 <__aeabi_fmul+0x13e>
 8000642:	0242      	lsls	r2, r0, #9
 8000644:	d10f      	bne.n	8000666 <__aeabi_fmul+0x15e>
 8000646:	ea93 0f0c 	teq	r3, ip
 800064a:	d103      	bne.n	8000654 <__aeabi_fmul+0x14c>
 800064c:	024b      	lsls	r3, r1, #9
 800064e:	bf18      	it	ne
 8000650:	4608      	movne	r0, r1
 8000652:	d108      	bne.n	8000666 <__aeabi_fmul+0x15e>
 8000654:	ea80 0001 	eor.w	r0, r0, r1
 8000658:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800065c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000660:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000664:	4770      	bx	lr
 8000666:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800066a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800066e:	4770      	bx	lr

08000670 <__aeabi_fdiv>:
 8000670:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000674:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000678:	bf1e      	ittt	ne
 800067a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800067e:	ea92 0f0c 	teqne	r2, ip
 8000682:	ea93 0f0c 	teqne	r3, ip
 8000686:	d069      	beq.n	800075c <__aeabi_fdiv+0xec>
 8000688:	eba2 0203 	sub.w	r2, r2, r3
 800068c:	ea80 0c01 	eor.w	ip, r0, r1
 8000690:	0249      	lsls	r1, r1, #9
 8000692:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000696:	d037      	beq.n	8000708 <__aeabi_fdiv+0x98>
 8000698:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800069c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80006a0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80006a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80006a8:	428b      	cmp	r3, r1
 80006aa:	bf38      	it	cc
 80006ac:	005b      	lslcc	r3, r3, #1
 80006ae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80006b2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80006b6:	428b      	cmp	r3, r1
 80006b8:	bf24      	itt	cs
 80006ba:	1a5b      	subcs	r3, r3, r1
 80006bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80006c0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80006c4:	bf24      	itt	cs
 80006c6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80006ca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80006ce:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80006d2:	bf24      	itt	cs
 80006d4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80006d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80006dc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80006e0:	bf24      	itt	cs
 80006e2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80006e6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80006ea:	011b      	lsls	r3, r3, #4
 80006ec:	bf18      	it	ne
 80006ee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80006f2:	d1e0      	bne.n	80006b6 <__aeabi_fdiv+0x46>
 80006f4:	2afd      	cmp	r2, #253	; 0xfd
 80006f6:	f63f af50 	bhi.w	800059a <__aeabi_fmul+0x92>
 80006fa:	428b      	cmp	r3, r1
 80006fc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000700:	bf08      	it	eq
 8000702:	f020 0001 	biceq.w	r0, r0, #1
 8000706:	4770      	bx	lr
 8000708:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800070c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000710:	327f      	adds	r2, #127	; 0x7f
 8000712:	bfc2      	ittt	gt
 8000714:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000718:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800071c:	4770      	bxgt	lr
 800071e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000722:	f04f 0300 	mov.w	r3, #0
 8000726:	3a01      	subs	r2, #1
 8000728:	e737      	b.n	800059a <__aeabi_fmul+0x92>
 800072a:	f092 0f00 	teq	r2, #0
 800072e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000732:	bf02      	ittt	eq
 8000734:	0040      	lsleq	r0, r0, #1
 8000736:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800073a:	3a01      	subeq	r2, #1
 800073c:	d0f9      	beq.n	8000732 <__aeabi_fdiv+0xc2>
 800073e:	ea40 000c 	orr.w	r0, r0, ip
 8000742:	f093 0f00 	teq	r3, #0
 8000746:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800074a:	bf02      	ittt	eq
 800074c:	0049      	lsleq	r1, r1, #1
 800074e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000752:	3b01      	subeq	r3, #1
 8000754:	d0f9      	beq.n	800074a <__aeabi_fdiv+0xda>
 8000756:	ea41 010c 	orr.w	r1, r1, ip
 800075a:	e795      	b.n	8000688 <__aeabi_fdiv+0x18>
 800075c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000760:	ea92 0f0c 	teq	r2, ip
 8000764:	d108      	bne.n	8000778 <__aeabi_fdiv+0x108>
 8000766:	0242      	lsls	r2, r0, #9
 8000768:	f47f af7d 	bne.w	8000666 <__aeabi_fmul+0x15e>
 800076c:	ea93 0f0c 	teq	r3, ip
 8000770:	f47f af70 	bne.w	8000654 <__aeabi_fmul+0x14c>
 8000774:	4608      	mov	r0, r1
 8000776:	e776      	b.n	8000666 <__aeabi_fmul+0x15e>
 8000778:	ea93 0f0c 	teq	r3, ip
 800077c:	d104      	bne.n	8000788 <__aeabi_fdiv+0x118>
 800077e:	024b      	lsls	r3, r1, #9
 8000780:	f43f af4c 	beq.w	800061c <__aeabi_fmul+0x114>
 8000784:	4608      	mov	r0, r1
 8000786:	e76e      	b.n	8000666 <__aeabi_fmul+0x15e>
 8000788:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800078c:	bf18      	it	ne
 800078e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000792:	d1ca      	bne.n	800072a <__aeabi_fdiv+0xba>
 8000794:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000798:	f47f af5c 	bne.w	8000654 <__aeabi_fmul+0x14c>
 800079c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80007a0:	f47f af3c 	bne.w	800061c <__aeabi_fmul+0x114>
 80007a4:	e75f      	b.n	8000666 <__aeabi_fmul+0x15e>
 80007a6:	bf00      	nop

080007a8 <__gesf2>:
 80007a8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80007ac:	e006      	b.n	80007bc <__cmpsf2+0x4>
 80007ae:	bf00      	nop

080007b0 <__lesf2>:
 80007b0:	f04f 0c01 	mov.w	ip, #1
 80007b4:	e002      	b.n	80007bc <__cmpsf2+0x4>
 80007b6:	bf00      	nop

080007b8 <__cmpsf2>:
 80007b8:	f04f 0c01 	mov.w	ip, #1
 80007bc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80007c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80007c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80007cc:	bf18      	it	ne
 80007ce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007d2:	d011      	beq.n	80007f8 <__cmpsf2+0x40>
 80007d4:	b001      	add	sp, #4
 80007d6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80007da:	bf18      	it	ne
 80007dc:	ea90 0f01 	teqne	r0, r1
 80007e0:	bf58      	it	pl
 80007e2:	ebb2 0003 	subspl.w	r0, r2, r3
 80007e6:	bf88      	it	hi
 80007e8:	17c8      	asrhi	r0, r1, #31
 80007ea:	bf38      	it	cc
 80007ec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80007f0:	bf18      	it	ne
 80007f2:	f040 0001 	orrne.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80007fc:	d102      	bne.n	8000804 <__cmpsf2+0x4c>
 80007fe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000802:	d105      	bne.n	8000810 <__cmpsf2+0x58>
 8000804:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000808:	d1e4      	bne.n	80007d4 <__cmpsf2+0x1c>
 800080a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800080e:	d0e1      	beq.n	80007d4 <__cmpsf2+0x1c>
 8000810:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop

08000818 <__aeabi_cfrcmple>:
 8000818:	4684      	mov	ip, r0
 800081a:	4608      	mov	r0, r1
 800081c:	4661      	mov	r1, ip
 800081e:	e7ff      	b.n	8000820 <__aeabi_cfcmpeq>

08000820 <__aeabi_cfcmpeq>:
 8000820:	b50f      	push	{r0, r1, r2, r3, lr}
 8000822:	f7ff ffc9 	bl	80007b8 <__cmpsf2>
 8000826:	2800      	cmp	r0, #0
 8000828:	bf48      	it	mi
 800082a:	f110 0f00 	cmnmi.w	r0, #0
 800082e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000830 <__aeabi_fcmpeq>:
 8000830:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000834:	f7ff fff4 	bl	8000820 <__aeabi_cfcmpeq>
 8000838:	bf0c      	ite	eq
 800083a:	2001      	moveq	r0, #1
 800083c:	2000      	movne	r0, #0
 800083e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000842:	bf00      	nop

08000844 <__aeabi_fcmplt>:
 8000844:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000848:	f7ff ffea 	bl	8000820 <__aeabi_cfcmpeq>
 800084c:	bf34      	ite	cc
 800084e:	2001      	movcc	r0, #1
 8000850:	2000      	movcs	r0, #0
 8000852:	f85d fb08 	ldr.w	pc, [sp], #8
 8000856:	bf00      	nop

08000858 <__aeabi_fcmple>:
 8000858:	f84d ed08 	str.w	lr, [sp, #-8]!
 800085c:	f7ff ffe0 	bl	8000820 <__aeabi_cfcmpeq>
 8000860:	bf94      	ite	ls
 8000862:	2001      	movls	r0, #1
 8000864:	2000      	movhi	r0, #0
 8000866:	f85d fb08 	ldr.w	pc, [sp], #8
 800086a:	bf00      	nop

0800086c <__aeabi_fcmpge>:
 800086c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000870:	f7ff ffd2 	bl	8000818 <__aeabi_cfrcmple>
 8000874:	bf94      	ite	ls
 8000876:	2001      	movls	r0, #1
 8000878:	2000      	movhi	r0, #0
 800087a:	f85d fb08 	ldr.w	pc, [sp], #8
 800087e:	bf00      	nop

08000880 <__aeabi_fcmpgt>:
 8000880:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000884:	f7ff ffc8 	bl	8000818 <__aeabi_cfrcmple>
 8000888:	bf34      	ite	cc
 800088a:	2001      	movcc	r0, #1
 800088c:	2000      	movcs	r0, #0
 800088e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000892:	bf00      	nop

08000894 <__aeabi_f2iz>:
 8000894:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000898:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800089c:	d30f      	bcc.n	80008be <__aeabi_f2iz+0x2a>
 800089e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80008a2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80008a6:	d90d      	bls.n	80008c4 <__aeabi_f2iz+0x30>
 80008a8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80008ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008b0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80008b4:	fa23 f002 	lsr.w	r0, r3, r2
 80008b8:	bf18      	it	ne
 80008ba:	4240      	negne	r0, r0
 80008bc:	4770      	bx	lr
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	4770      	bx	lr
 80008c4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80008c8:	d101      	bne.n	80008ce <__aeabi_f2iz+0x3a>
 80008ca:	0242      	lsls	r2, r0, #9
 80008cc:	d105      	bne.n	80008da <__aeabi_f2iz+0x46>
 80008ce:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80008d2:	bf08      	it	eq
 80008d4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008d8:	4770      	bx	lr
 80008da:	f04f 0000 	mov.w	r0, #0
 80008de:	4770      	bx	lr

080008e0 <__aeabi_f2uiz>:
 80008e0:	0042      	lsls	r2, r0, #1
 80008e2:	d20e      	bcs.n	8000902 <__aeabi_f2uiz+0x22>
 80008e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80008e8:	d30b      	bcc.n	8000902 <__aeabi_f2uiz+0x22>
 80008ea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80008ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80008f2:	d409      	bmi.n	8000908 <__aeabi_f2uiz+0x28>
 80008f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80008f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008fc:	fa23 f002 	lsr.w	r0, r3, r2
 8000900:	4770      	bx	lr
 8000902:	f04f 0000 	mov.w	r0, #0
 8000906:	4770      	bx	lr
 8000908:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800090c:	d101      	bne.n	8000912 <__aeabi_f2uiz+0x32>
 800090e:	0242      	lsls	r2, r0, #9
 8000910:	d102      	bne.n	8000918 <__aeabi_f2uiz+0x38>
 8000912:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000916:	4770      	bx	lr
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop

08000920 <selfrel_offset31>:
 8000920:	6803      	ldr	r3, [r0, #0]
 8000922:	005a      	lsls	r2, r3, #1
 8000924:	bf4c      	ite	mi
 8000926:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800092a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800092e:	4418      	add	r0, r3
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop

08000934 <search_EIT_table>:
 8000934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000938:	b329      	cbz	r1, 8000986 <search_EIT_table+0x52>
 800093a:	1e4f      	subs	r7, r1, #1
 800093c:	4604      	mov	r4, r0
 800093e:	4615      	mov	r5, r2
 8000940:	463e      	mov	r6, r7
 8000942:	f04f 0800 	mov.w	r8, #0
 8000946:	eb08 0106 	add.w	r1, r8, r6
 800094a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800094e:	1049      	asrs	r1, r1, #1
 8000950:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000954:	4648      	mov	r0, r9
 8000956:	f7ff ffe3 	bl	8000920 <selfrel_offset31>
 800095a:	4603      	mov	r3, r0
 800095c:	00c8      	lsls	r0, r1, #3
 800095e:	3008      	adds	r0, #8
 8000960:	428f      	cmp	r7, r1
 8000962:	4420      	add	r0, r4
 8000964:	d009      	beq.n	800097a <search_EIT_table+0x46>
 8000966:	42ab      	cmp	r3, r5
 8000968:	d809      	bhi.n	800097e <search_EIT_table+0x4a>
 800096a:	f7ff ffd9 	bl	8000920 <selfrel_offset31>
 800096e:	3801      	subs	r0, #1
 8000970:	42a8      	cmp	r0, r5
 8000972:	d20a      	bcs.n	800098a <search_EIT_table+0x56>
 8000974:	f101 0801 	add.w	r8, r1, #1
 8000978:	e7e5      	b.n	8000946 <search_EIT_table+0x12>
 800097a:	42ab      	cmp	r3, r5
 800097c:	d905      	bls.n	800098a <search_EIT_table+0x56>
 800097e:	4588      	cmp	r8, r1
 8000980:	d001      	beq.n	8000986 <search_EIT_table+0x52>
 8000982:	1e4e      	subs	r6, r1, #1
 8000984:	e7df      	b.n	8000946 <search_EIT_table+0x12>
 8000986:	f04f 0900 	mov.w	r9, #0
 800098a:	4648      	mov	r0, r9
 800098c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000990 <__gnu_unwind_get_pr_addr>:
 8000990:	2801      	cmp	r0, #1
 8000992:	d007      	beq.n	80009a4 <__gnu_unwind_get_pr_addr+0x14>
 8000994:	2802      	cmp	r0, #2
 8000996:	d007      	beq.n	80009a8 <__gnu_unwind_get_pr_addr+0x18>
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <__gnu_unwind_get_pr_addr+0x1c>)
 800099a:	2800      	cmp	r0, #0
 800099c:	bf0c      	ite	eq
 800099e:	4618      	moveq	r0, r3
 80009a0:	2000      	movne	r0, #0
 80009a2:	4770      	bx	lr
 80009a4:	4802      	ldr	r0, [pc, #8]	; (80009b0 <__gnu_unwind_get_pr_addr+0x20>)
 80009a6:	4770      	bx	lr
 80009a8:	4802      	ldr	r0, [pc, #8]	; (80009b4 <__gnu_unwind_get_pr_addr+0x24>)
 80009aa:	4770      	bx	lr
 80009ac:	08001055 	.word	0x08001055
 80009b0:	08001059 	.word	0x08001059
 80009b4:	0800105d 	.word	0x0800105d

080009b8 <get_eit_entry>:
 80009b8:	b530      	push	{r4, r5, lr}
 80009ba:	4b23      	ldr	r3, [pc, #140]	; (8000a48 <get_eit_entry+0x90>)
 80009bc:	b083      	sub	sp, #12
 80009be:	4604      	mov	r4, r0
 80009c0:	1e8d      	subs	r5, r1, #2
 80009c2:	b33b      	cbz	r3, 8000a14 <get_eit_entry+0x5c>
 80009c4:	a901      	add	r1, sp, #4
 80009c6:	4628      	mov	r0, r5
 80009c8:	f3af 8000 	nop.w
 80009cc:	b1e8      	cbz	r0, 8000a0a <get_eit_entry+0x52>
 80009ce:	9901      	ldr	r1, [sp, #4]
 80009d0:	462a      	mov	r2, r5
 80009d2:	f7ff ffaf 	bl	8000934 <search_EIT_table>
 80009d6:	4601      	mov	r1, r0
 80009d8:	b1b8      	cbz	r0, 8000a0a <get_eit_entry+0x52>
 80009da:	f7ff ffa1 	bl	8000920 <selfrel_offset31>
 80009de:	684b      	ldr	r3, [r1, #4]
 80009e0:	64a0      	str	r0, [r4, #72]	; 0x48
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d02b      	beq.n	8000a3e <get_eit_entry+0x86>
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f101 0004 	add.w	r0, r1, #4
 80009ec:	db23      	blt.n	8000a36 <get_eit_entry+0x7e>
 80009ee:	f7ff ff97 	bl	8000920 <selfrel_offset31>
 80009f2:	2300      	movs	r3, #0
 80009f4:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 80009f8:	6803      	ldr	r3, [r0, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	db10      	blt.n	8000a20 <get_eit_entry+0x68>
 80009fe:	f7ff ff8f 	bl	8000920 <selfrel_offset31>
 8000a02:	6120      	str	r0, [r4, #16]
 8000a04:	2000      	movs	r0, #0
 8000a06:	b003      	add	sp, #12
 8000a08:	bd30      	pop	{r4, r5, pc}
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	2009      	movs	r0, #9
 8000a0e:	6123      	str	r3, [r4, #16]
 8000a10:	b003      	add	sp, #12
 8000a12:	bd30      	pop	{r4, r5, pc}
 8000a14:	490d      	ldr	r1, [pc, #52]	; (8000a4c <get_eit_entry+0x94>)
 8000a16:	480e      	ldr	r0, [pc, #56]	; (8000a50 <get_eit_entry+0x98>)
 8000a18:	1a09      	subs	r1, r1, r0
 8000a1a:	10c9      	asrs	r1, r1, #3
 8000a1c:	9101      	str	r1, [sp, #4]
 8000a1e:	e7d7      	b.n	80009d0 <get_eit_entry+0x18>
 8000a20:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000a24:	f7ff ffb4 	bl	8000990 <__gnu_unwind_get_pr_addr>
 8000a28:	2800      	cmp	r0, #0
 8000a2a:	6120      	str	r0, [r4, #16]
 8000a2c:	bf14      	ite	ne
 8000a2e:	2000      	movne	r0, #0
 8000a30:	2009      	moveq	r0, #9
 8000a32:	b003      	add	sp, #12
 8000a34:	bd30      	pop	{r4, r5, pc}
 8000a36:	2301      	movs	r3, #1
 8000a38:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000a3c:	e7dc      	b.n	80009f8 <get_eit_entry+0x40>
 8000a3e:	2300      	movs	r3, #0
 8000a40:	6123      	str	r3, [r4, #16]
 8000a42:	2005      	movs	r0, #5
 8000a44:	e7df      	b.n	8000a06 <get_eit_entry+0x4e>
 8000a46:	bf00      	nop
 8000a48:	00000000 	.word	0x00000000
 8000a4c:	080063a0 	.word	0x080063a0
 8000a50:	080062b0 	.word	0x080062b0

08000a54 <restore_non_core_regs>:
 8000a54:	6803      	ldr	r3, [r0, #0]
 8000a56:	07da      	lsls	r2, r3, #31
 8000a58:	b510      	push	{r4, lr}
 8000a5a:	4604      	mov	r4, r0
 8000a5c:	d406      	bmi.n	8000a6c <restore_non_core_regs+0x18>
 8000a5e:	079b      	lsls	r3, r3, #30
 8000a60:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000a64:	d509      	bpl.n	8000a7a <restore_non_core_regs+0x26>
 8000a66:	f000 fc4b 	bl	8001300 <__gnu_Unwind_Restore_VFP_D>
 8000a6a:	6823      	ldr	r3, [r4, #0]
 8000a6c:	0759      	lsls	r1, r3, #29
 8000a6e:	d509      	bpl.n	8000a84 <restore_non_core_regs+0x30>
 8000a70:	071a      	lsls	r2, r3, #28
 8000a72:	d50e      	bpl.n	8000a92 <restore_non_core_regs+0x3e>
 8000a74:	06db      	lsls	r3, r3, #27
 8000a76:	d513      	bpl.n	8000aa0 <restore_non_core_regs+0x4c>
 8000a78:	bd10      	pop	{r4, pc}
 8000a7a:	f000 fc39 	bl	80012f0 <__gnu_Unwind_Restore_VFP>
 8000a7e:	6823      	ldr	r3, [r4, #0]
 8000a80:	0759      	lsls	r1, r3, #29
 8000a82:	d4f5      	bmi.n	8000a70 <restore_non_core_regs+0x1c>
 8000a84:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000a88:	f000 fc42 	bl	8001310 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000a8c:	6823      	ldr	r3, [r4, #0]
 8000a8e:	071a      	lsls	r2, r3, #28
 8000a90:	d4f0      	bmi.n	8000a74 <restore_non_core_regs+0x20>
 8000a92:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000a96:	f000 fc43 	bl	8001320 <__gnu_Unwind_Restore_WMMXD>
 8000a9a:	6823      	ldr	r3, [r4, #0]
 8000a9c:	06db      	lsls	r3, r3, #27
 8000a9e:	d4eb      	bmi.n	8000a78 <restore_non_core_regs+0x24>
 8000aa0:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000aa8:	f000 bc7e 	b.w	80013a8 <__gnu_Unwind_Restore_WMMXC>

08000aac <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000aac:	4603      	mov	r3, r0
 8000aae:	6800      	ldr	r0, [r0, #0]
 8000ab0:	b100      	cbz	r0, 8000ab4 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 8000ab2:	4418      	add	r0, r3
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__gnu_unwind_24bit.isra.0>:
 8000ab8:	2009      	movs	r0, #9
 8000aba:	4770      	bx	lr

08000abc <_Unwind_DebugHook>:
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <unwind_phase2>:
 8000ac0:	b570      	push	{r4, r5, r6, lr}
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	460e      	mov	r6, r1
 8000ac6:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000ac8:	4620      	mov	r0, r4
 8000aca:	f7ff ff75 	bl	80009b8 <get_eit_entry>
 8000ace:	4605      	mov	r5, r0
 8000ad0:	b988      	cbnz	r0, 8000af6 <unwind_phase2+0x36>
 8000ad2:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8000ad4:	6163      	str	r3, [r4, #20]
 8000ad6:	4632      	mov	r2, r6
 8000ad8:	6923      	ldr	r3, [r4, #16]
 8000ada:	4621      	mov	r1, r4
 8000adc:	2001      	movs	r0, #1
 8000ade:	4798      	blx	r3
 8000ae0:	2808      	cmp	r0, #8
 8000ae2:	d0f0      	beq.n	8000ac6 <unwind_phase2+0x6>
 8000ae4:	2807      	cmp	r0, #7
 8000ae6:	d106      	bne.n	8000af6 <unwind_phase2+0x36>
 8000ae8:	4628      	mov	r0, r5
 8000aea:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000aec:	f7ff ffe6 	bl	8000abc <_Unwind_DebugHook>
 8000af0:	1d30      	adds	r0, r6, #4
 8000af2:	f000 fbf1 	bl	80012d8 <__restore_core_regs>
 8000af6:	f000 fe65 	bl	80017c4 <abort>
 8000afa:	bf00      	nop

08000afc <unwind_phase2_forced>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	1d0d      	adds	r5, r1, #4
 8000b02:	4606      	mov	r6, r0
 8000b04:	4614      	mov	r4, r2
 8000b06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b08:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000b0c:	f10d 0c0c 	add.w	ip, sp, #12
 8000b10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000b14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b16:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000b1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000b20:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b24:	ad02      	add	r5, sp, #8
 8000b26:	68f7      	ldr	r7, [r6, #12]
 8000b28:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8000b2c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8000b30:	2300      	movs	r3, #0
 8000b32:	602b      	str	r3, [r5, #0]
 8000b34:	e021      	b.n	8000b7a <unwind_phase2_forced+0x7e>
 8000b36:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000b38:	6173      	str	r3, [r6, #20]
 8000b3a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000b3e:	4629      	mov	r1, r5
 8000b40:	a87a      	add	r0, sp, #488	; 0x1e8
 8000b42:	f000 fe47 	bl	80017d4 <memcpy>
 8000b46:	6933      	ldr	r3, [r6, #16]
 8000b48:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000b4a:	4631      	mov	r1, r6
 8000b4c:	4650      	mov	r0, sl
 8000b4e:	4798      	blx	r3
 8000b50:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000b52:	e9cd 5800 	strd	r5, r8, [sp]
 8000b56:	4621      	mov	r1, r4
 8000b58:	646b      	str	r3, [r5, #68]	; 0x44
 8000b5a:	4681      	mov	r9, r0
 8000b5c:	4633      	mov	r3, r6
 8000b5e:	4632      	mov	r2, r6
 8000b60:	2001      	movs	r0, #1
 8000b62:	47b8      	blx	r7
 8000b64:	4604      	mov	r4, r0
 8000b66:	b9e8      	cbnz	r0, 8000ba4 <unwind_phase2_forced+0xa8>
 8000b68:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000b6c:	a97a      	add	r1, sp, #488	; 0x1e8
 8000b6e:	4628      	mov	r0, r5
 8000b70:	f000 fe30 	bl	80017d4 <memcpy>
 8000b74:	f1b9 0f08 	cmp.w	r9, #8
 8000b78:	d11b      	bne.n	8000bb2 <unwind_phase2_forced+0xb6>
 8000b7a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000b7c:	4630      	mov	r0, r6
 8000b7e:	f7ff ff1b 	bl	80009b8 <get_eit_entry>
 8000b82:	3409      	adds	r4, #9
 8000b84:	fa5f fa84 	uxtb.w	sl, r4
 8000b88:	4681      	mov	r9, r0
 8000b8a:	2800      	cmp	r0, #0
 8000b8c:	d0d3      	beq.n	8000b36 <unwind_phase2_forced+0x3a>
 8000b8e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000b90:	f04a 0110 	orr.w	r1, sl, #16
 8000b94:	e9cd 5800 	strd	r5, r8, [sp]
 8000b98:	4632      	mov	r2, r6
 8000b9a:	646b      	str	r3, [r5, #68]	; 0x44
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	4633      	mov	r3, r6
 8000ba0:	47b8      	blx	r7
 8000ba2:	b108      	cbz	r0, 8000ba8 <unwind_phase2_forced+0xac>
 8000ba4:	f04f 0909 	mov.w	r9, #9
 8000ba8:	4648      	mov	r0, r9
 8000baa:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb2:	f1b9 0f07 	cmp.w	r9, #7
 8000bb6:	d1f5      	bne.n	8000ba4 <unwind_phase2_forced+0xa8>
 8000bb8:	4620      	mov	r0, r4
 8000bba:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000bbc:	f7ff ff7e 	bl	8000abc <_Unwind_DebugHook>
 8000bc0:	a803      	add	r0, sp, #12
 8000bc2:	f000 fb89 	bl	80012d8 <__restore_core_regs>
 8000bc6:	bf00      	nop

08000bc8 <_Unwind_GetCFA>:
 8000bc8:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000bca:	4770      	bx	lr

08000bcc <__gnu_Unwind_RaiseException>:
 8000bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bce:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000bd0:	640b      	str	r3, [r1, #64]	; 0x40
 8000bd2:	1d0e      	adds	r6, r1, #4
 8000bd4:	460f      	mov	r7, r1
 8000bd6:	4605      	mov	r5, r0
 8000bd8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000bda:	b0f9      	sub	sp, #484	; 0x1e4
 8000bdc:	ac01      	add	r4, sp, #4
 8000bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000be6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000bec:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000bf0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000bf4:	9600      	str	r6, [sp, #0]
 8000bf6:	e006      	b.n	8000c06 <__gnu_Unwind_RaiseException+0x3a>
 8000bf8:	692b      	ldr	r3, [r5, #16]
 8000bfa:	466a      	mov	r2, sp
 8000bfc:	4629      	mov	r1, r5
 8000bfe:	4798      	blx	r3
 8000c00:	2808      	cmp	r0, #8
 8000c02:	4604      	mov	r4, r0
 8000c04:	d108      	bne.n	8000c18 <__gnu_Unwind_RaiseException+0x4c>
 8000c06:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000c08:	4628      	mov	r0, r5
 8000c0a:	f7ff fed5 	bl	80009b8 <get_eit_entry>
 8000c0e:	2800      	cmp	r0, #0
 8000c10:	d0f2      	beq.n	8000bf8 <__gnu_Unwind_RaiseException+0x2c>
 8000c12:	2009      	movs	r0, #9
 8000c14:	b079      	add	sp, #484	; 0x1e4
 8000c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c18:	4668      	mov	r0, sp
 8000c1a:	f7ff ff1b 	bl	8000a54 <restore_non_core_regs>
 8000c1e:	2c06      	cmp	r4, #6
 8000c20:	d1f7      	bne.n	8000c12 <__gnu_Unwind_RaiseException+0x46>
 8000c22:	4639      	mov	r1, r7
 8000c24:	4628      	mov	r0, r5
 8000c26:	f7ff ff4b 	bl	8000ac0 <unwind_phase2>
 8000c2a:	bf00      	nop

08000c2c <__gnu_Unwind_ForcedUnwind>:
 8000c2c:	b430      	push	{r4, r5}
 8000c2e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000c30:	60c1      	str	r1, [r0, #12]
 8000c32:	6182      	str	r2, [r0, #24]
 8000c34:	4619      	mov	r1, r3
 8000c36:	641d      	str	r5, [r3, #64]	; 0x40
 8000c38:	2200      	movs	r2, #0
 8000c3a:	bc30      	pop	{r4, r5}
 8000c3c:	e75e      	b.n	8000afc <unwind_phase2_forced>
 8000c3e:	bf00      	nop

08000c40 <__gnu_Unwind_Resume>:
 8000c40:	b570      	push	{r4, r5, r6, lr}
 8000c42:	68c6      	ldr	r6, [r0, #12]
 8000c44:	6943      	ldr	r3, [r0, #20]
 8000c46:	640b      	str	r3, [r1, #64]	; 0x40
 8000c48:	b9ae      	cbnz	r6, 8000c76 <__gnu_Unwind_Resume+0x36>
 8000c4a:	6903      	ldr	r3, [r0, #16]
 8000c4c:	460a      	mov	r2, r1
 8000c4e:	4604      	mov	r4, r0
 8000c50:	460d      	mov	r5, r1
 8000c52:	4601      	mov	r1, r0
 8000c54:	2002      	movs	r0, #2
 8000c56:	4798      	blx	r3
 8000c58:	2807      	cmp	r0, #7
 8000c5a:	d005      	beq.n	8000c68 <__gnu_Unwind_Resume+0x28>
 8000c5c:	2808      	cmp	r0, #8
 8000c5e:	d10f      	bne.n	8000c80 <__gnu_Unwind_Resume+0x40>
 8000c60:	4629      	mov	r1, r5
 8000c62:	4620      	mov	r0, r4
 8000c64:	f7ff ff2c 	bl	8000ac0 <unwind_phase2>
 8000c68:	4630      	mov	r0, r6
 8000c6a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000c6c:	f7ff ff26 	bl	8000abc <_Unwind_DebugHook>
 8000c70:	1d28      	adds	r0, r5, #4
 8000c72:	f000 fb31 	bl	80012d8 <__restore_core_regs>
 8000c76:	2201      	movs	r2, #1
 8000c78:	f7ff ff40 	bl	8000afc <unwind_phase2_forced>
 8000c7c:	f000 fda2 	bl	80017c4 <abort>
 8000c80:	f000 fda0 	bl	80017c4 <abort>

08000c84 <__gnu_Unwind_Resume_or_Rethrow>:
 8000c84:	68c2      	ldr	r2, [r0, #12]
 8000c86:	b11a      	cbz	r2, 8000c90 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000c88:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8000c8a:	640a      	str	r2, [r1, #64]	; 0x40
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	e735      	b.n	8000afc <unwind_phase2_forced>
 8000c90:	e79c      	b.n	8000bcc <__gnu_Unwind_RaiseException>
 8000c92:	bf00      	nop

08000c94 <_Unwind_Complete>:
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <_Unwind_DeleteException>:
 8000c98:	6883      	ldr	r3, [r0, #8]
 8000c9a:	4601      	mov	r1, r0
 8000c9c:	b10b      	cbz	r3, 8000ca2 <_Unwind_DeleteException+0xa>
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	4718      	bx	r3
 8000ca2:	4770      	bx	lr

08000ca4 <_Unwind_VRS_Get>:
 8000ca4:	2901      	cmp	r1, #1
 8000ca6:	d012      	beq.n	8000cce <_Unwind_VRS_Get+0x2a>
 8000ca8:	d809      	bhi.n	8000cbe <_Unwind_VRS_Get+0x1a>
 8000caa:	b973      	cbnz	r3, 8000cca <_Unwind_VRS_Get+0x26>
 8000cac:	2a0f      	cmp	r2, #15
 8000cae:	d80c      	bhi.n	8000cca <_Unwind_VRS_Get+0x26>
 8000cb0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	6853      	ldr	r3, [r2, #4]
 8000cb8:	9a00      	ldr	r2, [sp, #0]
 8000cba:	6013      	str	r3, [r2, #0]
 8000cbc:	4770      	bx	lr
 8000cbe:	3903      	subs	r1, #3
 8000cc0:	2901      	cmp	r1, #1
 8000cc2:	bf94      	ite	ls
 8000cc4:	2001      	movls	r0, #1
 8000cc6:	2002      	movhi	r0, #2
 8000cc8:	4770      	bx	lr
 8000cca:	2002      	movs	r0, #2
 8000ccc:	4770      	bx	lr
 8000cce:	4608      	mov	r0, r1
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop

08000cd4 <_Unwind_GetGR>:
 8000cd4:	b510      	push	{r4, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	2300      	movs	r3, #0
 8000cda:	ac03      	add	r4, sp, #12
 8000cdc:	460a      	mov	r2, r1
 8000cde:	9400      	str	r4, [sp, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f7ff ffdf 	bl	8000ca4 <_Unwind_VRS_Get>
 8000ce6:	9803      	ldr	r0, [sp, #12]
 8000ce8:	b004      	add	sp, #16
 8000cea:	bd10      	pop	{r4, pc}

08000cec <_Unwind_VRS_Set>:
 8000cec:	2901      	cmp	r1, #1
 8000cee:	d012      	beq.n	8000d16 <_Unwind_VRS_Set+0x2a>
 8000cf0:	d809      	bhi.n	8000d06 <_Unwind_VRS_Set+0x1a>
 8000cf2:	b973      	cbnz	r3, 8000d12 <_Unwind_VRS_Set+0x26>
 8000cf4:	2a0f      	cmp	r2, #15
 8000cf6:	d80c      	bhi.n	8000d12 <_Unwind_VRS_Set+0x26>
 8000cf8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8000cfc:	9a00      	ldr	r2, [sp, #0]
 8000cfe:	6812      	ldr	r2, [r2, #0]
 8000d00:	6042      	str	r2, [r0, #4]
 8000d02:	4618      	mov	r0, r3
 8000d04:	4770      	bx	lr
 8000d06:	3903      	subs	r1, #3
 8000d08:	2901      	cmp	r1, #1
 8000d0a:	bf94      	ite	ls
 8000d0c:	2001      	movls	r0, #1
 8000d0e:	2002      	movhi	r0, #2
 8000d10:	4770      	bx	lr
 8000d12:	2002      	movs	r0, #2
 8000d14:	4770      	bx	lr
 8000d16:	4608      	mov	r0, r1
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <_Unwind_SetGR>:
 8000d1c:	b510      	push	{r4, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	2300      	movs	r3, #0
 8000d22:	ac03      	add	r4, sp, #12
 8000d24:	9203      	str	r2, [sp, #12]
 8000d26:	9400      	str	r4, [sp, #0]
 8000d28:	460a      	mov	r2, r1
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	f7ff ffde 	bl	8000cec <_Unwind_VRS_Set>
 8000d30:	b004      	add	sp, #16
 8000d32:	bd10      	pop	{r4, pc}

08000d34 <__gnu_Unwind_Backtrace>:
 8000d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d36:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000d38:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3a:	1d15      	adds	r5, r2, #4
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	4606      	mov	r6, r0
 8000d40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d42:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000d46:	ac17      	add	r4, sp, #92	; 0x5c
 8000d48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d52:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d56:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000d5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000d5e:	4665      	mov	r5, ip
 8000d60:	9716      	str	r7, [sp, #88]	; 0x58
 8000d62:	e010      	b.n	8000d86 <__gnu_Unwind_Backtrace+0x52>
 8000d64:	f7ff ffda 	bl	8000d1c <_Unwind_SetGR>
 8000d68:	4629      	mov	r1, r5
 8000d6a:	a816      	add	r0, sp, #88	; 0x58
 8000d6c:	47b0      	blx	r6
 8000d6e:	4603      	mov	r3, r0
 8000d70:	aa16      	add	r2, sp, #88	; 0x58
 8000d72:	4669      	mov	r1, sp
 8000d74:	2008      	movs	r0, #8
 8000d76:	b983      	cbnz	r3, 8000d9a <__gnu_Unwind_Backtrace+0x66>
 8000d78:	9b04      	ldr	r3, [sp, #16]
 8000d7a:	4798      	blx	r3
 8000d7c:	2805      	cmp	r0, #5
 8000d7e:	4604      	mov	r4, r0
 8000d80:	d00c      	beq.n	8000d9c <__gnu_Unwind_Backtrace+0x68>
 8000d82:	2809      	cmp	r0, #9
 8000d84:	d009      	beq.n	8000d9a <__gnu_Unwind_Backtrace+0x66>
 8000d86:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000d88:	4668      	mov	r0, sp
 8000d8a:	f7ff fe15 	bl	80009b8 <get_eit_entry>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	466a      	mov	r2, sp
 8000d92:	210c      	movs	r1, #12
 8000d94:	a816      	add	r0, sp, #88	; 0x58
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d0e4      	beq.n	8000d64 <__gnu_Unwind_Backtrace+0x30>
 8000d9a:	2409      	movs	r4, #9
 8000d9c:	a816      	add	r0, sp, #88	; 0x58
 8000d9e:	f7ff fe59 	bl	8000a54 <restore_non_core_regs>
 8000da2:	4620      	mov	r0, r4
 8000da4:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000daa:	bf00      	nop

08000dac <__gnu_unwind_pr_common>:
 8000dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000db0:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000db2:	b089      	sub	sp, #36	; 0x24
 8000db4:	460d      	mov	r5, r1
 8000db6:	f854 1b04 	ldr.w	r1, [r4], #4
 8000dba:	9406      	str	r4, [sp, #24]
 8000dbc:	4617      	mov	r7, r2
 8000dbe:	f000 0803 	and.w	r8, r0, #3
 8000dc2:	461e      	mov	r6, r3
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d079      	beq.n	8000ebc <__gnu_unwind_pr_common+0x110>
 8000dc8:	0c0b      	lsrs	r3, r1, #16
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	0409      	lsls	r1, r1, #16
 8000dce:	f88d 301d 	strb.w	r3, [sp, #29]
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000dd8:	9105      	str	r1, [sp, #20]
 8000dda:	f88d 301c 	strb.w	r3, [sp, #28]
 8000dde:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000de0:	f1b8 0f02 	cmp.w	r8, #2
 8000de4:	bf08      	it	eq
 8000de6:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000de8:	f013 0301 	ands.w	r3, r3, #1
 8000dec:	d00c      	beq.n	8000e08 <__gnu_unwind_pr_common+0x5c>
 8000dee:	4638      	mov	r0, r7
 8000df0:	a905      	add	r1, sp, #20
 8000df2:	f000 fb73 	bl	80014dc <__gnu_unwind_execute>
 8000df6:	b918      	cbnz	r0, 8000e00 <__gnu_unwind_pr_common+0x54>
 8000df8:	2008      	movs	r0, #8
 8000dfa:	b009      	add	sp, #36	; 0x24
 8000dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e00:	2009      	movs	r0, #9
 8000e02:	b009      	add	sp, #36	; 0x24
 8000e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e08:	f8d4 a000 	ldr.w	sl, [r4]
 8000e0c:	f1ba 0f00 	cmp.w	sl, #0
 8000e10:	d0ed      	beq.n	8000dee <__gnu_unwind_pr_common+0x42>
 8000e12:	9301      	str	r3, [sp, #4]
 8000e14:	f000 0308 	and.w	r3, r0, #8
 8000e18:	9302      	str	r3, [sp, #8]
 8000e1a:	2e02      	cmp	r6, #2
 8000e1c:	d04a      	beq.n	8000eb4 <__gnu_unwind_pr_common+0x108>
 8000e1e:	f8b4 a000 	ldrh.w	sl, [r4]
 8000e22:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8000e26:	3404      	adds	r4, #4
 8000e28:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8000e2a:	f029 0b01 	bic.w	fp, r9, #1
 8000e2e:	210f      	movs	r1, #15
 8000e30:	4638      	mov	r0, r7
 8000e32:	4493      	add	fp, r2
 8000e34:	f7ff ff4e 	bl	8000cd4 <_Unwind_GetGR>
 8000e38:	4583      	cmp	fp, r0
 8000e3a:	d839      	bhi.n	8000eb0 <__gnu_unwind_pr_common+0x104>
 8000e3c:	f02a 0201 	bic.w	r2, sl, #1
 8000e40:	445a      	add	r2, fp
 8000e42:	4282      	cmp	r2, r0
 8000e44:	bf94      	ite	ls
 8000e46:	2000      	movls	r0, #0
 8000e48:	2001      	movhi	r0, #1
 8000e4a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	f00a 0a01 	and.w	sl, sl, #1
 8000e56:	ea43 030a 	orr.w	r3, r3, sl
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d049      	beq.n	8000ef2 <__gnu_unwind_pr_common+0x146>
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d032      	beq.n	8000ec8 <__gnu_unwind_pr_common+0x11c>
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d1cc      	bne.n	8000e00 <__gnu_unwind_pr_common+0x54>
 8000e66:	f1b8 0f00 	cmp.w	r8, #0
 8000e6a:	d002      	beq.n	8000e72 <__gnu_unwind_pr_common+0xc6>
 8000e6c:	2800      	cmp	r0, #0
 8000e6e:	f040 80cd 	bne.w	800100c <__gnu_unwind_pr_common+0x260>
 8000e72:	3404      	adds	r4, #4
 8000e74:	f8d4 a000 	ldr.w	sl, [r4]
 8000e78:	f1ba 0f00 	cmp.w	sl, #0
 8000e7c:	d1cd      	bne.n	8000e1a <__gnu_unwind_pr_common+0x6e>
 8000e7e:	a905      	add	r1, sp, #20
 8000e80:	4638      	mov	r0, r7
 8000e82:	f000 fb2b 	bl	80014dc <__gnu_unwind_execute>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d1ba      	bne.n	8000e00 <__gnu_unwind_pr_common+0x54>
 8000e8a:	9b01      	ldr	r3, [sp, #4]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d0b3      	beq.n	8000df8 <__gnu_unwind_pr_common+0x4c>
 8000e90:	210f      	movs	r1, #15
 8000e92:	4638      	mov	r0, r7
 8000e94:	f7ff ff1e 	bl	8000cd4 <_Unwind_GetGR>
 8000e98:	210e      	movs	r1, #14
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	f7ff ff3d 	bl	8000d1c <_Unwind_SetGR>
 8000ea2:	4638      	mov	r0, r7
 8000ea4:	4a6a      	ldr	r2, [pc, #424]	; (8001050 <__gnu_unwind_pr_common+0x2a4>)
 8000ea6:	210f      	movs	r1, #15
 8000ea8:	f7ff ff38 	bl	8000d1c <_Unwind_SetGR>
 8000eac:	2007      	movs	r0, #7
 8000eae:	e7a8      	b.n	8000e02 <__gnu_unwind_pr_common+0x56>
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	e7ca      	b.n	8000e4a <__gnu_unwind_pr_common+0x9e>
 8000eb4:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8000eb8:	3408      	adds	r4, #8
 8000eba:	e7b5      	b.n	8000e28 <__gnu_unwind_pr_common+0x7c>
 8000ebc:	0209      	lsls	r1, r1, #8
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	9105      	str	r1, [sp, #20]
 8000ec2:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000ec6:	e78a      	b.n	8000dde <__gnu_unwind_pr_common+0x32>
 8000ec8:	6823      	ldr	r3, [r4, #0]
 8000eca:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8000ece:	f1b8 0f00 	cmp.w	r8, #0
 8000ed2:	d145      	bne.n	8000f60 <__gnu_unwind_pr_common+0x1b4>
 8000ed4:	b128      	cbz	r0, 8000ee2 <__gnu_unwind_pr_common+0x136>
 8000ed6:	9a02      	ldr	r2, [sp, #8]
 8000ed8:	2a00      	cmp	r2, #0
 8000eda:	d05c      	beq.n	8000f96 <__gnu_unwind_pr_common+0x1ea>
 8000edc:	f1bb 0f00 	cmp.w	fp, #0
 8000ee0:	d074      	beq.n	8000fcc <__gnu_unwind_pr_common+0x220>
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	da00      	bge.n	8000ee8 <__gnu_unwind_pr_common+0x13c>
 8000ee6:	3404      	adds	r4, #4
 8000ee8:	f10b 0b01 	add.w	fp, fp, #1
 8000eec:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8000ef0:	e7c0      	b.n	8000e74 <__gnu_unwind_pr_common+0xc8>
 8000ef2:	f1b8 0f00 	cmp.w	r8, #0
 8000ef6:	d119      	bne.n	8000f2c <__gnu_unwind_pr_common+0x180>
 8000ef8:	b1b0      	cbz	r0, 8000f28 <__gnu_unwind_pr_common+0x17c>
 8000efa:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000efe:	1c99      	adds	r1, r3, #2
 8000f00:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000f04:	f43f af7c 	beq.w	8000e00 <__gnu_unwind_pr_common+0x54>
 8000f08:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	9104      	str	r1, [sp, #16]
 8000f10:	f000 8090 	beq.w	8001034 <__gnu_unwind_pr_common+0x288>
 8000f14:	1d20      	adds	r0, r4, #4
 8000f16:	f7ff fdc9 	bl	8000aac <_Unwind_decode_typeinfo_ptr.isra.0>
 8000f1a:	ab04      	add	r3, sp, #16
 8000f1c:	4601      	mov	r1, r0
 8000f1e:	4628      	mov	r0, r5
 8000f20:	f3af 8000 	nop.w
 8000f24:	2800      	cmp	r0, #0
 8000f26:	d15b      	bne.n	8000fe0 <__gnu_unwind_pr_common+0x234>
 8000f28:	3408      	adds	r4, #8
 8000f2a:	e7a3      	b.n	8000e74 <__gnu_unwind_pr_common+0xc8>
 8000f2c:	210d      	movs	r1, #13
 8000f2e:	4638      	mov	r0, r7
 8000f30:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000f34:	f7ff fece 	bl	8000cd4 <_Unwind_GetGR>
 8000f38:	4581      	cmp	r9, r0
 8000f3a:	d1f5      	bne.n	8000f28 <__gnu_unwind_pr_common+0x17c>
 8000f3c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000f3e:	429c      	cmp	r4, r3
 8000f40:	d1f2      	bne.n	8000f28 <__gnu_unwind_pr_common+0x17c>
 8000f42:	4620      	mov	r0, r4
 8000f44:	f7ff fcec 	bl	8000920 <selfrel_offset31>
 8000f48:	210f      	movs	r1, #15
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	f7ff fee5 	bl	8000d1c <_Unwind_SetGR>
 8000f52:	4638      	mov	r0, r7
 8000f54:	462a      	mov	r2, r5
 8000f56:	2100      	movs	r1, #0
 8000f58:	f7ff fee0 	bl	8000d1c <_Unwind_SetGR>
 8000f5c:	2007      	movs	r0, #7
 8000f5e:	e750      	b.n	8000e02 <__gnu_unwind_pr_common+0x56>
 8000f60:	210d      	movs	r1, #13
 8000f62:	4638      	mov	r0, r7
 8000f64:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000f68:	f7ff feb4 	bl	8000cd4 <_Unwind_GetGR>
 8000f6c:	4581      	cmp	r9, r0
 8000f6e:	d001      	beq.n	8000f74 <__gnu_unwind_pr_common+0x1c8>
 8000f70:	6823      	ldr	r3, [r4, #0]
 8000f72:	e7b6      	b.n	8000ee2 <__gnu_unwind_pr_common+0x136>
 8000f74:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000f76:	429c      	cmp	r4, r3
 8000f78:	d1fa      	bne.n	8000f70 <__gnu_unwind_pr_common+0x1c4>
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	e9c5 120b 	strd	r1, r2, [r5, #44]	; 0x2c
 8000f82:	18a3      	adds	r3, r4, r2
 8000f84:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8000f88:	636b      	str	r3, [r5, #52]	; 0x34
 8000f8a:	6823      	ldr	r3, [r4, #0]
 8000f8c:	428b      	cmp	r3, r1
 8000f8e:	db59      	blt.n	8001044 <__gnu_unwind_pr_common+0x298>
 8000f90:	2301      	movs	r3, #1
 8000f92:	9301      	str	r3, [sp, #4]
 8000f94:	e7a8      	b.n	8000ee8 <__gnu_unwind_pr_common+0x13c>
 8000f96:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000f9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8000f9e:	f104 0a04 	add.w	sl, r4, #4
 8000fa2:	46b0      	mov	r8, r6
 8000fa4:	4691      	mov	r9, r2
 8000fa6:	461e      	mov	r6, r3
 8000fa8:	e00d      	b.n	8000fc6 <__gnu_unwind_pr_common+0x21a>
 8000faa:	9604      	str	r6, [sp, #16]
 8000fac:	f7ff fd7e 	bl	8000aac <_Unwind_decode_typeinfo_ptr.isra.0>
 8000fb0:	ab04      	add	r3, sp, #16
 8000fb2:	4601      	mov	r1, r0
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	4628      	mov	r0, r5
 8000fb8:	f3af 8000 	nop.w
 8000fbc:	f109 0901 	add.w	r9, r9, #1
 8000fc0:	f10a 0a04 	add.w	sl, sl, #4
 8000fc4:	b9e8      	cbnz	r0, 8001002 <__gnu_unwind_pr_common+0x256>
 8000fc6:	45d9      	cmp	r9, fp
 8000fc8:	4650      	mov	r0, sl
 8000fca:	d1ee      	bne.n	8000faa <__gnu_unwind_pr_common+0x1fe>
 8000fcc:	4638      	mov	r0, r7
 8000fce:	210d      	movs	r1, #13
 8000fd0:	f7ff fe80 	bl	8000cd4 <_Unwind_GetGR>
 8000fd4:	9b04      	ldr	r3, [sp, #16]
 8000fd6:	6228      	str	r0, [r5, #32]
 8000fd8:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 8000fdc:	2006      	movs	r0, #6
 8000fde:	e710      	b.n	8000e02 <__gnu_unwind_pr_common+0x56>
 8000fe0:	4681      	mov	r9, r0
 8000fe2:	210d      	movs	r1, #13
 8000fe4:	4638      	mov	r0, r7
 8000fe6:	f7ff fe75 	bl	8000cd4 <_Unwind_GetGR>
 8000fea:	f1b9 0f02 	cmp.w	r9, #2
 8000fee:	6228      	str	r0, [r5, #32]
 8000ff0:	d125      	bne.n	800103e <__gnu_unwind_pr_common+0x292>
 8000ff2:	462b      	mov	r3, r5
 8000ff4:	9a04      	ldr	r2, [sp, #16]
 8000ff6:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000ffa:	626b      	str	r3, [r5, #36]	; 0x24
 8000ffc:	62ac      	str	r4, [r5, #40]	; 0x28
 8000ffe:	2006      	movs	r0, #6
 8001000:	e6ff      	b.n	8000e02 <__gnu_unwind_pr_common+0x56>
 8001002:	4646      	mov	r6, r8
 8001004:	6823      	ldr	r3, [r4, #0]
 8001006:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800100a:	e76a      	b.n	8000ee2 <__gnu_unwind_pr_common+0x136>
 800100c:	4620      	mov	r0, r4
 800100e:	f7ff fc87 	bl	8000920 <selfrel_offset31>
 8001012:	3404      	adds	r4, #4
 8001014:	4602      	mov	r2, r0
 8001016:	63ac      	str	r4, [r5, #56]	; 0x38
 8001018:	4628      	mov	r0, r5
 800101a:	4614      	mov	r4, r2
 800101c:	f3af 8000 	nop.w
 8001020:	2800      	cmp	r0, #0
 8001022:	f43f aeed 	beq.w	8000e00 <__gnu_unwind_pr_common+0x54>
 8001026:	4638      	mov	r0, r7
 8001028:	4622      	mov	r2, r4
 800102a:	210f      	movs	r1, #15
 800102c:	f7ff fe76 	bl	8000d1c <_Unwind_SetGR>
 8001030:	2007      	movs	r0, #7
 8001032:	e6e6      	b.n	8000e02 <__gnu_unwind_pr_common+0x56>
 8001034:	4638      	mov	r0, r7
 8001036:	210d      	movs	r1, #13
 8001038:	f7ff fe4c 	bl	8000cd4 <_Unwind_GetGR>
 800103c:	6228      	str	r0, [r5, #32]
 800103e:	9b04      	ldr	r3, [sp, #16]
 8001040:	626b      	str	r3, [r5, #36]	; 0x24
 8001042:	e7db      	b.n	8000ffc <__gnu_unwind_pr_common+0x250>
 8001044:	f10b 0001 	add.w	r0, fp, #1
 8001048:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800104c:	e77a      	b.n	8000f44 <__gnu_unwind_pr_common+0x198>
 800104e:	bf00      	nop
 8001050:	00000000 	.word	0x00000000

08001054 <__aeabi_unwind_cpp_pr0>:
 8001054:	2300      	movs	r3, #0
 8001056:	e6a9      	b.n	8000dac <__gnu_unwind_pr_common>

08001058 <__aeabi_unwind_cpp_pr1>:
 8001058:	2301      	movs	r3, #1
 800105a:	e6a7      	b.n	8000dac <__gnu_unwind_pr_common>

0800105c <__aeabi_unwind_cpp_pr2>:
 800105c:	2302      	movs	r3, #2
 800105e:	e6a5      	b.n	8000dac <__gnu_unwind_pr_common>

08001060 <_Unwind_VRS_Pop>:
 8001060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001064:	4606      	mov	r6, r0
 8001066:	b0c3      	sub	sp, #268	; 0x10c
 8001068:	4615      	mov	r5, r2
 800106a:	461c      	mov	r4, r3
 800106c:	2904      	cmp	r1, #4
 800106e:	f200 80b9 	bhi.w	80011e4 <_Unwind_VRS_Pop+0x184>
 8001072:	e8df f001 	tbb	[pc, r1]
 8001076:	539a      	.short	0x539a
 8001078:	29b7      	.short	0x29b7
 800107a:	03          	.byte	0x03
 800107b:	00          	.byte	0x00
 800107c:	2c00      	cmp	r4, #0
 800107e:	f040 80b1 	bne.w	80011e4 <_Unwind_VRS_Pop+0x184>
 8001082:	2a10      	cmp	r2, #16
 8001084:	f200 80ae 	bhi.w	80011e4 <_Unwind_VRS_Pop+0x184>
 8001088:	6803      	ldr	r3, [r0, #0]
 800108a:	06d8      	lsls	r0, r3, #27
 800108c:	f100 80f3 	bmi.w	8001276 <_Unwind_VRS_Pop+0x216>
 8001090:	af20      	add	r7, sp, #128	; 0x80
 8001092:	4638      	mov	r0, r7
 8001094:	f000 f992 	bl	80013bc <__gnu_Unwind_Save_WMMXC>
 8001098:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 800109a:	2300      	movs	r3, #0
 800109c:	2401      	movs	r4, #1
 800109e:	fa04 f203 	lsl.w	r2, r4, r3
 80010a2:	422a      	tst	r2, r5
 80010a4:	4601      	mov	r1, r0
 80010a6:	d004      	beq.n	80010b2 <_Unwind_VRS_Pop+0x52>
 80010a8:	f851 2b04 	ldr.w	r2, [r1], #4
 80010ac:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 80010b0:	4608      	mov	r0, r1
 80010b2:	3301      	adds	r3, #1
 80010b4:	2b04      	cmp	r3, #4
 80010b6:	d1f2      	bne.n	800109e <_Unwind_VRS_Pop+0x3e>
 80010b8:	63b0      	str	r0, [r6, #56]	; 0x38
 80010ba:	4638      	mov	r0, r7
 80010bc:	f000 f974 	bl	80013a8 <__gnu_Unwind_Restore_WMMXC>
 80010c0:	2000      	movs	r0, #0
 80010c2:	b043      	add	sp, #268	; 0x10c
 80010c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80010c8:	2c03      	cmp	r4, #3
 80010ca:	f040 808b 	bne.w	80011e4 <_Unwind_VRS_Pop+0x184>
 80010ce:	b294      	uxth	r4, r2
 80010d0:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 80010d4:	2b10      	cmp	r3, #16
 80010d6:	ea4f 4512 	mov.w	r5, r2, lsr #16
 80010da:	f200 8083 	bhi.w	80011e4 <_Unwind_VRS_Pop+0x184>
 80010de:	6803      	ldr	r3, [r0, #0]
 80010e0:	071f      	lsls	r7, r3, #28
 80010e2:	f100 80d0 	bmi.w	8001286 <_Unwind_VRS_Pop+0x226>
 80010e6:	af20      	add	r7, sp, #128	; 0x80
 80010e8:	4638      	mov	r0, r7
 80010ea:	f000 f93b 	bl	8001364 <__gnu_Unwind_Save_WMMXD>
 80010ee:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 80010f2:	6bb5      	ldr	r5, [r6, #56]	; 0x38
 80010f4:	b154      	cbz	r4, 800110c <_Unwind_VRS_Pop+0xac>
 80010f6:	460b      	mov	r3, r1
 80010f8:	1ae8      	subs	r0, r5, r3
 80010fa:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80010fe:	00e4      	lsls	r4, r4, #3
 8001100:	581a      	ldr	r2, [r3, r0]
 8001102:	f843 2b04 	str.w	r2, [r3], #4
 8001106:	428b      	cmp	r3, r1
 8001108:	d1fa      	bne.n	8001100 <_Unwind_VRS_Pop+0xa0>
 800110a:	4425      	add	r5, r4
 800110c:	4638      	mov	r0, r7
 800110e:	63b5      	str	r5, [r6, #56]	; 0x38
 8001110:	f000 f906 	bl	8001320 <__gnu_Unwind_Restore_WMMXD>
 8001114:	2000      	movs	r0, #0
 8001116:	b043      	add	sp, #268	; 0x10c
 8001118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800111c:	2c01      	cmp	r4, #1
 800111e:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8001122:	b295      	uxth	r5, r2
 8001124:	d05a      	beq.n	80011dc <_Unwind_VRS_Pop+0x17c>
 8001126:	2c05      	cmp	r4, #5
 8001128:	d15c      	bne.n	80011e4 <_Unwind_VRS_Pop+0x184>
 800112a:	eb08 0905 	add.w	r9, r8, r5
 800112e:	f1b9 0f20 	cmp.w	r9, #32
 8001132:	d857      	bhi.n	80011e4 <_Unwind_VRS_Pop+0x184>
 8001134:	f1b8 0f0f 	cmp.w	r8, #15
 8001138:	d977      	bls.n	800122a <_Unwind_VRS_Pop+0x1ca>
 800113a:	46a9      	mov	r9, r5
 800113c:	2d00      	cmp	r5, #0
 800113e:	f040 8088 	bne.w	8001252 <_Unwind_VRS_Pop+0x1f2>
 8001142:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8001144:	b36d      	cbz	r5, 80011a2 <_Unwind_VRS_Pop+0x142>
 8001146:	af20      	add	r7, sp, #128	; 0x80
 8001148:	f04f 0900 	mov.w	r9, #0
 800114c:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8001150:	3f04      	subs	r7, #4
 8001152:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8001156:	f853 1b04 	ldr.w	r1, [r3], #4
 800115a:	f847 1f04 	str.w	r1, [r7, #4]!
 800115e:	42ab      	cmp	r3, r5
 8001160:	d1f9      	bne.n	8001156 <_Unwind_VRS_Pop+0xf6>
 8001162:	f1b9 0f00 	cmp.w	r9, #0
 8001166:	d00f      	beq.n	8001188 <_Unwind_VRS_Pop+0x128>
 8001168:	466f      	mov	r7, sp
 800116a:	4641      	mov	r1, r8
 800116c:	2910      	cmp	r1, #16
 800116e:	bf38      	it	cc
 8001170:	2110      	movcc	r1, #16
 8001172:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8001176:	3984      	subs	r1, #132	; 0x84
 8001178:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 800117c:	f853 0b04 	ldr.w	r0, [r3], #4
 8001180:	f841 0f04 	str.w	r0, [r1, #4]!
 8001184:	42ab      	cmp	r3, r5
 8001186:	d1f9      	bne.n	800117c <_Unwind_VRS_Pop+0x11c>
 8001188:	2c01      	cmp	r4, #1
 800118a:	f000 8084 	beq.w	8001296 <_Unwind_VRS_Pop+0x236>
 800118e:	f1b8 0f0f 	cmp.w	r8, #15
 8001192:	63b5      	str	r5, [r6, #56]	; 0x38
 8001194:	d945      	bls.n	8001222 <_Unwind_VRS_Pop+0x1c2>
 8001196:	f1b9 0f00 	cmp.w	r9, #0
 800119a:	d002      	beq.n	80011a2 <_Unwind_VRS_Pop+0x142>
 800119c:	4668      	mov	r0, sp
 800119e:	f000 f8b7 	bl	8001310 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80011a2:	2000      	movs	r0, #0
 80011a4:	b043      	add	sp, #268	; 0x10c
 80011a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011aa:	b9dc      	cbnz	r4, 80011e4 <_Unwind_VRS_Pop+0x184>
 80011ac:	6b87      	ldr	r7, [r0, #56]	; 0x38
 80011ae:	4623      	mov	r3, r4
 80011b0:	2001      	movs	r0, #1
 80011b2:	b294      	uxth	r4, r2
 80011b4:	f106 0c04 	add.w	ip, r6, #4
 80011b8:	fa00 f203 	lsl.w	r2, r0, r3
 80011bc:	4222      	tst	r2, r4
 80011be:	4639      	mov	r1, r7
 80011c0:	d004      	beq.n	80011cc <_Unwind_VRS_Pop+0x16c>
 80011c2:	f851 2b04 	ldr.w	r2, [r1], #4
 80011c6:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
 80011ca:	460f      	mov	r7, r1
 80011cc:	3301      	adds	r3, #1
 80011ce:	2b10      	cmp	r3, #16
 80011d0:	d1f2      	bne.n	80011b8 <_Unwind_VRS_Pop+0x158>
 80011d2:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 80011d6:	d1e4      	bne.n	80011a2 <_Unwind_VRS_Pop+0x142>
 80011d8:	63b7      	str	r7, [r6, #56]	; 0x38
 80011da:	e004      	b.n	80011e6 <_Unwind_VRS_Pop+0x186>
 80011dc:	eb08 0305 	add.w	r3, r8, r5
 80011e0:	2b10      	cmp	r3, #16
 80011e2:	d903      	bls.n	80011ec <_Unwind_VRS_Pop+0x18c>
 80011e4:	2002      	movs	r0, #2
 80011e6:	b043      	add	sp, #268	; 0x10c
 80011e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011ec:	f1b8 0f0f 	cmp.w	r8, #15
 80011f0:	d8f8      	bhi.n	80011e4 <_Unwind_VRS_Pop+0x184>
 80011f2:	6833      	ldr	r3, [r6, #0]
 80011f4:	07da      	lsls	r2, r3, #31
 80011f6:	d506      	bpl.n	8001206 <_Unwind_VRS_Pop+0x1a6>
 80011f8:	4630      	mov	r0, r6
 80011fa:	f023 0303 	bic.w	r3, r3, #3
 80011fe:	f840 3b48 	str.w	r3, [r0], #72
 8001202:	f000 f879 	bl	80012f8 <__gnu_Unwind_Save_VFP>
 8001206:	af20      	add	r7, sp, #128	; 0x80
 8001208:	4638      	mov	r0, r7
 800120a:	f000 f875 	bl	80012f8 <__gnu_Unwind_Save_VFP>
 800120e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8001210:	2d00      	cmp	r5, #0
 8001212:	d199      	bne.n	8001148 <_Unwind_VRS_Pop+0xe8>
 8001214:	461d      	mov	r5, r3
 8001216:	3504      	adds	r5, #4
 8001218:	63b5      	str	r5, [r6, #56]	; 0x38
 800121a:	4638      	mov	r0, r7
 800121c:	f000 f868 	bl	80012f0 <__gnu_Unwind_Restore_VFP>
 8001220:	e7bf      	b.n	80011a2 <_Unwind_VRS_Pop+0x142>
 8001222:	a820      	add	r0, sp, #128	; 0x80
 8001224:	f000 f86c 	bl	8001300 <__gnu_Unwind_Restore_VFP_D>
 8001228:	e7b5      	b.n	8001196 <_Unwind_VRS_Pop+0x136>
 800122a:	f1b9 0f10 	cmp.w	r9, #16
 800122e:	d940      	bls.n	80012b2 <_Unwind_VRS_Pop+0x252>
 8001230:	f1a9 0910 	sub.w	r9, r9, #16
 8001234:	6833      	ldr	r3, [r6, #0]
 8001236:	07d9      	lsls	r1, r3, #31
 8001238:	d508      	bpl.n	800124c <_Unwind_VRS_Pop+0x1ec>
 800123a:	f023 0301 	bic.w	r3, r3, #1
 800123e:	4630      	mov	r0, r6
 8001240:	f043 0302 	orr.w	r3, r3, #2
 8001244:	f840 3b48 	str.w	r3, [r0], #72
 8001248:	f000 f85e 	bl	8001308 <__gnu_Unwind_Save_VFP_D>
 800124c:	f1b9 0f00 	cmp.w	r9, #0
 8001250:	d032      	beq.n	80012b8 <_Unwind_VRS_Pop+0x258>
 8001252:	6833      	ldr	r3, [r6, #0]
 8001254:	075a      	lsls	r2, r3, #29
 8001256:	d420      	bmi.n	800129a <_Unwind_VRS_Pop+0x23a>
 8001258:	f1b8 0f0f 	cmp.w	r8, #15
 800125c:	d925      	bls.n	80012aa <_Unwind_VRS_Pop+0x24a>
 800125e:	466f      	mov	r7, sp
 8001260:	4638      	mov	r0, r7
 8001262:	f1c8 0510 	rsb	r5, r8, #16
 8001266:	f000 f857 	bl	8001318 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800126a:	2d00      	cmp	r5, #0
 800126c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800126e:	f77f af7c 	ble.w	800116a <_Unwind_VRS_Pop+0x10a>
 8001272:	af20      	add	r7, sp, #128	; 0x80
 8001274:	e76a      	b.n	800114c <_Unwind_VRS_Pop+0xec>
 8001276:	f023 0310 	bic.w	r3, r3, #16
 800127a:	6033      	str	r3, [r6, #0]
 800127c:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8001280:	f000 f89c 	bl	80013bc <__gnu_Unwind_Save_WMMXC>
 8001284:	e704      	b.n	8001090 <_Unwind_VRS_Pop+0x30>
 8001286:	f023 0308 	bic.w	r3, r3, #8
 800128a:	6003      	str	r3, [r0, #0]
 800128c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8001290:	f000 f868 	bl	8001364 <__gnu_Unwind_Save_WMMXD>
 8001294:	e727      	b.n	80010e6 <_Unwind_VRS_Pop+0x86>
 8001296:	af20      	add	r7, sp, #128	; 0x80
 8001298:	e7bd      	b.n	8001216 <_Unwind_VRS_Pop+0x1b6>
 800129a:	4630      	mov	r0, r6
 800129c:	f023 0304 	bic.w	r3, r3, #4
 80012a0:	f840 3bd0 	str.w	r3, [r0], #208
 80012a4:	f000 f838 	bl	8001318 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80012a8:	e7d6      	b.n	8001258 <_Unwind_VRS_Pop+0x1f8>
 80012aa:	a820      	add	r0, sp, #128	; 0x80
 80012ac:	f000 f82c 	bl	8001308 <__gnu_Unwind_Save_VFP_D>
 80012b0:	e7d5      	b.n	800125e <_Unwind_VRS_Pop+0x1fe>
 80012b2:	f04f 0900 	mov.w	r9, #0
 80012b6:	e7bd      	b.n	8001234 <_Unwind_VRS_Pop+0x1d4>
 80012b8:	f1b8 0f0f 	cmp.w	r8, #15
 80012bc:	f63f af41 	bhi.w	8001142 <_Unwind_VRS_Pop+0xe2>
 80012c0:	af20      	add	r7, sp, #128	; 0x80
 80012c2:	4638      	mov	r0, r7
 80012c4:	f000 f820 	bl	8001308 <__gnu_Unwind_Save_VFP_D>
 80012c8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80012ca:	2d00      	cmp	r5, #0
 80012cc:	f47f af3c 	bne.w	8001148 <_Unwind_VRS_Pop+0xe8>
 80012d0:	4638      	mov	r0, r7
 80012d2:	f000 f815 	bl	8001300 <__gnu_Unwind_Restore_VFP_D>
 80012d6:	e764      	b.n	80011a2 <_Unwind_VRS_Pop+0x142>

080012d8 <__restore_core_regs>:
 80012d8:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80012dc:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80012e0:	469c      	mov	ip, r3
 80012e2:	46a6      	mov	lr, r4
 80012e4:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80012e8:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80012ec:	46e5      	mov	sp, ip
 80012ee:	bd00      	pop	{pc}

080012f0 <__gnu_Unwind_Restore_VFP>:
 80012f0:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop

080012f8 <__gnu_Unwind_Save_VFP>:
 80012f8:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop

08001300 <__gnu_Unwind_Restore_VFP_D>:
 8001300:	ec90 0b20 	vldmia	r0, {d0-d15}
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop

08001308 <__gnu_Unwind_Save_VFP_D>:
 8001308:	ec80 0b20 	vstmia	r0, {d0-d15}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop

08001310 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8001310:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop

08001318 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8001318:	ecc0 0b20 	vstmia	r0, {d16-d31}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop

08001320 <__gnu_Unwind_Restore_WMMXD>:
 8001320:	ecf0 0102 	ldfe	f0, [r0], #8
 8001324:	ecf0 1102 	ldfe	f1, [r0], #8
 8001328:	ecf0 2102 	ldfe	f2, [r0], #8
 800132c:	ecf0 3102 	ldfe	f3, [r0], #8
 8001330:	ecf0 4102 	ldfe	f4, [r0], #8
 8001334:	ecf0 5102 	ldfe	f5, [r0], #8
 8001338:	ecf0 6102 	ldfe	f6, [r0], #8
 800133c:	ecf0 7102 	ldfe	f7, [r0], #8
 8001340:	ecf0 8102 	ldfp	f0, [r0], #8
 8001344:	ecf0 9102 	ldfp	f1, [r0], #8
 8001348:	ecf0 a102 	ldfp	f2, [r0], #8
 800134c:	ecf0 b102 	ldfp	f3, [r0], #8
 8001350:	ecf0 c102 	ldfp	f4, [r0], #8
 8001354:	ecf0 d102 	ldfp	f5, [r0], #8
 8001358:	ecf0 e102 	ldfp	f6, [r0], #8
 800135c:	ecf0 f102 	ldfp	f7, [r0], #8
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop

08001364 <__gnu_Unwind_Save_WMMXD>:
 8001364:	ece0 0102 	stfe	f0, [r0], #8
 8001368:	ece0 1102 	stfe	f1, [r0], #8
 800136c:	ece0 2102 	stfe	f2, [r0], #8
 8001370:	ece0 3102 	stfe	f3, [r0], #8
 8001374:	ece0 4102 	stfe	f4, [r0], #8
 8001378:	ece0 5102 	stfe	f5, [r0], #8
 800137c:	ece0 6102 	stfe	f6, [r0], #8
 8001380:	ece0 7102 	stfe	f7, [r0], #8
 8001384:	ece0 8102 	stfp	f0, [r0], #8
 8001388:	ece0 9102 	stfp	f1, [r0], #8
 800138c:	ece0 a102 	stfp	f2, [r0], #8
 8001390:	ece0 b102 	stfp	f3, [r0], #8
 8001394:	ece0 c102 	stfp	f4, [r0], #8
 8001398:	ece0 d102 	stfp	f5, [r0], #8
 800139c:	ece0 e102 	stfp	f6, [r0], #8
 80013a0:	ece0 f102 	stfp	f7, [r0], #8
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop

080013a8 <__gnu_Unwind_Restore_WMMXC>:
 80013a8:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 80013ac:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 80013b0:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 80013b4:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop

080013bc <__gnu_Unwind_Save_WMMXC>:
 80013bc:	fca0 8101 	stc2	1, cr8, [r0], #4
 80013c0:	fca0 9101 	stc2	1, cr9, [r0], #4
 80013c4:	fca0 a101 	stc2	1, cr10, [r0], #4
 80013c8:	fca0 b101 	stc2	1, cr11, [r0], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop

080013d0 <_Unwind_RaiseException>:
 80013d0:	46ec      	mov	ip, sp
 80013d2:	b500      	push	{lr}
 80013d4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80013d8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80013dc:	f04f 0300 	mov.w	r3, #0
 80013e0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80013e4:	a901      	add	r1, sp, #4
 80013e6:	f7ff fbf1 	bl	8000bcc <__gnu_Unwind_RaiseException>
 80013ea:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80013ee:	b012      	add	sp, #72	; 0x48
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop

080013f4 <_Unwind_Resume>:
 80013f4:	46ec      	mov	ip, sp
 80013f6:	b500      	push	{lr}
 80013f8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80013fc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001400:	f04f 0300 	mov.w	r3, #0
 8001404:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001408:	a901      	add	r1, sp, #4
 800140a:	f7ff fc19 	bl	8000c40 <__gnu_Unwind_Resume>
 800140e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001412:	b012      	add	sp, #72	; 0x48
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop

08001418 <_Unwind_Resume_or_Rethrow>:
 8001418:	46ec      	mov	ip, sp
 800141a:	b500      	push	{lr}
 800141c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001420:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	e92d 000c 	stmdb	sp!, {r2, r3}
 800142c:	a901      	add	r1, sp, #4
 800142e:	f7ff fc29 	bl	8000c84 <__gnu_Unwind_Resume_or_Rethrow>
 8001432:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001436:	b012      	add	sp, #72	; 0x48
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop

0800143c <_Unwind_ForcedUnwind>:
 800143c:	46ec      	mov	ip, sp
 800143e:	b500      	push	{lr}
 8001440:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001444:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001448:	f04f 0300 	mov.w	r3, #0
 800144c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001450:	ab01      	add	r3, sp, #4
 8001452:	f7ff fbeb 	bl	8000c2c <__gnu_Unwind_ForcedUnwind>
 8001456:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800145a:	b012      	add	sp, #72	; 0x48
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop

08001460 <_Unwind_Backtrace>:
 8001460:	46ec      	mov	ip, sp
 8001462:	b500      	push	{lr}
 8001464:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001468:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001474:	aa01      	add	r2, sp, #4
 8001476:	f7ff fc5d 	bl	8000d34 <__gnu_Unwind_Backtrace>
 800147a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800147e:	b012      	add	sp, #72	; 0x48
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop

08001484 <next_unwind_byte>:
 8001484:	7a02      	ldrb	r2, [r0, #8]
 8001486:	b97a      	cbnz	r2, 80014a8 <next_unwind_byte+0x24>
 8001488:	7a43      	ldrb	r3, [r0, #9]
 800148a:	b1a3      	cbz	r3, 80014b6 <next_unwind_byte+0x32>
 800148c:	6842      	ldr	r2, [r0, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	b410      	push	{r4}
 8001492:	7243      	strb	r3, [r0, #9]
 8001494:	6813      	ldr	r3, [r2, #0]
 8001496:	2103      	movs	r1, #3
 8001498:	1d14      	adds	r4, r2, #4
 800149a:	7201      	strb	r1, [r0, #8]
 800149c:	021a      	lsls	r2, r3, #8
 800149e:	6044      	str	r4, [r0, #4]
 80014a0:	6002      	str	r2, [r0, #0]
 80014a2:	bc10      	pop	{r4}
 80014a4:	0e18      	lsrs	r0, r3, #24
 80014a6:	4770      	bx	lr
 80014a8:	6803      	ldr	r3, [r0, #0]
 80014aa:	3a01      	subs	r2, #1
 80014ac:	7202      	strb	r2, [r0, #8]
 80014ae:	021a      	lsls	r2, r3, #8
 80014b0:	6002      	str	r2, [r0, #0]
 80014b2:	0e18      	lsrs	r0, r3, #24
 80014b4:	4770      	bx	lr
 80014b6:	20b0      	movs	r0, #176	; 0xb0
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop

080014bc <_Unwind_GetGR.constprop.0>:
 80014bc:	b500      	push	{lr}
 80014be:	b085      	sub	sp, #20
 80014c0:	aa03      	add	r2, sp, #12
 80014c2:	2300      	movs	r3, #0
 80014c4:	9200      	str	r2, [sp, #0]
 80014c6:	4619      	mov	r1, r3
 80014c8:	220c      	movs	r2, #12
 80014ca:	f7ff fbeb 	bl	8000ca4 <_Unwind_VRS_Get>
 80014ce:	9803      	ldr	r0, [sp, #12]
 80014d0:	b005      	add	sp, #20
 80014d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80014d6:	bf00      	nop

080014d8 <unwind_UCB_from_context>:
 80014d8:	e7f0      	b.n	80014bc <_Unwind_GetGR.constprop.0>
 80014da:	bf00      	nop

080014dc <__gnu_unwind_execute>:
 80014dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014e0:	4605      	mov	r5, r0
 80014e2:	b085      	sub	sp, #20
 80014e4:	460e      	mov	r6, r1
 80014e6:	f04f 0800 	mov.w	r8, #0
 80014ea:	4630      	mov	r0, r6
 80014ec:	f7ff ffca 	bl	8001484 <next_unwind_byte>
 80014f0:	28b0      	cmp	r0, #176	; 0xb0
 80014f2:	4604      	mov	r4, r0
 80014f4:	f000 80b2 	beq.w	800165c <__gnu_unwind_execute+0x180>
 80014f8:	0607      	lsls	r7, r0, #24
 80014fa:	d520      	bpl.n	800153e <__gnu_unwind_execute+0x62>
 80014fc:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001500:	2b80      	cmp	r3, #128	; 0x80
 8001502:	d04d      	beq.n	80015a0 <__gnu_unwind_execute+0xc4>
 8001504:	2b90      	cmp	r3, #144	; 0x90
 8001506:	d036      	beq.n	8001576 <__gnu_unwind_execute+0x9a>
 8001508:	2ba0      	cmp	r3, #160	; 0xa0
 800150a:	d060      	beq.n	80015ce <__gnu_unwind_execute+0xf2>
 800150c:	2bb0      	cmp	r3, #176	; 0xb0
 800150e:	d074      	beq.n	80015fa <__gnu_unwind_execute+0x11e>
 8001510:	2bc0      	cmp	r3, #192	; 0xc0
 8001512:	f000 808b 	beq.w	800162c <__gnu_unwind_execute+0x150>
 8001516:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800151a:	2bd0      	cmp	r3, #208	; 0xd0
 800151c:	d10b      	bne.n	8001536 <__gnu_unwind_execute+0x5a>
 800151e:	f000 0207 	and.w	r2, r0, #7
 8001522:	3201      	adds	r2, #1
 8001524:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001528:	2305      	movs	r3, #5
 800152a:	2101      	movs	r1, #1
 800152c:	4628      	mov	r0, r5
 800152e:	f7ff fd97 	bl	8001060 <_Unwind_VRS_Pop>
 8001532:	2800      	cmp	r0, #0
 8001534:	d0d9      	beq.n	80014ea <__gnu_unwind_execute+0xe>
 8001536:	2009      	movs	r0, #9
 8001538:	b005      	add	sp, #20
 800153a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800153e:	f10d 090c 	add.w	r9, sp, #12
 8001542:	2300      	movs	r3, #0
 8001544:	4619      	mov	r1, r3
 8001546:	0087      	lsls	r7, r0, #2
 8001548:	f8cd 9000 	str.w	r9, [sp]
 800154c:	220d      	movs	r2, #13
 800154e:	4628      	mov	r0, r5
 8001550:	f7ff fba8 	bl	8000ca4 <_Unwind_VRS_Get>
 8001554:	b2ff      	uxtb	r7, r7
 8001556:	9b03      	ldr	r3, [sp, #12]
 8001558:	f8cd 9000 	str.w	r9, [sp]
 800155c:	3704      	adds	r7, #4
 800155e:	0660      	lsls	r0, r4, #25
 8001560:	bf4c      	ite	mi
 8001562:	1bdf      	submi	r7, r3, r7
 8001564:	18ff      	addpl	r7, r7, r3
 8001566:	2300      	movs	r3, #0
 8001568:	4619      	mov	r1, r3
 800156a:	220d      	movs	r2, #13
 800156c:	4628      	mov	r0, r5
 800156e:	9703      	str	r7, [sp, #12]
 8001570:	f7ff fbbc 	bl	8000cec <_Unwind_VRS_Set>
 8001574:	e7b9      	b.n	80014ea <__gnu_unwind_execute+0xe>
 8001576:	f000 030d 	and.w	r3, r0, #13
 800157a:	2b0d      	cmp	r3, #13
 800157c:	d0db      	beq.n	8001536 <__gnu_unwind_execute+0x5a>
 800157e:	af03      	add	r7, sp, #12
 8001580:	2300      	movs	r3, #0
 8001582:	f000 020f 	and.w	r2, r0, #15
 8001586:	4619      	mov	r1, r3
 8001588:	9700      	str	r7, [sp, #0]
 800158a:	4628      	mov	r0, r5
 800158c:	f7ff fb8a 	bl	8000ca4 <_Unwind_VRS_Get>
 8001590:	2300      	movs	r3, #0
 8001592:	9700      	str	r7, [sp, #0]
 8001594:	4619      	mov	r1, r3
 8001596:	220d      	movs	r2, #13
 8001598:	4628      	mov	r0, r5
 800159a:	f7ff fba7 	bl	8000cec <_Unwind_VRS_Set>
 800159e:	e7a4      	b.n	80014ea <__gnu_unwind_execute+0xe>
 80015a0:	4630      	mov	r0, r6
 80015a2:	f7ff ff6f 	bl	8001484 <next_unwind_byte>
 80015a6:	0224      	lsls	r4, r4, #8
 80015a8:	4320      	orrs	r0, r4
 80015aa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80015ae:	d0c2      	beq.n	8001536 <__gnu_unwind_execute+0x5a>
 80015b0:	0104      	lsls	r4, r0, #4
 80015b2:	2300      	movs	r3, #0
 80015b4:	b2a2      	uxth	r2, r4
 80015b6:	4619      	mov	r1, r3
 80015b8:	4628      	mov	r0, r5
 80015ba:	f7ff fd51 	bl	8001060 <_Unwind_VRS_Pop>
 80015be:	2800      	cmp	r0, #0
 80015c0:	d1b9      	bne.n	8001536 <__gnu_unwind_execute+0x5a>
 80015c2:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80015c6:	bf18      	it	ne
 80015c8:	f04f 0801 	movne.w	r8, #1
 80015cc:	e78d      	b.n	80014ea <__gnu_unwind_execute+0xe>
 80015ce:	43c2      	mvns	r2, r0
 80015d0:	f002 0307 	and.w	r3, r2, #7
 80015d4:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80015d8:	411a      	asrs	r2, r3
 80015da:	0701      	lsls	r1, r0, #28
 80015dc:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80015e0:	f04f 0300 	mov.w	r3, #0
 80015e4:	bf48      	it	mi
 80015e6:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80015ea:	4619      	mov	r1, r3
 80015ec:	4628      	mov	r0, r5
 80015ee:	f7ff fd37 	bl	8001060 <_Unwind_VRS_Pop>
 80015f2:	2800      	cmp	r0, #0
 80015f4:	f43f af79 	beq.w	80014ea <__gnu_unwind_execute+0xe>
 80015f8:	e79d      	b.n	8001536 <__gnu_unwind_execute+0x5a>
 80015fa:	28b1      	cmp	r0, #177	; 0xb1
 80015fc:	d033      	beq.n	8001666 <__gnu_unwind_execute+0x18a>
 80015fe:	28b2      	cmp	r0, #178	; 0xb2
 8001600:	f000 808b 	beq.w	800171a <__gnu_unwind_execute+0x23e>
 8001604:	28b3      	cmp	r0, #179	; 0xb3
 8001606:	d039      	beq.n	800167c <__gnu_unwind_execute+0x1a0>
 8001608:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 800160c:	2bb4      	cmp	r3, #180	; 0xb4
 800160e:	d092      	beq.n	8001536 <__gnu_unwind_execute+0x5a>
 8001610:	f000 0207 	and.w	r2, r0, #7
 8001614:	3201      	adds	r2, #1
 8001616:	2301      	movs	r3, #1
 8001618:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800161c:	4619      	mov	r1, r3
 800161e:	4628      	mov	r0, r5
 8001620:	f7ff fd1e 	bl	8001060 <_Unwind_VRS_Pop>
 8001624:	2800      	cmp	r0, #0
 8001626:	f43f af60 	beq.w	80014ea <__gnu_unwind_execute+0xe>
 800162a:	e784      	b.n	8001536 <__gnu_unwind_execute+0x5a>
 800162c:	28c6      	cmp	r0, #198	; 0xc6
 800162e:	d042      	beq.n	80016b6 <__gnu_unwind_execute+0x1da>
 8001630:	28c7      	cmp	r0, #199	; 0xc7
 8001632:	d04c      	beq.n	80016ce <__gnu_unwind_execute+0x1f2>
 8001634:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001638:	2bc0      	cmp	r3, #192	; 0xc0
 800163a:	d05b      	beq.n	80016f4 <__gnu_unwind_execute+0x218>
 800163c:	28c8      	cmp	r0, #200	; 0xc8
 800163e:	d060      	beq.n	8001702 <__gnu_unwind_execute+0x226>
 8001640:	28c9      	cmp	r0, #201	; 0xc9
 8001642:	f47f af78 	bne.w	8001536 <__gnu_unwind_execute+0x5a>
 8001646:	4630      	mov	r0, r6
 8001648:	f7ff ff1c 	bl	8001484 <next_unwind_byte>
 800164c:	0302      	lsls	r2, r0, #12
 800164e:	f000 000f 	and.w	r0, r0, #15
 8001652:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001656:	3001      	adds	r0, #1
 8001658:	4302      	orrs	r2, r0
 800165a:	e765      	b.n	8001528 <__gnu_unwind_execute+0x4c>
 800165c:	f1b8 0f00 	cmp.w	r8, #0
 8001660:	d018      	beq.n	8001694 <__gnu_unwind_execute+0x1b8>
 8001662:	2000      	movs	r0, #0
 8001664:	e768      	b.n	8001538 <__gnu_unwind_execute+0x5c>
 8001666:	4630      	mov	r0, r6
 8001668:	f7ff ff0c 	bl	8001484 <next_unwind_byte>
 800166c:	4602      	mov	r2, r0
 800166e:	2800      	cmp	r0, #0
 8001670:	f43f af61 	beq.w	8001536 <__gnu_unwind_execute+0x5a>
 8001674:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001678:	d0d0      	beq.n	800161c <__gnu_unwind_execute+0x140>
 800167a:	e75c      	b.n	8001536 <__gnu_unwind_execute+0x5a>
 800167c:	4630      	mov	r0, r6
 800167e:	f7ff ff01 	bl	8001484 <next_unwind_byte>
 8001682:	0301      	lsls	r1, r0, #12
 8001684:	f000 000f 	and.w	r0, r0, #15
 8001688:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 800168c:	1c42      	adds	r2, r0, #1
 800168e:	2301      	movs	r3, #1
 8001690:	430a      	orrs	r2, r1
 8001692:	e7c3      	b.n	800161c <__gnu_unwind_execute+0x140>
 8001694:	ac03      	add	r4, sp, #12
 8001696:	4643      	mov	r3, r8
 8001698:	220e      	movs	r2, #14
 800169a:	4641      	mov	r1, r8
 800169c:	9400      	str	r4, [sp, #0]
 800169e:	4628      	mov	r0, r5
 80016a0:	f7ff fb00 	bl	8000ca4 <_Unwind_VRS_Get>
 80016a4:	9400      	str	r4, [sp, #0]
 80016a6:	4628      	mov	r0, r5
 80016a8:	4643      	mov	r3, r8
 80016aa:	220f      	movs	r2, #15
 80016ac:	4641      	mov	r1, r8
 80016ae:	f7ff fb1d 	bl	8000cec <_Unwind_VRS_Set>
 80016b2:	4640      	mov	r0, r8
 80016b4:	e740      	b.n	8001538 <__gnu_unwind_execute+0x5c>
 80016b6:	4630      	mov	r0, r6
 80016b8:	f7ff fee4 	bl	8001484 <next_unwind_byte>
 80016bc:	0301      	lsls	r1, r0, #12
 80016be:	f000 000f 	and.w	r0, r0, #15
 80016c2:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80016c6:	1c42      	adds	r2, r0, #1
 80016c8:	2303      	movs	r3, #3
 80016ca:	430a      	orrs	r2, r1
 80016cc:	e7a6      	b.n	800161c <__gnu_unwind_execute+0x140>
 80016ce:	4630      	mov	r0, r6
 80016d0:	f7ff fed8 	bl	8001484 <next_unwind_byte>
 80016d4:	4602      	mov	r2, r0
 80016d6:	2800      	cmp	r0, #0
 80016d8:	f43f af2d 	beq.w	8001536 <__gnu_unwind_execute+0x5a>
 80016dc:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80016e0:	f47f af29 	bne.w	8001536 <__gnu_unwind_execute+0x5a>
 80016e4:	2104      	movs	r1, #4
 80016e6:	4628      	mov	r0, r5
 80016e8:	f7ff fcba 	bl	8001060 <_Unwind_VRS_Pop>
 80016ec:	2800      	cmp	r0, #0
 80016ee:	f43f aefc 	beq.w	80014ea <__gnu_unwind_execute+0xe>
 80016f2:	e720      	b.n	8001536 <__gnu_unwind_execute+0x5a>
 80016f4:	f000 020f 	and.w	r2, r0, #15
 80016f8:	3201      	adds	r2, #1
 80016fa:	2303      	movs	r3, #3
 80016fc:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001700:	e78c      	b.n	800161c <__gnu_unwind_execute+0x140>
 8001702:	4630      	mov	r0, r6
 8001704:	f7ff febe 	bl	8001484 <next_unwind_byte>
 8001708:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800170c:	f000 030f 	and.w	r3, r0, #15
 8001710:	3210      	adds	r2, #16
 8001712:	3301      	adds	r3, #1
 8001714:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001718:	e706      	b.n	8001528 <__gnu_unwind_execute+0x4c>
 800171a:	2300      	movs	r3, #0
 800171c:	f10d 090c 	add.w	r9, sp, #12
 8001720:	220d      	movs	r2, #13
 8001722:	4619      	mov	r1, r3
 8001724:	f8cd 9000 	str.w	r9, [sp]
 8001728:	4628      	mov	r0, r5
 800172a:	f7ff fabb 	bl	8000ca4 <_Unwind_VRS_Get>
 800172e:	4630      	mov	r0, r6
 8001730:	f7ff fea8 	bl	8001484 <next_unwind_byte>
 8001734:	0602      	lsls	r2, r0, #24
 8001736:	f04f 0702 	mov.w	r7, #2
 800173a:	d50c      	bpl.n	8001756 <__gnu_unwind_execute+0x27a>
 800173c:	9b03      	ldr	r3, [sp, #12]
 800173e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001742:	40b8      	lsls	r0, r7
 8001744:	4403      	add	r3, r0
 8001746:	4630      	mov	r0, r6
 8001748:	9303      	str	r3, [sp, #12]
 800174a:	f7ff fe9b 	bl	8001484 <next_unwind_byte>
 800174e:	0603      	lsls	r3, r0, #24
 8001750:	f107 0707 	add.w	r7, r7, #7
 8001754:	d4f2      	bmi.n	800173c <__gnu_unwind_execute+0x260>
 8001756:	9b03      	ldr	r3, [sp, #12]
 8001758:	f8cd 9000 	str.w	r9, [sp]
 800175c:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 8001760:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8001764:	40bc      	lsls	r4, r7
 8001766:	2300      	movs	r3, #0
 8001768:	4414      	add	r4, r2
 800176a:	4619      	mov	r1, r3
 800176c:	220d      	movs	r2, #13
 800176e:	4628      	mov	r0, r5
 8001770:	9403      	str	r4, [sp, #12]
 8001772:	f7ff fabb 	bl	8000cec <_Unwind_VRS_Set>
 8001776:	e6b8      	b.n	80014ea <__gnu_unwind_execute+0xe>

08001778 <__gnu_unwind_frame>:
 8001778:	b510      	push	{r4, lr}
 800177a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800177c:	b084      	sub	sp, #16
 800177e:	6853      	ldr	r3, [r2, #4]
 8001780:	2403      	movs	r4, #3
 8001782:	f88d 400c 	strb.w	r4, [sp, #12]
 8001786:	021b      	lsls	r3, r3, #8
 8001788:	f102 0408 	add.w	r4, r2, #8
 800178c:	4608      	mov	r0, r1
 800178e:	79d2      	ldrb	r2, [r2, #7]
 8001790:	9301      	str	r3, [sp, #4]
 8001792:	a901      	add	r1, sp, #4
 8001794:	9402      	str	r4, [sp, #8]
 8001796:	f88d 200d 	strb.w	r2, [sp, #13]
 800179a:	f7ff fe9f 	bl	80014dc <__gnu_unwind_execute>
 800179e:	b004      	add	sp, #16
 80017a0:	bd10      	pop	{r4, pc}
 80017a2:	bf00      	nop

080017a4 <_Unwind_GetRegionStart>:
 80017a4:	b508      	push	{r3, lr}
 80017a6:	f7ff fe97 	bl	80014d8 <unwind_UCB_from_context>
 80017aa:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80017ac:	bd08      	pop	{r3, pc}
 80017ae:	bf00      	nop

080017b0 <_Unwind_GetLanguageSpecificData>:
 80017b0:	b508      	push	{r3, lr}
 80017b2:	f7ff fe91 	bl	80014d8 <unwind_UCB_from_context>
 80017b6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80017b8:	79c3      	ldrb	r3, [r0, #7]
 80017ba:	3302      	adds	r3, #2
 80017bc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80017c0:	bd08      	pop	{r3, pc}
 80017c2:	bf00      	nop

080017c4 <abort>:
 80017c4:	b508      	push	{r3, lr}
 80017c6:	2006      	movs	r0, #6
 80017c8:	f000 f97a 	bl	8001ac0 <raise>
 80017cc:	2001      	movs	r0, #1
 80017ce:	f000 fddf 	bl	8002390 <_exit>
 80017d2:	bf00      	nop

080017d4 <memcpy>:
 80017d4:	4684      	mov	ip, r0
 80017d6:	ea41 0300 	orr.w	r3, r1, r0
 80017da:	f013 0303 	ands.w	r3, r3, #3
 80017de:	d16d      	bne.n	80018bc <memcpy+0xe8>
 80017e0:	3a40      	subs	r2, #64	; 0x40
 80017e2:	d341      	bcc.n	8001868 <memcpy+0x94>
 80017e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80017e8:	f840 3b04 	str.w	r3, [r0], #4
 80017ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80017f0:	f840 3b04 	str.w	r3, [r0], #4
 80017f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80017f8:	f840 3b04 	str.w	r3, [r0], #4
 80017fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8001800:	f840 3b04 	str.w	r3, [r0], #4
 8001804:	f851 3b04 	ldr.w	r3, [r1], #4
 8001808:	f840 3b04 	str.w	r3, [r0], #4
 800180c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001810:	f840 3b04 	str.w	r3, [r0], #4
 8001814:	f851 3b04 	ldr.w	r3, [r1], #4
 8001818:	f840 3b04 	str.w	r3, [r0], #4
 800181c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001820:	f840 3b04 	str.w	r3, [r0], #4
 8001824:	f851 3b04 	ldr.w	r3, [r1], #4
 8001828:	f840 3b04 	str.w	r3, [r0], #4
 800182c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001830:	f840 3b04 	str.w	r3, [r0], #4
 8001834:	f851 3b04 	ldr.w	r3, [r1], #4
 8001838:	f840 3b04 	str.w	r3, [r0], #4
 800183c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001840:	f840 3b04 	str.w	r3, [r0], #4
 8001844:	f851 3b04 	ldr.w	r3, [r1], #4
 8001848:	f840 3b04 	str.w	r3, [r0], #4
 800184c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001850:	f840 3b04 	str.w	r3, [r0], #4
 8001854:	f851 3b04 	ldr.w	r3, [r1], #4
 8001858:	f840 3b04 	str.w	r3, [r0], #4
 800185c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001860:	f840 3b04 	str.w	r3, [r0], #4
 8001864:	3a40      	subs	r2, #64	; 0x40
 8001866:	d2bd      	bcs.n	80017e4 <memcpy+0x10>
 8001868:	3230      	adds	r2, #48	; 0x30
 800186a:	d311      	bcc.n	8001890 <memcpy+0xbc>
 800186c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001870:	f840 3b04 	str.w	r3, [r0], #4
 8001874:	f851 3b04 	ldr.w	r3, [r1], #4
 8001878:	f840 3b04 	str.w	r3, [r0], #4
 800187c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001880:	f840 3b04 	str.w	r3, [r0], #4
 8001884:	f851 3b04 	ldr.w	r3, [r1], #4
 8001888:	f840 3b04 	str.w	r3, [r0], #4
 800188c:	3a10      	subs	r2, #16
 800188e:	d2ed      	bcs.n	800186c <memcpy+0x98>
 8001890:	320c      	adds	r2, #12
 8001892:	d305      	bcc.n	80018a0 <memcpy+0xcc>
 8001894:	f851 3b04 	ldr.w	r3, [r1], #4
 8001898:	f840 3b04 	str.w	r3, [r0], #4
 800189c:	3a04      	subs	r2, #4
 800189e:	d2f9      	bcs.n	8001894 <memcpy+0xc0>
 80018a0:	3204      	adds	r2, #4
 80018a2:	d008      	beq.n	80018b6 <memcpy+0xe2>
 80018a4:	07d2      	lsls	r2, r2, #31
 80018a6:	bf1c      	itt	ne
 80018a8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80018ac:	f800 3b01 	strbne.w	r3, [r0], #1
 80018b0:	d301      	bcc.n	80018b6 <memcpy+0xe2>
 80018b2:	880b      	ldrh	r3, [r1, #0]
 80018b4:	8003      	strh	r3, [r0, #0]
 80018b6:	4660      	mov	r0, ip
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	2a08      	cmp	r2, #8
 80018be:	d313      	bcc.n	80018e8 <memcpy+0x114>
 80018c0:	078b      	lsls	r3, r1, #30
 80018c2:	d08d      	beq.n	80017e0 <memcpy+0xc>
 80018c4:	f010 0303 	ands.w	r3, r0, #3
 80018c8:	d08a      	beq.n	80017e0 <memcpy+0xc>
 80018ca:	f1c3 0304 	rsb	r3, r3, #4
 80018ce:	1ad2      	subs	r2, r2, r3
 80018d0:	07db      	lsls	r3, r3, #31
 80018d2:	bf1c      	itt	ne
 80018d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80018d8:	f800 3b01 	strbne.w	r3, [r0], #1
 80018dc:	d380      	bcc.n	80017e0 <memcpy+0xc>
 80018de:	f831 3b02 	ldrh.w	r3, [r1], #2
 80018e2:	f820 3b02 	strh.w	r3, [r0], #2
 80018e6:	e77b      	b.n	80017e0 <memcpy+0xc>
 80018e8:	3a04      	subs	r2, #4
 80018ea:	d3d9      	bcc.n	80018a0 <memcpy+0xcc>
 80018ec:	3a01      	subs	r2, #1
 80018ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80018f2:	f800 3b01 	strb.w	r3, [r0], #1
 80018f6:	d2f9      	bcs.n	80018ec <memcpy+0x118>
 80018f8:	780b      	ldrb	r3, [r1, #0]
 80018fa:	7003      	strb	r3, [r0, #0]
 80018fc:	784b      	ldrb	r3, [r1, #1]
 80018fe:	7043      	strb	r3, [r0, #1]
 8001900:	788b      	ldrb	r3, [r1, #2]
 8001902:	7083      	strb	r3, [r0, #2]
 8001904:	4660      	mov	r0, ip
 8001906:	4770      	bx	lr

08001908 <memset>:
 8001908:	b4f0      	push	{r4, r5, r6, r7}
 800190a:	0786      	lsls	r6, r0, #30
 800190c:	d046      	beq.n	800199c <memset+0x94>
 800190e:	1e54      	subs	r4, r2, #1
 8001910:	2a00      	cmp	r2, #0
 8001912:	d03c      	beq.n	800198e <memset+0x86>
 8001914:	b2ca      	uxtb	r2, r1
 8001916:	4603      	mov	r3, r0
 8001918:	e002      	b.n	8001920 <memset+0x18>
 800191a:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 800191e:	d336      	bcc.n	800198e <memset+0x86>
 8001920:	f803 2b01 	strb.w	r2, [r3], #1
 8001924:	079d      	lsls	r5, r3, #30
 8001926:	d1f8      	bne.n	800191a <memset+0x12>
 8001928:	2c03      	cmp	r4, #3
 800192a:	d929      	bls.n	8001980 <memset+0x78>
 800192c:	b2cd      	uxtb	r5, r1
 800192e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8001932:	2c0f      	cmp	r4, #15
 8001934:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8001938:	d933      	bls.n	80019a2 <memset+0x9a>
 800193a:	f1a4 0610 	sub.w	r6, r4, #16
 800193e:	0936      	lsrs	r6, r6, #4
 8001940:	f103 0720 	add.w	r7, r3, #32
 8001944:	eb07 1706 	add.w	r7, r7, r6, lsl #4
 8001948:	f103 0210 	add.w	r2, r3, #16
 800194c:	e942 5504 	strd	r5, r5, [r2, #-16]
 8001950:	e942 5502 	strd	r5, r5, [r2, #-8]
 8001954:	3210      	adds	r2, #16
 8001956:	42ba      	cmp	r2, r7
 8001958:	d1f8      	bne.n	800194c <memset+0x44>
 800195a:	1c72      	adds	r2, r6, #1
 800195c:	f014 0f0c 	tst.w	r4, #12
 8001960:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001964:	f004 060f 	and.w	r6, r4, #15
 8001968:	d013      	beq.n	8001992 <memset+0x8a>
 800196a:	1f33      	subs	r3, r6, #4
 800196c:	f023 0303 	bic.w	r3, r3, #3
 8001970:	3304      	adds	r3, #4
 8001972:	4413      	add	r3, r2
 8001974:	f842 5b04 	str.w	r5, [r2], #4
 8001978:	4293      	cmp	r3, r2
 800197a:	d1fb      	bne.n	8001974 <memset+0x6c>
 800197c:	f006 0403 	and.w	r4, r6, #3
 8001980:	b12c      	cbz	r4, 800198e <memset+0x86>
 8001982:	b2c9      	uxtb	r1, r1
 8001984:	441c      	add	r4, r3
 8001986:	f803 1b01 	strb.w	r1, [r3], #1
 800198a:	429c      	cmp	r4, r3
 800198c:	d1fb      	bne.n	8001986 <memset+0x7e>
 800198e:	bcf0      	pop	{r4, r5, r6, r7}
 8001990:	4770      	bx	lr
 8001992:	4634      	mov	r4, r6
 8001994:	4613      	mov	r3, r2
 8001996:	2c00      	cmp	r4, #0
 8001998:	d1f3      	bne.n	8001982 <memset+0x7a>
 800199a:	e7f8      	b.n	800198e <memset+0x86>
 800199c:	4614      	mov	r4, r2
 800199e:	4603      	mov	r3, r0
 80019a0:	e7c2      	b.n	8001928 <memset+0x20>
 80019a2:	461a      	mov	r2, r3
 80019a4:	4626      	mov	r6, r4
 80019a6:	e7e0      	b.n	800196a <memset+0x62>

080019a8 <_init_signal_r.part.0>:
 80019a8:	b510      	push	{r4, lr}
 80019aa:	2180      	movs	r1, #128	; 0x80
 80019ac:	4604      	mov	r4, r0
 80019ae:	f000 f8bf 	bl	8001b30 <_malloc_r>
 80019b2:	f8c4 02dc 	str.w	r0, [r4, #732]	; 0x2dc
 80019b6:	b140      	cbz	r0, 80019ca <_init_signal_r.part.0+0x22>
 80019b8:	1f03      	subs	r3, r0, #4
 80019ba:	2200      	movs	r2, #0
 80019bc:	307c      	adds	r0, #124	; 0x7c
 80019be:	f843 2f04 	str.w	r2, [r3, #4]!
 80019c2:	4283      	cmp	r3, r0
 80019c4:	d1fb      	bne.n	80019be <_init_signal_r.part.0+0x16>
 80019c6:	2000      	movs	r0, #0
 80019c8:	bd10      	pop	{r4, pc}
 80019ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019ce:	bd10      	pop	{r4, pc}

080019d0 <_init_signal_r>:
 80019d0:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
 80019d4:	b10b      	cbz	r3, 80019da <_init_signal_r+0xa>
 80019d6:	2000      	movs	r0, #0
 80019d8:	4770      	bx	lr
 80019da:	e7e5      	b.n	80019a8 <_init_signal_r.part.0>

080019dc <_signal_r>:
 80019dc:	291f      	cmp	r1, #31
 80019de:	b570      	push	{r4, r5, r6, lr}
 80019e0:	4605      	mov	r5, r0
 80019e2:	d809      	bhi.n	80019f8 <_signal_r+0x1c>
 80019e4:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
 80019e8:	4616      	mov	r6, r2
 80019ea:	460c      	mov	r4, r1
 80019ec:	b14b      	cbz	r3, 8001a02 <_signal_r+0x26>
 80019ee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80019f2:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 80019f6:	bd70      	pop	{r4, r5, r6, pc}
 80019f8:	2216      	movs	r2, #22
 80019fa:	6002      	str	r2, [r0, #0]
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a00:	bd70      	pop	{r4, r5, r6, pc}
 8001a02:	f7ff ffd1 	bl	80019a8 <_init_signal_r.part.0>
 8001a06:	b910      	cbnz	r0, 8001a0e <_signal_r+0x32>
 8001a08:	f8d5 32dc 	ldr.w	r3, [r5, #732]	; 0x2dc
 8001a0c:	e7ef      	b.n	80019ee <_signal_r+0x12>
 8001a0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a12:	bd70      	pop	{r4, r5, r6, pc}

08001a14 <_raise_r>:
 8001a14:	291f      	cmp	r1, #31
 8001a16:	b538      	push	{r3, r4, r5, lr}
 8001a18:	d822      	bhi.n	8001a60 <_raise_r+0x4c>
 8001a1a:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8001a1e:	4605      	mov	r5, r0
 8001a20:	460c      	mov	r4, r1
 8001a22:	b16a      	cbz	r2, 8001a40 <_raise_r+0x2c>
 8001a24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001a28:	b153      	cbz	r3, 8001a40 <_raise_r+0x2c>
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d016      	beq.n	8001a5c <_raise_r+0x48>
 8001a2e:	1c59      	adds	r1, r3, #1
 8001a30:	d010      	beq.n	8001a54 <_raise_r+0x40>
 8001a32:	2500      	movs	r5, #0
 8001a34:	4620      	mov	r0, r4
 8001a36:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 8001a3a:	4798      	blx	r3
 8001a3c:	4628      	mov	r0, r5
 8001a3e:	bd38      	pop	{r3, r4, r5, pc}
 8001a40:	4628      	mov	r0, r5
 8001a42:	f000 f873 	bl	8001b2c <_getpid_r>
 8001a46:	4622      	mov	r2, r4
 8001a48:	4601      	mov	r1, r0
 8001a4a:	4628      	mov	r0, r5
 8001a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a50:	f000 b858 	b.w	8001b04 <_kill_r>
 8001a54:	2316      	movs	r3, #22
 8001a56:	6003      	str	r3, [r0, #0]
 8001a58:	2001      	movs	r0, #1
 8001a5a:	bd38      	pop	{r3, r4, r5, pc}
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	bd38      	pop	{r3, r4, r5, pc}
 8001a60:	2316      	movs	r3, #22
 8001a62:	6003      	str	r3, [r0, #0]
 8001a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a68:	bd38      	pop	{r3, r4, r5, pc}
 8001a6a:	bf00      	nop

08001a6c <__sigtramp_r>:
 8001a6c:	291f      	cmp	r1, #31
 8001a6e:	d823      	bhi.n	8001ab8 <__sigtramp_r+0x4c>
 8001a70:	b538      	push	{r3, r4, r5, lr}
 8001a72:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
 8001a76:	4605      	mov	r5, r0
 8001a78:	460c      	mov	r4, r1
 8001a7a:	b183      	cbz	r3, 8001a9e <__sigtramp_r+0x32>
 8001a7c:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 8001a80:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001a84:	b14a      	cbz	r2, 8001a9a <__sigtramp_r+0x2e>
 8001a86:	1c51      	adds	r1, r2, #1
 8001a88:	d011      	beq.n	8001aae <__sigtramp_r+0x42>
 8001a8a:	2a01      	cmp	r2, #1
 8001a8c:	d00d      	beq.n	8001aaa <__sigtramp_r+0x3e>
 8001a8e:	2500      	movs	r5, #0
 8001a90:	4620      	mov	r0, r4
 8001a92:	601d      	str	r5, [r3, #0]
 8001a94:	4790      	blx	r2
 8001a96:	4628      	mov	r0, r5
 8001a98:	bd38      	pop	{r3, r4, r5, pc}
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	bd38      	pop	{r3, r4, r5, pc}
 8001a9e:	f7ff ff83 	bl	80019a8 <_init_signal_r.part.0>
 8001aa2:	b930      	cbnz	r0, 8001ab2 <__sigtramp_r+0x46>
 8001aa4:	f8d5 32dc 	ldr.w	r3, [r5, #732]	; 0x2dc
 8001aa8:	e7e8      	b.n	8001a7c <__sigtramp_r+0x10>
 8001aaa:	2003      	movs	r0, #3
 8001aac:	bd38      	pop	{r3, r4, r5, pc}
 8001aae:	2002      	movs	r0, #2
 8001ab0:	bd38      	pop	{r3, r4, r5, pc}
 8001ab2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ab6:	bd38      	pop	{r3, r4, r5, pc}
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop

08001ac0 <raise>:
 8001ac0:	4b02      	ldr	r3, [pc, #8]	; (8001acc <raise+0xc>)
 8001ac2:	4601      	mov	r1, r0
 8001ac4:	6818      	ldr	r0, [r3, #0]
 8001ac6:	f7ff bfa5 	b.w	8001a14 <_raise_r>
 8001aca:	bf00      	nop
 8001acc:	20000800 	.word	0x20000800

08001ad0 <signal>:
 8001ad0:	4b02      	ldr	r3, [pc, #8]	; (8001adc <signal+0xc>)
 8001ad2:	460a      	mov	r2, r1
 8001ad4:	4601      	mov	r1, r0
 8001ad6:	6818      	ldr	r0, [r3, #0]
 8001ad8:	f7ff bf80 	b.w	80019dc <_signal_r>
 8001adc:	20000800 	.word	0x20000800

08001ae0 <_init_signal>:
 8001ae0:	4b03      	ldr	r3, [pc, #12]	; (8001af0 <_init_signal+0x10>)
 8001ae2:	6818      	ldr	r0, [r3, #0]
 8001ae4:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
 8001ae8:	b10b      	cbz	r3, 8001aee <_init_signal+0xe>
 8001aea:	2000      	movs	r0, #0
 8001aec:	4770      	bx	lr
 8001aee:	e75b      	b.n	80019a8 <_init_signal_r.part.0>
 8001af0:	20000800 	.word	0x20000800

08001af4 <__sigtramp>:
 8001af4:	4b02      	ldr	r3, [pc, #8]	; (8001b00 <__sigtramp+0xc>)
 8001af6:	4601      	mov	r1, r0
 8001af8:	6818      	ldr	r0, [r3, #0]
 8001afa:	f7ff bfb7 	b.w	8001a6c <__sigtramp_r>
 8001afe:	bf00      	nop
 8001b00:	20000800 	.word	0x20000800

08001b04 <_kill_r>:
 8001b04:	b538      	push	{r3, r4, r5, lr}
 8001b06:	460b      	mov	r3, r1
 8001b08:	4c07      	ldr	r4, [pc, #28]	; (8001b28 <_kill_r+0x24>)
 8001b0a:	4605      	mov	r5, r0
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	4618      	mov	r0, r3
 8001b10:	2300      	movs	r3, #0
 8001b12:	6023      	str	r3, [r4, #0]
 8001b14:	f000 fc26 	bl	8002364 <_kill>
 8001b18:	1c43      	adds	r3, r0, #1
 8001b1a:	d000      	beq.n	8001b1e <_kill_r+0x1a>
 8001b1c:	bd38      	pop	{r3, r4, r5, pc}
 8001b1e:	6823      	ldr	r3, [r4, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0fb      	beq.n	8001b1c <_kill_r+0x18>
 8001b24:	602b      	str	r3, [r5, #0]
 8001b26:	bd38      	pop	{r3, r4, r5, pc}
 8001b28:	200014d8 	.word	0x200014d8

08001b2c <_getpid_r>:
 8001b2c:	f000 bc12 	b.w	8002354 <_getpid>

08001b30 <_malloc_r>:
 8001b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b34:	f101 050b 	add.w	r5, r1, #11
 8001b38:	2d16      	cmp	r5, #22
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	4606      	mov	r6, r0
 8001b3e:	d823      	bhi.n	8001b88 <_malloc_r+0x58>
 8001b40:	2910      	cmp	r1, #16
 8001b42:	f200 80b9 	bhi.w	8001cb8 <_malloc_r+0x188>
 8001b46:	f000 faa5 	bl	8002094 <__malloc_lock>
 8001b4a:	2510      	movs	r5, #16
 8001b4c:	2318      	movs	r3, #24
 8001b4e:	2002      	movs	r0, #2
 8001b50:	4fcd      	ldr	r7, [pc, #820]	; (8001e88 <_malloc_r+0x358>)
 8001b52:	443b      	add	r3, r7
 8001b54:	f1a3 0208 	sub.w	r2, r3, #8
 8001b58:	685c      	ldr	r4, [r3, #4]
 8001b5a:	4294      	cmp	r4, r2
 8001b5c:	f000 80b9 	beq.w	8001cd2 <_malloc_r+0x1a2>
 8001b60:	6863      	ldr	r3, [r4, #4]
 8001b62:	f023 0303 	bic.w	r3, r3, #3
 8001b66:	4423      	add	r3, r4
 8001b68:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	60e9      	str	r1, [r5, #12]
 8001b70:	f042 0201 	orr.w	r2, r2, #1
 8001b74:	4630      	mov	r0, r6
 8001b76:	608d      	str	r5, [r1, #8]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	f000 fa8d 	bl	8002098 <__malloc_unlock>
 8001b7e:	3408      	adds	r4, #8
 8001b80:	4620      	mov	r0, r4
 8001b82:	b003      	add	sp, #12
 8001b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b88:	f035 0507 	bics.w	r5, r5, #7
 8001b8c:	f100 8094 	bmi.w	8001cb8 <_malloc_r+0x188>
 8001b90:	42a9      	cmp	r1, r5
 8001b92:	f200 8091 	bhi.w	8001cb8 <_malloc_r+0x188>
 8001b96:	f000 fa7d 	bl	8002094 <__malloc_lock>
 8001b9a:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8001b9e:	f0c0 819d 	bcc.w	8001edc <_malloc_r+0x3ac>
 8001ba2:	0a6b      	lsrs	r3, r5, #9
 8001ba4:	f000 808f 	beq.w	8001cc6 <_malloc_r+0x196>
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	f200 8173 	bhi.w	8001e94 <_malloc_r+0x364>
 8001bae:	09ab      	lsrs	r3, r5, #6
 8001bb0:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8001bb4:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 8001bb8:	00c3      	lsls	r3, r0, #3
 8001bba:	4fb3      	ldr	r7, [pc, #716]	; (8001e88 <_malloc_r+0x358>)
 8001bbc:	443b      	add	r3, r7
 8001bbe:	f1a3 0108 	sub.w	r1, r3, #8
 8001bc2:	685c      	ldr	r4, [r3, #4]
 8001bc4:	42a1      	cmp	r1, r4
 8001bc6:	d106      	bne.n	8001bd6 <_malloc_r+0xa6>
 8001bc8:	e00c      	b.n	8001be4 <_malloc_r+0xb4>
 8001bca:	2a00      	cmp	r2, #0
 8001bcc:	f280 812b 	bge.w	8001e26 <_malloc_r+0x2f6>
 8001bd0:	68e4      	ldr	r4, [r4, #12]
 8001bd2:	42a1      	cmp	r1, r4
 8001bd4:	d006      	beq.n	8001be4 <_malloc_r+0xb4>
 8001bd6:	6863      	ldr	r3, [r4, #4]
 8001bd8:	f023 0303 	bic.w	r3, r3, #3
 8001bdc:	1b5a      	subs	r2, r3, r5
 8001bde:	2a0f      	cmp	r2, #15
 8001be0:	ddf3      	ble.n	8001bca <_malloc_r+0x9a>
 8001be2:	4660      	mov	r0, ip
 8001be4:	693c      	ldr	r4, [r7, #16]
 8001be6:	f8df c2a4 	ldr.w	ip, [pc, #676]	; 8001e8c <_malloc_r+0x35c>
 8001bea:	4564      	cmp	r4, ip
 8001bec:	d07c      	beq.n	8001ce8 <_malloc_r+0x1b8>
 8001bee:	6863      	ldr	r3, [r4, #4]
 8001bf0:	f023 0303 	bic.w	r3, r3, #3
 8001bf4:	1b5a      	subs	r2, r3, r5
 8001bf6:	2a0f      	cmp	r2, #15
 8001bf8:	f300 817e 	bgt.w	8001ef8 <_malloc_r+0x3c8>
 8001bfc:	2a00      	cmp	r2, #0
 8001bfe:	e9c7 cc04 	strd	ip, ip, [r7, #16]
 8001c02:	f280 816f 	bge.w	8001ee4 <_malloc_r+0x3b4>
 8001c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c0a:	f080 811a 	bcs.w	8001e42 <_malloc_r+0x312>
 8001c0e:	08db      	lsrs	r3, r3, #3
 8001c10:	1c59      	adds	r1, r3, #1
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
 8001c18:	f8c4 8008 	str.w	r8, [r4, #8]
 8001c1c:	f04f 0e01 	mov.w	lr, #1
 8001c20:	109b      	asrs	r3, r3, #2
 8001c22:	fa0e f303 	lsl.w	r3, lr, r3
 8001c26:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	f1ae 0208 	sub.w	r2, lr, #8
 8001c30:	60e2      	str	r2, [r4, #12]
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
 8001c38:	f8c8 400c 	str.w	r4, [r8, #12]
 8001c3c:	1082      	asrs	r2, r0, #2
 8001c3e:	2401      	movs	r4, #1
 8001c40:	4094      	lsls	r4, r2
 8001c42:	429c      	cmp	r4, r3
 8001c44:	d856      	bhi.n	8001cf4 <_malloc_r+0x1c4>
 8001c46:	421c      	tst	r4, r3
 8001c48:	d106      	bne.n	8001c58 <_malloc_r+0x128>
 8001c4a:	f020 0003 	bic.w	r0, r0, #3
 8001c4e:	0064      	lsls	r4, r4, #1
 8001c50:	421c      	tst	r4, r3
 8001c52:	f100 0004 	add.w	r0, r0, #4
 8001c56:	d0fa      	beq.n	8001c4e <_malloc_r+0x11e>
 8001c58:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 8001c5c:	46ce      	mov	lr, r9
 8001c5e:	4680      	mov	r8, r0
 8001c60:	f8de 300c 	ldr.w	r3, [lr, #12]
 8001c64:	459e      	cmp	lr, r3
 8001c66:	d107      	bne.n	8001c78 <_malloc_r+0x148>
 8001c68:	e120      	b.n	8001eac <_malloc_r+0x37c>
 8001c6a:	2a00      	cmp	r2, #0
 8001c6c:	f280 8127 	bge.w	8001ebe <_malloc_r+0x38e>
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	459e      	cmp	lr, r3
 8001c74:	f000 811a 	beq.w	8001eac <_malloc_r+0x37c>
 8001c78:	6859      	ldr	r1, [r3, #4]
 8001c7a:	f021 0103 	bic.w	r1, r1, #3
 8001c7e:	1b4a      	subs	r2, r1, r5
 8001c80:	2a0f      	cmp	r2, #15
 8001c82:	ddf2      	ble.n	8001c6a <_malloc_r+0x13a>
 8001c84:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
 8001c88:	195c      	adds	r4, r3, r5
 8001c8a:	f045 0501 	orr.w	r5, r5, #1
 8001c8e:	605d      	str	r5, [r3, #4]
 8001c90:	f042 0501 	orr.w	r5, r2, #1
 8001c94:	f8c8 e00c 	str.w	lr, [r8, #12]
 8001c98:	4630      	mov	r0, r6
 8001c9a:	f8ce 8008 	str.w	r8, [lr, #8]
 8001c9e:	e9c7 4404 	strd	r4, r4, [r7, #16]
 8001ca2:	e9c4 cc02 	strd	ip, ip, [r4, #8]
 8001ca6:	6065      	str	r5, [r4, #4]
 8001ca8:	505a      	str	r2, [r3, r1]
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	f000 f9f4 	bl	8002098 <__malloc_unlock>
 8001cb0:	9b00      	ldr	r3, [sp, #0]
 8001cb2:	f103 0408 	add.w	r4, r3, #8
 8001cb6:	e002      	b.n	8001cbe <_malloc_r+0x18e>
 8001cb8:	230c      	movs	r3, #12
 8001cba:	6033      	str	r3, [r6, #0]
 8001cbc:	2400      	movs	r4, #0
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	b003      	add	sp, #12
 8001cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cca:	2040      	movs	r0, #64	; 0x40
 8001ccc:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 8001cd0:	e773      	b.n	8001bba <_malloc_r+0x8a>
 8001cd2:	68dc      	ldr	r4, [r3, #12]
 8001cd4:	42a3      	cmp	r3, r4
 8001cd6:	bf08      	it	eq
 8001cd8:	3002      	addeq	r0, #2
 8001cda:	f47f af41 	bne.w	8001b60 <_malloc_r+0x30>
 8001cde:	693c      	ldr	r4, [r7, #16]
 8001ce0:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8001e8c <_malloc_r+0x35c>
 8001ce4:	4564      	cmp	r4, ip
 8001ce6:	d182      	bne.n	8001bee <_malloc_r+0xbe>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	1082      	asrs	r2, r0, #2
 8001cec:	2401      	movs	r4, #1
 8001cee:	4094      	lsls	r4, r2
 8001cf0:	429c      	cmp	r4, r3
 8001cf2:	d9a8      	bls.n	8001c46 <_malloc_r+0x116>
 8001cf4:	68bc      	ldr	r4, [r7, #8]
 8001cf6:	6863      	ldr	r3, [r4, #4]
 8001cf8:	f023 0803 	bic.w	r8, r3, #3
 8001cfc:	45a8      	cmp	r8, r5
 8001cfe:	d303      	bcc.n	8001d08 <_malloc_r+0x1d8>
 8001d00:	eba8 0305 	sub.w	r3, r8, r5
 8001d04:	2b0f      	cmp	r3, #15
 8001d06:	dc7e      	bgt.n	8001e06 <_malloc_r+0x2d6>
 8001d08:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8001e90 <_malloc_r+0x360>
 8001d0c:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8001d10:	f8d9 3000 	ldr.w	r3, [r9]
 8001d14:	3201      	adds	r2, #1
 8001d16:	eb04 0a08 	add.w	sl, r4, r8
 8001d1a:	442b      	add	r3, r5
 8001d1c:	f000 8137 	beq.w	8001f8e <_malloc_r+0x45e>
 8001d20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d24:	330f      	adds	r3, #15
 8001d26:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
 8001d2a:	f02b 0b0f 	bic.w	fp, fp, #15
 8001d2e:	4659      	mov	r1, fp
 8001d30:	4630      	mov	r0, r6
 8001d32:	f000 f9b3 	bl	800209c <_sbrk_r>
 8001d36:	1c41      	adds	r1, r0, #1
 8001d38:	4602      	mov	r2, r0
 8001d3a:	f000 80f7 	beq.w	8001f2c <_malloc_r+0x3fc>
 8001d3e:	4582      	cmp	sl, r0
 8001d40:	f200 80f2 	bhi.w	8001f28 <_malloc_r+0x3f8>
 8001d44:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8001d48:	4459      	add	r1, fp
 8001d4a:	f8c9 1004 	str.w	r1, [r9, #4]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	f000 8153 	beq.w	8001ffa <_malloc_r+0x4ca>
 8001d54:	f8d7 1408 	ldr.w	r1, [r7, #1032]	; 0x408
 8001d58:	3101      	adds	r1, #1
 8001d5a:	bf1b      	ittet	ne
 8001d5c:	eba2 0a0a 	subne.w	sl, r2, sl
 8001d60:	4453      	addne	r3, sl
 8001d62:	f8c7 2408 	streq.w	r2, [r7, #1032]	; 0x408
 8001d66:	f8c9 3004 	strne.w	r3, [r9, #4]
 8001d6a:	f012 0307 	ands.w	r3, r2, #7
 8001d6e:	f000 811a 	beq.w	8001fa6 <_malloc_r+0x476>
 8001d72:	f1c3 0108 	rsb	r1, r3, #8
 8001d76:	440a      	add	r2, r1
 8001d78:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8001d7c:	4493      	add	fp, r2
 8001d7e:	3108      	adds	r1, #8
 8001d80:	eba1 010b 	sub.w	r1, r1, fp
 8001d84:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 8001d88:	4651      	mov	r1, sl
 8001d8a:	4630      	mov	r0, r6
 8001d8c:	9301      	str	r3, [sp, #4]
 8001d8e:	9200      	str	r2, [sp, #0]
 8001d90:	f000 f984 	bl	800209c <_sbrk_r>
 8001d94:	1c42      	adds	r2, r0, #1
 8001d96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001d9a:	f000 8153 	beq.w	8002044 <_malloc_r+0x514>
 8001d9e:	1a83      	subs	r3, r0, r2
 8001da0:	eb03 0b0a 	add.w	fp, r3, sl
 8001da4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8001da8:	60ba      	str	r2, [r7, #8]
 8001daa:	f04b 0301 	orr.w	r3, fp, #1
 8001dae:	4451      	add	r1, sl
 8001db0:	42bc      	cmp	r4, r7
 8001db2:	6053      	str	r3, [r2, #4]
 8001db4:	f8c9 1004 	str.w	r1, [r9, #4]
 8001db8:	f000 812b 	beq.w	8002012 <_malloc_r+0x4e2>
 8001dbc:	f1b8 0f0f 	cmp.w	r8, #15
 8001dc0:	f240 8129 	bls.w	8002016 <_malloc_r+0x4e6>
 8001dc4:	6863      	ldr	r3, [r4, #4]
 8001dc6:	f1a8 000c 	sub.w	r0, r8, #12
 8001dca:	f020 0007 	bic.w	r0, r0, #7
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	eb04 0c00 	add.w	ip, r4, r0
 8001dd6:	4303      	orrs	r3, r0
 8001dd8:	f04f 0e05 	mov.w	lr, #5
 8001ddc:	280f      	cmp	r0, #15
 8001dde:	6063      	str	r3, [r4, #4]
 8001de0:	e9cc ee01 	strd	lr, lr, [ip, #4]
 8001de4:	f200 8135 	bhi.w	8002052 <_malloc_r+0x522>
 8001de8:	6853      	ldr	r3, [r2, #4]
 8001dea:	4614      	mov	r4, r2
 8001dec:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
 8001df0:	428a      	cmp	r2, r1
 8001df2:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
 8001df6:	bf38      	it	cc
 8001df8:	f8c9 102c 	strcc.w	r1, [r9, #44]	; 0x2c
 8001dfc:	428a      	cmp	r2, r1
 8001dfe:	bf38      	it	cc
 8001e00:	f8c9 1030 	strcc.w	r1, [r9, #48]	; 0x30
 8001e04:	e094      	b.n	8001f30 <_malloc_r+0x400>
 8001e06:	1962      	adds	r2, r4, r5
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	f045 0501 	orr.w	r5, r5, #1
 8001e10:	6065      	str	r5, [r4, #4]
 8001e12:	4630      	mov	r0, r6
 8001e14:	60ba      	str	r2, [r7, #8]
 8001e16:	6053      	str	r3, [r2, #4]
 8001e18:	f000 f93e 	bl	8002098 <__malloc_unlock>
 8001e1c:	3408      	adds	r4, #8
 8001e1e:	4620      	mov	r0, r4
 8001e20:	b003      	add	sp, #12
 8001e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e26:	4423      	add	r3, r4
 8001e28:	68e1      	ldr	r1, [r4, #12]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	68a5      	ldr	r5, [r4, #8]
 8001e2e:	f042 0201 	orr.w	r2, r2, #1
 8001e32:	60e9      	str	r1, [r5, #12]
 8001e34:	4630      	mov	r0, r6
 8001e36:	608d      	str	r5, [r1, #8]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	f000 f92d 	bl	8002098 <__malloc_unlock>
 8001e3e:	3408      	adds	r4, #8
 8001e40:	e73d      	b.n	8001cbe <_malloc_r+0x18e>
 8001e42:	0a5a      	lsrs	r2, r3, #9
 8001e44:	2a04      	cmp	r2, #4
 8001e46:	d969      	bls.n	8001f1c <_malloc_r+0x3ec>
 8001e48:	2a14      	cmp	r2, #20
 8001e4a:	f200 80be 	bhi.w	8001fca <_malloc_r+0x49a>
 8001e4e:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 8001e52:	00c9      	lsls	r1, r1, #3
 8001e54:	325b      	adds	r2, #91	; 0x5b
 8001e56:	eb07 0e01 	add.w	lr, r7, r1
 8001e5a:	5879      	ldr	r1, [r7, r1]
 8001e5c:	f1ae 0e08 	sub.w	lr, lr, #8
 8001e60:	458e      	cmp	lr, r1
 8001e62:	f000 8097 	beq.w	8001f94 <_malloc_r+0x464>
 8001e66:	684a      	ldr	r2, [r1, #4]
 8001e68:	f022 0203 	bic.w	r2, r2, #3
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d902      	bls.n	8001e76 <_malloc_r+0x346>
 8001e70:	6889      	ldr	r1, [r1, #8]
 8001e72:	458e      	cmp	lr, r1
 8001e74:	d1f7      	bne.n	8001e66 <_malloc_r+0x336>
 8001e76:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	e9c4 1e02 	strd	r1, lr, [r4, #8]
 8001e80:	f8ce 4008 	str.w	r4, [lr, #8]
 8001e84:	60cc      	str	r4, [r1, #12]
 8001e86:	e6d9      	b.n	8001c3c <_malloc_r+0x10c>
 8001e88:	20000c30 	.word	0x20000c30
 8001e8c:	20000c38 	.word	0x20000c38
 8001e90:	200010f0 	.word	0x200010f0
 8001e94:	2b14      	cmp	r3, #20
 8001e96:	d959      	bls.n	8001f4c <_malloc_r+0x41c>
 8001e98:	2b54      	cmp	r3, #84	; 0x54
 8001e9a:	f200 809e 	bhi.w	8001fda <_malloc_r+0x4aa>
 8001e9e:	0b2b      	lsrs	r3, r5, #12
 8001ea0:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 8001ea4:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 8001ea8:	00c3      	lsls	r3, r0, #3
 8001eaa:	e686      	b.n	8001bba <_malloc_r+0x8a>
 8001eac:	f108 0801 	add.w	r8, r8, #1
 8001eb0:	f018 0f03 	tst.w	r8, #3
 8001eb4:	f10e 0e08 	add.w	lr, lr, #8
 8001eb8:	f47f aed2 	bne.w	8001c60 <_malloc_r+0x130>
 8001ebc:	e051      	b.n	8001f62 <_malloc_r+0x432>
 8001ebe:	4419      	add	r1, r3
 8001ec0:	461c      	mov	r4, r3
 8001ec2:	684a      	ldr	r2, [r1, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8001eca:	f042 0201 	orr.w	r2, r2, #1
 8001ece:	604a      	str	r2, [r1, #4]
 8001ed0:	4630      	mov	r0, r6
 8001ed2:	60eb      	str	r3, [r5, #12]
 8001ed4:	609d      	str	r5, [r3, #8]
 8001ed6:	f000 f8df 	bl	8002098 <__malloc_unlock>
 8001eda:	e6f0      	b.n	8001cbe <_malloc_r+0x18e>
 8001edc:	08e8      	lsrs	r0, r5, #3
 8001ede:	f105 0308 	add.w	r3, r5, #8
 8001ee2:	e635      	b.n	8001b50 <_malloc_r+0x20>
 8001ee4:	4423      	add	r3, r4
 8001ee6:	4630      	mov	r0, r6
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	f042 0201 	orr.w	r2, r2, #1
 8001eee:	605a      	str	r2, [r3, #4]
 8001ef0:	3408      	adds	r4, #8
 8001ef2:	f000 f8d1 	bl	8002098 <__malloc_unlock>
 8001ef6:	e6e2      	b.n	8001cbe <_malloc_r+0x18e>
 8001ef8:	1961      	adds	r1, r4, r5
 8001efa:	f045 0e01 	orr.w	lr, r5, #1
 8001efe:	f042 0501 	orr.w	r5, r2, #1
 8001f02:	f8c4 e004 	str.w	lr, [r4, #4]
 8001f06:	4630      	mov	r0, r6
 8001f08:	e9c7 1104 	strd	r1, r1, [r7, #16]
 8001f0c:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 8001f10:	604d      	str	r5, [r1, #4]
 8001f12:	50e2      	str	r2, [r4, r3]
 8001f14:	f000 f8c0 	bl	8002098 <__malloc_unlock>
 8001f18:	3408      	adds	r4, #8
 8001f1a:	e6d0      	b.n	8001cbe <_malloc_r+0x18e>
 8001f1c:	099a      	lsrs	r2, r3, #6
 8001f1e:	f102 0139 	add.w	r1, r2, #57	; 0x39
 8001f22:	00c9      	lsls	r1, r1, #3
 8001f24:	3238      	adds	r2, #56	; 0x38
 8001f26:	e796      	b.n	8001e56 <_malloc_r+0x326>
 8001f28:	42bc      	cmp	r4, r7
 8001f2a:	d060      	beq.n	8001fee <_malloc_r+0x4be>
 8001f2c:	68bc      	ldr	r4, [r7, #8]
 8001f2e:	6863      	ldr	r3, [r4, #4]
 8001f30:	f023 0b03 	bic.w	fp, r3, #3
 8001f34:	45ab      	cmp	fp, r5
 8001f36:	ebab 0305 	sub.w	r3, fp, r5
 8001f3a:	d302      	bcc.n	8001f42 <_malloc_r+0x412>
 8001f3c:	2b0f      	cmp	r3, #15
 8001f3e:	f73f af62 	bgt.w	8001e06 <_malloc_r+0x2d6>
 8001f42:	4630      	mov	r0, r6
 8001f44:	f000 f8a8 	bl	8002098 <__malloc_unlock>
 8001f48:	2400      	movs	r4, #0
 8001f4a:	e6b8      	b.n	8001cbe <_malloc_r+0x18e>
 8001f4c:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8001f50:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 8001f54:	00c3      	lsls	r3, r0, #3
 8001f56:	e630      	b.n	8001bba <_malloc_r+0x8a>
 8001f58:	f859 3908 	ldr.w	r3, [r9], #-8
 8001f5c:	454b      	cmp	r3, r9
 8001f5e:	f040 8096 	bne.w	800208e <_malloc_r+0x55e>
 8001f62:	f010 0f03 	tst.w	r0, #3
 8001f66:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8001f6a:	d1f5      	bne.n	8001f58 <_malloc_r+0x428>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	ea23 0304 	bic.w	r3, r3, r4
 8001f72:	607b      	str	r3, [r7, #4]
 8001f74:	0064      	lsls	r4, r4, #1
 8001f76:	429c      	cmp	r4, r3
 8001f78:	f63f aebc 	bhi.w	8001cf4 <_malloc_r+0x1c4>
 8001f7c:	b91c      	cbnz	r4, 8001f86 <_malloc_r+0x456>
 8001f7e:	e6b9      	b.n	8001cf4 <_malloc_r+0x1c4>
 8001f80:	0064      	lsls	r4, r4, #1
 8001f82:	f108 0804 	add.w	r8, r8, #4
 8001f86:	421c      	tst	r4, r3
 8001f88:	d0fa      	beq.n	8001f80 <_malloc_r+0x450>
 8001f8a:	4640      	mov	r0, r8
 8001f8c:	e664      	b.n	8001c58 <_malloc_r+0x128>
 8001f8e:	f103 0b10 	add.w	fp, r3, #16
 8001f92:	e6cc      	b.n	8001d2e <_malloc_r+0x1fe>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	1092      	asrs	r2, r2, #2
 8001f98:	f04f 0801 	mov.w	r8, #1
 8001f9c:	fa08 f202 	lsl.w	r2, r8, r2
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	607b      	str	r3, [r7, #4]
 8001fa4:	e76a      	b.n	8001e7c <_malloc_r+0x34c>
 8001fa6:	eb02 010b 	add.w	r1, r2, fp
 8001faa:	4249      	negs	r1, r1
 8001fac:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 8001fb0:	4651      	mov	r1, sl
 8001fb2:	4630      	mov	r0, r6
 8001fb4:	9301      	str	r3, [sp, #4]
 8001fb6:	9200      	str	r2, [sp, #0]
 8001fb8:	f000 f870 	bl	800209c <_sbrk_r>
 8001fbc:	1c43      	adds	r3, r0, #1
 8001fbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001fc2:	f47f aeec 	bne.w	8001d9e <_malloc_r+0x26e>
 8001fc6:	469a      	mov	sl, r3
 8001fc8:	e6ec      	b.n	8001da4 <_malloc_r+0x274>
 8001fca:	2a54      	cmp	r2, #84	; 0x54
 8001fcc:	d826      	bhi.n	800201c <_malloc_r+0x4ec>
 8001fce:	0b1a      	lsrs	r2, r3, #12
 8001fd0:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 8001fd4:	00c9      	lsls	r1, r1, #3
 8001fd6:	326e      	adds	r2, #110	; 0x6e
 8001fd8:	e73d      	b.n	8001e56 <_malloc_r+0x326>
 8001fda:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8001fde:	d826      	bhi.n	800202e <_malloc_r+0x4fe>
 8001fe0:	0beb      	lsrs	r3, r5, #15
 8001fe2:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8001fe6:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 8001fea:	00c3      	lsls	r3, r0, #3
 8001fec:	e5e5      	b.n	8001bba <_malloc_r+0x8a>
 8001fee:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001ff2:	445b      	add	r3, fp
 8001ff4:	f8c9 3004 	str.w	r3, [r9, #4]
 8001ff8:	e6ac      	b.n	8001d54 <_malloc_r+0x224>
 8001ffa:	f3ca 000b 	ubfx	r0, sl, #0, #12
 8001ffe:	2800      	cmp	r0, #0
 8002000:	f47f aea8 	bne.w	8001d54 <_malloc_r+0x224>
 8002004:	eb08 030b 	add.w	r3, r8, fp
 8002008:	68bc      	ldr	r4, [r7, #8]
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	6063      	str	r3, [r4, #4]
 8002010:	e6ec      	b.n	8001dec <_malloc_r+0x2bc>
 8002012:	4614      	mov	r4, r2
 8002014:	e6ea      	b.n	8001dec <_malloc_r+0x2bc>
 8002016:	2301      	movs	r3, #1
 8002018:	6053      	str	r3, [r2, #4]
 800201a:	e792      	b.n	8001f42 <_malloc_r+0x412>
 800201c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8002020:	d821      	bhi.n	8002066 <_malloc_r+0x536>
 8002022:	0bda      	lsrs	r2, r3, #15
 8002024:	f102 0178 	add.w	r1, r2, #120	; 0x78
 8002028:	00c9      	lsls	r1, r1, #3
 800202a:	3277      	adds	r2, #119	; 0x77
 800202c:	e713      	b.n	8001e56 <_malloc_r+0x326>
 800202e:	f240 5254 	movw	r2, #1364	; 0x554
 8002032:	4293      	cmp	r3, r2
 8002034:	d821      	bhi.n	800207a <_malloc_r+0x54a>
 8002036:	0cab      	lsrs	r3, r5, #18
 8002038:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 800203c:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 8002040:	00c3      	lsls	r3, r0, #3
 8002042:	e5ba      	b.n	8001bba <_malloc_r+0x8a>
 8002044:	3b08      	subs	r3, #8
 8002046:	449b      	add	fp, r3
 8002048:	ebab 0b02 	sub.w	fp, fp, r2
 800204c:	f04f 0a00 	mov.w	sl, #0
 8002050:	e6a8      	b.n	8001da4 <_malloc_r+0x274>
 8002052:	f104 0108 	add.w	r1, r4, #8
 8002056:	4630      	mov	r0, r6
 8002058:	f000 f882 	bl	8002160 <_free_r>
 800205c:	68bc      	ldr	r4, [r7, #8]
 800205e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8002062:	6863      	ldr	r3, [r4, #4]
 8002064:	e6c2      	b.n	8001dec <_malloc_r+0x2bc>
 8002066:	f240 5154 	movw	r1, #1364	; 0x554
 800206a:	428a      	cmp	r2, r1
 800206c:	d80b      	bhi.n	8002086 <_malloc_r+0x556>
 800206e:	0c9a      	lsrs	r2, r3, #18
 8002070:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 8002074:	00c9      	lsls	r1, r1, #3
 8002076:	327c      	adds	r2, #124	; 0x7c
 8002078:	e6ed      	b.n	8001e56 <_malloc_r+0x326>
 800207a:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 800207e:	207f      	movs	r0, #127	; 0x7f
 8002080:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 8002084:	e599      	b.n	8001bba <_malloc_r+0x8a>
 8002086:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800208a:	227e      	movs	r2, #126	; 0x7e
 800208c:	e6e3      	b.n	8001e56 <_malloc_r+0x326>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	e770      	b.n	8001f74 <_malloc_r+0x444>
 8002092:	bf00      	nop

08002094 <__malloc_lock>:
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop

08002098 <__malloc_unlock>:
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop

0800209c <_sbrk_r>:
 800209c:	b538      	push	{r3, r4, r5, lr}
 800209e:	4c07      	ldr	r4, [pc, #28]	; (80020bc <_sbrk_r+0x20>)
 80020a0:	2300      	movs	r3, #0
 80020a2:	4605      	mov	r5, r0
 80020a4:	4608      	mov	r0, r1
 80020a6:	6023      	str	r3, [r4, #0]
 80020a8:	f000 f964 	bl	8002374 <_sbrk>
 80020ac:	1c43      	adds	r3, r0, #1
 80020ae:	d000      	beq.n	80020b2 <_sbrk_r+0x16>
 80020b0:	bd38      	pop	{r3, r4, r5, pc}
 80020b2:	6823      	ldr	r3, [r4, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0fb      	beq.n	80020b0 <_sbrk_r+0x14>
 80020b8:	602b      	str	r3, [r5, #0]
 80020ba:	bd38      	pop	{r3, r4, r5, pc}
 80020bc:	200014d8 	.word	0x200014d8

080020c0 <_malloc_trim_r>:
 80020c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020c2:	4f24      	ldr	r7, [pc, #144]	; (8002154 <_malloc_trim_r+0x94>)
 80020c4:	460c      	mov	r4, r1
 80020c6:	4606      	mov	r6, r0
 80020c8:	f7ff ffe4 	bl	8002094 <__malloc_lock>
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	685d      	ldr	r5, [r3, #4]
 80020d0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 80020d4:	310f      	adds	r1, #15
 80020d6:	f025 0503 	bic.w	r5, r5, #3
 80020da:	4429      	add	r1, r5
 80020dc:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 80020e0:	f021 010f 	bic.w	r1, r1, #15
 80020e4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 80020e8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80020ec:	db07      	blt.n	80020fe <_malloc_trim_r+0x3e>
 80020ee:	2100      	movs	r1, #0
 80020f0:	4630      	mov	r0, r6
 80020f2:	f7ff ffd3 	bl	800209c <_sbrk_r>
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	442b      	add	r3, r5
 80020fa:	4298      	cmp	r0, r3
 80020fc:	d004      	beq.n	8002108 <_malloc_trim_r+0x48>
 80020fe:	4630      	mov	r0, r6
 8002100:	f7ff ffca 	bl	8002098 <__malloc_unlock>
 8002104:	2000      	movs	r0, #0
 8002106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002108:	4261      	negs	r1, r4
 800210a:	4630      	mov	r0, r6
 800210c:	f7ff ffc6 	bl	800209c <_sbrk_r>
 8002110:	3001      	adds	r0, #1
 8002112:	d00d      	beq.n	8002130 <_malloc_trim_r+0x70>
 8002114:	4b10      	ldr	r3, [pc, #64]	; (8002158 <_malloc_trim_r+0x98>)
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	6819      	ldr	r1, [r3, #0]
 800211a:	1b2d      	subs	r5, r5, r4
 800211c:	f045 0501 	orr.w	r5, r5, #1
 8002120:	4630      	mov	r0, r6
 8002122:	1b09      	subs	r1, r1, r4
 8002124:	6055      	str	r5, [r2, #4]
 8002126:	6019      	str	r1, [r3, #0]
 8002128:	f7ff ffb6 	bl	8002098 <__malloc_unlock>
 800212c:	2001      	movs	r0, #1
 800212e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002130:	2100      	movs	r1, #0
 8002132:	4630      	mov	r0, r6
 8002134:	f7ff ffb2 	bl	800209c <_sbrk_r>
 8002138:	68ba      	ldr	r2, [r7, #8]
 800213a:	1a83      	subs	r3, r0, r2
 800213c:	2b0f      	cmp	r3, #15
 800213e:	ddde      	ble.n	80020fe <_malloc_trim_r+0x3e>
 8002140:	4c06      	ldr	r4, [pc, #24]	; (800215c <_malloc_trim_r+0x9c>)
 8002142:	4905      	ldr	r1, [pc, #20]	; (8002158 <_malloc_trim_r+0x98>)
 8002144:	6824      	ldr	r4, [r4, #0]
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	1b00      	subs	r0, r0, r4
 800214c:	6053      	str	r3, [r2, #4]
 800214e:	6008      	str	r0, [r1, #0]
 8002150:	e7d5      	b.n	80020fe <_malloc_trim_r+0x3e>
 8002152:	bf00      	nop
 8002154:	20000c30 	.word	0x20000c30
 8002158:	200010f4 	.word	0x200010f4
 800215c:	20001038 	.word	0x20001038

08002160 <_free_r>:
 8002160:	2900      	cmp	r1, #0
 8002162:	d05e      	beq.n	8002222 <_free_r+0xc2>
 8002164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002166:	460f      	mov	r7, r1
 8002168:	4606      	mov	r6, r0
 800216a:	f7ff ff93 	bl	8002094 <__malloc_lock>
 800216e:	f857 cc04 	ldr.w	ip, [r7, #-4]
 8002172:	4d75      	ldr	r5, [pc, #468]	; (8002348 <_free_r+0x1e8>)
 8002174:	f02c 0301 	bic.w	r3, ip, #1
 8002178:	f1a7 0008 	sub.w	r0, r7, #8
 800217c:	18c2      	adds	r2, r0, r3
 800217e:	68a9      	ldr	r1, [r5, #8]
 8002180:	6854      	ldr	r4, [r2, #4]
 8002182:	4291      	cmp	r1, r2
 8002184:	f024 0403 	bic.w	r4, r4, #3
 8002188:	f000 8084 	beq.w	8002294 <_free_r+0x134>
 800218c:	f01c 0f01 	tst.w	ip, #1
 8002190:	6054      	str	r4, [r2, #4]
 8002192:	eb02 0104 	add.w	r1, r2, r4
 8002196:	d133      	bne.n	8002200 <_free_r+0xa0>
 8002198:	f857 ec08 	ldr.w	lr, [r7, #-8]
 800219c:	6849      	ldr	r1, [r1, #4]
 800219e:	eba0 000e 	sub.w	r0, r0, lr
 80021a2:	f105 0c08 	add.w	ip, r5, #8
 80021a6:	6887      	ldr	r7, [r0, #8]
 80021a8:	4567      	cmp	r7, ip
 80021aa:	4473      	add	r3, lr
 80021ac:	f001 0101 	and.w	r1, r1, #1
 80021b0:	d060      	beq.n	8002274 <_free_r+0x114>
 80021b2:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 80021b6:	f8c7 e00c 	str.w	lr, [r7, #12]
 80021ba:	f8ce 7008 	str.w	r7, [lr, #8]
 80021be:	2900      	cmp	r1, #0
 80021c0:	f000 808d 	beq.w	80022de <_free_r+0x17e>
 80021c4:	f043 0101 	orr.w	r1, r3, #1
 80021c8:	6041      	str	r1, [r0, #4]
 80021ca:	6013      	str	r3, [r2, #0]
 80021cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021d0:	d230      	bcs.n	8002234 <_free_r+0xd4>
 80021d2:	08db      	lsrs	r3, r3, #3
 80021d4:	1c59      	adds	r1, r3, #1
 80021d6:	686c      	ldr	r4, [r5, #4]
 80021d8:	109a      	asrs	r2, r3, #2
 80021da:	2301      	movs	r3, #1
 80021dc:	4093      	lsls	r3, r2
 80021de:	4323      	orrs	r3, r4
 80021e0:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
 80021e4:	f855 4031 	ldr.w	r4, [r5, r1, lsl #3]
 80021e8:	606b      	str	r3, [r5, #4]
 80021ea:	3a08      	subs	r2, #8
 80021ec:	e9c0 4202 	strd	r4, r2, [r0, #8]
 80021f0:	f845 0031 	str.w	r0, [r5, r1, lsl #3]
 80021f4:	60e0      	str	r0, [r4, #12]
 80021f6:	4630      	mov	r0, r6
 80021f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80021fc:	f7ff bf4c 	b.w	8002098 <__malloc_unlock>
 8002200:	6849      	ldr	r1, [r1, #4]
 8002202:	07c9      	lsls	r1, r1, #31
 8002204:	d40e      	bmi.n	8002224 <_free_r+0xc4>
 8002206:	4423      	add	r3, r4
 8002208:	f105 0c08 	add.w	ip, r5, #8
 800220c:	6891      	ldr	r1, [r2, #8]
 800220e:	4561      	cmp	r1, ip
 8002210:	f043 0401 	orr.w	r4, r3, #1
 8002214:	d06b      	beq.n	80022ee <_free_r+0x18e>
 8002216:	68d2      	ldr	r2, [r2, #12]
 8002218:	60ca      	str	r2, [r1, #12]
 800221a:	6091      	str	r1, [r2, #8]
 800221c:	6044      	str	r4, [r0, #4]
 800221e:	50c3      	str	r3, [r0, r3]
 8002220:	e7d4      	b.n	80021cc <_free_r+0x6c>
 8002222:	4770      	bx	lr
 8002224:	f043 0101 	orr.w	r1, r3, #1
 8002228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800222c:	f847 1c04 	str.w	r1, [r7, #-4]
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	d3ce      	bcc.n	80021d2 <_free_r+0x72>
 8002234:	0a5a      	lsrs	r2, r3, #9
 8002236:	2a04      	cmp	r2, #4
 8002238:	d846      	bhi.n	80022c8 <_free_r+0x168>
 800223a:	099a      	lsrs	r2, r3, #6
 800223c:	f102 0739 	add.w	r7, r2, #57	; 0x39
 8002240:	00ff      	lsls	r7, r7, #3
 8002242:	f102 0138 	add.w	r1, r2, #56	; 0x38
 8002246:	19ec      	adds	r4, r5, r7
 8002248:	59ea      	ldr	r2, [r5, r7]
 800224a:	3c08      	subs	r4, #8
 800224c:	4294      	cmp	r4, r2
 800224e:	d055      	beq.n	80022fc <_free_r+0x19c>
 8002250:	6851      	ldr	r1, [r2, #4]
 8002252:	f021 0103 	bic.w	r1, r1, #3
 8002256:	4299      	cmp	r1, r3
 8002258:	d902      	bls.n	8002260 <_free_r+0x100>
 800225a:	6892      	ldr	r2, [r2, #8]
 800225c:	4294      	cmp	r4, r2
 800225e:	d1f7      	bne.n	8002250 <_free_r+0xf0>
 8002260:	68d4      	ldr	r4, [r2, #12]
 8002262:	e9c0 2402 	strd	r2, r4, [r0, #8]
 8002266:	60a0      	str	r0, [r4, #8]
 8002268:	60d0      	str	r0, [r2, #12]
 800226a:	4630      	mov	r0, r6
 800226c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002270:	f7ff bf12 	b.w	8002098 <__malloc_unlock>
 8002274:	2900      	cmp	r1, #0
 8002276:	d162      	bne.n	800233e <_free_r+0x1de>
 8002278:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 800227c:	4423      	add	r3, r4
 800227e:	f043 0401 	orr.w	r4, r3, #1
 8002282:	60d1      	str	r1, [r2, #12]
 8002284:	608a      	str	r2, [r1, #8]
 8002286:	6044      	str	r4, [r0, #4]
 8002288:	50c3      	str	r3, [r0, r3]
 800228a:	4630      	mov	r0, r6
 800228c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002290:	f7ff bf02 	b.w	8002098 <__malloc_unlock>
 8002294:	f01c 0f01 	tst.w	ip, #1
 8002298:	4423      	add	r3, r4
 800229a:	d107      	bne.n	80022ac <_free_r+0x14c>
 800229c:	f857 2c08 	ldr.w	r2, [r7, #-8]
 80022a0:	1a80      	subs	r0, r0, r2
 80022a2:	4413      	add	r3, r2
 80022a4:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
 80022a8:	60ca      	str	r2, [r1, #12]
 80022aa:	6091      	str	r1, [r2, #8]
 80022ac:	4a27      	ldr	r2, [pc, #156]	; (800234c <_free_r+0x1ec>)
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	f043 0101 	orr.w	r1, r3, #1
 80022b4:	429a      	cmp	r2, r3
 80022b6:	6041      	str	r1, [r0, #4]
 80022b8:	60a8      	str	r0, [r5, #8]
 80022ba:	d89c      	bhi.n	80021f6 <_free_r+0x96>
 80022bc:	4b24      	ldr	r3, [pc, #144]	; (8002350 <_free_r+0x1f0>)
 80022be:	4630      	mov	r0, r6
 80022c0:	6819      	ldr	r1, [r3, #0]
 80022c2:	f7ff fefd 	bl	80020c0 <_malloc_trim_r>
 80022c6:	e796      	b.n	80021f6 <_free_r+0x96>
 80022c8:	2a14      	cmp	r2, #20
 80022ca:	d90a      	bls.n	80022e2 <_free_r+0x182>
 80022cc:	2a54      	cmp	r2, #84	; 0x54
 80022ce:	d81d      	bhi.n	800230c <_free_r+0x1ac>
 80022d0:	0b1a      	lsrs	r2, r3, #12
 80022d2:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 80022d6:	00ff      	lsls	r7, r7, #3
 80022d8:	f102 016e 	add.w	r1, r2, #110	; 0x6e
 80022dc:	e7b3      	b.n	8002246 <_free_r+0xe6>
 80022de:	4423      	add	r3, r4
 80022e0:	e794      	b.n	800220c <_free_r+0xac>
 80022e2:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 80022e6:	00ff      	lsls	r7, r7, #3
 80022e8:	f102 015b 	add.w	r1, r2, #91	; 0x5b
 80022ec:	e7ab      	b.n	8002246 <_free_r+0xe6>
 80022ee:	e9c5 0004 	strd	r0, r0, [r5, #16]
 80022f2:	e9c0 cc02 	strd	ip, ip, [r0, #8]
 80022f6:	6044      	str	r4, [r0, #4]
 80022f8:	50c3      	str	r3, [r0, r3]
 80022fa:	e77c      	b.n	80021f6 <_free_r+0x96>
 80022fc:	686b      	ldr	r3, [r5, #4]
 80022fe:	1089      	asrs	r1, r1, #2
 8002300:	2701      	movs	r7, #1
 8002302:	fa07 f101 	lsl.w	r1, r7, r1
 8002306:	4319      	orrs	r1, r3
 8002308:	6069      	str	r1, [r5, #4]
 800230a:	e7aa      	b.n	8002262 <_free_r+0x102>
 800230c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8002310:	d806      	bhi.n	8002320 <_free_r+0x1c0>
 8002312:	0bda      	lsrs	r2, r3, #15
 8002314:	f102 0778 	add.w	r7, r2, #120	; 0x78
 8002318:	00ff      	lsls	r7, r7, #3
 800231a:	f102 0177 	add.w	r1, r2, #119	; 0x77
 800231e:	e792      	b.n	8002246 <_free_r+0xe6>
 8002320:	f240 5154 	movw	r1, #1364	; 0x554
 8002324:	428a      	cmp	r2, r1
 8002326:	d806      	bhi.n	8002336 <_free_r+0x1d6>
 8002328:	0c9a      	lsrs	r2, r3, #18
 800232a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 800232e:	00ff      	lsls	r7, r7, #3
 8002330:	f102 017c 	add.w	r1, r2, #124	; 0x7c
 8002334:	e787      	b.n	8002246 <_free_r+0xe6>
 8002336:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
 800233a:	217e      	movs	r1, #126	; 0x7e
 800233c:	e783      	b.n	8002246 <_free_r+0xe6>
 800233e:	f043 0101 	orr.w	r1, r3, #1
 8002342:	6041      	str	r1, [r0, #4]
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	e756      	b.n	80021f6 <_free_r+0x96>
 8002348:	20000c30 	.word	0x20000c30
 800234c:	2000103c 	.word	0x2000103c
 8002350:	200010f0 	.word	0x200010f0

08002354 <_getpid>:
 8002354:	4b02      	ldr	r3, [pc, #8]	; (8002360 <_getpid+0xc>)
 8002356:	2258      	movs	r2, #88	; 0x58
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800235e:	4770      	bx	lr
 8002360:	200014d8 	.word	0x200014d8

08002364 <_kill>:
 8002364:	4b02      	ldr	r3, [pc, #8]	; (8002370 <_kill+0xc>)
 8002366:	2258      	movs	r2, #88	; 0x58
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800236e:	4770      	bx	lr
 8002370:	200014d8 	.word	0x200014d8

08002374 <_sbrk>:
 8002374:	4a04      	ldr	r2, [pc, #16]	; (8002388 <_sbrk+0x14>)
 8002376:	4905      	ldr	r1, [pc, #20]	; (800238c <_sbrk+0x18>)
 8002378:	6813      	ldr	r3, [r2, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	bf08      	it	eq
 800237e:	460b      	moveq	r3, r1
 8002380:	4418      	add	r0, r3
 8002382:	6010      	str	r0, [r2, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	4770      	bx	lr
 8002388:	20001124 	.word	0x20001124
 800238c:	200014dc 	.word	0x200014dc

08002390 <_exit>:
 8002390:	e7fe      	b.n	8002390 <_exit>
 8002392:	bf00      	nop
	...

080023a0 <dmaStreamAllocI.part.0.constprop.0>:
 *                      structure.
 * @retval NULL         if a/the stream is not available.
 *
 * @iclass
 */
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 80023a0:	b4f0      	push	{r4, r5, r6, r7}
    return NULL;
  }

  for (i = startid; i <= endid; i++) {
    uint32_t mask = (1U << i);
    if ((dma.allocated_mask & mask) == 0U) {
 80023a2:	4c2f      	ldr	r4, [pc, #188]	; (8002460 <dmaStreamAllocI.part.0.constprop.0+0xc0>)
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 80023a4:	4603      	mov	r3, r0
    uint32_t mask = (1U << i);
 80023a6:	2201      	movs	r2, #1
    if ((dma.allocated_mask & mask) == 0U) {
 80023a8:	6820      	ldr	r0, [r4, #0]
    uint32_t mask = (1U << i);
 80023aa:	409a      	lsls	r2, r3
    if ((dma.allocated_mask & mask) == 0U) {
 80023ac:	4202      	tst	r2, r0

      return dmastp;
    }
  }

  return NULL;
 80023ae:	bf18      	it	ne
 80023b0:	2000      	movne	r0, #0
    if ((dma.allocated_mask & mask) == 0U) {
 80023b2:	d001      	beq.n	80023b8 <dmaStreamAllocI.part.0.constprop.0+0x18>
}
 80023b4:	bcf0      	pop	{r4, r5, r6, r7}
 80023b6:	4770      	bx	lr
      dma.streams[i].func  = func;
 80023b8:	eb04 05c3 	add.w	r5, r4, r3, lsl #3
      dma.allocated_mask  |= mask;
 80023bc:	4310      	orrs	r0, r2
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 80023be:	4e29      	ldr	r6, [pc, #164]	; (8002464 <dmaStreamAllocI.part.0.constprop.0+0xc4>)
      dma.allocated_mask  |= mask;
 80023c0:	6020      	str	r0, [r4, #0]
      if ((STM32_DMA1_STREAMS_MASK & mask) != 0U) {
 80023c2:	f012 0fff 	tst.w	r2, #255	; 0xff
      dma.streams[i].param = param;
 80023c6:	4c28      	ldr	r4, [pc, #160]	; (8002468 <dmaStreamAllocI.part.0.constprop.0+0xc8>)
 80023c8:	60ac      	str	r4, [r5, #8]
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 80023ca:	eb03 0043 	add.w	r0, r3, r3, lsl #1
      dma.streams[i].func  = func;
 80023ce:	6069      	str	r1, [r5, #4]
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 80023d0:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 80023d4:	ea4f 0443 	mov.w	r4, r3, lsl #1
      if ((STM32_DMA1_STREAMS_MASK & mask) != 0U) {
 80023d8:	d136      	bne.n	8002448 <dmaStreamAllocI.part.0.constprop.0+0xa8>
        rccEnableDMA2(true);
 80023da:	4a24      	ldr	r2, [pc, #144]	; (800246c <dmaStreamAllocI.part.0.constprop.0+0xcc>)
 80023dc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80023de:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 80023e2:	6311      	str	r1, [r2, #48]	; 0x30
 80023e4:	6d15      	ldr	r5, [r2, #80]	; 0x50
      dmaStreamDisable(dmastp);
 80023e6:	18e1      	adds	r1, r4, r3
        rccEnableDMA2(true);
 80023e8:	f445 0580 	orr.w	r5, r5, #4194304	; 0x400000
      dmaStreamDisable(dmastp);
 80023ec:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
        rccEnableDMA2(true);
 80023f0:	6515      	str	r5, [r2, #80]	; 0x50
 80023f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
      dmaStreamDisable(dmastp);
 80023f4:	680a      	ldr	r2, [r1, #0]
 80023f6:	f022 021f 	bic.w	r2, r2, #31
 80023fa:	600a      	str	r2, [r1, #0]
 80023fc:	680a      	ldr	r2, [r1, #0]
 80023fe:	f012 0201 	ands.w	r2, r2, #1
 8002402:	d1fb      	bne.n	80023fc <dmaStreamAllocI.part.0.constprop.0+0x5c>
 8002404:	4423      	add	r3, r4
 8002406:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800240a:	253d      	movs	r5, #61	; 0x3d
        nvicEnableVector(dmastp->vector, priority);
 800240c:	7adc      	ldrb	r4, [r3, #11]
      dmaStreamDisable(dmastp);
 800240e:	7a5e      	ldrb	r6, [r3, #9]
 8002410:	685f      	ldr	r7, [r3, #4]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002412:	0963      	lsrs	r3, r4, #5
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	40b5      	lsls	r5, r6
 8002418:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800241c:	f104 4660 	add.w	r6, r4, #3758096384	; 0xe0000000
 8002420:	603d      	str	r5, [r7, #0]
 8002422:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002426:	2501      	movs	r5, #1
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002428:	f506 4661 	add.w	r6, r6, #57600	; 0xe100
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800242c:	f004 041f 	and.w	r4, r4, #31
      dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 8002430:	600a      	str	r2, [r1, #0]
 8002432:	fa05 f404 	lsl.w	r4, r5, r4
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002436:	22a0      	movs	r2, #160	; 0xa0
      dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8002438:	2521      	movs	r5, #33	; 0x21
 800243a:	614d      	str	r5, [r1, #20]
 800243c:	f886 2300 	strb.w	r2, [r6, #768]	; 0x300
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002440:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002444:	601c      	str	r4, [r3, #0]
 8002446:	e7b5      	b.n	80023b4 <dmaStreamAllocI.part.0.constprop.0+0x14>
        rccEnableDMA1(true);
 8002448:	4a08      	ldr	r2, [pc, #32]	; (800246c <dmaStreamAllocI.part.0.constprop.0+0xcc>)
 800244a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800244c:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8002450:	6311      	str	r1, [r2, #48]	; 0x30
 8002452:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8002454:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8002458:	6511      	str	r1, [r2, #80]	; 0x50
 800245a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800245c:	e7bd      	b.n	80023da <dmaStreamAllocI.part.0.constprop.0+0x3a>
 800245e:	bf00      	nop
 8002460:	2000144c 	.word	0x2000144c
 8002464:	08006118 	.word	0x08006118
 8002468:	200011a4 	.word	0x200011a4
 800246c:	40023800 	.word	0x40023800

08002470 <_pal_lld_setgroupmode.constprop.0>:
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
 8002470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8002474:	2601      	movs	r6, #1
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
 8002476:	46b6      	mov	lr, r6
  uint32_t bit     = 0;
 8002478:	2300      	movs	r3, #0
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 800247a:	f04f 0c0f 	mov.w	ip, #15
      m2 = 3 << (bit * 2);
 800247e:	2703      	movs	r7, #3
 8002480:	e007      	b.n	8002492 <_pal_lld_setgroupmode.constprop.0+0x22>
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8002482:	6a04      	ldr	r4, [r0, #32]
 8002484:	ea24 0202 	bic.w	r2, r4, r2
 8002488:	6202      	str	r2, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 800248a:	0849      	lsrs	r1, r1, #1
 800248c:	d027      	beq.n	80024de <_pal_lld_setgroupmode.constprop.0+0x6e>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
 800248e:	00b6      	lsls	r6, r6, #2
    bit++;
 8002490:	3301      	adds	r3, #1
      altrmask = altr << ((bit & 7) * 4);
 8002492:	f003 0207 	and.w	r2, r3, #7
      m2 = 3 << (bit * 2);
 8002496:	005c      	lsls	r4, r3, #1
      altrmask = altr << ((bit & 7) * 4);
 8002498:	0092      	lsls	r2, r2, #2
    if ((mask & 1) != 0) {
 800249a:	f011 0f01 	tst.w	r1, #1
      m1 = 1 << bit;
 800249e:	fa0e f803 	lsl.w	r8, lr, r3
      m2 = 3 << (bit * 2);
 80024a2:	fa07 f404 	lsl.w	r4, r7, r4
      m4 = 15 << ((bit & 7) * 4);
 80024a6:	fa0c f202 	lsl.w	r2, ip, r2
    if ((mask & 1) != 0) {
 80024aa:	d0ee      	beq.n	800248a <_pal_lld_setgroupmode.constprop.0+0x1a>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80024ac:	6845      	ldr	r5, [r0, #4]
 80024ae:	ea25 0508 	bic.w	r5, r5, r8
 80024b2:	6045      	str	r5, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80024b4:	6885      	ldr	r5, [r0, #8]
 80024b6:	ea25 0504 	bic.w	r5, r5, r4
 80024ba:	6085      	str	r5, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80024bc:	68c5      	ldr	r5, [r0, #12]
 80024be:	ea25 0504 	bic.w	r5, r5, r4
 80024c2:	60c5      	str	r5, [r0, #12]
        port->MODER   = (port->MODER & ~m2) | moder;
 80024c4:	6805      	ldr	r5, [r0, #0]
 80024c6:	ea25 0404 	bic.w	r4, r5, r4
 80024ca:	4334      	orrs	r4, r6
        if (bit < 8)
 80024cc:	2b07      	cmp	r3, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 80024ce:	6004      	str	r4, [r0, #0]
        if (bit < 8)
 80024d0:	d9d7      	bls.n	8002482 <_pal_lld_setgroupmode.constprop.0+0x12>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80024d2:	6a44      	ldr	r4, [r0, #36]	; 0x24
    if (!mask)
 80024d4:	0849      	lsrs	r1, r1, #1
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80024d6:	ea24 0202 	bic.w	r2, r4, r2
 80024da:	6242      	str	r2, [r0, #36]	; 0x24
    if (!mask)
 80024dc:	d1d7      	bne.n	800248e <_pal_lld_setgroupmode.constprop.0+0x1e>
  }
}
 80024de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024e2:	bf00      	nop
	...

080024f0 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh.constprop.0>:
  
  /* Reset the structure used to send the command to the L6470 Daisy Chain through the SPI */
  uint8_t i = 0;
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 80024f0:	4b50      	ldr	r3, [pc, #320]	; (8002634 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh.constprop.0+0x144>)
 80024f2:	4a51      	ldr	r2, [pc, #324]	; (8002638 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh.constprop.0+0x148>)
void L6470::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 80024f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 80024f8:	2500      	movs	r5, #0
 80024fa:	e9c3 5500 	strd	r5, r5, [r3]
 80024fe:	461e      	mov	r6, r3
 8002500:	4619      	mov	r1, r3
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
      
      /* Build the others bytes to transmit (VALUE) */
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 8002502:	f04f 0c02 	mov.w	ip, #2
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 8002506:	7813      	ldrb	r3, [r2, #0]
 8002508:	69c4      	ldr	r4, [r0, #28]
 800250a:	ebc3 07c3 	rsb	r7, r3, r3, lsl #3
 800250e:	eb04 0447 	add.w	r4, r4, r7, lsl #1
 8002512:	1e5f      	subs	r7, r3, #1
 8002514:	7b24      	ldrb	r4, [r4, #12]
 8002516:	f801 4b01 	strb.w	r4, [r1], #1
 800251a:	2f08      	cmp	r7, #8
 800251c:	d818      	bhi.n	8002550 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh.constprop.0+0x60>
 800251e:	e8df f007 	tbb	[pc, r7]
 8002522:	616b      	.short	0x616b
 8002524:	1d054105 	.word	0x1d054105
 8002528:	2405      	.short	0x2405
 800252a:	4b          	.byte	0x4b
 800252b:	00          	.byte	0x00
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
      
      /* Build the others bytes to transmit (ABS_POS) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800252c:	e9d2 3701 	ldrd	r3, r7, [r2, #4]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8002530:	eb03 0ec3 	add.w	lr, r3, r3, lsl #3
 8002534:	6a03      	ldr	r3, [r0, #32]
 8002536:	449e      	add	lr, r3
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8002538:	ea4f 4817 	mov.w	r8, r7, lsr #16
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800253c:	f89e 3008 	ldrb.w	r3, [lr, #8]
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8002540:	714f      	strb	r7, [r1, #5]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8002542:	431c      	orrs	r4, r3
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8002544:	0a3f      	lsrs	r7, r7, #8
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8002546:	f801 4c01 	strb.w	r4, [r1, #-1]
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800254a:	f881 8001 	strb.w	r8, [r1, #1]
 800254e:	70cf      	strb	r7, [r1, #3]
 8002550:	3210      	adds	r2, #16
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8002552:	b10d      	cbz	r5, 8002558 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh.constprop.0+0x68>
      break;
    case L6470_GETSTATUS_ID:
      break;
    }
  }
}
 8002554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8002558:	2501      	movs	r5, #1
 800255a:	e7d4      	b.n	8002506 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh.constprop.0+0x16>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 800255c:	6853      	ldr	r3, [r2, #4]
 800255e:	714b      	strb	r3, [r1, #5]
 8002560:	0c1c      	lsrs	r4, r3, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	704c      	strb	r4, [r1, #1]
 8002566:	70cb      	strb	r3, [r1, #3]
 8002568:	e7f2      	b.n	8002550 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh.constprop.0+0x60>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 800256a:	e9d2 3701 	ldrd	r3, r7, [r2, #4]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 800256e:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8002572:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002574:	4473      	add	r3, lr
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8002576:	eb07 0ec7 	add.w	lr, r7, r7, lsl #3
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 800257a:	791b      	ldrb	r3, [r3, #4]
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 800257c:	68d7      	ldr	r7, [r2, #12]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 800257e:	ea44 04c3 	orr.w	r4, r4, r3, lsl #3
 8002582:	b2e4      	uxtb	r4, r4
 8002584:	f801 4c01 	strb.w	r4, [r1, #-1]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8002588:	6a03      	ldr	r3, [r0, #32]
 800258a:	4473      	add	r3, lr
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 800258c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8002590:	7a1b      	ldrb	r3, [r3, #8]
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 8002592:	714f      	strb	r7, [r1, #5]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8002594:	431c      	orrs	r4, r3
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 8002596:	0a3f      	lsrs	r7, r7, #8
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8002598:	f801 4c01 	strb.w	r4, [r1, #-1]
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 800259c:	f881 e001 	strb.w	lr, [r1, #1]
 80025a0:	70cf      	strb	r7, [r1, #3]
 80025a2:	e7d5      	b.n	8002550 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh.constprop.0+0x60>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 80025a4:	6857      	ldr	r7, [r2, #4]
 80025a6:	6a03      	ldr	r3, [r0, #32]
 80025a8:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
 80025ac:	441f      	add	r7, r3
 80025ae:	7a3b      	ldrb	r3, [r7, #8]
 80025b0:	431c      	orrs	r4, r3
 80025b2:	f801 4c01 	strb.w	r4, [r1, #-1]
 80025b6:	e7cb      	b.n	8002550 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh.constprop.0+0x60>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 80025b8:	e9d2 3701 	ldrd	r3, r7, [r2, #4]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 80025bc:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 80025c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80025c2:	449e      	add	lr, r3
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 80025c4:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 80025c8:	f89e 3004 	ldrb.w	r3, [lr, #4]
 80025cc:	ea44 04c3 	orr.w	r4, r4, r3, lsl #3
 80025d0:	b2e4      	uxtb	r4, r4
 80025d2:	f801 4c01 	strb.w	r4, [r1, #-1]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 80025d6:	6a03      	ldr	r3, [r0, #32]
 80025d8:	441f      	add	r7, r3
 80025da:	7a3b      	ldrb	r3, [r7, #8]
 80025dc:	431c      	orrs	r4, r3
 80025de:	f801 4c01 	strb.w	r4, [r1, #-1]
 80025e2:	e7b5      	b.n	8002550 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh.constprop.0+0x60>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 80025e4:	6857      	ldr	r7, [r2, #4]
 80025e6:	6983      	ldr	r3, [r0, #24]
 80025e8:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80025ec:	f813 3027 	ldrb.w	r3, [r3, r7, lsl #2]
 80025f0:	431c      	orrs	r4, r3
 80025f2:	f801 4c01 	strb.w	r4, [r1, #-1]
 80025f6:	e7ab      	b.n	8002550 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh.constprop.0+0x60>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 80025f8:	6857      	ldr	r7, [r2, #4]
 80025fa:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
 80025fe:	6987      	ldr	r7, [r0, #24]
 8002600:	f817 702e 	ldrb.w	r7, [r7, lr, lsl #2]
 8002604:	433c      	orrs	r4, r7
 8002606:	f801 4c01 	strb.w	r4, [r1, #-1]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 800260a:	6984      	ldr	r4, [r0, #24]
 800260c:	eb04 048e 	add.w	r4, r4, lr, lsl #2
 8002610:	7ba7      	ldrb	r7, [r4, #14]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8002612:	2f00      	cmp	r7, #0
 8002614:	d09c      	beq.n	8002550 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh.constprop.0+0x60>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 8002616:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800261a:	1afc      	subs	r4, r7, r3
 800261c:	fb1c 5e03 	smlabb	lr, ip, r3, r5
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8002620:	3301      	adds	r3, #1
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 8002622:	00e4      	lsls	r4, r4, #3
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8002624:	b2db      	uxtb	r3, r3
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 8002626:	fa28 f404 	lsr.w	r4, r8, r4
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 800262a:	429f      	cmp	r7, r3
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 800262c:	f806 400e 	strb.w	r4, [r6, lr]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8002630:	d2f3      	bcs.n	800261a <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh.constprop.0+0x12a>
 8002632:	e78d      	b.n	8002550 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh.constprop.0+0x60>
 8002634:	20001200 	.word	0x20001200
 8002638:	200011d4 	.word	0x200011d4
 800263c:	00000000 	.word	0x00000000

08002640 <_ZN5L647023L6470_Position_2_AbsPosEl.constprop.0>:
  * @param  Position    The position as signed number.
  * @retval AbsPos      The absolute position in the range from [-(2^21)] to [+(2^21)-1].
  */
uint32_t L6470::L6470_Position_2_AbsPos(int32_t Position)
{
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 8002640:	f5b0 1f00 	cmp.w	r0, #2097152	; 0x200000
 8002644:	d307      	bcc.n	8002656 <_ZN5L647023L6470_Position_2_AbsPosEl.constprop.0+0x16>
    return Position;
  else
  {
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 8002646:	f510 1f00 	cmn.w	r0, #2097152	; 0x200000
 800264a:	d302      	bcc.n	8002652 <_ZN5L647023L6470_Position_2_AbsPosEl.constprop.0+0x12>
      return (Position + (L6470_POSITION_RANGE + 1));
 800264c:	f500 0080 	add.w	r0, r0, #4194304	; 0x400000
 8002650:	4770      	bx	lr
    else
      return (L6470_POSITION_RANGE + 1);        // OVF
 8002652:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  }
}
 8002656:	4770      	bx	lr
	...

08002660 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 8002660:	b430      	push	{r4, r5}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002662:	2320      	movs	r3, #32
 8002664:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8002668:	4c0b      	ldr	r4, [pc, #44]	; (8002698 <chCoreAllocFromTop+0x38>)
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 800266a:	e9d4 3500 	ldrd	r3, r5, [r4]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 800266e:	4249      	negs	r1, r1
 8002670:	1a28      	subs	r0, r5, r0
 8002672:	4008      	ands	r0, r1
  prev = p - offset;
 8002674:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8002676:	429a      	cmp	r2, r3
 8002678:	d307      	bcc.n	800268a <chCoreAllocFromTop+0x2a>
 800267a:	4295      	cmp	r5, r2
 800267c:	d305      	bcc.n	800268a <chCoreAllocFromTop+0x2a>
  ch_memcore.topmem = prev;
 800267e:	6062      	str	r2, [r4, #4]
 8002680:	2300      	movs	r3, #0
 8002682:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 8002686:	bc30      	pop	{r4, r5}
 8002688:	4770      	bx	lr
    return NULL;
 800268a:	2000      	movs	r0, #0
 800268c:	2300      	movs	r3, #0
 800268e:	f383 8811 	msr	BASEPRI, r3
}
 8002692:	bc30      	pop	{r4, r5}
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	20001428 	.word	0x20001428
 800269c:	00000000 	.word	0x00000000

080026a0 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 80026a0:	4a02      	ldr	r2, [pc, #8]	; (80026ac <notify2+0xc>)
 80026a2:	68d3      	ldr	r3, [r2, #12]
 80026a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026a8:	60d3      	str	r3, [r2, #12]
}
 80026aa:	4770      	bx	lr
 80026ac:	40004400 	.word	0x40004400

080026b0 <_ZN5L647020prepare_reset_deviceEv>:
      * @brief  Preparing the command to reset the device to power-up conditions.
      * @param  None.
      * @retval None.
      * @note   The command will be sent by issuing "perform_action()".
      */
    virtual void prepare_reset_device(void)
 80026b0:	b430      	push	{r4, r5}
  if(!L6470_DaisyChain_HalfPrepared)
 80026b2:	490e      	ldr	r1, [pc, #56]	; (80026ec <_ZN5L647020prepare_reset_deviceEv+0x3c>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80026b4:	4a0e      	ldr	r2, [pc, #56]	; (80026f0 <_ZN5L647020prepare_reset_deviceEv+0x40>)
  if(!L6470_DaisyChain_HalfPrepared)
 80026b6:	780b      	ldrb	r3, [r1, #0]
 80026b8:	b94b      	cbnz	r3, 80026ce <_ZN5L647020prepare_reset_deviceEv+0x1e>
    (pL6470_AppCmdPkg+id)->p2=0;
 80026ba:	e9c2 3301 	strd	r3, r3, [r2, #4]
 80026be:	e9c2 3305 	strd	r3, r3, [r2, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 80026c2:	2401      	movs	r4, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80026c4:	7013      	strb	r3, [r2, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 80026c6:	60d3      	str	r3, [r2, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80026c8:	7413      	strb	r3, [r2, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 80026ca:	61d3      	str	r3, [r2, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 80026cc:	700c      	strb	r4, [r1, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80026ce:	7d43      	ldrb	r3, [r0, #21]
 80026d0:	011c      	lsls	r4, r3, #4
 80026d2:	250d      	movs	r5, #13
 80026d4:	5515      	strb	r5, [r2, r4]
 80026d6:	eb02 1303 	add.w	r3, r2, r3, lsl #4
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 80026da:	2100      	movs	r1, #0
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 80026dc:	e9c3 1101 	strd	r1, r1, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 80026e0:	60d9      	str	r1, [r3, #12]
    {
        L6470_PrepareResetDevice();
        prepared_action = PREPARED_NO_ACTION;
    }
 80026e2:	bc30      	pop	{r4, r5}
        prepared_action = PREPARED_NO_ACTION;
 80026e4:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    }
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	20001208 	.word	0x20001208
 80026f0:	200011d4 	.word	0x200011d4
	...

08002700 <_ZN5L647018prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void prepare_release_sw(eL6470_ActId_t action, direction_t direction)
 8002700:	b4f0      	push	{r4, r5, r6, r7}
  if(!L6470_DaisyChain_HalfPrepared)
 8002702:	4d10      	ldr	r5, [pc, #64]	; (8002744 <_ZN5L647018prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x44>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002704:	4c10      	ldr	r4, [pc, #64]	; (8002748 <_ZN5L647018prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x48>)
  if(!L6470_DaisyChain_HalfPrepared)
 8002706:	782b      	ldrb	r3, [r5, #0]
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8002708:	f1a2 0201 	sub.w	r2, r2, #1
 800270c:	fab2 f282 	clz	r2, r2
 8002710:	0952      	lsrs	r2, r2, #5
 8002712:	b94b      	cbnz	r3, 8002728 <_ZN5L647018prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x28>
    (pL6470_AppCmdPkg+id)->p2=0;
 8002714:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8002718:	e9c4 3305 	strd	r3, r3, [r4, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800271c:	2601      	movs	r6, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 800271e:	7023      	strb	r3, [r4, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 8002720:	60e3      	str	r3, [r4, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002722:	7423      	strb	r3, [r4, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 8002724:	61e3      	str	r3, [r4, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8002726:	702e      	strb	r6, [r5, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8002728:	7d43      	ldrb	r3, [r0, #21]
 800272a:	011e      	lsls	r6, r3, #4
 800272c:	eb04 1303 	add.w	r3, r4, r3, lsl #4
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8002730:	2500      	movs	r5, #0
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8002732:	2709      	movs	r7, #9
 8002734:	55a7      	strb	r7, [r4, r6]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8002736:	60dd      	str	r5, [r3, #12]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8002738:	e9c3 1201 	strd	r1, r2, [r3, #4]
        prepared_action = PREPARED_NO_ACTION;
 800273c:	f880 5060 	strb.w	r5, [r0, #96]	; 0x60
    }
 8002740:	bcf0      	pop	{r4, r5, r6, r7}
 8002742:	4770      	bx	lr
 8002744:	20001208 	.word	0x20001208
 8002748:	200011d4 	.word	0x200011d4
 800274c:	00000000 	.word	0x00000000

08002750 <_ZN5L647018prepare_step_clockEN12StepperMotor11direction_tE>:
    virtual void prepare_step_clock(direction_t direction)
 8002750:	b470      	push	{r4, r5, r6}
  if(!L6470_DaisyChain_HalfPrepared)
 8002752:	4c10      	ldr	r4, [pc, #64]	; (8002794 <_ZN5L647018prepare_step_clockEN12StepperMotor11direction_tE+0x44>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002754:	4a10      	ldr	r2, [pc, #64]	; (8002798 <_ZN5L647018prepare_step_clockEN12StepperMotor11direction_tE+0x48>)
  if(!L6470_DaisyChain_HalfPrepared)
 8002756:	7823      	ldrb	r3, [r4, #0]
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8002758:	f1a1 0101 	sub.w	r1, r1, #1
 800275c:	fab1 f181 	clz	r1, r1
 8002760:	0949      	lsrs	r1, r1, #5
 8002762:	b94b      	cbnz	r3, 8002778 <_ZN5L647018prepare_step_clockEN12StepperMotor11direction_tE+0x28>
    (pL6470_AppCmdPkg+id)->p2=0;
 8002764:	e9c2 3301 	strd	r3, r3, [r2, #4]
 8002768:	e9c2 3305 	strd	r3, r3, [r2, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800276c:	2501      	movs	r5, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 800276e:	7013      	strb	r3, [r2, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 8002770:	60d3      	str	r3, [r2, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002772:	7413      	strb	r3, [r2, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 8002774:	61d3      	str	r3, [r2, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8002776:	7025      	strb	r5, [r4, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8002778:	7d43      	ldrb	r3, [r0, #21]
 800277a:	011d      	lsls	r5, r3, #4
 800277c:	2604      	movs	r6, #4
 800277e:	5556      	strb	r6, [r2, r5]
 8002780:	eb02 1303 	add.w	r3, r2, r3, lsl #4
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8002784:	2400      	movs	r4, #0
 8002786:	e9c3 1401 	strd	r1, r4, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 800278a:	60dc      	str	r4, [r3, #12]
        prepared_action = PREPARED_NO_ACTION;
 800278c:	f880 4060 	strb.w	r4, [r0, #96]	; 0x60
    }
 8002790:	bc70      	pop	{r4, r5, r6}
 8002792:	4770      	bx	lr
 8002794:	20001208 	.word	0x20001208
 8002798:	200011d4 	.word	0x200011d4
 800279c:	00000000 	.word	0x00000000

080027a0 <_ZN5L647016prepare_hard_hizEv>:
    virtual void prepare_hard_hiz(void)
 80027a0:	b430      	push	{r4, r5}
  if(!L6470_DaisyChain_HalfPrepared)
 80027a2:	490e      	ldr	r1, [pc, #56]	; (80027dc <_ZN5L647016prepare_hard_hizEv+0x3c>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80027a4:	4a0e      	ldr	r2, [pc, #56]	; (80027e0 <_ZN5L647016prepare_hard_hizEv+0x40>)
  if(!L6470_DaisyChain_HalfPrepared)
 80027a6:	780b      	ldrb	r3, [r1, #0]
 80027a8:	b94b      	cbnz	r3, 80027be <_ZN5L647016prepare_hard_hizEv+0x1e>
    (pL6470_AppCmdPkg+id)->p2=0;
 80027aa:	e9c2 3301 	strd	r3, r3, [r2, #4]
 80027ae:	e9c2 3305 	strd	r3, r3, [r2, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 80027b2:	2401      	movs	r4, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80027b4:	7013      	strb	r3, [r2, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 80027b6:	60d3      	str	r3, [r2, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80027b8:	7413      	strb	r3, [r2, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 80027ba:	61d3      	str	r3, [r2, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 80027bc:	700c      	strb	r4, [r1, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80027be:	7d43      	ldrb	r3, [r0, #21]
 80027c0:	011c      	lsls	r4, r3, #4
 80027c2:	2511      	movs	r5, #17
 80027c4:	5515      	strb	r5, [r2, r4]
 80027c6:	eb02 1303 	add.w	r3, r2, r3, lsl #4
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 80027ca:	2100      	movs	r1, #0
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 80027cc:	e9c3 1101 	strd	r1, r1, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 80027d0:	60d9      	str	r1, [r3, #12]
    }
 80027d2:	bc30      	pop	{r4, r5}
        prepared_action = PREPARED_NO_ACTION;
 80027d4:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    }
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	20001208 	.word	0x20001208
 80027e0:	200011d4 	.word	0x200011d4
	...

080027f0 <_ZN5L647016prepare_soft_hizEv>:
    virtual void prepare_soft_hiz(void)
 80027f0:	b430      	push	{r4, r5}
  if(!L6470_DaisyChain_HalfPrepared)
 80027f2:	490e      	ldr	r1, [pc, #56]	; (800282c <_ZN5L647016prepare_soft_hizEv+0x3c>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80027f4:	4a0e      	ldr	r2, [pc, #56]	; (8002830 <_ZN5L647016prepare_soft_hizEv+0x40>)
  if(!L6470_DaisyChain_HalfPrepared)
 80027f6:	780b      	ldrb	r3, [r1, #0]
 80027f8:	b94b      	cbnz	r3, 800280e <_ZN5L647016prepare_soft_hizEv+0x1e>
    (pL6470_AppCmdPkg+id)->p2=0;
 80027fa:	e9c2 3301 	strd	r3, r3, [r2, #4]
 80027fe:	e9c2 3305 	strd	r3, r3, [r2, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8002802:	2401      	movs	r4, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002804:	7013      	strb	r3, [r2, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 8002806:	60d3      	str	r3, [r2, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002808:	7413      	strb	r3, [r2, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 800280a:	61d3      	str	r3, [r2, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800280c:	700c      	strb	r4, [r1, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 800280e:	7d43      	ldrb	r3, [r0, #21]
 8002810:	011c      	lsls	r4, r3, #4
 8002812:	2510      	movs	r5, #16
 8002814:	5515      	strb	r5, [r2, r4]
 8002816:	eb02 1303 	add.w	r3, r2, r3, lsl #4
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 800281a:	2100      	movs	r1, #0
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 800281c:	e9c3 1101 	strd	r1, r1, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8002820:	60d9      	str	r1, [r3, #12]
    }
 8002822:	bc30      	pop	{r4, r5}
        prepared_action = PREPARED_NO_ACTION;
 8002824:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    }
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	20001208 	.word	0x20001208
 8002830:	200011d4 	.word	0x200011d4
	...

08002840 <_ZN5L647017prepare_hard_stopEv>:
    virtual void prepare_hard_stop(void)
 8002840:	b430      	push	{r4, r5}
  if(!L6470_DaisyChain_HalfPrepared)
 8002842:	490e      	ldr	r1, [pc, #56]	; (800287c <_ZN5L647017prepare_hard_stopEv+0x3c>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002844:	4a0e      	ldr	r2, [pc, #56]	; (8002880 <_ZN5L647017prepare_hard_stopEv+0x40>)
  if(!L6470_DaisyChain_HalfPrepared)
 8002846:	780b      	ldrb	r3, [r1, #0]
 8002848:	b94b      	cbnz	r3, 800285e <_ZN5L647017prepare_hard_stopEv+0x1e>
    (pL6470_AppCmdPkg+id)->p2=0;
 800284a:	e9c2 3301 	strd	r3, r3, [r2, #4]
 800284e:	e9c2 3305 	strd	r3, r3, [r2, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8002852:	2401      	movs	r4, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002854:	7013      	strb	r3, [r2, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 8002856:	60d3      	str	r3, [r2, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002858:	7413      	strb	r3, [r2, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 800285a:	61d3      	str	r3, [r2, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800285c:	700c      	strb	r4, [r1, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 800285e:	7d43      	ldrb	r3, [r0, #21]
 8002860:	011c      	lsls	r4, r3, #4
 8002862:	250f      	movs	r5, #15
 8002864:	5515      	strb	r5, [r2, r4]
 8002866:	eb02 1303 	add.w	r3, r2, r3, lsl #4
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 800286a:	2100      	movs	r1, #0
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 800286c:	e9c3 1101 	strd	r1, r1, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8002870:	60d9      	str	r1, [r3, #12]
    }
 8002872:	bc30      	pop	{r4, r5}
        prepared_action = PREPARED_NO_ACTION;
 8002874:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    }
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	20001208 	.word	0x20001208
 8002880:	200011d4 	.word	0x200011d4
	...

08002890 <_ZN5L647017prepare_soft_stopEv>:
    virtual void prepare_soft_stop(void)
 8002890:	b430      	push	{r4, r5}
  if(!L6470_DaisyChain_HalfPrepared)
 8002892:	490e      	ldr	r1, [pc, #56]	; (80028cc <_ZN5L647017prepare_soft_stopEv+0x3c>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002894:	4a0e      	ldr	r2, [pc, #56]	; (80028d0 <_ZN5L647017prepare_soft_stopEv+0x40>)
  if(!L6470_DaisyChain_HalfPrepared)
 8002896:	780b      	ldrb	r3, [r1, #0]
 8002898:	b94b      	cbnz	r3, 80028ae <_ZN5L647017prepare_soft_stopEv+0x1e>
    (pL6470_AppCmdPkg+id)->p2=0;
 800289a:	e9c2 3301 	strd	r3, r3, [r2, #4]
 800289e:	e9c2 3305 	strd	r3, r3, [r2, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 80028a2:	2401      	movs	r4, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80028a4:	7013      	strb	r3, [r2, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 80028a6:	60d3      	str	r3, [r2, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80028a8:	7413      	strb	r3, [r2, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 80028aa:	61d3      	str	r3, [r2, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 80028ac:	700c      	strb	r4, [r1, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80028ae:	7d43      	ldrb	r3, [r0, #21]
 80028b0:	011c      	lsls	r4, r3, #4
 80028b2:	250e      	movs	r5, #14
 80028b4:	5515      	strb	r5, [r2, r4]
 80028b6:	eb02 1303 	add.w	r3, r2, r3, lsl #4
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 80028ba:	2100      	movs	r1, #0
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 80028bc:	e9c3 1101 	strd	r1, r1, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 80028c0:	60d9      	str	r1, [r3, #12]
    }
 80028c2:	bc30      	pop	{r4, r5}
        prepared_action = PREPARED_NO_ACTION;
 80028c4:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    }
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	20001208 	.word	0x20001208
 80028d0:	200011d4 	.word	0x200011d4
	...

080028e0 <_ZN5L647012prepare_moveEN12StepperMotor11direction_tEj>:
    virtual void prepare_move(direction_t direction, unsigned int steps)
 80028e0:	b4f0      	push	{r4, r5, r6, r7}
  if(!L6470_DaisyChain_HalfPrepared)
 80028e2:	4d10      	ldr	r5, [pc, #64]	; (8002924 <_ZN5L647012prepare_moveEN12StepperMotor11direction_tEj+0x44>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80028e4:	4c10      	ldr	r4, [pc, #64]	; (8002928 <_ZN5L647012prepare_moveEN12StepperMotor11direction_tEj+0x48>)
  if(!L6470_DaisyChain_HalfPrepared)
 80028e6:	782b      	ldrb	r3, [r5, #0]
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 80028e8:	f1a1 0101 	sub.w	r1, r1, #1
 80028ec:	fab1 f181 	clz	r1, r1
 80028f0:	0949      	lsrs	r1, r1, #5
 80028f2:	b94b      	cbnz	r3, 8002908 <_ZN5L647012prepare_moveEN12StepperMotor11direction_tEj+0x28>
    (pL6470_AppCmdPkg+id)->p2=0;
 80028f4:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80028f8:	e9c4 3305 	strd	r3, r3, [r4, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 80028fc:	2601      	movs	r6, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80028fe:	7023      	strb	r3, [r4, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 8002900:	60e3      	str	r3, [r4, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002902:	7423      	strb	r3, [r4, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 8002904:	61e3      	str	r3, [r4, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8002906:	702e      	strb	r6, [r5, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8002908:	7d43      	ldrb	r3, [r0, #21]
 800290a:	011e      	lsls	r6, r3, #4
 800290c:	eb04 1303 	add.w	r3, r4, r3, lsl #4
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8002910:	2500      	movs	r5, #0
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8002912:	2705      	movs	r7, #5
 8002914:	55a7      	strb	r7, [r4, r6]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8002916:	60dd      	str	r5, [r3, #12]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8002918:	e9c3 1201 	strd	r1, r2, [r3, #4]
        prepared_action = PREPARED_NO_ACTION;
 800291c:	f880 5060 	strb.w	r5, [r0, #96]	; 0x60
    }
 8002920:	bcf0      	pop	{r4, r5, r6, r7}
 8002922:	4770      	bx	lr
 8002924:	20001208 	.word	0x20001208
 8002928:	200011d4 	.word	0x200011d4
 800292c:	00000000 	.word	0x00000000

08002930 <_ZN5L647016prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, direction_t direction, unsigned int speed)
 8002930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002932:	4606      	mov	r6, r0
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8002934:	4618      	mov	r0, r3
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, direction_t direction, unsigned int speed)
 8002936:	460d      	mov	r5, r1
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8002938:	f1a2 0401 	sub.w	r4, r2, #1
 800293c:	f7fd fd8c 	bl	8000458 <__aeabi_ui2f>
 8002940:	fab4 f484 	clz	r4, r4
  * @param  step/s      The speed as step/s.
  * @retval Speed       The SPEED register value.
  */
uint32_t L6470::L6470_Step_s_2_Speed(float Step_s)
{
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 8002944:	4914      	ldr	r1, [pc, #80]	; (8002998 <_ZN5L647016prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x68>)
 8002946:	0964      	lsrs	r4, r4, #5
 8002948:	4607      	mov	r7, r0
 800294a:	f7fd ff85 	bl	8000858 <__aeabi_fcmple>
 800294e:	b128      	cbz	r0, 800295c <_ZN5L647016prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x2c>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 8002950:	4912      	ldr	r1, [pc, #72]	; (800299c <_ZN5L647016prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x6c>)
 8002952:	4638      	mov	r0, r7
 8002954:	f7fd fe8c 	bl	8000670 <__aeabi_fdiv>
 8002958:	f7fd ffc2 	bl	80008e0 <__aeabi_f2uiz>
  if(!L6470_DaisyChain_HalfPrepared)
 800295c:	4910      	ldr	r1, [pc, #64]	; (80029a0 <_ZN5L647016prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x70>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 800295e:	4a11      	ldr	r2, [pc, #68]	; (80029a4 <_ZN5L647016prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x74>)
  if(!L6470_DaisyChain_HalfPrepared)
 8002960:	780b      	ldrb	r3, [r1, #0]
 8002962:	b94b      	cbnz	r3, 8002978 <_ZN5L647016prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x48>
    (pL6470_AppCmdPkg+id)->p2=0;
 8002964:	e9c2 3301 	strd	r3, r3, [r2, #4]
 8002968:	e9c2 3305 	strd	r3, r3, [r2, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800296c:	2701      	movs	r7, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 800296e:	7013      	strb	r3, [r2, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 8002970:	60d3      	str	r3, [r2, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002972:	7413      	strb	r3, [r2, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 8002974:	61d3      	str	r3, [r2, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8002976:	700f      	strb	r7, [r1, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8002978:	7d73      	ldrb	r3, [r6, #21]
 800297a:	011f      	lsls	r7, r3, #4
 800297c:	f04f 0c08 	mov.w	ip, #8
 8002980:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8002984:	f802 c007 	strb.w	ip, [r2, r7]
        prepared_action = PREPARED_NO_ACTION;
 8002988:	2100      	movs	r1, #0
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 800298a:	e9c3 5401 	strd	r5, r4, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 800298e:	60d8      	str	r0, [r3, #12]
 8002990:	f886 1060 	strb.w	r1, [r6, #96]	; 0x60
    }
 8002994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002996:	bf00      	nop
 8002998:	4674241b 	.word	0x4674241b
 800299c:	3c74242a 	.word	0x3c74242a
 80029a0:	20001208 	.word	0x20001208
 80029a4:	200011d4 	.word	0x200011d4
	...

080029b0 <_ZN5L647015prepare_go_markEv>:
    virtual void prepare_go_mark(void)
 80029b0:	b430      	push	{r4, r5}
  if(!L6470_DaisyChain_HalfPrepared)
 80029b2:	490e      	ldr	r1, [pc, #56]	; (80029ec <_ZN5L647015prepare_go_markEv+0x3c>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80029b4:	4a0e      	ldr	r2, [pc, #56]	; (80029f0 <_ZN5L647015prepare_go_markEv+0x40>)
  if(!L6470_DaisyChain_HalfPrepared)
 80029b6:	780b      	ldrb	r3, [r1, #0]
 80029b8:	b94b      	cbnz	r3, 80029ce <_ZN5L647015prepare_go_markEv+0x1e>
    (pL6470_AppCmdPkg+id)->p2=0;
 80029ba:	e9c2 3301 	strd	r3, r3, [r2, #4]
 80029be:	e9c2 3305 	strd	r3, r3, [r2, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 80029c2:	2401      	movs	r4, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80029c4:	7013      	strb	r3, [r2, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 80029c6:	60d3      	str	r3, [r2, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80029c8:	7413      	strb	r3, [r2, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 80029ca:	61d3      	str	r3, [r2, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 80029cc:	700c      	strb	r4, [r1, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80029ce:	7d43      	ldrb	r3, [r0, #21]
 80029d0:	011c      	lsls	r4, r3, #4
 80029d2:	250b      	movs	r5, #11
 80029d4:	5515      	strb	r5, [r2, r4]
 80029d6:	eb02 1303 	add.w	r3, r2, r3, lsl #4
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 80029da:	2100      	movs	r1, #0
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 80029dc:	e9c3 1101 	strd	r1, r1, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 80029e0:	60d9      	str	r1, [r3, #12]
    }
 80029e2:	bc30      	pop	{r4, r5}
        prepared_action = PREPARED_NO_ACTION;
 80029e4:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    }
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	20001208 	.word	0x20001208
 80029f0:	200011d4 	.word	0x200011d4
	...

08002a00 <_ZN5L647015prepare_go_homeEv>:
    virtual void prepare_go_home(void)
 8002a00:	b430      	push	{r4, r5}
  if(!L6470_DaisyChain_HalfPrepared)
 8002a02:	490e      	ldr	r1, [pc, #56]	; (8002a3c <_ZN5L647015prepare_go_homeEv+0x3c>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002a04:	4a0e      	ldr	r2, [pc, #56]	; (8002a40 <_ZN5L647015prepare_go_homeEv+0x40>)
  if(!L6470_DaisyChain_HalfPrepared)
 8002a06:	780b      	ldrb	r3, [r1, #0]
 8002a08:	b94b      	cbnz	r3, 8002a1e <_ZN5L647015prepare_go_homeEv+0x1e>
    (pL6470_AppCmdPkg+id)->p2=0;
 8002a0a:	e9c2 3301 	strd	r3, r3, [r2, #4]
 8002a0e:	e9c2 3305 	strd	r3, r3, [r2, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8002a12:	2401      	movs	r4, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002a14:	7013      	strb	r3, [r2, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 8002a16:	60d3      	str	r3, [r2, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002a18:	7413      	strb	r3, [r2, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 8002a1a:	61d3      	str	r3, [r2, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8002a1c:	700c      	strb	r4, [r1, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8002a1e:	7d43      	ldrb	r3, [r0, #21]
 8002a20:	011c      	lsls	r4, r3, #4
 8002a22:	250a      	movs	r5, #10
 8002a24:	5515      	strb	r5, [r2, r4]
 8002a26:	eb02 1303 	add.w	r3, r2, r3, lsl #4
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 8002a2a:	2100      	movs	r1, #0
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8002a2c:	e9c3 1101 	strd	r1, r1, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8002a30:	60d9      	str	r1, [r3, #12]
    }
 8002a32:	bc30      	pop	{r4, r5}
        prepared_action = PREPARED_NO_ACTION;
 8002a34:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    }
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	20001208 	.word	0x20001208
 8002a40:	200011d4 	.word	0x200011d4
	...

08002a50 <_ZN5L647013prepare_go_toEiN12StepperMotor11direction_tE>:
    virtual void prepare_go_to(signed int position, direction_t direction)
 8002a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a52:	4604      	mov	r4, r0
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8002a54:	4608      	mov	r0, r1
 8002a56:	f7ff fdf3 	bl	8002640 <_ZN5L647023L6470_Position_2_AbsPosEl.constprop.0>
  if(!L6470_DaisyChain_HalfPrepared)
 8002a5a:	4d10      	ldr	r5, [pc, #64]	; (8002a9c <_ZN5L647013prepare_go_toEiN12StepperMotor11direction_tE+0x4c>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002a5c:	4910      	ldr	r1, [pc, #64]	; (8002aa0 <_ZN5L647013prepare_go_toEiN12StepperMotor11direction_tE+0x50>)
  if(!L6470_DaisyChain_HalfPrepared)
 8002a5e:	782b      	ldrb	r3, [r5, #0]
 8002a60:	f1a2 0201 	sub.w	r2, r2, #1
 8002a64:	fab2 f282 	clz	r2, r2
 8002a68:	0952      	lsrs	r2, r2, #5
 8002a6a:	b94b      	cbnz	r3, 8002a80 <_ZN5L647013prepare_go_toEiN12StepperMotor11direction_tE+0x30>
    (pL6470_AppCmdPkg+id)->p2=0;
 8002a6c:	e9c1 3301 	strd	r3, r3, [r1, #4]
 8002a70:	e9c1 3305 	strd	r3, r3, [r1, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8002a74:	2601      	movs	r6, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002a76:	700b      	strb	r3, [r1, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 8002a78:	60cb      	str	r3, [r1, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002a7a:	740b      	strb	r3, [r1, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 8002a7c:	61cb      	str	r3, [r1, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8002a7e:	702e      	strb	r6, [r5, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8002a80:	7d63      	ldrb	r3, [r4, #21]
 8002a82:	011e      	lsls	r6, r3, #4
 8002a84:	2707      	movs	r7, #7
 8002a86:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 8002a8a:	558f      	strb	r7, [r1, r6]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8002a8c:	2500      	movs	r5, #0
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8002a8e:	e9c3 2001 	strd	r2, r0, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8002a92:	60dd      	str	r5, [r3, #12]
        prepared_action = PREPARED_NO_ACTION;
 8002a94:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
    }
 8002a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20001208 	.word	0x20001208
 8002aa0:	200011d4 	.word	0x200011d4
	...

08002ab0 <_ZN5L647013prepare_go_toEi>:
    virtual void prepare_go_to(signed int position)
 8002ab0:	b570      	push	{r4, r5, r6, lr}
  if(!L6470_DaisyChain_HalfPrepared)
 8002ab2:	4c10      	ldr	r4, [pc, #64]	; (8002af4 <_ZN5L647013prepare_go_toEi+0x44>)
 8002ab4:	4603      	mov	r3, r0
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8002ab6:	4608      	mov	r0, r1
    virtual void prepare_go_to(signed int position)
 8002ab8:	4619      	mov	r1, r3
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8002aba:	f7ff fdc1 	bl	8002640 <_ZN5L647023L6470_Position_2_AbsPosEl.constprop.0>
 8002abe:	7823      	ldrb	r3, [r4, #0]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002ac0:	4a0d      	ldr	r2, [pc, #52]	; (8002af8 <_ZN5L647013prepare_go_toEi+0x48>)
  if(!L6470_DaisyChain_HalfPrepared)
 8002ac2:	b94b      	cbnz	r3, 8002ad8 <_ZN5L647013prepare_go_toEi+0x28>
    (pL6470_AppCmdPkg+id)->p2=0;
 8002ac4:	e9c2 3301 	strd	r3, r3, [r2, #4]
 8002ac8:	e9c2 3305 	strd	r3, r3, [r2, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8002acc:	2501      	movs	r5, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002ace:	7013      	strb	r3, [r2, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 8002ad0:	60d3      	str	r3, [r2, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002ad2:	7413      	strb	r3, [r2, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 8002ad4:	61d3      	str	r3, [r2, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8002ad6:	7025      	strb	r5, [r4, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8002ad8:	7d4b      	ldrb	r3, [r1, #21]
 8002ada:	011d      	lsls	r5, r3, #4
 8002adc:	2606      	movs	r6, #6
 8002ade:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8002ae2:	5556      	strb	r6, [r2, r5]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8002ae4:	2400      	movs	r4, #0
 8002ae6:	e9c3 0401 	strd	r0, r4, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8002aea:	60dc      	str	r4, [r3, #12]
        prepared_action = PREPARED_NO_ACTION;
 8002aec:	f881 4060 	strb.w	r4, [r1, #96]	; 0x60
    }
 8002af0:	bd70      	pop	{r4, r5, r6, pc}
 8002af2:	bf00      	nop
 8002af4:	20001208 	.word	0x20001208
 8002af8:	200011d4 	.word	0x200011d4
 8002afc:	00000000 	.word	0x00000000

08002b00 <_ZN5L647016prepare_set_homeEv>:
    virtual void prepare_set_home(void)
 8002b00:	b430      	push	{r4, r5}
  if(!L6470_DaisyChain_HalfPrepared)
 8002b02:	490e      	ldr	r1, [pc, #56]	; (8002b3c <_ZN5L647016prepare_set_homeEv+0x3c>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002b04:	4a0e      	ldr	r2, [pc, #56]	; (8002b40 <_ZN5L647016prepare_set_homeEv+0x40>)
  if(!L6470_DaisyChain_HalfPrepared)
 8002b06:	780b      	ldrb	r3, [r1, #0]
 8002b08:	b94b      	cbnz	r3, 8002b1e <_ZN5L647016prepare_set_homeEv+0x1e>
    (pL6470_AppCmdPkg+id)->p2=0;
 8002b0a:	e9c2 3301 	strd	r3, r3, [r2, #4]
 8002b0e:	e9c2 3305 	strd	r3, r3, [r2, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8002b12:	2401      	movs	r4, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002b14:	7013      	strb	r3, [r2, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 8002b16:	60d3      	str	r3, [r2, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002b18:	7413      	strb	r3, [r2, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 8002b1a:	61d3      	str	r3, [r2, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8002b1c:	700c      	strb	r4, [r1, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8002b1e:	7d43      	ldrb	r3, [r0, #21]
 8002b20:	011c      	lsls	r4, r3, #4
 8002b22:	250c      	movs	r5, #12
 8002b24:	5515      	strb	r5, [r2, r4]
 8002b26:	eb02 1303 	add.w	r3, r2, r3, lsl #4
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 8002b2a:	2100      	movs	r1, #0
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8002b2c:	e9c3 1101 	strd	r1, r1, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8002b30:	60d9      	str	r1, [r3, #12]
    }
 8002b32:	bc30      	pop	{r4, r5}
        prepared_action = PREPARED_NO_ACTION;
 8002b34:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    }
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	20001208 	.word	0x20001208
 8002b40:	200011d4 	.word	0x200011d4
	...

08002b50 <_ZN5L647021prepare_get_directionEv>:
        if (!L6470_DaisyChain_HalfPrepared) {
 8002b50:	490b      	ldr	r1, [pc, #44]	; (8002b80 <_ZN5L647021prepare_get_directionEv+0x30>)
 8002b52:	780b      	ldrb	r3, [r1, #0]
 8002b54:	b11b      	cbz	r3, 8002b5e <_ZN5L647021prepare_get_directionEv+0xe>
        prepared_action = PREPARED_GET_DIRECTION;
 8002b56:	2308      	movs	r3, #8
 8002b58:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8002b5c:	4770      	bx	lr
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002b5e:	4a09      	ldr	r2, [pc, #36]	; (8002b84 <_ZN5L647021prepare_get_directionEv+0x34>)
    virtual void prepare_get_direction(void)
 8002b60:	b410      	push	{r4}
            L6470_DaisyChain_HalfPrepared = ONE_F;
 8002b62:	2401      	movs	r4, #1
 8002b64:	7013      	strb	r3, [r2, #0]
 8002b66:	7413      	strb	r3, [r2, #16]
    (pL6470_AppCmdPkg+id)->p2=0;
 8002b68:	e9c2 3301 	strd	r3, r3, [r2, #4]
 8002b6c:	e9c2 3305 	strd	r3, r3, [r2, #20]
    (pL6470_AppCmdPkg+id)->p3=0;
 8002b70:	60d3      	str	r3, [r2, #12]
 8002b72:	61d3      	str	r3, [r2, #28]
 8002b74:	700c      	strb	r4, [r1, #0]
        prepared_action = PREPARED_GET_DIRECTION;
 8002b76:	2308      	movs	r3, #8
    }
 8002b78:	bc10      	pop	{r4}
        prepared_action = PREPARED_GET_DIRECTION;
 8002b7a:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
    }
 8002b7e:	4770      	bx	lr
 8002b80:	20001208 	.word	0x20001208
 8002b84:	200011d4 	.word	0x200011d4
	...

08002b90 <_ZN5L647018prepare_get_statusEv>:
    virtual void prepare_get_status(void)
 8002b90:	b430      	push	{r4, r5}
  if(!L6470_DaisyChain_HalfPrepared)
 8002b92:	490e      	ldr	r1, [pc, #56]	; (8002bcc <_ZN5L647018prepare_get_statusEv+0x3c>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002b94:	4a0e      	ldr	r2, [pc, #56]	; (8002bd0 <_ZN5L647018prepare_get_statusEv+0x40>)
  if(!L6470_DaisyChain_HalfPrepared)
 8002b96:	780b      	ldrb	r3, [r1, #0]
 8002b98:	b94b      	cbnz	r3, 8002bae <_ZN5L647018prepare_get_statusEv+0x1e>
    (pL6470_AppCmdPkg+id)->p2=0;
 8002b9a:	e9c2 3301 	strd	r3, r3, [r2, #4]
 8002b9e:	e9c2 3305 	strd	r3, r3, [r2, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8002ba2:	2401      	movs	r4, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002ba4:	7013      	strb	r3, [r2, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 8002ba6:	60d3      	str	r3, [r2, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002ba8:	7413      	strb	r3, [r2, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 8002baa:	61d3      	str	r3, [r2, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8002bac:	700c      	strb	r4, [r1, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8002bae:	7d43      	ldrb	r3, [r0, #21]
 8002bb0:	011c      	lsls	r4, r3, #4
 8002bb2:	2512      	movs	r5, #18
 8002bb4:	5515      	strb	r5, [r2, r4]
 8002bb6:	eb02 1303 	add.w	r3, r2, r3, lsl #4
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 8002bba:	2100      	movs	r1, #0
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8002bbc:	e9c3 1101 	strd	r1, r1, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8002bc0:	60d9      	str	r1, [r3, #12]
    }
 8002bc2:	bc30      	pop	{r4, r5}
        prepared_action = PREPARED_NO_ACTION;
 8002bc4:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    }
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	20001208 	.word	0x20001208
 8002bd0:	200011d4 	.word	0x200011d4
	...

08002be0 <_ZN5L64707read_idEPh>:
    }
 8002be0:	2000      	movs	r0, #0
 8002be2:	4770      	bx	lr
	...

08002bf0 <_ZN5L647016L6470_PrepareRunE14eL6470_DirId_tm>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 8002bf0:	b470      	push	{r4, r5, r6}
  if(!L6470_DaisyChain_HalfPrepared)
 8002bf2:	4d0d      	ldr	r5, [pc, #52]	; (8002c28 <_ZN5L647016L6470_PrepareRunE14eL6470_DirId_tm+0x38>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002bf4:	4c0d      	ldr	r4, [pc, #52]	; (8002c2c <_ZN5L647016L6470_PrepareRunE14eL6470_DirId_tm+0x3c>)
  if(!L6470_DaisyChain_HalfPrepared)
 8002bf6:	782b      	ldrb	r3, [r5, #0]
 8002bf8:	b94b      	cbnz	r3, 8002c0e <_ZN5L647016L6470_PrepareRunE14eL6470_DirId_tm+0x1e>
    (pL6470_AppCmdPkg+id)->p2=0;
 8002bfa:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8002bfe:	e9c4 3305 	strd	r3, r3, [r4, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8002c02:	2601      	movs	r6, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002c04:	7023      	strb	r3, [r4, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 8002c06:	60e3      	str	r3, [r4, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002c08:	7423      	strb	r3, [r4, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 8002c0a:	61e3      	str	r3, [r4, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8002c0c:	702e      	strb	r6, [r5, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8002c0e:	7d43      	ldrb	r3, [r0, #21]
 8002c10:	011d      	lsls	r5, r3, #4
 8002c12:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 8002c16:	2603      	movs	r6, #3
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8002c18:	2000      	movs	r0, #0
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8002c1a:	5566      	strb	r6, [r4, r5]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
}
 8002c1c:	bc70      	pop	{r4, r5, r6}
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8002c1e:	e9c3 1201 	strd	r1, r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8002c22:	60d8      	str	r0, [r3, #12]
}
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	20001208 	.word	0x20001208
 8002c2c:	200011d4 	.word	0x200011d4

08002c30 <_ZN5L647011prepare_runEN12StepperMotor11direction_tEj>:
    virtual void prepare_run(direction_t direction, unsigned int speed)
 8002c30:	b570      	push	{r4, r5, r6, lr}
 8002c32:	4604      	mov	r4, r0
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8002c34:	4610      	mov	r0, r2
 8002c36:	f1a1 0501 	sub.w	r5, r1, #1
 8002c3a:	f7fd fc0d 	bl	8000458 <__aeabi_ui2f>
 8002c3e:	fab5 f585 	clz	r5, r5
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 8002c42:	490b      	ldr	r1, [pc, #44]	; (8002c70 <_ZN5L647011prepare_runEN12StepperMotor11direction_tEj+0x40>)
 8002c44:	096d      	lsrs	r5, r5, #5
 8002c46:	4606      	mov	r6, r0
 8002c48:	f7fd fe06 	bl	8000858 <__aeabi_fcmple>
 8002c4c:	b170      	cbz	r0, 8002c6c <_ZN5L647011prepare_runEN12StepperMotor11direction_tEj+0x3c>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 8002c4e:	4909      	ldr	r1, [pc, #36]	; (8002c74 <_ZN5L647011prepare_runEN12StepperMotor11direction_tEj+0x44>)
 8002c50:	4630      	mov	r0, r6
 8002c52:	f7fd fd0d 	bl	8000670 <__aeabi_fdiv>
 8002c56:	f7fd fe43 	bl	80008e0 <__aeabi_f2uiz>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	4629      	mov	r1, r5
 8002c5e:	4620      	mov	r0, r4
 8002c60:	f7ff ffc6 	bl	8002bf0 <_ZN5L647016L6470_PrepareRunE14eL6470_DirId_tm>
        prepared_action = PREPARED_NO_ACTION;
 8002c64:	2300      	movs	r3, #0
 8002c66:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    }
 8002c6a:	bd70      	pop	{r4, r5, r6, pc}
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	e7f5      	b.n	8002c5c <_ZN5L647011prepare_runEN12StepperMotor11direction_tEj+0x2c>
 8002c70:	4674241b 	.word	0x4674241b
 8002c74:	3c74242a 	.word	0x3c74242a
	...

08002c80 <_ZN5L647021L6470_PrepareGetParamE14eL6470_RegId_t>:
{
 8002c80:	b430      	push	{r4, r5}
  if(!L6470_DaisyChain_HalfPrepared)
 8002c82:	4c0d      	ldr	r4, [pc, #52]	; (8002cb8 <_ZN5L647021L6470_PrepareGetParamE14eL6470_RegId_t+0x38>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002c84:	4a0d      	ldr	r2, [pc, #52]	; (8002cbc <_ZN5L647021L6470_PrepareGetParamE14eL6470_RegId_t+0x3c>)
  if(!L6470_DaisyChain_HalfPrepared)
 8002c86:	7823      	ldrb	r3, [r4, #0]
 8002c88:	b94b      	cbnz	r3, 8002c9e <_ZN5L647021L6470_PrepareGetParamE14eL6470_RegId_t+0x1e>
    (pL6470_AppCmdPkg+id)->p2=0;
 8002c8a:	e9c2 3301 	strd	r3, r3, [r2, #4]
 8002c8e:	e9c2 3305 	strd	r3, r3, [r2, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8002c92:	2501      	movs	r5, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002c94:	7013      	strb	r3, [r2, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 8002c96:	60d3      	str	r3, [r2, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002c98:	7413      	strb	r3, [r2, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 8002c9a:	61d3      	str	r3, [r2, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8002c9c:	7025      	strb	r5, [r4, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8002c9e:	7d43      	ldrb	r3, [r0, #21]
 8002ca0:	011c      	lsls	r4, r3, #4
 8002ca2:	2502      	movs	r5, #2
 8002ca4:	5515      	strb	r5, [r2, r4]
 8002ca6:	eb02 1303 	add.w	r3, r2, r3, lsl #4
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8002caa:	2000      	movs	r0, #0
}
 8002cac:	bc30      	pop	{r4, r5}
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8002cae:	e9c3 1001 	strd	r1, r0, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8002cb2:	60d8      	str	r0, [r3, #12]
}
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	20001208 	.word	0x20001208
 8002cbc:	200011d4 	.word	0x200011d4

08002cc0 <_ZN5L647024prepare_get_decelerationEv>:
    virtual void prepare_get_deceleration(void)
 8002cc0:	b510      	push	{r4, lr}
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 8002cc2:	2105      	movs	r1, #5
    virtual void prepare_get_deceleration(void)
 8002cc4:	4604      	mov	r4, r0
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 8002cc6:	f7ff ffdb 	bl	8002c80 <_ZN5L647021L6470_PrepareGetParamE14eL6470_RegId_t>
        prepared_action = PREPARED_GET_DECELERATION;
 8002cca:	2307      	movs	r3, #7
 8002ccc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    }
 8002cd0:	bd10      	pop	{r4, pc}
 8002cd2:	bf00      	nop
	...

08002ce0 <_ZN5L647024prepare_get_accelerationEv>:
    virtual void prepare_get_acceleration(void)
 8002ce0:	b510      	push	{r4, lr}
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 8002ce2:	2104      	movs	r1, #4
    virtual void prepare_get_acceleration(void)
 8002ce4:	4604      	mov	r4, r0
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 8002ce6:	f7ff ffcb 	bl	8002c80 <_ZN5L647021L6470_PrepareGetParamE14eL6470_RegId_t>
        prepared_action = PREPARED_GET_ACCELERATION;
 8002cea:	2306      	movs	r3, #6
 8002cec:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    }
 8002cf0:	bd10      	pop	{r4, pc}
 8002cf2:	bf00      	nop
	...

08002d00 <_ZN5L647021prepare_get_min_speedEv>:
    virtual void prepare_get_min_speed(void)
 8002d00:	b510      	push	{r4, lr}
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 8002d02:	2107      	movs	r1, #7
    virtual void prepare_get_min_speed(void)
 8002d04:	4604      	mov	r4, r0
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 8002d06:	f7ff ffbb 	bl	8002c80 <_ZN5L647021L6470_PrepareGetParamE14eL6470_RegId_t>
        prepared_action = PREPARED_GET_MIN_SPEED;
 8002d0a:	2305      	movs	r3, #5
 8002d0c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    }
 8002d10:	bd10      	pop	{r4, pc}
 8002d12:	bf00      	nop
	...

08002d20 <_ZN5L647021prepare_get_max_speedEv>:
    virtual void prepare_get_max_speed(void)
 8002d20:	b510      	push	{r4, lr}
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 8002d22:	2106      	movs	r1, #6
    virtual void prepare_get_max_speed(void)
 8002d24:	4604      	mov	r4, r0
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 8002d26:	f7ff ffab 	bl	8002c80 <_ZN5L647021L6470_PrepareGetParamE14eL6470_RegId_t>
        prepared_action = PREPARED_GET_MAX_SPEED;
 8002d2a:	2304      	movs	r3, #4
 8002d2c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    }
 8002d30:	bd10      	pop	{r4, pc}
 8002d32:	bf00      	nop
	...

08002d40 <_ZN5L647017prepare_get_speedEv>:
    virtual void prepare_get_speed(void)
 8002d40:	b510      	push	{r4, lr}
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 8002d42:	2103      	movs	r1, #3
    virtual void prepare_get_speed(void)
 8002d44:	4604      	mov	r4, r0
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 8002d46:	f7ff ff9b 	bl	8002c80 <_ZN5L647021L6470_PrepareGetParamE14eL6470_RegId_t>
        prepared_action = PREPARED_GET_SPEED;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    }
 8002d50:	bd10      	pop	{r4, pc}
 8002d52:	bf00      	nop
	...

08002d60 <_ZN5L647016prepare_get_markEv>:
    virtual void prepare_get_mark(void)
 8002d60:	b510      	push	{r4, lr}
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 8002d62:	2102      	movs	r1, #2
    virtual void prepare_get_mark(void)
 8002d64:	4604      	mov	r4, r0
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 8002d66:	f7ff ff8b 	bl	8002c80 <_ZN5L647021L6470_PrepareGetParamE14eL6470_RegId_t>
        prepared_action = PREPARED_GET_MARK;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    }
 8002d70:	bd10      	pop	{r4, pc}
 8002d72:	bf00      	nop
	...

08002d80 <_ZN5L647020prepare_get_positionEv>:
    virtual void prepare_get_position(void)
 8002d80:	b510      	push	{r4, lr}
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 8002d82:	2100      	movs	r1, #0
    virtual void prepare_get_position(void)
 8002d84:	4604      	mov	r4, r0
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 8002d86:	f7ff ff7b 	bl	8002c80 <_ZN5L647021L6470_PrepareGetParamE14eL6470_RegId_t>
        prepared_action = PREPARED_GET_POSITION;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    }
 8002d90:	bd10      	pop	{r4, pc}
 8002d92:	bf00      	nop
	...

08002da0 <_ZN5L647021prepare_get_parameterEj>:
    virtual void prepare_get_parameter(unsigned int parameter)
 8002da0:	b510      	push	{r4, lr}
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 8002da2:	b2c9      	uxtb	r1, r1
    virtual void prepare_get_parameter(unsigned int parameter)
 8002da4:	4604      	mov	r4, r0
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 8002da6:	f7ff ff6b 	bl	8002c80 <_ZN5L647021L6470_PrepareGetParamE14eL6470_RegId_t>
        prepared_action = PREPARED_NO_ACTION;
 8002daa:	2300      	movs	r3, #0
 8002dac:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    }
 8002db0:	bd10      	pop	{r4, pc}
 8002db2:	bf00      	nop
	...

08002dc0 <_ZN5L647021L6470_PrepareSetParamE14eL6470_RegId_tm>:
{
 8002dc0:	b470      	push	{r4, r5, r6}
  if(!L6470_DaisyChain_HalfPrepared)
 8002dc2:	4d0d      	ldr	r5, [pc, #52]	; (8002df8 <_ZN5L647021L6470_PrepareSetParamE14eL6470_RegId_tm+0x38>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002dc4:	4c0d      	ldr	r4, [pc, #52]	; (8002dfc <_ZN5L647021L6470_PrepareSetParamE14eL6470_RegId_tm+0x3c>)
  if(!L6470_DaisyChain_HalfPrepared)
 8002dc6:	782b      	ldrb	r3, [r5, #0]
 8002dc8:	b94b      	cbnz	r3, 8002dde <_ZN5L647021L6470_PrepareSetParamE14eL6470_RegId_tm+0x1e>
    (pL6470_AppCmdPkg+id)->p2=0;
 8002dca:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8002dce:	e9c4 3305 	strd	r3, r3, [r4, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8002dd2:	2601      	movs	r6, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002dd4:	7023      	strb	r3, [r4, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 8002dd6:	60e3      	str	r3, [r4, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002dd8:	7423      	strb	r3, [r4, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 8002dda:	61e3      	str	r3, [r4, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8002ddc:	702e      	strb	r6, [r5, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8002dde:	7d43      	ldrb	r3, [r0, #21]
 8002de0:	011d      	lsls	r5, r3, #4
 8002de2:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 8002de6:	2601      	movs	r6, #1
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8002de8:	2000      	movs	r0, #0
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8002dea:	5566      	strb	r6, [r4, r5]
}
 8002dec:	bc70      	pop	{r4, r5, r6}
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8002dee:	e9c3 1201 	strd	r1, r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8002df2:	60d8      	str	r0, [r3, #12]
}
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	20001208 	.word	0x20001208
 8002dfc:	200011d4 	.word	0x200011d4

08002e00 <_ZN5L647016prepare_set_markEi>:
    virtual void prepare_set_mark(signed int position)
 8002e00:	b510      	push	{r4, lr}
 8002e02:	4604      	mov	r4, r0
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8002e04:	4608      	mov	r0, r1
 8002e06:	f7ff fc1b 	bl	8002640 <_ZN5L647023L6470_Position_2_AbsPosEl.constprop.0>
 8002e0a:	2102      	movs	r1, #2
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	4620      	mov	r0, r4
 8002e10:	f7ff ffd6 	bl	8002dc0 <_ZN5L647021L6470_PrepareSetParamE14eL6470_RegId_tm>
        prepared_action = PREPARED_NO_ACTION;
 8002e14:	2300      	movs	r3, #0
 8002e16:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    }
 8002e1a:	bd10      	pop	{r4, pc}
 8002e1c:	0000      	movs	r0, r0
	...

08002e20 <_ZN5L647024prepare_set_decelerationEj>:
    virtual void prepare_set_deceleration(unsigned int deceleration)
 8002e20:	b538      	push	{r3, r4, r5, lr}
 8002e22:	4604      	mov	r4, r0
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8002e24:	4608      	mov	r0, r1
 8002e26:	f7fd fb17 	bl	8000458 <__aeabi_ui2f>
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 8002e2a:	490b      	ldr	r1, [pc, #44]	; (8002e58 <_ZN5L647024prepare_set_decelerationEj+0x38>)
 8002e2c:	4605      	mov	r5, r0
 8002e2e:	f7fd fd13 	bl	8000858 <__aeabi_fcmple>
 8002e32:	b170      	cbz	r0, 8002e52 <_ZN5L647024prepare_set_decelerationEj+0x32>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8002e34:	4909      	ldr	r1, [pc, #36]	; (8002e5c <_ZN5L647024prepare_set_decelerationEj+0x3c>)
 8002e36:	4628      	mov	r0, r5
 8002e38:	f7fd fc1a 	bl	8000670 <__aeabi_fdiv>
 8002e3c:	f7fd fd50 	bl	80008e0 <__aeabi_f2uiz>
 8002e40:	b282      	uxth	r2, r0
 8002e42:	2105      	movs	r1, #5
 8002e44:	4620      	mov	r0, r4
 8002e46:	f7ff ffbb 	bl	8002dc0 <_ZN5L647021L6470_PrepareSetParamE14eL6470_RegId_tm>
        prepared_action = PREPARED_NO_ACTION;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    }
 8002e50:	bd38      	pop	{r3, r4, r5, pc}
 8002e52:	4602      	mov	r2, r0
 8002e54:	e7f5      	b.n	8002e42 <_ZN5L647024prepare_set_decelerationEj+0x22>
 8002e56:	bf00      	nop
 8002e58:	4768c671 	.word	0x4768c671
 8002e5c:	4168d4fe 	.word	0x4168d4fe

08002e60 <_ZN5L647024prepare_set_accelerationEj>:
    virtual void prepare_set_acceleration(unsigned int acceleration)
 8002e60:	b538      	push	{r3, r4, r5, lr}
 8002e62:	4604      	mov	r4, r0
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8002e64:	4608      	mov	r0, r1
 8002e66:	f7fd faf7 	bl	8000458 <__aeabi_ui2f>
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 8002e6a:	490b      	ldr	r1, [pc, #44]	; (8002e98 <_ZN5L647024prepare_set_accelerationEj+0x38>)
 8002e6c:	4605      	mov	r5, r0
 8002e6e:	f7fd fcf3 	bl	8000858 <__aeabi_fcmple>
 8002e72:	b170      	cbz	r0, 8002e92 <_ZN5L647024prepare_set_accelerationEj+0x32>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8002e74:	4909      	ldr	r1, [pc, #36]	; (8002e9c <_ZN5L647024prepare_set_accelerationEj+0x3c>)
 8002e76:	4628      	mov	r0, r5
 8002e78:	f7fd fbfa 	bl	8000670 <__aeabi_fdiv>
 8002e7c:	f7fd fd30 	bl	80008e0 <__aeabi_f2uiz>
 8002e80:	b282      	uxth	r2, r0
 8002e82:	2104      	movs	r1, #4
 8002e84:	4620      	mov	r0, r4
 8002e86:	f7ff ff9b 	bl	8002dc0 <_ZN5L647021L6470_PrepareSetParamE14eL6470_RegId_tm>
        prepared_action = PREPARED_NO_ACTION;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    }
 8002e90:	bd38      	pop	{r3, r4, r5, pc}
 8002e92:	4602      	mov	r2, r0
 8002e94:	e7f5      	b.n	8002e82 <_ZN5L647024prepare_set_accelerationEj+0x22>
 8002e96:	bf00      	nop
 8002e98:	4768c671 	.word	0x4768c671
 8002e9c:	4168d4fe 	.word	0x4168d4fe

08002ea0 <_ZN5L647021prepare_set_min_speedEj>:
    virtual void prepare_set_min_speed(unsigned int speed)
 8002ea0:	b538      	push	{r3, r4, r5, lr}
 8002ea2:	4604      	mov	r4, r0
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8002ea4:	4608      	mov	r0, r1
 8002ea6:	f7fd fad7 	bl	8000458 <__aeabi_ui2f>
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 8002eaa:	490b      	ldr	r1, [pc, #44]	; (8002ed8 <_ZN5L647021prepare_set_min_speedEj+0x38>)
 8002eac:	4605      	mov	r5, r0
 8002eae:	f7fd fcd3 	bl	8000858 <__aeabi_fcmple>
 8002eb2:	b170      	cbz	r0, 8002ed2 <_ZN5L647021prepare_set_min_speedEj+0x32>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 8002eb4:	4909      	ldr	r1, [pc, #36]	; (8002edc <_ZN5L647021prepare_set_min_speedEj+0x3c>)
 8002eb6:	4628      	mov	r0, r5
 8002eb8:	f7fd fbda 	bl	8000670 <__aeabi_fdiv>
 8002ebc:	f7fd fd10 	bl	80008e0 <__aeabi_f2uiz>
 8002ec0:	b282      	uxth	r2, r0
 8002ec2:	2107      	movs	r1, #7
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	f7ff ff7b 	bl	8002dc0 <_ZN5L647021L6470_PrepareSetParamE14eL6470_RegId_tm>
        prepared_action = PREPARED_NO_ACTION;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    }
 8002ed0:	bd38      	pop	{r3, r4, r5, pc}
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	e7f5      	b.n	8002ec2 <_ZN5L647021prepare_set_min_speedEj+0x22>
 8002ed6:	bf00      	nop
 8002ed8:	447414bf 	.word	0x447414bf
 8002edc:	3e742401 	.word	0x3e742401

08002ee0 <_ZN5L647021prepare_set_max_speedEj>:
    virtual void prepare_set_max_speed(unsigned int speed)
 8002ee0:	b538      	push	{r3, r4, r5, lr}
 8002ee2:	4604      	mov	r4, r0
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8002ee4:	4608      	mov	r0, r1
 8002ee6:	f7fd fab7 	bl	8000458 <__aeabi_ui2f>
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 8002eea:	490b      	ldr	r1, [pc, #44]	; (8002f18 <_ZN5L647021prepare_set_max_speedEj+0x38>)
 8002eec:	4605      	mov	r5, r0
 8002eee:	f7fd fcb3 	bl	8000858 <__aeabi_fcmple>
 8002ef2:	b170      	cbz	r0, 8002f12 <_ZN5L647021prepare_set_max_speedEj+0x32>
    return (uint16_t)(Step_s / ((float)15.2588));
 8002ef4:	4909      	ldr	r1, [pc, #36]	; (8002f1c <_ZN5L647021prepare_set_max_speedEj+0x3c>)
 8002ef6:	4628      	mov	r0, r5
 8002ef8:	f7fd fbba 	bl	8000670 <__aeabi_fdiv>
 8002efc:	f7fd fcf0 	bl	80008e0 <__aeabi_f2uiz>
 8002f00:	b282      	uxth	r2, r0
 8002f02:	2106      	movs	r1, #6
 8002f04:	4620      	mov	r0, r4
 8002f06:	f7ff ff5b 	bl	8002dc0 <_ZN5L647021L6470_PrepareSetParamE14eL6470_RegId_tm>
        prepared_action = PREPARED_NO_ACTION;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    }
 8002f10:	bd38      	pop	{r3, r4, r5, pc}
 8002f12:	4602      	mov	r2, r0
 8002f14:	e7f5      	b.n	8002f02 <_ZN5L647021prepare_set_max_speedEj+0x22>
 8002f16:	bf00      	nop
 8002f18:	4673e702 	.word	0x4673e702
 8002f1c:	4174240b 	.word	0x4174240b

08002f20 <_ZN5L647017prepare_set_speedEj>:
    virtual void prepare_set_speed(unsigned int speed)
 8002f20:	b538      	push	{r3, r4, r5, lr}
 8002f22:	4604      	mov	r4, r0
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 8002f24:	4608      	mov	r0, r1
 8002f26:	f7fd fa97 	bl	8000458 <__aeabi_ui2f>
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 8002f2a:	490b      	ldr	r1, [pc, #44]	; (8002f58 <_ZN5L647017prepare_set_speedEj+0x38>)
 8002f2c:	4605      	mov	r5, r0
 8002f2e:	f7fd fc93 	bl	8000858 <__aeabi_fcmple>
 8002f32:	b170      	cbz	r0, 8002f52 <_ZN5L647017prepare_set_speedEj+0x32>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 8002f34:	4909      	ldr	r1, [pc, #36]	; (8002f5c <_ZN5L647017prepare_set_speedEj+0x3c>)
 8002f36:	4628      	mov	r0, r5
 8002f38:	f7fd fb9a 	bl	8000670 <__aeabi_fdiv>
 8002f3c:	f7fd fcd0 	bl	80008e0 <__aeabi_f2uiz>
 8002f40:	4602      	mov	r2, r0
 8002f42:	2103      	movs	r1, #3
 8002f44:	4620      	mov	r0, r4
 8002f46:	f7ff ff3b 	bl	8002dc0 <_ZN5L647021L6470_PrepareSetParamE14eL6470_RegId_tm>
        prepared_action = PREPARED_NO_ACTION;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    }
 8002f50:	bd38      	pop	{r3, r4, r5, pc}
 8002f52:	4602      	mov	r2, r0
 8002f54:	e7f5      	b.n	8002f42 <_ZN5L647017prepare_set_speedEj+0x22>
 8002f56:	bf00      	nop
 8002f58:	4674241b 	.word	0x4674241b
 8002f5c:	3c74242a 	.word	0x3c74242a

08002f60 <_ZN5L647016prepare_set_markEv>:
    virtual void prepare_set_mark(void)
 8002f60:	b510      	push	{r4, lr}
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 8002f62:	2200      	movs	r2, #0
    virtual void prepare_set_mark(void)
 8002f64:	4604      	mov	r4, r0
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 8002f66:	2102      	movs	r1, #2
 8002f68:	f7ff ff2a 	bl	8002dc0 <_ZN5L647021L6470_PrepareSetParamE14eL6470_RegId_tm>
        prepared_action = PREPARED_SET_MARK;
 8002f6c:	2309      	movs	r3, #9
 8002f6e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    }
 8002f72:	bd10      	pop	{r4, pc}
	...

08002f80 <_ZN5L647021prepare_set_parameterEjj>:
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 8002f80:	b510      	push	{r4, lr}
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8002f82:	b2c9      	uxtb	r1, r1
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 8002f84:	4604      	mov	r4, r0
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8002f86:	f7ff ff1b 	bl	8002dc0 <_ZN5L647021L6470_PrepareSetParamE14eL6470_RegId_tm>
        prepared_action = PREPARED_NO_ACTION;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    }
 8002f90:	bd10      	pop	{r4, pc}
 8002f92:	bf00      	nop
	...

08002fa0 <_port_irq_epilogue>:
 8002fa0:	2320      	movs	r3, #32
 8002fa2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002fa6:	4b0d      	ldr	r3, [pc, #52]	; (8002fdc <_port_irq_epilogue+0x3c>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002fae:	d102      	bne.n	8002fb6 <_port_irq_epilogue+0x16>
 8002fb0:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8002fb4:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002fb6:	f3ef 8309 	mrs	r3, PSP
    s_psp -= sizeof (struct port_extctx);
 8002fba:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8002fbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fc0:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002fc2:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8002fc6:	4a06      	ldr	r2, [pc, #24]	; (8002fe0 <_port_irq_epilogue+0x40>)
 8002fc8:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 8002fca:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 8002fcc:	6889      	ldr	r1, [r1, #8]
 8002fce:	6892      	ldr	r2, [r2, #8]
 8002fd0:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8002fd2:	bf8c      	ite	hi
 8002fd4:	4a03      	ldrhi	r2, [pc, #12]	; (8002fe4 <_port_irq_epilogue+0x44>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8002fd6:	4a04      	ldrls	r2, [pc, #16]	; (8002fe8 <_port_irq_epilogue+0x48>)
 8002fd8:	619a      	str	r2, [r3, #24]
 8002fda:	4770      	bx	lr
 8002fdc:	e000ed00 	.word	0xe000ed00
 8002fe0:	2000128c 	.word	0x2000128c
 8002fe4:	080002e3 	.word	0x080002e3
 8002fe8:	080002e6 	.word	0x080002e6
 8002fec:	00000000 	.word	0x00000000

08002ff0 <chCoreAllocAlignedI>:
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8002ff0:	4a08      	ldr	r2, [pc, #32]	; (8003014 <chCoreAllocAlignedI+0x24>)
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8002ff2:	b410      	push	{r4}
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8002ff4:	e9d2 3400 	ldrd	r3, r4, [r2]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8002ff8:	4249      	negs	r1, r1
 8002ffa:	1a20      	subs	r0, r4, r0
 8002ffc:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8002ffe:	4298      	cmp	r0, r3
 8003000:	d304      	bcc.n	800300c <chCoreAllocAlignedI+0x1c>
 8003002:	4284      	cmp	r4, r0
 8003004:	d302      	bcc.n	800300c <chCoreAllocAlignedI+0x1c>

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8003006:	bc10      	pop	{r4}
  ch_memcore.topmem = prev;
 8003008:	6050      	str	r0, [r2, #4]
 800300a:	4770      	bx	lr
    return NULL;
 800300c:	2000      	movs	r0, #0
 800300e:	bc10      	pop	{r4}
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	20001428 	.word	0x20001428
	...

08003020 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8003020:	4a0e      	ldr	r2, [pc, #56]	; (800305c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8003022:	4b0f      	ldr	r3, [pc, #60]	; (8003060 <chTMStopMeasurementX+0x40>)
 8003024:	6852      	ldr	r2, [r2, #4]
 8003026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  tmp->last = (now - tmp->last) - offset;
 8003028:	6881      	ldr	r1, [r0, #8]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 800302a:	b430      	push	{r4, r5}
  tmp->last = (now - tmp->last) - offset;
 800302c:	1ad3      	subs	r3, r2, r3
  tmp->cumulative += (rttime_t)tmp->last;
 800302e:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->n++;
 8003032:	68c2      	ldr	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8003034:	1a5b      	subs	r3, r3, r1
  tmp->n++;
 8003036:	3201      	adds	r2, #1
  if (tmp->last > tmp->worst) {
 8003038:	6841      	ldr	r1, [r0, #4]
  tmp->n++;
 800303a:	60c2      	str	r2, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 800303c:	18e4      	adds	r4, r4, r3
  if (tmp->last < tmp->best) {
 800303e:	6802      	ldr	r2, [r0, #0]
  tmp->last = (now - tmp->last) - offset;
 8003040:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8003042:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8003046:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 8003048:	bf88      	it	hi
 800304a:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 800304c:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 800304e:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
 8003052:	bf38      	it	cc
 8003054:	6003      	strcc	r3, [r0, #0]
}
 8003056:	bc30      	pop	{r4, r5}
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	e0001000 	.word	0xe0001000
 8003060:	2000128c 	.word	0x2000128c
	...

08003070 <chTMStartMeasurementX>:
 8003070:	4b01      	ldr	r3, [pc, #4]	; (8003078 <chTMStartMeasurementX+0x8>)
 8003072:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 8003074:	6083      	str	r3, [r0, #8]
}
 8003076:	4770      	bx	lr
 8003078:	e0001000 	.word	0xe0001000
 800307c:	00000000 	.word	0x00000000

08003080 <wakeup>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003080:	2320      	movs	r3, #32
 8003082:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 8003086:	f890 3020 	ldrb.w	r3, [r0, #32]
 800308a:	2b07      	cmp	r3, #7
 800308c:	d80d      	bhi.n	80030aa <wakeup+0x2a>
 800308e:	e8df f003 	tbb	[pc, r3]
 8003092:	0c27      	.short	0x0c27
 8003094:	0408230c 	.word	0x0408230c
 8003098:	080c      	.short	0x080c
    chSemFastSignalI(tp->u.wtsemp);
 800309a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 800309c:	6893      	ldr	r3, [r2, #8]
 800309e:	3301      	adds	r3, #1
 80030a0:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 80030a2:	e9d0 3200 	ldrd	r3, r2, [r0]
 80030a6:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80030a8:	605a      	str	r2, [r3, #4]
static void wakeup(void *p) {
 80030aa:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 80030ac:	2200      	movs	r2, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 80030ae:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  } while (cp->prio >= tp->prio);
 80030b2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80030b4:	4b0c      	ldr	r3, [pc, #48]	; (80030e8 <wakeup+0x68>)
  tp->u.rdymsg = MSG_TIMEOUT;
 80030b6:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 80030b8:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 80030bc:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	428a      	cmp	r2, r1
 80030c2:	d2fb      	bcs.n	80030bc <wakeup+0x3c>
  tp->queue.prev             = cp->queue.prev;
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	2100      	movs	r1, #0
 80030c8:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 80030cc:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80030ce:	6058      	str	r0, [r3, #4]
 80030d0:	f381 8811 	msr	BASEPRI, r1
}
 80030d4:	bc10      	pop	{r4}
 80030d6:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 80030d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]
    break;
 80030de:	e7e4      	b.n	80030aa <wakeup+0x2a>
 80030e0:	2300      	movs	r3, #0
 80030e2:	f383 8811 	msr	BASEPRI, r3
 80030e6:	4770      	bx	lr
 80030e8:	2000128c 	.word	0x2000128c
 80030ec:	00000000 	.word	0x00000000

080030f0 <chSchReadyI>:
  tp->state = CH_STATE_READY;
 80030f0:	2200      	movs	r2, #0
  } while (cp->prio >= tp->prio);
 80030f2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80030f4:	4b06      	ldr	r3, [pc, #24]	; (8003110 <chSchReadyI+0x20>)
  tp->state = CH_STATE_READY;
 80030f6:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 80030fa:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80030fc:	689a      	ldr	r2, [r3, #8]
 80030fe:	428a      	cmp	r2, r1
 8003100:	d2fb      	bcs.n	80030fa <chSchReadyI+0xa>
  tp->queue.prev             = cp->queue.prev;
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8003108:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800310a:	6058      	str	r0, [r3, #4]
}
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	2000128c 	.word	0x2000128c
	...

08003120 <chEvtBroadcastFlagsI.constprop.0>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8003120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8003122:	4f16      	ldr	r7, [pc, #88]	; (800317c <chEvtBroadcastFlagsI.constprop.0+0x5c>)
 8003124:	f857 4f04 	ldr.w	r4, [r7, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8003128:	42bc      	cmp	r4, r7
 800312a:	d020      	beq.n	800316e <chEvtBroadcastFlagsI.constprop.0+0x4e>
 800312c:	4605      	mov	r5, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 800312e:	2600      	movs	r6, #0
 8003130:	e004      	b.n	800313c <chEvtBroadcastFlagsI.constprop.0+0x1c>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8003132:	2a0b      	cmp	r2, #11
 8003134:	d01c      	beq.n	8003170 <chEvtBroadcastFlagsI.constprop.0+0x50>
    elp = elp->next;
 8003136:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8003138:	42bc      	cmp	r4, r7
 800313a:	d018      	beq.n	800316e <chEvtBroadcastFlagsI.constprop.0+0x4e>
    elp->flags |= flags;
 800313c:	68e3      	ldr	r3, [r4, #12]
 800313e:	432b      	orrs	r3, r5
 8003140:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8003142:	b115      	cbz	r5, 800314a <chEvtBroadcastFlagsI.constprop.0+0x2a>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8003144:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8003146:	421d      	tst	r5, r3
 8003148:	d0f5      	beq.n	8003136 <chEvtBroadcastFlagsI.constprop.0+0x16>
  tp->epending |= events;
 800314a:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 800314e:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8003150:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 8003154:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
 8003156:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 8003158:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 800315a:	d1ea      	bne.n	8003132 <chEvtBroadcastFlagsI.constprop.0+0x12>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800315c:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 800315e:	4213      	tst	r3, r2
 8003160:	d0e9      	beq.n	8003136 <chEvtBroadcastFlagsI.constprop.0+0x16>
    tp->u.rdymsg = MSG_OK;
 8003162:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8003164:	f7ff ffc4 	bl	80030f0 <chSchReadyI>
    elp = elp->next;
 8003168:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 800316a:	42bc      	cmp	r4, r7
 800316c:	d1e6      	bne.n	800313c <chEvtBroadcastFlagsI.constprop.0+0x1c>
}
 800316e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8003170:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8003172:	ea32 0303 	bics.w	r3, r2, r3
 8003176:	d1de      	bne.n	8003136 <chEvtBroadcastFlagsI.constprop.0+0x16>
 8003178:	e7f3      	b.n	8003162 <chEvtBroadcastFlagsI.constprop.0+0x42>
 800317a:	bf00      	nop
 800317c:	20001128 	.word	0x20001128

08003180 <_idle_thread>:
}
 8003180:	e7fe      	b.n	8003180 <_idle_thread>
 8003182:	bf00      	nop
	...

08003190 <spi_lld_serve_tx_interrupt>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8003190:	f011 0f0c 	tst.w	r1, #12
 8003194:	d100      	bne.n	8003198 <spi_lld_serve_tx_interrupt+0x8>
  }
#else
  (void)spip;
  (void)flags;
#endif
}
 8003196:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 8003198:	b672      	cpsid	i

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 800319a:	4b02      	ldr	r3, [pc, #8]	; (80031a4 <spi_lld_serve_tx_interrupt+0x14>)
 800319c:	4a02      	ldr	r2, [pc, #8]	; (80031a8 <spi_lld_serve_tx_interrupt+0x18>)
 800319e:	62da      	str	r2, [r3, #44]	; 0x2c
 80031a0:	e7fe      	b.n	80031a0 <spi_lld_serve_tx_interrupt+0x10>
 80031a2:	bf00      	nop
 80031a4:	2000128c 	.word	0x2000128c
 80031a8:	08005cb4 	.word	0x08005cb4
 80031ac:	00000000 	.word	0x00000000

080031b0 <spi_lld_serve_rx_interrupt>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80031b0:	f011 0f0c 	tst.w	r1, #12
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 80031b4:	b538      	push	{r3, r4, r5, lr}
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80031b6:	d14f      	bne.n	8003258 <spi_lld_serve_rx_interrupt+0xa8>
  if (spip->config->circular) {
 80031b8:	460d      	mov	r5, r1
 80031ba:	6841      	ldr	r1, [r0, #4]
 80031bc:	780b      	ldrb	r3, [r1, #0]
 80031be:	4604      	mov	r4, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d133      	bne.n	800322c <spi_lld_serve_rx_interrupt+0x7c>
    dmaStreamDisable(spip->dmatx);
 80031c4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80031c6:	682a      	ldr	r2, [r5, #0]
 80031c8:	6813      	ldr	r3, [r2, #0]
 80031ca:	f023 031f 	bic.w	r3, r3, #31
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	6813      	ldr	r3, [r2, #0]
 80031d2:	07d8      	lsls	r0, r3, #31
 80031d4:	d4fc      	bmi.n	80031d0 <spi_lld_serve_rx_interrupt+0x20>
 80031d6:	7a6a      	ldrb	r2, [r5, #9]
    dmaStreamDisable(spip->dmarx);
 80031d8:	6a20      	ldr	r0, [r4, #32]
    dmaStreamDisable(spip->dmatx);
 80031da:	686d      	ldr	r5, [r5, #4]
 80031dc:	233d      	movs	r3, #61	; 0x3d
 80031de:	4093      	lsls	r3, r2
    dmaStreamDisable(spip->dmarx);
 80031e0:	6802      	ldr	r2, [r0, #0]
    dmaStreamDisable(spip->dmatx);
 80031e2:	602b      	str	r3, [r5, #0]
    dmaStreamDisable(spip->dmarx);
 80031e4:	6813      	ldr	r3, [r2, #0]
 80031e6:	f023 031f 	bic.w	r3, r3, #31
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	6813      	ldr	r3, [r2, #0]
 80031ee:	07db      	lsls	r3, r3, #31
 80031f0:	d4fc      	bmi.n	80031ec <spi_lld_serve_rx_interrupt+0x3c>
 80031f2:	7a45      	ldrb	r5, [r0, #9]
    _spi_isr_code(spip);
 80031f4:	684a      	ldr	r2, [r1, #4]
    dmaStreamDisable(spip->dmarx);
 80031f6:	6841      	ldr	r1, [r0, #4]
 80031f8:	233d      	movs	r3, #61	; 0x3d
 80031fa:	40ab      	lsls	r3, r5
 80031fc:	600b      	str	r3, [r1, #0]
    _spi_isr_code(spip);
 80031fe:	2a00      	cmp	r2, #0
 8003200:	d02f      	beq.n	8003262 <spi_lld_serve_rx_interrupt+0xb2>
 8003202:	2304      	movs	r3, #4
 8003204:	7023      	strb	r3, [r4, #0]
 8003206:	4620      	mov	r0, r4
 8003208:	4790      	blx	r2
 800320a:	7823      	ldrb	r3, [r4, #0]
 800320c:	2b04      	cmp	r3, #4
 800320e:	d028      	beq.n	8003262 <spi_lld_serve_rx_interrupt+0xb2>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003210:	2320      	movs	r3, #32
 8003212:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8003216:	68a0      	ldr	r0, [r4, #8]
 8003218:	b120      	cbz	r0, 8003224 <spi_lld_serve_rx_interrupt+0x74>
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 800321a:	2300      	movs	r3, #0
 800321c:	60a3      	str	r3, [r4, #8]
    tp->u.rdymsg = msg;
 800321e:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8003220:	f7ff ff66 	bl	80030f0 <chSchReadyI>
 8003224:	2300      	movs	r3, #0
 8003226:	f383 8811 	msr	BASEPRI, r3
}
 800322a:	bd38      	pop	{r3, r4, r5, pc}
    if ((flags & STM32_DMA_ISR_HTIF) != 0U) {
 800322c:	06eb      	lsls	r3, r5, #27
 800322e:	d503      	bpl.n	8003238 <spi_lld_serve_rx_interrupt+0x88>
      _spi_isr_half_code(spip);
 8003230:	684b      	ldr	r3, [r1, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f9      	beq.n	800322a <spi_lld_serve_rx_interrupt+0x7a>
 8003236:	4798      	blx	r3
    if ((flags & STM32_DMA_ISR_TCIF) != 0U) {
 8003238:	06ad      	lsls	r5, r5, #26
 800323a:	d5f6      	bpl.n	800322a <spi_lld_serve_rx_interrupt+0x7a>
      _spi_isr_full_code(spip);
 800323c:	6863      	ldr	r3, [r4, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0f2      	beq.n	800322a <spi_lld_serve_rx_interrupt+0x7a>
 8003244:	2204      	movs	r2, #4
 8003246:	7022      	strb	r2, [r4, #0]
 8003248:	4620      	mov	r0, r4
 800324a:	4798      	blx	r3
 800324c:	7823      	ldrb	r3, [r4, #0]
 800324e:	2b04      	cmp	r3, #4
 8003250:	d1eb      	bne.n	800322a <spi_lld_serve_rx_interrupt+0x7a>
 8003252:	2303      	movs	r3, #3
 8003254:	7023      	strb	r3, [r4, #0]
}
 8003256:	bd38      	pop	{r3, r4, r5, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8003258:	b672      	cpsid	i
 800325a:	4b06      	ldr	r3, [pc, #24]	; (8003274 <spi_lld_serve_rx_interrupt+0xc4>)
 800325c:	4a06      	ldr	r2, [pc, #24]	; (8003278 <spi_lld_serve_rx_interrupt+0xc8>)
 800325e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003260:	e7fe      	b.n	8003260 <spi_lld_serve_rx_interrupt+0xb0>
    _spi_isr_code(spip);
 8003262:	2302      	movs	r3, #2
 8003264:	7023      	strb	r3, [r4, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003266:	2320      	movs	r3, #32
 8003268:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 800326c:	68a0      	ldr	r0, [r4, #8]
 800326e:	2800      	cmp	r0, #0
 8003270:	d1d3      	bne.n	800321a <spi_lld_serve_rx_interrupt+0x6a>
 8003272:	e7d7      	b.n	8003224 <spi_lld_serve_rx_interrupt+0x74>
 8003274:	2000128c 	.word	0x2000128c
 8003278:	08005cb4 	.word	0x08005cb4
 800327c:	00000000 	.word	0x00000000

08003280 <_ctl>:
#else
    break;
#endif
  }
  return MSG_OK;
}
 8003280:	2000      	movs	r0, #0
 8003282:	4770      	bx	lr
	...

08003290 <chSchGoSleepS>:
  thread_t *otp = currp;
 8003290:	4b08      	ldr	r3, [pc, #32]	; (80032b4 <chSchGoSleepS+0x24>)
 8003292:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->next;
 8003294:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 8003296:	b410      	push	{r4}
  otp->state = newstate;
 8003298:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 800329c:	6810      	ldr	r0, [r2, #0]
 800329e:	6018      	str	r0, [r3, #0]
  currp->state = CH_STATE_CURRENT;
 80032a0:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 80032a2:	6043      	str	r3, [r0, #4]
 80032a4:	f882 4020 	strb.w	r4, [r2, #32]
}
 80032a8:	bc10      	pop	{r4}
  currp = queue_fifo_remove(&ch.rlist.queue);
 80032aa:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 80032ac:	4610      	mov	r0, r2
 80032ae:	f7fd b807 	b.w	80002c0 <_port_switch>
 80032b2:	bf00      	nop
 80032b4:	2000128c 	.word	0x2000128c
	...

080032c0 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 80032c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (TIME_INFINITE != timeout) {
 80032c2:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 80032c4:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 80032c6:	d049      	beq.n	800335c <chSchGoSleepTimeoutS+0x9c>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 80032c8:	4c3f      	ldr	r4, [pc, #252]	; (80033c8 <chSchGoSleepTimeoutS+0x108>)

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
 80032ca:	4f40      	ldr	r7, [pc, #256]	; (80033cc <chSchGoSleepTimeoutS+0x10c>)
  vtp->par = par;
 80032cc:	69a3      	ldr	r3, [r4, #24]
 80032ce:	9305      	str	r3, [sp, #20]
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80032d0:	4626      	mov	r6, r4
 80032d2:	2902      	cmp	r1, #2
 80032d4:	f856 3f1c 	ldr.w	r3, [r6, #28]!
 80032d8:	4605      	mov	r5, r0
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80032da:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80032de:	bf38      	it	cc
 80032e0:	2102      	movcc	r1, #2
 80032e2:	42b3      	cmp	r3, r6
 80032e4:	6a42      	ldr	r2, [r0, #36]	; 0x24
  vtp->func = vtfunc;
 80032e6:	9704      	str	r7, [sp, #16]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80032e8:	d05b      	beq.n	80033a2 <chSchGoSleepTimeoutS+0xe2>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 80032ea:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 80032ec:	1bd2      	subs	r2, r2, r7
 80032ee:	1889      	adds	r1, r1, r2

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 80032f0:	d32e      	bcc.n	8003350 <chSchGoSleepTimeoutS+0x90>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 80032f2:	6898      	ldr	r0, [r3, #8]
      p = p->next;
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
      delta -= p->delta;
 80032f8:	1a09      	subs	r1, r1, r0
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 80032fa:	4291      	cmp	r1, r2
 80032fc:	d904      	bls.n	8003308 <chSchGoSleepTimeoutS+0x48>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
    p = p->next;
 80032fe:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
 8003300:	1a89      	subs	r1, r1, r2
  while (p->delta < delta) {
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	428a      	cmp	r2, r1
 8003306:	d3fa      	bcc.n	80032fe <chSchGoSleepTimeoutS+0x3e>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	9202      	str	r2, [sp, #8]
  vtp->prev->next = vtp;
 800330c:	af01      	add	r7, sp, #4
  vtp->next = p;
 800330e:	9301      	str	r3, [sp, #4]
  vtp->prev->next = vtp;
 8003310:	6017      	str	r7, [r2, #0]
  p->prev = vtp;
 8003312:	605f      	str	r7, [r3, #4]
  vtp->delta = delta;
 8003314:	9103      	str	r1, [sp, #12]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	1a51      	subs	r1, r2, r1

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 800331a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  p->delta -= delta;
 800331e:	6099      	str	r1, [r3, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8003320:	6262      	str	r2, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 8003322:	4628      	mov	r0, r5
 8003324:	f7ff ffb4 	bl	8003290 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8003328:	9b04      	ldr	r3, [sp, #16]
 800332a:	b16b      	cbz	r3, 8003348 <chSchGoSleepTimeoutS+0x88>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 800332c:	69e3      	ldr	r3, [r4, #28]
 800332e:	42bb      	cmp	r3, r7
 8003330:	d01b      	beq.n	800336a <chSchGoSleepTimeoutS+0xaa>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8003332:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8003336:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 8003338:	9b01      	ldr	r3, [sp, #4]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800333a:	42b3      	cmp	r3, r6
    vtp->next->prev = vtp->prev;
 800333c:	605a      	str	r2, [r3, #4]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800333e:	d003      	beq.n	8003348 <chSchGoSleepTimeoutS+0x88>
      vtp->next->delta += vtp->delta;
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	9903      	ldr	r1, [sp, #12]
 8003344:	440a      	add	r2, r1
 8003346:	609a      	str	r2, [r3, #8]
  return currp->u.rdymsg;
 8003348:	69a3      	ldr	r3, [r4, #24]
}
 800334a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800334c:	b007      	add	sp, #28
 800334e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (delta < p->delta) {
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	4291      	cmp	r1, r2
 8003354:	d2d1      	bcs.n	80032fa <chSchGoSleepTimeoutS+0x3a>
  return systime + (systime_t)interval;
 8003356:	440f      	add	r7, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8003358:	6347      	str	r7, [r0, #52]	; 0x34
 800335a:	e7ce      	b.n	80032fa <chSchGoSleepTimeoutS+0x3a>
    chSchGoSleepS(newstate);
 800335c:	4c1a      	ldr	r4, [pc, #104]	; (80033c8 <chSchGoSleepTimeoutS+0x108>)
 800335e:	f7ff ff97 	bl	8003290 <chSchGoSleepS>
  return currp->u.rdymsg;
 8003362:	69a3      	ldr	r3, [r4, #24]
}
 8003364:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003366:	b007      	add	sp, #28
 8003368:	bdf0      	pop	{r4, r5, r6, r7, pc}

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 800336a:	9b01      	ldr	r3, [sp, #4]
 800336c:	61e3      	str	r3, [r4, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 800336e:	2200      	movs	r2, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8003370:	42b3      	cmp	r3, r6
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8003372:	605e      	str	r6, [r3, #4]
  vtp->func = NULL;
 8003374:	9204      	str	r2, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8003376:	d022      	beq.n	80033be <chSchGoSleepTimeoutS+0xfe>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	9803      	ldr	r0, [sp, #12]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 800337c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 800337e:	4402      	add	r2, r0
  return (systime_t)STM32_ST_TIM->CNT;
 8003380:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003384:	609a      	str	r2, [r3, #8]
 8003386:	6a43      	ldr	r3, [r0, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8003388:	1a58      	subs	r0, r3, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 800338a:	4282      	cmp	r2, r0
 800338c:	d9dc      	bls.n	8003348 <chSchGoSleepTimeoutS+0x88>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 800338e:	1acb      	subs	r3, r1, r3
 8003390:	4413      	add	r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8003392:	2b01      	cmp	r3, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8003394:	bf98      	it	ls
 8003396:	1c82      	addls	r2, r0, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8003398:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 800339c:	440a      	add	r2, r1
 800339e:	635a      	str	r2, [r3, #52]	; 0x34
 80033a0:	e7d2      	b.n	8003348 <chSchGoSleepTimeoutS+0x88>
 80033a2:	188b      	adds	r3, r1, r2
      ch.vtlist.next = vtp;
 80033a4:	af01      	add	r7, sp, #4
      ch.vtlist.lasttime = now;
 80033a6:	62a2      	str	r2, [r4, #40]	; 0x28
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 80033a8:	e9cd 6601 	strd	r6, r6, [sp, #4]
      ch.vtlist.prev = vtp;
 80033ac:	e9c4 7707 	strd	r7, r7, [r4, #28]
      vtp->delta = delay;
 80033b0:	9103      	str	r1, [sp, #12]
  STM32_ST_TIM->SR     = 0;
 80033b2:	2200      	movs	r2, #0
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80033b4:	6343      	str	r3, [r0, #52]	; 0x34
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80033b6:	2302      	movs	r3, #2
  STM32_ST_TIM->SR     = 0;
 80033b8:	6102      	str	r2, [r0, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80033ba:	60c3      	str	r3, [r0, #12]
 80033bc:	e7b1      	b.n	8003322 <chSchGoSleepTimeoutS+0x62>
  STM32_ST_TIM->DIER = 0U;
 80033be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033c2:	60da      	str	r2, [r3, #12]
    return;
 80033c4:	e7c0      	b.n	8003348 <chSchGoSleepTimeoutS+0x88>
 80033c6:	bf00      	nop
 80033c8:	2000128c 	.word	0x2000128c
 80033cc:	08003081 	.word	0x08003081

080033d0 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 80033d0:	b161      	cbz	r1, 80033ec <chThdEnqueueTimeoutS+0x1c>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 80033d2:	4a08      	ldr	r2, [pc, #32]	; (80033f4 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 80033d4:	b410      	push	{r4}
  queue_insert(currp, tqp);
 80033d6:	6992      	ldr	r2, [r2, #24]
  tp->queue.prev             = tqp->prev;
 80033d8:	6844      	ldr	r4, [r0, #4]
 80033da:	4603      	mov	r3, r0
 80033dc:	e9c2 3400 	strd	r3, r4, [r2]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80033e0:	2004      	movs	r0, #4
  tp->queue.prev->queue.next = tp;
 80033e2:	6022      	str	r2, [r4, #0]
}
 80033e4:	bc10      	pop	{r4}
  tqp->prev                  = tp;
 80033e6:	605a      	str	r2, [r3, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80033e8:	f7ff bf6a 	b.w	80032c0 <chSchGoSleepTimeoutS>
}
 80033ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	2000128c 	.word	0x2000128c
	...

08003400 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8003400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003402:	4604      	mov	r4, r0
 8003404:	460f      	mov	r7, r1
 8003406:	4616      	mov	r6, r2
 8003408:	2320      	movs	r3, #32
 800340a:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 800340e:	e003      	b.n	8003418 <oqPutTimeout+0x18>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
 8003410:	f7ff ffde 	bl	80033d0 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 8003414:	2800      	cmp	r0, #0
 8003416:	db18      	blt.n	800344a <oqPutTimeout+0x4a>
  while (oqIsFullI(oqp)) {
 8003418:	68a5      	ldr	r5, [r4, #8]
 800341a:	4631      	mov	r1, r6
 800341c:	4620      	mov	r0, r4
 800341e:	2d00      	cmp	r5, #0
 8003420:	d0f6      	beq.n	8003410 <oqPutTimeout+0x10>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8003422:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8003424:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8003426:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8003428:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800342a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 800342c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800342e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8003430:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8003434:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8003436:	bf24      	itt	cs
 8003438:	68e3      	ldrcs	r3, [r4, #12]
 800343a:	6163      	strcs	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 800343c:	69e3      	ldr	r3, [r4, #28]
 800343e:	b103      	cbz	r3, 8003442 <oqPutTimeout+0x42>
    oqp->q_notify(oqp);
 8003440:	4798      	blx	r3
 8003442:	2000      	movs	r0, #0
 8003444:	f380 8811 	msr	BASEPRI, r0
  }

  osalSysUnlock();

  return MSG_OK;
}
 8003448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800344a:	f385 8811 	msr	BASEPRI, r5
 800344e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003450 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8003450:	3030      	adds	r0, #48	; 0x30
 8003452:	f7ff bfd5 	b.w	8003400 <oqPutTimeout>
 8003456:	bf00      	nop
	...

08003460 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8003460:	3030      	adds	r0, #48	; 0x30
 8003462:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003466:	f7ff bfcb 	b.w	8003400 <oqPutTimeout>
 800346a:	bf00      	nop
 800346c:	0000      	movs	r0, r0
	...

08003470 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8003470:	b570      	push	{r4, r5, r6, lr}
 8003472:	2320      	movs	r3, #32
 8003474:	4605      	mov	r5, r0
 8003476:	460e      	mov	r6, r1
 8003478:	f383 8811 	msr	BASEPRI, r3
 800347c:	e003      	b.n	8003486 <iqGetTimeout+0x16>
 800347e:	f7ff ffa7 	bl	80033d0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8003482:	2800      	cmp	r0, #0
 8003484:	db1a      	blt.n	80034bc <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 8003486:	68ac      	ldr	r4, [r5, #8]
 8003488:	4631      	mov	r1, r6
 800348a:	4628      	mov	r0, r5
 800348c:	2c00      	cmp	r4, #0
 800348e:	d0f6      	beq.n	800347e <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
 8003490:	69a9      	ldr	r1, [r5, #24]
  iqp->q_counter--;
 8003492:	68ab      	ldr	r3, [r5, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8003494:	6928      	ldr	r0, [r5, #16]
  b = *iqp->q_rdptr++;
 8003496:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 8003498:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 800349a:	4282      	cmp	r2, r0
  iqp->q_counter--;
 800349c:	60ab      	str	r3, [r5, #8]
  b = *iqp->q_rdptr++;
 800349e:	61aa      	str	r2, [r5, #24]
    iqp->q_rdptr = iqp->q_buffer;
 80034a0:	bf28      	it	cs
 80034a2:	68eb      	ldrcs	r3, [r5, #12]
  b = *iqp->q_rdptr++;
 80034a4:	780c      	ldrb	r4, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 80034a6:	bf28      	it	cs
 80034a8:	61ab      	strcs	r3, [r5, #24]
  if (iqp->q_notify != NULL) {
 80034aa:	69eb      	ldr	r3, [r5, #28]
 80034ac:	b10b      	cbz	r3, 80034b2 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 80034ae:	4628      	mov	r0, r5
 80034b0:	4798      	blx	r3
 80034b2:	2300      	movs	r3, #0
 80034b4:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 80034b8:	4620      	mov	r0, r4
}
 80034ba:	bd70      	pop	{r4, r5, r6, pc}
 80034bc:	f384 8811 	msr	BASEPRI, r4
 80034c0:	bd70      	pop	{r4, r5, r6, pc}
 80034c2:	bf00      	nop
	...

080034d0 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 80034d0:	300c      	adds	r0, #12
 80034d2:	f7ff bfcd 	b.w	8003470 <iqGetTimeout>
 80034d6:	bf00      	nop
	...

080034e0 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80034e0:	300c      	adds	r0, #12
 80034e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80034e6:	f7ff bfc3 	b.w	8003470 <iqGetTimeout>
 80034ea:	bf00      	nop
 80034ec:	0000      	movs	r0, r0
	...

080034f0 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 80034f0:	b508      	push	{r3, lr}
 80034f2:	4601      	mov	r1, r0
 80034f4:	2320      	movs	r3, #32
 80034f6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(sysinterval_t ticks) {

  chDbgCheck(ticks != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80034fa:	2008      	movs	r0, #8
 80034fc:	f7ff fee0 	bl	80032c0 <chSchGoSleepTimeoutS>
 8003500:	2300      	movs	r3, #0
 8003502:	f383 8811 	msr	BASEPRI, r3
}
 8003506:	bd08      	pop	{r3, pc}
	...

08003510 <_ZN5L6470C1Ehhhh>:
    L6470(uint8_t flag_irq, uint8_t busy_irq, uint8_t standby_reset, uint8_t ssel) : StepperMotor(), flag_irq(flag_irq), busy_irq(busy_irq), standby_reset(standby_reset), ssel(ssel)
 8003510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003512:	4604      	mov	r4, r0
        L6470_Id = number_of_devices++;
 8003514:	4e14      	ldr	r6, [pc, #80]	; (8003568 <_ZN5L6470C1Ehhhh+0x58>)
    L6470(uint8_t flag_irq, uint8_t busy_irq, uint8_t standby_reset, uint8_t ssel) : StepperMotor(), flag_irq(flag_irq), busy_irq(busy_irq), standby_reset(standby_reset), ssel(ssel)
 8003516:	6041      	str	r1, [r0, #4]
 8003518:	6082      	str	r2, [r0, #8]
        L6470_Id = number_of_devices++;
 800351a:	7831      	ldrb	r1, [r6, #0]
    L6470(uint8_t flag_irq, uint8_t busy_irq, uint8_t standby_reset, uint8_t ssel) : StepperMotor(), flag_irq(flag_irq), busy_irq(busy_irq), standby_reset(standby_reset), ssel(ssel)
 800351c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8003520:	60e3      	str	r3, [r4, #12]
 8003522:	4d12      	ldr	r5, [pc, #72]	; (800356c <_ZN5L6470C1Ehhhh+0x5c>)
        L6470_Register = &_L6470_Register[0];
 8003524:	4a12      	ldr	r2, [pc, #72]	; (8003570 <_ZN5L6470C1Ehhhh+0x60>)
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 8003526:	4b13      	ldr	r3, [pc, #76]	; (8003574 <_ZN5L6470C1Ehhhh+0x64>)
    L6470(uint8_t flag_irq, uint8_t busy_irq, uint8_t standby_reset, uint8_t ssel) : StepperMotor(), flag_irq(flag_irq), busy_irq(busy_irq), standby_reset(standby_reset), ssel(ssel)
 8003528:	6025      	str	r5, [r4, #0]
 800352a:	6120      	str	r0, [r4, #16]
        prepared_action = PREPARED_NO_ACTION;
 800352c:	2500      	movs	r5, #0
        L6470_Register = &_L6470_Register[0];
 800352e:	61a2      	str	r2, [r4, #24]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 8003530:	61e3      	str	r3, [r4, #28]
        L6470_Direction = &_L6470_Direction[0];
 8003532:	4811      	ldr	r0, [pc, #68]	; (8003578 <_ZN5L6470C1Ehhhh+0x68>)
        L6470_ACT = &_L6470_ACT[0];
 8003534:	4a11      	ldr	r2, [pc, #68]	; (800357c <_ZN5L6470C1Ehhhh+0x6c>)
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 8003536:	4f12      	ldr	r7, [pc, #72]	; (8003580 <_ZN5L6470C1Ehhhh+0x70>)
        L6470_Direction = &_L6470_Direction[0];
 8003538:	6220      	str	r0, [r4, #32]
        pL6470_StatusRegister = &L6470_StatusRegister;
 800353a:	f104 0328 	add.w	r3, r4, #40	; 0x28
        L6470_ACT = &_L6470_ACT[0];
 800353e:	6262      	str	r2, [r4, #36]	; 0x24
        pL6470_StatusRegister = &L6470_StatusRegister;
 8003540:	62e3      	str	r3, [r4, #44]	; 0x2c
        L6470_Id = number_of_devices++;
 8003542:	7561      	strb	r1, [r4, #21]
 8003544:	1c4b      	adds	r3, r1, #1
        prepared_action = PREPARED_NO_ACTION;
 8003546:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 800354a:	4629      	mov	r1, r5
 800354c:	2220      	movs	r2, #32
 800354e:	480d      	ldr	r0, [pc, #52]	; (8003584 <_ZN5L6470C1Ehhhh+0x74>)
        L6470_Id = number_of_devices++;
 8003550:	7033      	strb	r3, [r6, #0]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 8003552:	703d      	strb	r5, [r7, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 8003554:	f7fe f9d8 	bl	8001908 <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8003558:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <_ZN5L6470C1Ehhhh+0x78>)
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 800355a:	4a0c      	ldr	r2, [pc, #48]	; (800358c <_ZN5L6470C1Ehhhh+0x7c>)
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 800355c:	e9c3 5500 	strd	r5, r5, [r3]
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8003560:	6015      	str	r5, [r2, #0]
 8003562:	6055      	str	r5, [r2, #4]
    }
 8003564:	4620      	mov	r0, r4
 8003566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003568:	200011f4 	.word	0x200011f4
 800356c:	08005ffc 	.word	0x08005ffc
 8003570:	08005ce0 	.word	0x08005ce0
 8003574:	08005ee8 	.word	0x08005ee8
 8003578:	08005ed4 	.word	0x08005ed4
 800357c:	08005cd4 	.word	0x08005cd4
 8003580:	20001208 	.word	0x20001208
 8003584:	200011d4 	.word	0x200011d4
 8003588:	200011f8 	.word	0x200011f8
 800358c:	20001200 	.word	0x20001200

08003590 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8003590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003594:	b085      	sub	sp, #20
 8003596:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = oqp->q_notify;
 800359a:	69c7      	ldr	r7, [r0, #28]
 800359c:	f04f 0920 	mov.w	r9, #32
 80035a0:	f389 8811 	msr	BASEPRI, r9

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 80035a4:	b3a2      	cbz	r2, 8003610 <oqWriteTimeout+0x80>
 80035a6:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80035aa:	4604      	mov	r4, r0
 80035ac:	460e      	mov	r6, r1
 80035ae:	f04f 0a00 	mov.w	sl, #0
  if (n > oqGetEmptyI(oqp)) {
 80035b2:	68a2      	ldr	r2, [r4, #8]
 80035b4:	4593      	cmp	fp, r2
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 80035b6:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    n = oqGetEmptyI(oqp);
 80035ba:	bf8c      	ite	hi
 80035bc:	68a5      	ldrhi	r5, [r4, #8]
  if (n > oqGetEmptyI(oqp)) {
 80035be:	465d      	movls	r5, fp
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 80035c0:	eba2 0800 	sub.w	r8, r2, r0
  if (n < s1) {
 80035c4:	45a8      	cmp	r8, r5
 80035c6:	d844      	bhi.n	8003652 <oqWriteTimeout+0xc2>
  else if (n > s1) {
 80035c8:	d229      	bcs.n	800361e <oqWriteTimeout+0x8e>
    s2 = n - s1;
 80035ca:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 80035ce:	4642      	mov	r2, r8
 80035d0:	4631      	mov	r1, r6
    s2 = n - s1;
 80035d2:	9301      	str	r3, [sp, #4]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 80035d4:	f7fe f8fe 	bl	80017d4 <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 80035d8:	eb06 0108 	add.w	r1, r6, r8
 80035dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80035e0:	68e0      	ldr	r0, [r4, #12]
 80035e2:	4642      	mov	r2, r8
 80035e4:	f7fe f8f6 	bl	80017d4 <memcpy>
  oqp->q_counter -= n;
 80035e8:	68a2      	ldr	r2, [r4, #8]
    oqp->q_wrptr = oqp->q_buffer + s2;
 80035ea:	68e1      	ldr	r1, [r4, #12]
 80035ec:	4643      	mov	r3, r8
 80035ee:	18cb      	adds	r3, r1, r3
  oqp->q_counter -= n;
 80035f0:	1b52      	subs	r2, r2, r5
    oqp->q_wrptr = oqp->q_buffer + s2;
 80035f2:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
 80035f4:	60a2      	str	r2, [r4, #8]
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 80035f6:	b10f      	cbz	r7, 80035fc <oqWriteTimeout+0x6c>
        nfy(oqp);
 80035f8:	4620      	mov	r0, r4
 80035fa:	47b8      	blx	r7
 80035fc:	f38a 8811 	msr	BASEPRI, sl
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 8003600:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 8003604:	442e      	add	r6, r5
 8003606:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 800360a:	f1bb 0f00 	cmp.w	fp, #0
 800360e:	d1d0      	bne.n	80035b2 <oqWriteTimeout+0x22>
  if (n > oqGetEmptyI(oqp)) {
 8003610:	9803      	ldr	r0, [sp, #12]
 8003612:	2300      	movs	r3, #0
 8003614:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 8003618:	b005      	add	sp, #20
 800361a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 800361e:	462a      	mov	r2, r5
 8003620:	4631      	mov	r1, r6
 8003622:	f7fe f8d7 	bl	80017d4 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8003626:	68e2      	ldr	r2, [r4, #12]
 8003628:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 800362a:	68a2      	ldr	r2, [r4, #8]
 800362c:	1b52      	subs	r2, r2, r5
 800362e:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8003630:	2d00      	cmp	r5, #0
 8003632:	d1e0      	bne.n	80035f6 <oqWriteTimeout+0x66>
 8003634:	9902      	ldr	r1, [sp, #8]
 8003636:	4620      	mov	r0, r4
 8003638:	f7ff feca 	bl	80033d0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 800363c:	2800      	cmp	r0, #0
 800363e:	d0b8      	beq.n	80035b2 <oqWriteTimeout+0x22>
 8003640:	9b03      	ldr	r3, [sp, #12]
 8003642:	eba3 000b 	sub.w	r0, r3, fp
 8003646:	2300      	movs	r3, #0
 8003648:	f383 8811 	msr	BASEPRI, r3
}
 800364c:	b005      	add	sp, #20
 800364e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8003652:	462a      	mov	r2, r5
 8003654:	4631      	mov	r1, r6
 8003656:	f7fe f8bd 	bl	80017d4 <memcpy>
    oqp->q_wrptr += n;
 800365a:	6962      	ldr	r2, [r4, #20]
 800365c:	442a      	add	r2, r5
 800365e:	6162      	str	r2, [r4, #20]
 8003660:	e7e3      	b.n	800362a <oqWriteTimeout+0x9a>
 8003662:	bf00      	nop
	...

08003670 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8003670:	3030      	adds	r0, #48	; 0x30
 8003672:	f7ff bf8d 	b.w	8003590 <oqWriteTimeout>
 8003676:	bf00      	nop
	...

08003680 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8003680:	3030      	adds	r0, #48	; 0x30
 8003682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003686:	f7ff bf83 	b.w	8003590 <oqWriteTimeout>
 800368a:	bf00      	nop
 800368c:	0000      	movs	r0, r0
	...

08003690 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 8003690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003694:	b085      	sub	sp, #20
 8003696:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = iqp->q_notify;
 800369a:	69c7      	ldr	r7, [r0, #28]
 800369c:	f04f 0920 	mov.w	r9, #32
 80036a0:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 80036a4:	2a00      	cmp	r2, #0
 80036a6:	d034      	beq.n	8003712 <iqReadTimeout+0x82>
 80036a8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80036ac:	4604      	mov	r4, r0
 80036ae:	460e      	mov	r6, r1
 80036b0:	f04f 0a00 	mov.w	sl, #0
  if (n > iqGetFullI(iqp)) {
 80036b4:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80036b6:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 80036b8:	4593      	cmp	fp, r2
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80036ba:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 80036bc:	bf8c      	ite	hi
 80036be:	68a5      	ldrhi	r5, [r4, #8]
  if (n > iqGetFullI(iqp)) {
 80036c0:	465d      	movls	r5, fp
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80036c2:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
 80036c6:	45a8      	cmp	r8, r5
 80036c8:	d844      	bhi.n	8003754 <iqReadTimeout+0xc4>
  else if (n > s1) {
 80036ca:	d229      	bcs.n	8003720 <iqReadTimeout+0x90>
    s2 = n - s1;
 80036cc:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 80036d0:	4642      	mov	r2, r8
 80036d2:	4630      	mov	r0, r6
    s2 = n - s1;
 80036d4:	9301      	str	r3, [sp, #4]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 80036d6:	f7fe f87d 	bl	80017d4 <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 80036da:	eb06 0008 	add.w	r0, r6, r8
 80036de:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80036e2:	68e1      	ldr	r1, [r4, #12]
 80036e4:	4642      	mov	r2, r8
 80036e6:	f7fe f875 	bl	80017d4 <memcpy>
  iqp->q_counter -= n;
 80036ea:	68a2      	ldr	r2, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer + s2;
 80036ec:	68e1      	ldr	r1, [r4, #12]
 80036ee:	4643      	mov	r3, r8
 80036f0:	18cb      	adds	r3, r1, r3
  iqp->q_counter -= n;
 80036f2:	1b52      	subs	r2, r2, r5
    iqp->q_rdptr = iqp->q_buffer + s2;
 80036f4:	61a3      	str	r3, [r4, #24]
  iqp->q_counter -= n;
 80036f6:	60a2      	str	r2, [r4, #8]
      if (nfy != NULL) {
 80036f8:	b10f      	cbz	r7, 80036fe <iqReadTimeout+0x6e>
        nfy(iqp);
 80036fa:	4620      	mov	r0, r4
 80036fc:	47b8      	blx	r7
 80036fe:	f38a 8811 	msr	BASEPRI, sl
      n  -= done;
 8003702:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 8003706:	442e      	add	r6, r5
 8003708:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 800370c:	f1bb 0f00 	cmp.w	fp, #0
 8003710:	d1d0      	bne.n	80036b4 <iqReadTimeout+0x24>
  if (n > iqGetFullI(iqp)) {
 8003712:	9803      	ldr	r0, [sp, #12]
 8003714:	2300      	movs	r3, #0
 8003716:	f383 8811 	msr	BASEPRI, r3
}
 800371a:	b005      	add	sp, #20
 800371c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8003720:	462a      	mov	r2, r5
 8003722:	4630      	mov	r0, r6
 8003724:	f7fe f856 	bl	80017d4 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8003728:	68e2      	ldr	r2, [r4, #12]
 800372a:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 800372c:	68a2      	ldr	r2, [r4, #8]
 800372e:	1b52      	subs	r2, r2, r5
 8003730:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8003732:	2d00      	cmp	r5, #0
 8003734:	d1e0      	bne.n	80036f8 <iqReadTimeout+0x68>
 8003736:	9902      	ldr	r1, [sp, #8]
 8003738:	4620      	mov	r0, r4
 800373a:	f7ff fe49 	bl	80033d0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 800373e:	2800      	cmp	r0, #0
 8003740:	d0b8      	beq.n	80036b4 <iqReadTimeout+0x24>
 8003742:	9b03      	ldr	r3, [sp, #12]
 8003744:	eba3 000b 	sub.w	r0, r3, fp
 8003748:	2300      	movs	r3, #0
 800374a:	f383 8811 	msr	BASEPRI, r3
}
 800374e:	b005      	add	sp, #20
 8003750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8003754:	462a      	mov	r2, r5
 8003756:	4630      	mov	r0, r6
 8003758:	f7fe f83c 	bl	80017d4 <memcpy>
    iqp->q_rdptr += n;
 800375c:	69a2      	ldr	r2, [r4, #24]
 800375e:	442a      	add	r2, r5
 8003760:	61a2      	str	r2, [r4, #24]
 8003762:	e7e3      	b.n	800372c <iqReadTimeout+0x9c>
	...

08003770 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8003770:	300c      	adds	r0, #12
 8003772:	f7ff bf8d 	b.w	8003690 <iqReadTimeout>
 8003776:	bf00      	nop
	...

08003780 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8003780:	300c      	adds	r0, #12
 8003782:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003786:	f7ff bf83 	b.w	8003690 <iqReadTimeout>
 800378a:	bf00      	nop
 800378c:	0000      	movs	r0, r0
	...

08003790 <main>:

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8003790:	4b25      	ldr	r3, [pc, #148]	; (8003828 <main+0x98>)
  PWR->CR |= PWR_CR_DBP;
 8003792:	4926      	ldr	r1, [pc, #152]	; (800382c <main+0x9c>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8003794:	691a      	ldr	r2, [r3, #16]
 8003796:	f062 02ff 	orn	r2, r2, #255	; 0xff


/*
 * Application entry point.
 */
int main(void) {
 800379a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800379e:	611a      	str	r2, [r3, #16]
 80037a0:	691a      	ldr	r2, [r3, #16]
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	611a      	str	r2, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 80037a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 80037aa:	691a      	ldr	r2, [r3, #16]
  rccResetAHB2(~0);
 80037ac:	695a      	ldr	r2, [r3, #20]
 80037ae:	6158      	str	r0, [r3, #20]
 80037b0:	f04f 0900 	mov.w	r9, #0
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	f8c3 9014 	str.w	r9, [r3, #20]
 80037ba:	695a      	ldr	r2, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 80037bc:	6a1a      	ldr	r2, [r3, #32]
 80037be:	f062 5280 	orn	r2, r2, #268435456	; 0x10000000
 80037c2:	621a      	str	r2, [r3, #32]
 80037c4:	6a1a      	ldr	r2, [r3, #32]
 80037c6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80037ca:	621a      	str	r2, [r3, #32]
 80037cc:	6a1a      	ldr	r2, [r3, #32]
  rccResetAPB2(~0);
 80037ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037d0:	6258      	str	r0, [r3, #36]	; 0x24
 80037d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037d4:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
 80037d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 80037da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80037e0:	641a      	str	r2, [r3, #64]	; 0x40
 80037e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80037e8:	661a      	str	r2, [r3, #96]	; 0x60
 80037ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 80037ec:	680a      	ldr	r2, [r1, #0]
 80037ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037f2:	600a      	str	r2, [r1, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 80037f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037f6:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80037fa:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80037fe:	b09f      	sub	sp, #124	; 0x7c
 8003800:	d004      	beq.n	800380c <main+0x7c>
    RCC->BDCR = RCC_BDCR_BDRST;
 8003802:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003806:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8003808:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 800380c:	4c07      	ldr	r4, [pc, #28]	; (800382c <main+0x9c>)
  dma.allocated_mask = 0U;
 800380e:	4808      	ldr	r0, [pc, #32]	; (8003830 <main+0xa0>)
 8003810:	6861      	ldr	r1, [r4, #4]
 8003812:	4b08      	ldr	r3, [pc, #32]	; (8003834 <main+0xa4>)
 8003814:	4d08      	ldr	r5, [pc, #32]	; (8003838 <main+0xa8>)
 8003816:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 800381a:	2200      	movs	r2, #0
 800381c:	6061      	str	r1, [r4, #4]
 800381e:	4601      	mov	r1, r0
 8003820:	6002      	str	r2, [r0, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8003822:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8003826:	e00b      	b.n	8003840 <main+0xb0>
 8003828:	40023800 	.word	0x40023800
 800382c:	40007000 	.word	0x40007000
 8003830:	2000144c 	.word	0x2000144c
 8003834:	08006124 	.word	0x08006124
 8003838:	40026010 	.word	0x40026010
 800383c:	f853 5c0c 	ldr.w	r5, [r3, #-12]
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 8003840:	602a      	str	r2, [r5, #0]
    dma.streams[i].func = NULL;
 8003842:	330c      	adds	r3, #12
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8003844:	4298      	cmp	r0, r3
    dma.streams[i].func = NULL;
 8003846:	604a      	str	r2, [r1, #4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8003848:	f101 0108 	add.w	r1, r1, #8
 800384c:	d1f6      	bne.n	800383c <main+0xac>
  DMA1->LIFCR = 0xFFFFFFFFU;
 800384e:	4abe      	ldr	r2, [pc, #760]	; (8003b48 <main+0x3b8>)
  DMA2->LIFCR = 0xFFFFFFFFU;
 8003850:	4cbe      	ldr	r4, [pc, #760]	; (8003b4c <main+0x3bc>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003852:	4bbf      	ldr	r3, [pc, #764]	; (8003b50 <main+0x3c0>)
 8003854:	49bf      	ldr	r1, [pc, #764]	; (8003b54 <main+0x3c4>)
  DMA1->LIFCR = 0xFFFFFFFFU;
 8003856:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800385a:	6090      	str	r0, [r2, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 800385c:	60d0      	str	r0, [r2, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 800385e:	60a0      	str	r0, [r4, #8]
 8003860:	2260      	movs	r2, #96	; 0x60
  DMA2->HIFCR = 0xFFFFFFFFU;
 8003862:	60e0      	str	r0, [r4, #12]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003864:	2040      	movs	r0, #64	; 0x40
 8003866:	2480      	movs	r4, #128	; 0x80
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003868:	f883 2306 	strb.w	r2, [r3, #774]	; 0x306
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800386c:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003870:	6018      	str	r0, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003872:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003876:	f44f 7080 	mov.w	r0, #256	; 0x100
 800387a:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800387e:	601c      	str	r4, [r3, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003880:	f44f 7400 	mov.w	r4, #512	; 0x200
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003884:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003888:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800388c:	6018      	str	r0, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800388e:	f883 2309 	strb.w	r2, [r3, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003892:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003896:	601c      	str	r4, [r3, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003898:	f44f 6480 	mov.w	r4, #1024	; 0x400
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800389c:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80038a0:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80038a4:	601c      	str	r4, [r3, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80038a6:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80038aa:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80038ae:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80038b2:	601c      	str	r4, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80038b4:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80038b8:	f101 0480 	add.w	r4, r1, #128	; 0x80
 80038bc:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
    _pal_init_event(i);
 80038c0:	2200      	movs	r2, #0
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80038c2:	6058      	str	r0, [r3, #4]
 80038c4:	e9c1 2200 	strd	r2, r2, [r1]
  for (i = 0; i < 16; i++) {
 80038c8:	3108      	adds	r1, #8
 80038ca:	428c      	cmp	r4, r1
 80038cc:	d1fa      	bne.n	80038c4 <main+0x134>
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 80038ce:	4da2      	ldr	r5, [pc, #648]	; (8003b58 <main+0x3c8>)
 80038d0:	f8df e2d4 	ldr.w	lr, [pc, #724]	; 8003ba8 <main+0x418>
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 80038d4:	4ba1      	ldr	r3, [pc, #644]	; (8003b5c <main+0x3cc>)
  iqp->q_counter = 0;
 80038d6:	616a      	str	r2, [r5, #20]
 80038d8:	462e      	mov	r6, r5
  oqp->q_counter = size;
 80038da:	2710      	movs	r7, #16
 80038dc:	f846 eb04 	str.w	lr, [r6], #4
  oqp->q_notify  = onfy;
 80038e0:	489f      	ldr	r0, [pc, #636]	; (8003b60 <main+0x3d0>)
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 80038e2:	4ca0      	ldr	r4, [pc, #640]	; (8003b64 <main+0x3d4>)
  oqp->q_counter = size;
 80038e4:	63af      	str	r7, [r5, #56]	; 0x38
  oqp->q_top     = bp + size;
 80038e6:	f105 0774 	add.w	r7, r5, #116	; 0x74

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80038ea:	499f      	ldr	r1, [pc, #636]	; (8003b68 <main+0x3d8>)
 80038ec:	642f      	str	r7, [r5, #64]	; 0x40
  oqp->q_notify  = onfy;
 80038ee:	64e8      	str	r0, [r5, #76]	; 0x4c
  tqp->next = (thread_t *)tqp;
 80038f0:	f105 070c 	add.w	r7, r5, #12
  iqp->q_buffer  = bp;
 80038f4:	f105 0054 	add.w	r0, r5, #84	; 0x54
 80038f8:	676c      	str	r4, [r5, #116]	; 0x74
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 80038fa:	606e      	str	r6, [r5, #4]
  iqp->q_top     = bp + size;
 80038fc:	f105 0464 	add.w	r4, r5, #100	; 0x64
 8003900:	f105 0630 	add.w	r6, r5, #48	; 0x30
  tqp->prev = (thread_t *)tqp;
 8003904:	e9c5 7703 	strd	r7, r7, [r5, #12]
  iqp->q_wrptr   = bp;
 8003908:	e9c5 0008 	strd	r0, r0, [r5, #32]
  oqp->q_wrptr   = bp;
 800390c:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
 8003910:	e9c5 660c 	strd	r6, r6, [r5, #48]	; 0x30
 */
void spi_lld_init(void) {

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 8003914:	f8df c294 	ldr.w	ip, [pc, #660]	; 8003bac <main+0x41c>
  SPID1.dmarx     = NULL;
  SPID1.dmatx     = NULL;
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 8003918:	4f94      	ldr	r7, [pc, #592]	; (8003b6c <main+0x3dc>)
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 800391a:	4e95      	ldr	r6, [pc, #596]	; (8003b70 <main+0x3e0>)
  iqp->q_buffer  = bp;
 800391c:	61a8      	str	r0, [r5, #24]
  iqp->q_top     = bp + size;
 800391e:	61ec      	str	r4, [r5, #28]
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8003920:	2001      	movs	r0, #1
  oqp->q_buffer  = bp;
 8003922:	63ec      	str	r4, [r5, #60]	; 0x3c
  tqp->next = (thread_t *)tqp;
 8003924:	f103 040c 	add.w	r4, r3, #12
  spip->config = NULL;
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 8003928:	e9c3 2201 	strd	r2, r2, [r3, #4]
  SPID1.dmatx     = NULL;
 800392c:	e9c3 2208 	strd	r2, r2, [r3, #32]
  tqp->prev = (thread_t *)tqp;
 8003930:	e9c3 4403 	strd	r4, r4, [r3, #12]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 8003934:	615a      	str	r2, [r3, #20]
  SPID1.spi       = SPI1;
 8003936:	f8c3 c01c 	str.w	ip, [r3, #28]
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 800393a:	629f      	str	r7, [r3, #40]	; 0x28
  spip->state = SPI_STOP;
 800393c:	7018      	strb	r0, [r3, #0]
  iqp->q_link    = link;
 800393e:	e9c5 250a 	strd	r2, r5, [r5, #40]	; 0x28
 8003942:	7228      	strb	r0, [r5, #8]
  oqp->q_link    = link;
 8003944:	652d      	str	r5, [r5, #80]	; 0x50
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 8003946:	62de      	str	r6, [r3, #44]	; 0x2c
 8003948:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  tqp->next = (thread_t *)tqp;
 800394a:	4c8a      	ldr	r4, [pc, #552]	; (8003b74 <main+0x3e4>)

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 800394c:	4f8a      	ldr	r7, [pc, #552]	; (8003b78 <main+0x3e8>)
  tqp->prev = (thread_t *)tqp;
 800394e:	6064      	str	r4, [r4, #4]
  ST_ENABLE_CLOCK();
 8003950:	4303      	orrs	r3, r0
 8003952:	640b      	str	r3, [r1, #64]	; 0x40
 8003954:	6e0b      	ldr	r3, [r1, #96]	; 0x60
  ch.rlist.prio = NOPRIO;
 8003956:	60a2      	str	r2, [r4, #8]
 8003958:	4303      	orrs	r3, r0
 800395a:	660b      	str	r3, [r1, #96]	; 0x60
 800395c:	6e0b      	ldr	r3, [r1, #96]	; 0x60
  ST_ENABLE_STOP();
 800395e:	68bb      	ldr	r3, [r7, #8]
  ch.rlist.newer = (thread_t *)&ch.rlist;
 8003960:	6124      	str	r4, [r4, #16]
 8003962:	4303      	orrs	r3, r0
 8003964:	60bb      	str	r3, [r7, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8003966:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 800396a:	4e84      	ldr	r6, [pc, #528]	; (8003b7c <main+0x3ec>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800396c:	4978      	ldr	r1, [pc, #480]	; (8003b50 <main+0x3c0>)
  ch_memcore.basemem = __heap_base__;
 800396e:	f8df c240 	ldr.w	ip, [pc, #576]	; 8003bb0 <main+0x420>
 8003972:	f242 3727 	movw	r7, #8999	; 0x2327
 8003976:	629f      	str	r7, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8003978:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800397c:	62df      	str	r7, [r3, #44]	; 0x2c
  ch.rlist.older = (thread_t *)&ch.rlist;
 800397e:	6164      	str	r4, [r4, #20]
  STM32_ST_TIM->CCMR1  = 0;
 8003980:	619a      	str	r2, [r3, #24]
  ch.vtlist.delta = (sysinterval_t)-1;
 8003982:	6267      	str	r7, [r4, #36]	; 0x24
  STM32_ST_TIM->CCR[0] = 0;
 8003984:	635a      	str	r2, [r3, #52]	; 0x34
  ch.vtlist.lasttime = (systime_t)0;
 8003986:	62a2      	str	r2, [r4, #40]	; 0x28
  STM32_ST_TIM->CCR[2] = 0;
#endif
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
 8003988:	60da      	str	r2, [r3, #12]
  H_NEXT(&default_heap.header) = NULL;
 800398a:	6072      	str	r2, [r6, #4]
  STM32_ST_TIM->CR2    = 0;
 800398c:	605a      	str	r2, [r3, #4]
  H_PAGES(&default_heap.header) = 0;
 800398e:	60b2      	str	r2, [r6, #8]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8003990:	6158      	str	r0, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8003992:	6018      	str	r0, [r3, #0]
 8003994:	2380      	movs	r3, #128	; 0x80
 8003996:	f881 331c 	strb.w	r3, [r1, #796]	; 0x31c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800399a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 800399e:	f104 031c 	add.w	r3, r4, #28
 80039a2:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
 80039a6:	61e3      	str	r3, [r4, #28]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80039a8:	6008      	str	r0, [r1, #0]
  default_heap.provider = chCoreAllocAlignedWithOffset;
 80039aa:	4975      	ldr	r1, [pc, #468]	; (8003b80 <main+0x3f0>)
 80039ac:	6031      	str	r1, [r6, #0]
 80039ae:	4875      	ldr	r0, [pc, #468]	; (8003b84 <main+0x3f4>)
  ch_memcore.topmem  = __heap_end__;
 80039b0:	4975      	ldr	r1, [pc, #468]	; (8003b88 <main+0x3f8>)
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 80039b2:	6223      	str	r3, [r4, #32]
  tqp->next = (thread_t *)tqp;
 80039b4:	4b75      	ldr	r3, [pc, #468]	; (8003b8c <main+0x3fc>)
  ch_memcore.basemem = __heap_base__;
 80039b6:	f8cc 0000 	str.w	r0, [ip]
 80039ba:	f106 0e0c 	add.w	lr, r6, #12
  ch_memcore.topmem  = __heap_end__;
 80039be:	f8cc 1004 	str.w	r1, [ip, #4]
  tmp->cumulative = (rttime_t)0;
 80039c2:	2000      	movs	r0, #0
 80039c4:	2100      	movs	r1, #0
 80039c6:	6024      	str	r4, [r4, #0]
 80039c8:	f8c6 e00c 	str.w	lr, [r6, #12]
 80039cc:	e9cd 0108 	strd	r0, r1, [sp, #32]
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 80039d0:	f103 0010 	add.w	r0, r3, #16
  tmp->best       = (rtcnt_t)-1;
 80039d4:	9704      	str	r7, [sp, #16]
 80039d6:	6118      	str	r0, [r3, #16]
 80039d8:	f103 073c 	add.w	r7, r3, #60	; 0x3c
 80039dc:	f103 0040 	add.w	r0, r3, #64	; 0x40
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
  mp->object_size = size;
 80039e0:	2114      	movs	r1, #20
  tqp->prev = (thread_t *)tqp;
 80039e2:	e9c3 3300 	strd	r3, r3, [r3]
 80039e6:	e9c3 700f 	strd	r7, r0, [r3, #60]	; 0x3c
 80039ea:	f8c6 e010 	str.w	lr, [r6, #16]
 80039ee:	6172      	str	r2, [r6, #20]
  tmp->last       = (rtcnt_t)0;
 80039f0:	e9cd 2205 	strd	r2, r2, [sp, #20]
  mp->align = align;
 80039f4:	2604      	movs	r6, #4
 80039f6:	f103 0824 	add.w	r8, r3, #36	; 0x24
 80039fa:	f103 0e28 	add.w	lr, r3, #40	; 0x28
  mp->object_size = size;
 80039fe:	f04f 0c1c 	mov.w	ip, #28
  ch.tm.offset = (rtcnt_t)0;
 8003a02:	6762      	str	r2, [r4, #116]	; 0x74
  tmp->n          = (ucnt_t)0;
 8003a04:	9207      	str	r2, [sp, #28]
 8003a06:	609a      	str	r2, [r3, #8]
  mp->next = NULL;
 8003a08:	615a      	str	r2, [r3, #20]
 8003a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  mp->object_size = size;
 8003a0c:	6199      	str	r1, [r3, #24]
  mp->provider = provider;
 8003a0e:	4a60      	ldr	r2, [pc, #384]	; (8003b90 <main+0x400>)
 8003a10:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
 8003a14:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8003a18:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  mp->object_size = size;
 8003a1c:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8003a20:	6459      	str	r1, [r3, #68]	; 0x44
  mp->align = align;
 8003a22:	61de      	str	r6, [r3, #28]
 8003a24:	635e      	str	r6, [r3, #52]	; 0x34
  mp->provider = provider;
 8003a26:	621a      	str	r2, [r3, #32]
 8003a28:	639a      	str	r2, [r3, #56]	; 0x38
    chTMStartMeasurementX(&tm);
 8003a2a:	a804      	add	r0, sp, #16
 8003a2c:	f7ff fb20 	bl	8003070 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 8003a30:	a804      	add	r0, sp, #16
 8003a32:	f7ff faf5 	bl	8003020 <chTMStopMeasurementX>
  } while (i > 0U);
 8003a36:	3e01      	subs	r6, #1
 8003a38:	d1f7      	bne.n	8003a2a <main+0x29a>
  REG_INSERT(tp);
 8003a3a:	4a56      	ldr	r2, [pc, #344]	; (8003b94 <main+0x404>)
 8003a3c:	6967      	ldr	r7, [r4, #20]
  ch.tm.offset = tm.best;
 8003a3e:	9b04      	ldr	r3, [sp, #16]
 8003a40:	6763      	str	r3, [r4, #116]	; 0x74
  tp->prio      = prio;
 8003a42:	2080      	movs	r0, #128	; 0x80
  tp->refs      = (trefs_t)1;
 8003a44:	2101      	movs	r1, #1
  tqp->next = (thread_t *)tqp;
 8003a46:	f102 032c 	add.w	r3, r2, #44	; 0x2c
  tp->name      = name;
 8003a4a:	f8df e168 	ldr.w	lr, [pc, #360]	; 8003bb4 <main+0x424>
  tp->prio      = prio;
 8003a4e:	63a0      	str	r0, [r4, #56]	; 0x38
  tlp->next = (thread_t *)tlp;
 8003a50:	f102 0c28 	add.w	ip, r2, #40	; 0x28
  tp->realprio  = prio;
 8003a54:	66e0      	str	r0, [r4, #108]	; 0x6c
  tp->epending  = (eventmask_t)0;
 8003a56:	e9c4 6619 	strd	r6, r6, [r4, #100]	; 0x64
  REG_INSERT(tp);
 8003a5a:	e9c4 4710 	strd	r4, r7, [r4, #64]	; 0x40
  tp->flags     = CH_FLAG_MODE_STATIC;
 8003a5e:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
  tp->refs      = (trefs_t)1;
 8003a62:	f884 1052 	strb.w	r1, [r4, #82]	; 0x52
  tp->name      = name;
 8003a66:	f8c4 e048 	str.w	lr, [r4, #72]	; 0x48
 8003a6a:	2020      	movs	r0, #32
  REG_INSERT(tp);
 8003a6c:	613a      	str	r2, [r7, #16]
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8003a6e:	e9c4 2205 	strd	r2, r2, [r4, #20]
  tqp->next = (thread_t *)tqp;
 8003a72:	e9c4 c316 	strd	ip, r3, [r4, #88]	; 0x58
  currp->state = CH_STATE_CURRENT;
 8003a76:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
  currp->wabase = NULL;
 8003a7a:	64e6      	str	r6, [r4, #76]	; 0x4c
  tqp->prev = (thread_t *)tqp;
 8003a7c:	6623      	str	r3, [r4, #96]	; 0x60
 8003a7e:	f380 8811 	msr	BASEPRI, r0
  __ASM volatile ("cpsie i" : : : "memory");
 8003a82:	b662      	cpsie	i
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a84:	4b44      	ldr	r3, [pc, #272]	; (8003b98 <main+0x408>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8003a86:	4f45      	ldr	r7, [pc, #276]	; (8003b9c <main+0x40c>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a88:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a8c:	f64f 0eff 	movw	lr, #63743	; 0xf8ff
 8003a90:	ea0c 0c0e 	and.w	ip, ip, lr
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003a94:	f10e 4e60 	add.w	lr, lr, #3758096384	; 0xe0000000
  reg_value  =  (reg_value                                   |
 8003a98:	ea4c 0707 	orr.w	r7, ip, r7
 8003a9c:	f6ae 3e0f 	subw	lr, lr, #2831	; 0xb0f
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8003aa0:	60df      	str	r7, [r3, #12]
 8003aa2:	f8de 700c 	ldr.w	r7, [lr, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003aa6:	f8df c110 	ldr.w	ip, [pc, #272]	; 8003bb8 <main+0x428>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003aaa:	f047 7780 	orr.w	r7, r7, #16777216	; 0x1000000
 8003aae:	f8ce 700c 	str.w	r7, [lr, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003ab2:	f8dc 7000 	ldr.w	r7, [ip]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ab6:	f04f 0e10 	mov.w	lr, #16
 8003aba:	430f      	orrs	r7, r1
 8003abc:	f8cc 7000 	str.w	r7, [ip]
 8003ac0:	f883 e01f 	strb.w	lr, [r3, #31]
 8003ac4:	f883 0022 	strb.w	r0, [r3, #34]	; 0x22
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003ac8:	f386 8811 	msr	BASEPRI, r6
  __ASM volatile ("cpsie i" : : : "memory");
 8003acc:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003ace:	f380 8811 	msr	BASEPRI, r0
  tp->wabase = tdp->wbase;
 8003ad2:	4b33      	ldr	r3, [pc, #204]	; (8003ba0 <main+0x410>)
  REG_INSERT(tp);
 8003ad4:	6960      	ldr	r0, [r4, #20]
  tp->prio      = prio;
 8003ad6:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
  tp->mtxlist   = NULL;
 8003ada:	e9c3 6132 	strd	r6, r1, [r3, #200]	; 0xc8
  tp->refs      = (trefs_t)1;
 8003ade:	f883 10b2 	strb.w	r1, [r3, #178]	; 0xb2
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8003ae2:	4f30      	ldr	r7, [pc, #192]	; (8003ba4 <main+0x414>)
 8003ae4:	f8df e0d4 	ldr.w	lr, [pc, #212]	; 8003bbc <main+0x42c>
  tp->name      = name;
 8003ae8:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 8003bc0 <main+0x430>
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8003aec:	66df      	str	r7, [r3, #108]	; 0x6c
 8003aee:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 8003af2:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
  REG_INSERT(tp);
 8003af6:	f103 0790 	add.w	r7, r3, #144	; 0x90
  tp->state     = CH_STATE_WTSTART;
 8003afa:	2102      	movs	r1, #2
 8003afc:	f8a3 10b0 	strh.w	r1, [r3, #176]	; 0xb0
  REG_INSERT(tp);
 8003b00:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  tp->epending  = (eventmask_t)0;
 8003b04:	f8c3 60c4 	str.w	r6, [r3, #196]	; 0xc4
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8003b08:	f8c3 e08c 	str.w	lr, [r3, #140]	; 0x8c
  tp->name      = name;
 8003b0c:	f8c3 c0a8 	str.w	ip, [r3, #168]	; 0xa8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8003b10:	671e      	str	r6, [r3, #112]	; 0x70
  REG_INSERT(tp);
 8003b12:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
  tp->wabase = tdp->wbase;
 8003b16:	f8c3 30ac 	str.w	r3, [r3, #172]	; 0xac
  REG_INSERT(tp);
 8003b1a:	6107      	str	r7, [r0, #16]
  thread_t *otp = currp;
 8003b1c:	69a1      	ldr	r1, [r4, #24]
  ntp->u.rdymsg = msg;
 8003b1e:	f8c3 60b4 	str.w	r6, [r3, #180]	; 0xb4
  if (ntp->prio <= otp->prio) {
 8003b22:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8003b26:	6167      	str	r7, [r4, #20]
  tqp->next = (thread_t *)tqp;
 8003b28:	f103 00bc 	add.w	r0, r3, #188	; 0xbc
  tlp->next = (thread_t *)tlp;
 8003b2c:	f103 0eb8 	add.w	lr, r3, #184	; 0xb8
  tqp->next = (thread_t *)tqp;
 8003b30:	e9c3 e02e 	strd	lr, r0, [r3, #184]	; 0xb8
  tqp->prev = (thread_t *)tqp;
 8003b34:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
 8003b38:	f1bc 0f00 	cmp.w	ip, #0
 8003b3c:	f000 816c 	beq.w	8003e18 <main+0x688>
  tp->state = CH_STATE_READY;
 8003b40:	f883 60b0 	strb.w	r6, [r3, #176]	; 0xb0
  cp = (thread_t *)&ch.rlist.queue;
 8003b44:	3a30      	subs	r2, #48	; 0x30
 8003b46:	e03d      	b.n	8003bc4 <main+0x434>
 8003b48:	40026000 	.word	0x40026000
 8003b4c:	40026400 	.word	0x40026400
 8003b50:	e000e100 	.word	0xe000e100
 8003b54:	2000120c 	.word	0x2000120c
 8003b58:	20001128 	.word	0x20001128
 8003b5c:	200011a4 	.word	0x200011a4
 8003b60:	080026a1 	.word	0x080026a1
 8003b64:	40004400 	.word	0x40004400
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	06010016 	.word	0x06010016
 8003b70:	06010046 	.word	0x06010046
 8003b74:	2000128c 	.word	0x2000128c
 8003b78:	e0042000 	.word	0xe0042000
 8003b7c:	20001430 	.word	0x20001430
 8003b80:	08002661 	.word	0x08002661
 8003b84:	200014e0 	.word	0x200014e0
 8003b88:	20020000 	.word	0x20020000
 8003b8c:	20001304 	.word	0x20001304
 8003b90:	08002ff1 	.word	0x08002ff1
 8003b94:	200012bc 	.word	0x200012bc
 8003b98:	e000ed00 	.word	0xe000ed00
 8003b9c:	05fa0300 	.word	0x05fa0300
 8003ba0:	20001350 	.word	0x20001350
 8003ba4:	08003181 	.word	0x08003181
 8003ba8:	08006270 	.word	0x08006270
 8003bac:	40013000 	.word	0x40013000
 8003bb0:	20001428 	.word	0x20001428
 8003bb4:	080061d8 	.word	0x080061d8
 8003bb8:	e0001000 	.word	0xe0001000
 8003bbc:	080002d1 	.word	0x080002d1
 8003bc0:	08005cc0 	.word	0x08005cc0
    cp = cp->queue.next;
 8003bc4:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 8003bc6:	6891      	ldr	r1, [r2, #8]
 8003bc8:	2900      	cmp	r1, #0
 8003bca:	d1fb      	bne.n	8003bc4 <main+0x434>
  tp->queue.next             = cp;
 8003bcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  tp->queue.prev             = cp->queue.prev;
 8003bd0:	6851      	ldr	r1, [r2, #4]
 8003bd2:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
  tp->queue.prev->queue.next = tp;
 8003bd6:	600f      	str	r7, [r1, #0]
  cp->queue.prev             = tp;
 8003bd8:	6057      	str	r7, [r2, #4]
 8003bda:	2300      	movs	r3, #0
 8003bdc:	f383 8811 	msr	BASEPRI, r3
 8003be0:	2320      	movs	r3, #32
 8003be2:	f383 8811 	msr	BASEPRI, r3
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8003be6:	7a2b      	ldrb	r3, [r5, #8]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d111      	bne.n	8003c10 <main+0x480>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(true);
 8003bec:	4b97      	ldr	r3, [pc, #604]	; (8003e4c <main+0x6bc>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003bee:	4a98      	ldr	r2, [pc, #608]	; (8003e50 <main+0x6c0>)
 8003bf0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003bf2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8003bf6:	6419      	str	r1, [r3, #64]	; 0x40
 8003bf8:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003bfa:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8003bfe:	6619      	str	r1, [r3, #96]	; 0x60
 8003c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c02:	21c0      	movs	r1, #192	; 0xc0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003c04:	2340      	movs	r3, #64	; 0x40
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003c06:	f882 1326 	strb.w	r1, [r2, #806]	; 0x326
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003c0a:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003c0e:	6053      	str	r3, [r2, #4]
  USART_TypeDef *u = sdp->usart;
 8003c10:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 8003c12:	4a90      	ldr	r2, [pc, #576]	; (8003e54 <main+0x6c4>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	f000 8113 	beq.w	8003e40 <main+0x6b0>
 8003c1a:	488f      	ldr	r0, [pc, #572]	; (8003e58 <main+0x6c8>)
    fck = STM32_PCLK1 / config->speed;
 8003c1c:	f640 1227 	movw	r2, #2343	; 0x927
 8003c20:	f240 4193 	movw	r1, #1171	; 0x493
 8003c24:	4283      	cmp	r3, r0
 8003c26:	bf18      	it	ne
 8003c28:	460a      	movne	r2, r1
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8003c2a:	2440      	movs	r4, #64	; 0x40
  u->BRR = fck;
 8003c2c:	609a      	str	r2, [r3, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8003c2e:	f242 102c 	movw	r0, #8492	; 0x212c
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8003c32:	611c      	str	r4, [r3, #16]
  u->SR = 0;
 8003c34:	2600      	movs	r6, #0
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8003c36:	2401      	movs	r4, #1
 8003c38:	615c      	str	r4, [r3, #20]
    sdp->rxmask = 0xFF;
 8003c3a:	21ff      	movs	r1, #255	; 0xff
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8003c3c:	60d8      	str	r0, [r3, #12]

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 8003c3e:	2202      	movs	r2, #2
  u->SR = 0;
 8003c40:	601e      	str	r6, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8003c42:	6818      	ldr	r0, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8003c44:	685b      	ldr	r3, [r3, #4]
    sdp->rxmask = 0xFF;
 8003c46:	f885 1078 	strb.w	r1, [r5, #120]	; 0x78
 8003c4a:	722a      	strb	r2, [r5, #8]
 8003c4c:	f386 8811 	msr	BASEPRI, r6
    // pinMode(ssel, OUTPUT);
    // digitalWrite(ssel, HIGH);

    //NEW
    palSetLineMode(standby_reset, PAL_MODE_OUTPUT_PUSHPULL);
    palSetLineMode(ssel, PAL_MODE_OUTPUT_PUSHPULL);
 8003c50:	4c82      	ldr	r4, [pc, #520]	; (8003e5c <main+0x6cc>)
   */
  sdStart(&SD2, NULL);


  // LIB MOTEUR TEST
  x_nucleo_ihm02a1 = (XNucleoIHM02A1*) (sizeof(XNucleoIHM02A1));
 8003c52:	f8df a218 	ldr.w	sl, [pc, #536]	; 8003e6c <main+0x6dc>
    palSetLineMode(standby_reset, PAL_MODE_OUTPUT_PUSHPULL);
 8003c56:	4882      	ldr	r0, [pc, #520]	; (8003e60 <main+0x6d0>)
 * @retval true if initialization is successful, false otherwise.
 */
bool XNucleoIHM02A1::init_L6470_0(void)
{
    /* Initialization. */
    if (l6470_0->init((void *) init_components[0]) != COMPONENT_OK) {
 8003c58:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8003e70 <main+0x6e0>
 8003c5c:	232c      	movs	r3, #44	; 0x2c
    palSetLineMode(standby_reset, PAL_MODE_OUTPUT_PUSHPULL);
 8003c5e:	2120      	movs	r1, #32
 8003c60:	f8ca 3000 	str.w	r3, [sl]
 8003c64:	f7fe fc04 	bl	8002470 <_pal_lld_setgroupmode.constprop.0>
    palSetLineMode(ssel, PAL_MODE_OUTPUT_PUSHPULL);
 8003c68:	4620      	mov	r0, r4
 8003c6a:	2110      	movs	r1, #16
 8003c6c:	f7fe fc00 	bl	8002470 <_pal_lld_setgroupmode.constprop.0>
    palWriteLine(ssel, PAL_HIGH);
 8003c70:	2310      	movs	r3, #16
 8003c72:	61a3      	str	r3, [r4, #24]
 *
 * @api
 */
static inline void *chCoreAlloc(size_t size) {

  return chCoreAllocAlignedWithOffset(size, PORT_NATURAL_ALIGN, 0U);
 8003c74:	4632      	mov	r2, r6
 8003c76:	2104      	movs	r1, #4
 8003c78:	2064      	movs	r0, #100	; 0x64
 8003c7a:	f7fe fcf1 	bl	8002660 <chCoreAllocFromTop>
 8003c7e:	4632      	mov	r2, r6
 8003c80:	4605      	mov	r5, r0
 8003c82:	2104      	movs	r1, #4
 8003c84:	2064      	movs	r0, #100	; 0x64
    *l6470_0 = L6470(flag_irq, busy_irq, standby_reset, ssel);
 8003c86:	468b      	mov	fp, r1
 8003c88:	f7fe fcea 	bl	8002660 <chCoreAllocFromTop>
 8003c8c:	4632      	mov	r2, r6
 8003c8e:	4604      	mov	r4, r0
 8003c90:	f8cd b000 	str.w	fp, [sp]
 8003c94:	2101      	movs	r1, #1
 8003c96:	2305      	movs	r3, #5
 8003c98:	a804      	add	r0, sp, #16
 8003c9a:	f7ff fc39 	bl	8003510 <_ZN5L6470C1Ehhhh>
class L6470 : public StepperMotor
 8003c9e:	9b05      	ldr	r3, [sp, #20]
 8003ca0:	606b      	str	r3, [r5, #4]
 8003ca2:	9b06      	ldr	r3, [sp, #24]
 8003ca4:	60ab      	str	r3, [r5, #8]
 8003ca6:	9b07      	ldr	r3, [sp, #28]
 8003ca8:	60eb      	str	r3, [r5, #12]
 8003caa:	9b08      	ldr	r3, [sp, #32]
 8003cac:	612b      	str	r3, [r5, #16]
 8003cae:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8003cb2:	752b      	strb	r3, [r5, #20]
 8003cb4:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8003cb8:	756b      	strb	r3, [r5, #21]
 8003cba:	f10d 0e40 	add.w	lr, sp, #64	; 0x40
 8003cbe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8003cc0:	f8bd c038 	ldrh.w	ip, [sp, #56]	; 0x38
 8003cc4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003cc8:	61af      	str	r7, [r5, #24]
 8003cca:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8003ccc:	61ef      	str	r7, [r5, #28]
 8003cce:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8003cd0:	622f      	str	r7, [r5, #32]
 8003cd2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003cd4:	626f      	str	r7, [r5, #36]	; 0x24
 8003cd6:	f8a5 c028 	strh.w	ip, [r5, #40]	; 0x28
 8003cda:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8003cdc:	62ef      	str	r7, [r5, #44]	; 0x2c
 8003cde:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 8003ce2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003ce6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003cea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003cee:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8003cf2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8003cf6:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 8003cfa:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
    *l6470_1 = L6470(flag_irq, busy_irq, standby_reset, ssel);
 8003cfe:	4632      	mov	r2, r6
 8003d00:	f8cd b000 	str.w	fp, [sp]
 8003d04:	2101      	movs	r1, #1
 8003d06:	2305      	movs	r3, #5
 8003d08:	a804      	add	r0, sp, #16
 8003d0a:	f7ff fc01 	bl	8003510 <_ZN5L6470C1Ehhhh>
 8003d0e:	9b05      	ldr	r3, [sp, #20]
 8003d10:	6063      	str	r3, [r4, #4]
 8003d12:	9b06      	ldr	r3, [sp, #24]
 8003d14:	60a3      	str	r3, [r4, #8]
 8003d16:	9b07      	ldr	r3, [sp, #28]
 8003d18:	60e3      	str	r3, [r4, #12]
 8003d1a:	9b08      	ldr	r3, [sp, #32]
 8003d1c:	6123      	str	r3, [r4, #16]
 8003d1e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8003d22:	7523      	strb	r3, [r4, #20]
 8003d24:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8003d28:	7563      	strb	r3, [r4, #21]
 8003d2a:	ae10      	add	r6, sp, #64	; 0x40
 8003d2c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003d2e:	e9dd be0b 	ldrd	fp, lr, [sp, #44]	; 0x2c
 8003d32:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003d34:	9703      	str	r7, [sp, #12]
 8003d36:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8003d38:	61a7      	str	r7, [r4, #24]
 8003d3a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8003d3c:	f8bd c038 	ldrh.w	ip, [sp, #56]	; 0x38
 8003d40:	62e7      	str	r7, [r4, #44]	; 0x2c
 8003d42:	f8c4 e020 	str.w	lr, [r4, #32]
 8003d46:	9f03      	ldr	r7, [sp, #12]
 8003d48:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
 8003d4c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8003d50:	f8c4 b01c 	str.w	fp, [r4, #28]
 8003d54:	6267      	str	r7, [r4, #36]	; 0x24
 8003d56:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003d5a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003d5c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003d60:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003d64:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    palWriteLine(standby_reset, PAL_LOW);
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f022 0b0f 	bic.w	fp, r2, #15
 8003d6e:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 8003d72:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8003d76:	2701      	movs	r7, #1
 8003d78:	043b      	lsls	r3, r7, #16
 8003d7a:	f002 060f 	and.w	r6, r2, #15
 8003d7e:	f8cb 3018 	str.w	r3, [fp, #24]
    chThdSleepMilliseconds(1);
 8003d82:	200a      	movs	r0, #10
    palWriteLine(standby_reset, PAL_HIGH);
 8003d84:	40b7      	lsls	r7, r6
    chThdSleepMilliseconds(1);
 8003d86:	f7ff fbb3 	bl	80034f0 <chThdSleep>
     chThdSleepMilliseconds(1);
 8003d8a:	200a      	movs	r0, #10
    palWriteLine(standby_reset, PAL_HIGH);
 8003d8c:	f8cb 7018 	str.w	r7, [fp, #24]
     chThdSleepMilliseconds(1);
 8003d90:	f7ff fbae 	bl	80034f0 <chThdSleep>
    if (l6470_0->init((void *) init_components[0]) != COMPONENT_OK) {
 8003d94:	682b      	ldr	r3, [r5, #0]
 8003d96:	4628      	mov	r0, r5
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4641      	mov	r1, r8
 8003d9c:	4798      	blx	r3
 8003d9e:	2800      	cmp	r0, #0
 8003da0:	d151      	bne.n	8003e46 <main+0x6b6>
 * @retval true if initialization is successful, false otherwise.
 */
bool XNucleoIHM02A1::init_L6470_1(void)
{
    /* Initialization. */
    if (l6470_1->init((void *) init_components[1]) != COMPONENT_OK) {
 8003da2:	6823      	ldr	r3, [r4, #0]
 8003da4:	f108 0658 	add.w	r6, r8, #88	; 0x58
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4631      	mov	r1, r6
 8003dac:	4620      	mov	r0, r4
 8003dae:	4798      	blx	r3

/* Classes -------------------------------------------------------------------*/

/** Class representing a X-NUCLEO-IHM02A1 board.
 */
class XNucleoIHM02A1
 8003db0:	232c      	movs	r3, #44	; 0x2c
 8003db2:	2200      	movs	r2, #0
 8003db4:	e9c3 5401 	strd	r5, r4, [r3, #4]
 8003db8:	60dd      	str	r5, [r3, #12]
 8003dba:	f883 9024 	strb.w	r9, [r3, #36]	; 0x24
 8003dbe:	f8c3 8014 	str.w	r8, [r3, #20]
 8003dc2:	61da      	str	r2, [r3, #28]
 8003dc4:	629a      	str	r2, [r3, #40]	; 0x28
 8003dc6:	203c      	movs	r0, #60	; 0x3c
 8003dc8:	2144      	movs	r1, #68	; 0x44
 8003dca:	234c      	movs	r3, #76	; 0x4c
 8003dcc:	6004      	str	r4, [r0, #0]
 8003dce:	600e      	str	r6, [r1, #0]
 8003dd0:	601a      	str	r2, [r3, #0]
  *x_nucleo_ihm02a1 = XNucleoIHM02A1(&L6470_init[0], &L6470_init[1], PAL_LINE(GPIOC, 1), PAL_LINE(GPIOC, 0), PAL_LINE(GPIOB, 5), PAL_LINE(GPIOA, 4));
  motors = x_nucleo_ihm02a1->get_components();
 8003dd2:	f8da 3000 	ldr.w	r3, [sl]
 8003dd6:	4c23      	ldr	r4, [pc, #140]	; (8003e64 <main+0x6d4>)
  L6470_init[0].step_sel = StepperMotor::STEP_MODE_1_128;
 8003dd8:	2207      	movs	r2, #7
 8003dda:	f888 2054 	strb.w	r2, [r8, #84]	; 0x54
  L6470_init[1].step_sel = StepperMotor::STEP_MODE_1_128;
 8003dde:	f888 20ac 	strb.w	r2, [r8, #172]	; 0xac
  motors[0]->prepare_run(StepperMotor::BWD, 50);
 8003de2:	68d8      	ldr	r0, [r3, #12]
 8003de4:	6802      	ldr	r2, [r0, #0]
     * @param  None.
     * @retval The array of components.
     */
    L6470 **get_components(void)
    {
        return components;
 8003de6:	330c      	adds	r3, #12
  motors = x_nucleo_ihm02a1->get_components();
 8003de8:	6023      	str	r3, [r4, #0]
  motors[0]->prepare_run(StepperMotor::BWD, 50);
 8003dea:	2100      	movs	r1, #0
 8003dec:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
 8003df0:	2232      	movs	r2, #50	; 0x32
 8003df2:	4798      	blx	r3
  motors[1]->prepare_run(StepperMotor::FWD, 50);
 8003df4:	6823      	ldr	r3, [r4, #0]
 8003df6:	6858      	ldr	r0, [r3, #4]
 8003df8:	6803      	ldr	r3, [r0, #0]
 8003dfa:	2232      	movs	r2, #50	; 0x32
 8003dfc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003e00:	2101      	movs	r1, #1
 8003e02:	4798      	blx	r3
  x_nucleo_ihm02a1->perform_prepared_actions();
 8003e04:	f8da 0000 	ldr.w	r0, [sl]
 8003e08:	6803      	ldr	r3, [r0, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4798      	blx	r3
  /*
   * Normal main() thread activity
   */
  while (true) {
    
    chThdSleepMilliseconds(500);
 8003e0e:	f241 3088 	movw	r0, #5000	; 0x1388
 8003e12:	f7ff fb6d 	bl	80034f0 <chThdSleep>
  while (true) {
 8003e16:	e7fa      	b.n	8003e0e <main+0x67e>
  tp->state = CH_STATE_READY;
 8003e18:	f881 6020 	strb.w	r6, [r1, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8003e1c:	3a30      	subs	r2, #48	; 0x30
    cp = cp->queue.next;
 8003e1e:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio > tp->prio);
 8003e20:	6890      	ldr	r0, [r2, #8]
 8003e22:	2800      	cmp	r0, #0
 8003e24:	d1fb      	bne.n	8003e1e <main+0x68e>
  tp->queue.prev             = cp->queue.prev;
 8003e26:	6850      	ldr	r0, [r2, #4]
 8003e28:	e9c1 2000 	strd	r2, r0, [r1]
  tp->queue.prev->queue.next = tp;
 8003e2c:	6001      	str	r1, [r0, #0]
  cp->queue.prev             = tp;
 8003e2e:	6051      	str	r1, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 8003e30:	2201      	movs	r2, #1
    chSysSwitch(ntp, otp);
 8003e32:	480d      	ldr	r0, [pc, #52]	; (8003e68 <main+0x6d8>)
    ntp->state = CH_STATE_CURRENT;
 8003e34:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    currp = ntp;
 8003e38:	61a7      	str	r7, [r4, #24]
    chSysSwitch(ntp, otp);
 8003e3a:	f7fc fa41 	bl	80002c0 <_port_switch>
 8003e3e:	e6cc      	b.n	8003bda <main+0x44a>
    fck = STM32_PCLK2 / config->speed;
 8003e40:	f640 1227 	movw	r2, #2343	; 0x927
 8003e44:	e6f1      	b.n	8003c2a <main+0x49a>
 8003e46:	f108 0658 	add.w	r6, r8, #88	; 0x58
 8003e4a:	e7b1      	b.n	8003db0 <main+0x620>
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	e000e100 	.word	0xe000e100
 8003e54:	40011000 	.word	0x40011000
 8003e58:	40011400 	.word	0x40011400
 8003e5c:	40020000 	.word	0x40020000
 8003e60:	40020400 	.word	0x40020400
 8003e64:	200014d0 	.word	0x200014d0
 8003e68:	200013e0 	.word	0x200013e0
 8003e6c:	200014d4 	.word	0x200014d4
 8003e70:	20001040 	.word	0x20001040
	...

08003e80 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003e80:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 8003e84:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003e86:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f383 8811 	msr	BASEPRI, r3
}
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
	...

08003ea0 <chThdExit>:
void chThdExit(msg_t msg) {
 8003ea0:	b538      	push	{r3, r4, r5, lr}
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
 8003eaa:	4a0f      	ldr	r2, [pc, #60]	; (8003ee8 <chThdExit+0x48>)
 8003eac:	6994      	ldr	r4, [r2, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 8003eae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
 8003eb0:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 8003eb2:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8003eb6:	42a8      	cmp	r0, r5
 8003eb8:	d006      	beq.n	8003ec8 <chThdExit+0x28>
  tlp->next = tp->queue.next;
 8003eba:	6803      	ldr	r3, [r0, #0]
 8003ebc:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8003ebe:	f7ff f917 	bl	80030f0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 8003ec2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 8003ec4:	42a8      	cmp	r0, r5
 8003ec6:	d1f8      	bne.n	8003eba <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
 8003ec8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8003ecc:	b93b      	cbnz	r3, 8003ede <chThdExit+0x3e>
 8003ece:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8003ed2:	079b      	lsls	r3, r3, #30
 8003ed4:	d103      	bne.n	8003ede <chThdExit+0x3e>
    REG_REMOVE(tp);
 8003ed6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8003eda:	6113      	str	r3, [r2, #16]
 8003edc:	615a      	str	r2, [r3, #20]
}
 8003ede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 8003ee2:	200f      	movs	r0, #15
 8003ee4:	f7ff b9d4 	b.w	8003290 <chSchGoSleepS>
 8003ee8:	2000128c 	.word	0x2000128c
 8003eec:	00000000 	.word	0x00000000

08003ef0 <chSchDoReschedule>:
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;
 8003ef0:	4a0d      	ldr	r2, [pc, #52]	; (8003f28 <chSchDoReschedule+0x38>)
  thread_t *tp = tqp->next;
 8003ef2:	6810      	ldr	r0, [r2, #0]
 8003ef4:	6991      	ldr	r1, [r2, #24]
  tqp->next             = tp->queue.next;
 8003ef6:	6803      	ldr	r3, [r0, #0]
void chSchDoRescheduleAhead(void) {
 8003ef8:	b430      	push	{r4, r5}

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8003efa:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8003efc:	605a      	str	r2, [r3, #4]
  tp->state = CH_STATE_READY;
 8003efe:	2500      	movs	r5, #0
  currp->state = CH_STATE_CURRENT;
 8003f00:	f880 4020 	strb.w	r4, [r0, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 8003f04:	688c      	ldr	r4, [r1, #8]
  tqp->next             = tp->queue.next;
 8003f06:	6013      	str	r3, [r2, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8003f08:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 8003f0a:	f881 5020 	strb.w	r5, [r1, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8003f0e:	e000      	b.n	8003f12 <chSchDoReschedule+0x22>
 8003f10:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	4294      	cmp	r4, r2
 8003f16:	d3fb      	bcc.n	8003f10 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
 8003f18:	685a      	ldr	r2, [r3, #4]
  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
 8003f1a:	bc30      	pop	{r4, r5}
  tp->queue.prev             = cp->queue.prev;
 8003f1c:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 8003f20:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 8003f22:	6059      	str	r1, [r3, #4]
  chSysSwitch(currp, otp);
 8003f24:	f7fc b9cc 	b.w	80002c0 <_port_switch>
 8003f28:	2000128c 	.word	0x2000128c
 8003f2c:	00000000 	.word	0x00000000

08003f30 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0>:
/**
  * @brief  Send command to the L6470 daisy chain via SPI
  * @param  pL6470_DaisyChainSpiTxStruct  Pointer to the matrix array of bytes to be sent to the daisy chain L6470
  * @param  pL6470_DaisyChainSpiRxStruct  Pointer to the matrix array of bytes to be received from the daisy chain L6470
  */
void L6470::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 8003f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
  uint8_t spibyte;
  
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 8003f34:	4bbd      	ldr	r3, [pc, #756]	; (800422c <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x2fc>)
 8003f36:	4cbe      	ldr	r4, [pc, #760]	; (8004230 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x300>)
 8003f38:	4fbe      	ldr	r7, [pc, #760]	; (8004234 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x304>)
 8003f3a:	f8df 831c 	ldr.w	r8, [pc, #796]	; 8004258 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x328>
 8003f3e:	4ebe      	ldr	r6, [pc, #760]	; (8004238 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x308>)
 8003f40:	2200      	movs	r2, #0
void L6470::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 8003f42:	b083      	sub	sp, #12
 8003f44:	4681      	mov	r9, r0
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 8003f46:	701a      	strb	r2, [r3, #0]
 8003f48:	f104 050c 	add.w	r5, r4, #12
 8003f4c:	2320      	movs	r3, #32
 8003f4e:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 8003f52:	6960      	ldr	r0, [r4, #20]
  thread_t *ctp = currp;
 8003f54:	69b2      	ldr	r2, [r6, #24]
  if (mp->owner != NULL) {
 8003f56:	2800      	cmp	r0, #0
 8003f58:	f000 8121 	beq.w	800419e <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x26e>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->prio < ctp->prio) {
 8003f5c:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8003f60:	6883      	ldr	r3, [r0, #8]
 8003f62:	459c      	cmp	ip, r3
 8003f64:	d90c      	bls.n	8003f80 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x50>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->prio = ctp->prio;

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 8003f66:	f890 3020 	ldrb.w	r3, [r0, #32]
        tp->prio = ctp->prio;
 8003f6a:	f8c0 c008 	str.w	ip, [r0, #8]
        switch (tp->state) {
 8003f6e:	2b06      	cmp	r3, #6
 8003f70:	f000 813a 	beq.w	80041e8 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x2b8>
 8003f74:	2b07      	cmp	r3, #7
 8003f76:	f000 8123 	beq.w	80041c0 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x290>
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 8117 	beq.w	80041ae <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x27e>
  thread_t *cp = (thread_t *)tqp;
 8003f80:	4bae      	ldr	r3, [pc, #696]	; (800423c <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x30c>)
 8003f82:	e003      	b.n	8003f8c <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x5c>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8003f84:	6898      	ldr	r0, [r3, #8]
 8003f86:	6891      	ldr	r1, [r2, #8]
 8003f88:	4288      	cmp	r0, r1
 8003f8a:	d302      	bcc.n	8003f92 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x62>
    cp = cp->queue.next;
 8003f8c:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8003f8e:	42ab      	cmp	r3, r5
 8003f90:	d1f8      	bne.n	8003f84 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x54>
  tp->queue.prev             = cp->queue.prev;
 8003f92:	6859      	ldr	r1, [r3, #4]
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->queue);
      ctp->u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 8003f94:	2006      	movs	r0, #6
 8003f96:	e9c2 3100 	strd	r3, r1, [r2]
  tp->queue.prev->queue.next = tp;
 8003f9a:	600a      	str	r2, [r1, #0]
  cp->queue.prev             = tp;
 8003f9c:	605a      	str	r2, [r3, #4]
      ctp->u.wtmtxp = mp;
 8003f9e:	6255      	str	r5, [r2, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 8003fa0:	f7ff f976 	bl	8003290 <chSchGoSleepS>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	f383 8811 	msr	BASEPRI, r3
        // dev_spi->transfer(pBufferToWrite, pBufferToRead, NumBytes);
        // digitalWrite(ssel, HIGH);
        // dev_spi->endTransaction();

        spiAcquireBus(&SPID1);        
        palWriteLine(ssel, PAL_LOW);
 8003faa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003fae:	f003 020f 	and.w	r2, r3, #15
 8003fb2:	f102 0110 	add.w	r1, r2, #16
 8003fb6:	f023 030f 	bic.w	r3, r3, #15
 8003fba:	2201      	movs	r2, #1
 8003fbc:	408a      	lsls	r2, r1
 8003fbe:	619a      	str	r2, [r3, #24]
 8003fc0:	2320      	movs	r3, #32
 8003fc2:	f383 8811 	msr	BASEPRI, r3
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 8003fc6:	7823      	ldrb	r3, [r4, #0]
  osalDbgCheck((spip != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
                "invalid state");
  spip->config = config;
 8003fc8:	4a9d      	ldr	r2, [pc, #628]	; (8004240 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x310>)
 8003fca:	6062      	str	r2, [r4, #4]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	f000 80ac 	beq.w	800412a <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x1fa>
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8003fd2:	f8df c26c 	ldr.w	ip, [pc, #620]	; 8004240 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x310>
  if (spip->state == SPI_STOP) {
 8003fd6:	f04f 0e07 	mov.w	lr, #7
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8003fda:	205b      	movs	r0, #91	; 0x5b
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8003fdc:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 8003fe0:	69e3      	ldr	r3, [r4, #28]
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8003fe2:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8003fe6:	62e2      	str	r2, [r4, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8003fe8:	f421 41f0 	bic.w	r1, r1, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }

  if (spip->config->circular) {
 8003fec:	f89c c000 	ldrb.w	ip, [ip]
 8003ff0:	f1bc 0f00 	cmp.w	ip, #0
 8003ff4:	f000 8092 	beq.w	800411c <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x1ec>
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8003ff8:	f441 7184 	orr.w	r1, r1, #264	; 0x108
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8003ffc:	f442 7284 	orr.w	r2, r2, #264	; 0x108
 8004000:	e9c4 120a 	strd	r1, r2, [r4, #40]	; 0x28
    spip->rxdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
  }

  /* SPI setup and enable.*/
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 8004004:	681a      	ldr	r2, [r3, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8004006:	f440 7041 	orr.w	r0, r0, #772	; 0x304
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 800400a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800400e:	601a      	str	r2, [r3, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8004010:	6018      	str	r0, [r3, #0]
                    SPI_CR1_SSI;
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 8004012:	f8c3 e004 	str.w	lr, [r3, #4]
                    SPI_CR2_TXDMAEN;
  spip->spi->CR1 |= SPI_CR1_SPE;
 8004016:	681a      	ldr	r2, [r3, #0]
  spi_lld_start(spip);
  spip->state = SPI_READY;
 8004018:	2102      	movs	r1, #2
 800401a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	f04f 0a00 	mov.w	sl, #0
 8004024:	7021      	strb	r1, [r4, #0]
 8004026:	f38a 8811 	msr	BASEPRI, sl
 800402a:	f04f 0b20 	mov.w	fp, #32
 800402e:	f38b 8811 	msr	BASEPRI, fp
 8004032:	f38a 8811 	msr	BASEPRI, sl
 8004036:	f38b 8811 	msr	BASEPRI, fp

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 800403a:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
#endif

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiStartExchangeI(spip, n, txbuf, rxbuf);
 800403e:	2003      	movs	r0, #3
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 8004040:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8004044:	f8d4 e02c 	ldr.w	lr, [r4, #44]	; 0x2c
 8004048:	7020      	strb	r0, [r4, #0]
  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 800404a:	6812      	ldr	r2, [r2, #0]
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 800404c:	681b      	ldr	r3, [r3, #0]
  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 800404e:	60d7      	str	r7, [r2, #12]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8004050:	f44e 6e80 	orr.w	lr, lr, #1024	; 0x400
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 8004054:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8004058:	6051      	str	r1, [r2, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 800405a:	f8c2 c000 	str.w	ip, [r2]
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 800405e:	f8c3 800c 	str.w	r8, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8004062:	6059      	str	r1, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8004064:	f8c3 e000 	str.w	lr, [r3]

  dmaStreamEnable(spip->dmarx);
 8004068:	f8d2 c000 	ldr.w	ip, [r2]
  return ch.rlist.current;
 800406c:	69b1      	ldr	r1, [r6, #24]
 800406e:	f04c 0c01 	orr.w	ip, ip, #1
 8004072:	f8c2 c000 	str.w	ip, [r2]
  dmaStreamEnable(spip->dmatx);
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	f042 0201 	orr.w	r2, r2, #1
 800407c:	601a      	str	r2, [r3, #0]
  tp->u.wttrp = trp;
 800407e:	4b71      	ldr	r3, [pc, #452]	; (8004244 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x314>)
 8004080:	624b      	str	r3, [r1, #36]	; 0x24
  *trp = tp;
 8004082:	60a1      	str	r1, [r4, #8]
    chSchGoSleepS(newstate);
 8004084:	f7ff f904 	bl	8003290 <chSchGoSleepS>
 8004088:	f38a 8811 	msr	BASEPRI, sl
        spiStart(&SPID1, &ls_spicfg);
        spiSelect(&SPID1);            
        spiExchange(&SPID1, NumBytes, pBufferToWrite, pBufferToRead);
        palWriteLine(ssel, PAL_HIGH);
 800408c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004090:	2201      	movs	r2, #1
 8004092:	f003 010f 	and.w	r1, r3, #15
 8004096:	f023 030f 	bic.w	r3, r3, #15
 800409a:	408a      	lsls	r2, r1
 800409c:	619a      	str	r2, [r3, #24]
 800409e:	f38b 8811 	msr	BASEPRI, fp
 80040a2:	f38a 8811 	msr	BASEPRI, sl
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 80040a6:	f8d6 c018 	ldr.w	ip, [r6, #24]
 80040aa:	f38b 8811 	msr	BASEPRI, fp
  return (bool)(tqp->next != (const thread_t *)tqp);
 80040ae:	68e0      	ldr	r0, [r4, #12]
    chDbgAssert(ctp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 80040b0:	69a3      	ldr	r3, [r4, #24]
 80040b2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 80040b6:	42a8      	cmp	r0, r5
 80040b8:	d06e      	beq.n	8004198 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x268>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 80040ba:	f8dc 103c 	ldr.w	r1, [ip, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 80040be:	b14b      	cbz	r3, 80040d4 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x1a4>
 80040c0:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d003      	beq.n	80040ce <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x19e>
 80040c6:	6892      	ldr	r2, [r2, #8]
 80040c8:	4291      	cmp	r1, r2
 80040ca:	bf38      	it	cc
 80040cc:	4611      	movcc	r1, r2
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 80040ce:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1f5      	bne.n	80040c0 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x190>
  tqp->next             = tp->queue.next;
 80040d4:	6803      	ldr	r3, [r0, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 80040d6:	6b82      	ldr	r2, [r0, #56]	; 0x38
      ctp->prio = newprio;
 80040d8:	f8cc 1008 	str.w	r1, [ip, #8]
 80040dc:	60e3      	str	r3, [r4, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
 80040de:	605d      	str	r5, [r3, #4]
      tp->mtxlist = mp;
 80040e0:	6385      	str	r5, [r0, #56]	; 0x38
      mp->next = tp->mtxlist;
 80040e2:	e9c4 0205 	strd	r0, r2, [r4, #20]

      /* Note, not using chSchWakeupS() because that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 80040e6:	f7ff f803 	bl	80030f0 <chSchReadyI>
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.queue) > currp->prio;
 80040ea:	6832      	ldr	r2, [r6, #0]
 80040ec:	69b3      	ldr	r3, [r6, #24]
  if (chSchIsRescRequiredI()) {
 80040ee:	6892      	ldr	r2, [r2, #8]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d858      	bhi.n	80041a8 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x278>
 80040f6:	2300      	movs	r3, #0
 80040f8:	f383 8811 	msr	BASEPRI, r3
 80040fc:	2314      	movs	r3, #20
    /* Send the command via SPI */
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
    
    //_DELAY(TDISCS);
    uint8_t delay_cnt;
    for (delay_cnt=0; delay_cnt<20; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 80040fe:	bf00      	nop
 8004100:	3b01      	subs	r3, #1
 8004102:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8004106:	d1fa      	bne.n	80040fe <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x1ce>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8004108:	4b4f      	ldr	r3, [pc, #316]	; (8004248 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x318>)
 800410a:	3702      	adds	r7, #2
 800410c:	429f      	cmp	r7, r3
 800410e:	f108 0802 	add.w	r8, r8, #2
 8004112:	f47f af1b 	bne.w	8003f4c <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x1c>
  }
}
 8004116:	b003      	add	sp, #12
 8004118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    spip->rxdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 800411c:	f421 7184 	bic.w	r1, r1, #264	; 0x108
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8004120:	f422 7284 	bic.w	r2, r2, #264	; 0x108
 8004124:	e9c4 120a 	strd	r1, r2, [r4, #40]	; 0x28
 8004128:	e76c      	b.n	8004004 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0xd4>
 800412a:	4948      	ldr	r1, [pc, #288]	; (800424c <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x31c>)
 800412c:	2008      	movs	r0, #8
 800412e:	f7fe f937 	bl	80023a0 <dmaStreamAllocI.part.0.constprop.0>
 8004132:	4947      	ldr	r1, [pc, #284]	; (8004250 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x320>)
 8004134:	4603      	mov	r3, r0
 8004136:	200b      	movs	r0, #11
      spip->dmarx = dmaStreamAllocI(STM32_SPI_SPI1_RX_DMA_STREAM,
 8004138:	6223      	str	r3, [r4, #32]
 800413a:	f7fe f931 	bl	80023a0 <dmaStreamAllocI.part.0.constprop.0>
      rccEnableSPI1(true);
 800413e:	4a45      	ldr	r2, [pc, #276]	; (8004254 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x324>)
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8004140:	6a21      	ldr	r1, [r4, #32]
      rccEnableSPI1(true);
 8004142:	6c53      	ldr	r3, [r2, #68]	; 0x44
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8004144:	f8d1 e000 	ldr.w	lr, [r1]
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8004148:	f8d4 c004 	ldr.w	ip, [r4, #4]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 800414c:	f8d0 a000 	ldr.w	sl, [r0]
      rccEnableSPI1(true);
 8004150:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004154:	6453      	str	r3, [r2, #68]	; 0x44
 8004156:	6e51      	ldr	r1, [r2, #100]	; 0x64
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8004158:	69e3      	ldr	r3, [r4, #28]
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI1_TX_DMA_STREAM,
 800415a:	6260      	str	r0, [r4, #36]	; 0x24
      rccEnableSPI1(true);
 800415c:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8004160:	f8bc 0008 	ldrh.w	r0, [ip, #8]
      rccEnableSPI1(true);
 8004164:	6651      	str	r1, [r2, #100]	; 0x64
 8004166:	6e52      	ldr	r2, [r2, #100]	; 0x64
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8004168:	f103 020c 	add.w	r2, r3, #12
 800416c:	f8ce 2008 	str.w	r2, [lr, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8004170:	f8ca 2008 	str.w	r2, [sl, #8]
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8004174:	0502      	lsls	r2, r0, #20
 8004176:	d553      	bpl.n	8004220 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x2f0>
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004178:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 800417c:	f8bc e00a 	ldrh.w	lr, [ip, #10]
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004180:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8004184:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004188:	f421 41f0 	bic.w	r1, r1, #30720	; 0x7800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800418c:	62e2      	str	r2, [r4, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 800418e:	f441 5120 	orr.w	r1, r1, #10240	; 0x2800
 8004192:	f04e 0e07 	orr.w	lr, lr, #7
 8004196:	e729      	b.n	8003fec <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0xbc>
      chSchRescheduleS();
    }
    else {
      mp->owner = NULL;
 8004198:	f8c4 a014 	str.w	sl, [r4, #20]
 800419c:	e7ab      	b.n	80040f6 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x1c6>
    mp->next = ctp->mtxlist;
 800419e:	6b93      	ldr	r3, [r2, #56]	; 0x38
    ctp->mtxlist = mp;
 80041a0:	6395      	str	r5, [r2, #56]	; 0x38
    mp->next = ctp->mtxlist;
 80041a2:	e9c4 2305 	strd	r2, r3, [r4, #20]
 80041a6:	e6fd      	b.n	8003fa4 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x74>
    chSchDoRescheduleAhead();
 80041a8:	f7ff fea2 	bl	8003ef0 <chSchDoReschedule>
 80041ac:	e7a3      	b.n	80040f6 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x1c6>
  tp->queue.prev->queue.next = tp->queue.next;
 80041ae:	e9d0 3100 	ldrd	r3, r1, [r0]
 80041b2:	600b      	str	r3, [r1, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80041b4:	6059      	str	r1, [r3, #4]
 80041b6:	9201      	str	r2, [sp, #4]
          (void) chSchReadyI(queue_dequeue(tp));
 80041b8:	f7fe ff9a 	bl	80030f0 <chSchReadyI>
 80041bc:	9a01      	ldr	r2, [sp, #4]
 80041be:	e6df      	b.n	8003f80 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x50>
  tp->queue.prev->queue.next = tp->queue.next;
 80041c0:	e9d0 3100 	ldrd	r3, r1, [r0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 80041c4:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
 80041c8:	600b      	str	r3, [r1, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80041ca:	6059      	str	r1, [r3, #4]
  thread_t *cp = (thread_t *)tqp;
 80041cc:	4673      	mov	r3, lr
 80041ce:	e002      	b.n	80041d6 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x2a6>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80041d0:	6899      	ldr	r1, [r3, #8]
 80041d2:	4561      	cmp	r1, ip
 80041d4:	d302      	bcc.n	80041dc <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x2ac>
    cp = cp->queue.next;
 80041d6:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80041d8:	459e      	cmp	lr, r3
 80041da:	d1f9      	bne.n	80041d0 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x2a0>
  tp->queue.prev             = cp->queue.prev;
 80041dc:	6859      	ldr	r1, [r3, #4]
 80041de:	e9c0 3100 	strd	r3, r1, [r0]
  tp->queue.prev->queue.next = tp;
 80041e2:	6008      	str	r0, [r1, #0]
  cp->queue.prev             = tp;
 80041e4:	6058      	str	r0, [r3, #4]
 80041e6:	e6cb      	b.n	8003f80 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x50>
  tp->queue.prev->queue.next = tp->queue.next;
 80041e8:	e9d0 3100 	ldrd	r3, r1, [r0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 80041ec:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
 80041f0:	600b      	str	r3, [r1, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80041f2:	6059      	str	r1, [r3, #4]
  thread_t *cp = (thread_t *)tqp;
 80041f4:	4673      	mov	r3, lr
 80041f6:	e002      	b.n	80041fe <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x2ce>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80041f8:	6899      	ldr	r1, [r3, #8]
 80041fa:	4561      	cmp	r1, ip
 80041fc:	d302      	bcc.n	8004204 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x2d4>
    cp = cp->queue.next;
 80041fe:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8004200:	459e      	cmp	lr, r3
 8004202:	d1f9      	bne.n	80041f8 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x2c8>
  tp->queue.prev             = cp->queue.prev;
 8004204:	6859      	ldr	r1, [r3, #4]
      while (tp->prio < ctp->prio) {
 8004206:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800420a:	e9c0 3100 	strd	r3, r1, [r0]
  tp->queue.prev->queue.next = tp;
 800420e:	6008      	str	r0, [r1, #0]
  cp->queue.prev             = tp;
 8004210:	6058      	str	r0, [r3, #4]
          tp = tp->u.wtmtxp->owner;
 8004212:	f8de 0008 	ldr.w	r0, [lr, #8]
      while (tp->prio < ctp->prio) {
 8004216:	6883      	ldr	r3, [r0, #8]
 8004218:	459c      	cmp	ip, r3
 800421a:	f63f aea4 	bhi.w	8003f66 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x36>
 800421e:	e6af      	b.n	8003f80 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0x50>
 8004220:	f8bc e00a 	ldrh.w	lr, [ip, #10]
 8004224:	f04e 0e07 	orr.w	lr, lr, #7
 8004228:	e6d8      	b.n	8003fdc <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0+0xac>
 800422a:	bf00      	nop
 800422c:	20001208 	.word	0x20001208
 8004230:	200011a4 	.word	0x200011a4
 8004234:	200011f8 	.word	0x200011f8
 8004238:	2000128c 	.word	0x2000128c
 800423c:	200011b0 	.word	0x200011b0
 8004240:	08005cc8 	.word	0x08005cc8
 8004244:	200011ac 	.word	0x200011ac
 8004248:	20001200 	.word	0x20001200
 800424c:	080031b1 	.word	0x080031b1
 8004250:	08003191 	.word	0x08003191
 8004254:	40023800 	.word	0x40023800
 8004258:	20001200 	.word	0x20001200
 800425c:	00000000 	.word	0x00000000

08004260 <_ZN5L647010release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void release_sw(eL6470_ActId_t action, direction_t direction)
 8004260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(!L6470_DaisyChain_HalfPrepared)
 8004262:	4d11      	ldr	r5, [pc, #68]	; (80042a8 <_ZN5L647010release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x48>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8004264:	4c11      	ldr	r4, [pc, #68]	; (80042ac <_ZN5L647010release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x4c>)
  if(!L6470_DaisyChain_HalfPrepared)
 8004266:	782b      	ldrb	r3, [r5, #0]
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8004268:	f1a2 0201 	sub.w	r2, r2, #1
 800426c:	fab2 f282 	clz	r2, r2
 8004270:	0952      	lsrs	r2, r2, #5
 8004272:	b94b      	cbnz	r3, 8004288 <_ZN5L647010release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x28>
    (pL6470_AppCmdPkg+id)->p2=0;
 8004274:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8004278:	e9c4 3305 	strd	r3, r3, [r4, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800427c:	2601      	movs	r6, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 800427e:	7023      	strb	r3, [r4, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 8004280:	60e3      	str	r3, [r4, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8004282:	7423      	strb	r3, [r4, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 8004284:	61e3      	str	r3, [r4, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8004286:	702e      	strb	r6, [r5, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8004288:	7d43      	ldrb	r3, [r0, #21]
 800428a:	011e      	lsls	r6, r3, #4
 800428c:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 8004290:	2709      	movs	r7, #9
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8004292:	2500      	movs	r5, #0
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8004294:	55a7      	strb	r7, [r4, r6]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8004296:	e9c3 1201 	strd	r1, r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 800429a:	60dd      	str	r5, [r3, #12]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800429c:	f7fe f928 	bl	80024f0 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh.constprop.0>
    }
 80042a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80042a4:	f7ff be44 	b.w	8003f30 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0>
 80042a8:	20001208 	.word	0x20001208
 80042ac:	200011d4 	.word	0x200011d4

080042b0 <_ZN5L64708hard_hizEv>:
    virtual void hard_hiz(void)
 80042b0:	b538      	push	{r3, r4, r5, lr}
  if(!L6470_DaisyChain_HalfPrepared)
 80042b2:	490f      	ldr	r1, [pc, #60]	; (80042f0 <_ZN5L64708hard_hizEv+0x40>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80042b4:	4a0f      	ldr	r2, [pc, #60]	; (80042f4 <_ZN5L64708hard_hizEv+0x44>)
  if(!L6470_DaisyChain_HalfPrepared)
 80042b6:	780b      	ldrb	r3, [r1, #0]
 80042b8:	b94b      	cbnz	r3, 80042ce <_ZN5L64708hard_hizEv+0x1e>
    (pL6470_AppCmdPkg+id)->p2=0;
 80042ba:	e9c2 3301 	strd	r3, r3, [r2, #4]
 80042be:	e9c2 3305 	strd	r3, r3, [r2, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 80042c2:	2401      	movs	r4, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80042c4:	7013      	strb	r3, [r2, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 80042c6:	60d3      	str	r3, [r2, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80042c8:	7413      	strb	r3, [r2, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 80042ca:	61d3      	str	r3, [r2, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 80042cc:	700c      	strb	r4, [r1, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80042ce:	7d43      	ldrb	r3, [r0, #21]
 80042d0:	011c      	lsls	r4, r3, #4
 80042d2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 80042d6:	2100      	movs	r1, #0
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80042d8:	2511      	movs	r5, #17
 80042da:	5515      	strb	r5, [r2, r4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 80042dc:	e9c3 1101 	strd	r1, r1, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 80042e0:	60d9      	str	r1, [r3, #12]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80042e2:	f7fe f905 	bl	80024f0 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh.constprop.0>
    }
 80042e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80042ea:	f7ff be21 	b.w	8003f30 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0>
 80042ee:	bf00      	nop
 80042f0:	20001208 	.word	0x20001208
 80042f4:	200011d4 	.word	0x200011d4
	...

08004300 <_ZN5L64709hard_stopEv>:
    virtual void hard_stop(void)
 8004300:	b538      	push	{r3, r4, r5, lr}
  if(!L6470_DaisyChain_HalfPrepared)
 8004302:	490f      	ldr	r1, [pc, #60]	; (8004340 <_ZN5L64709hard_stopEv+0x40>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8004304:	4a0f      	ldr	r2, [pc, #60]	; (8004344 <_ZN5L64709hard_stopEv+0x44>)
  if(!L6470_DaisyChain_HalfPrepared)
 8004306:	780b      	ldrb	r3, [r1, #0]
 8004308:	b94b      	cbnz	r3, 800431e <_ZN5L64709hard_stopEv+0x1e>
    (pL6470_AppCmdPkg+id)->p2=0;
 800430a:	e9c2 3301 	strd	r3, r3, [r2, #4]
 800430e:	e9c2 3305 	strd	r3, r3, [r2, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8004312:	2401      	movs	r4, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8004314:	7013      	strb	r3, [r2, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 8004316:	60d3      	str	r3, [r2, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8004318:	7413      	strb	r3, [r2, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 800431a:	61d3      	str	r3, [r2, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800431c:	700c      	strb	r4, [r1, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 800431e:	7d43      	ldrb	r3, [r0, #21]
 8004320:	011c      	lsls	r4, r3, #4
 8004322:	eb02 1303 	add.w	r3, r2, r3, lsl #4
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 8004326:	2100      	movs	r1, #0
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8004328:	250f      	movs	r5, #15
 800432a:	5515      	strb	r5, [r2, r4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 800432c:	e9c3 1101 	strd	r1, r1, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8004330:	60d9      	str	r1, [r3, #12]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004332:	f7fe f8dd 	bl	80024f0 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh.constprop.0>
    }
 8004336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800433a:	f7ff bdf9 	b.w	8003f30 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0>
 800433e:	bf00      	nop
 8004340:	20001208 	.word	0x20001208
 8004344:	200011d4 	.word	0x200011d4
	...

08004350 <_ZN5L64709soft_stopEv>:
    virtual void soft_stop(void)
 8004350:	b538      	push	{r3, r4, r5, lr}
  if(!L6470_DaisyChain_HalfPrepared)
 8004352:	490f      	ldr	r1, [pc, #60]	; (8004390 <_ZN5L64709soft_stopEv+0x40>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8004354:	4a0f      	ldr	r2, [pc, #60]	; (8004394 <_ZN5L64709soft_stopEv+0x44>)
  if(!L6470_DaisyChain_HalfPrepared)
 8004356:	780b      	ldrb	r3, [r1, #0]
 8004358:	b94b      	cbnz	r3, 800436e <_ZN5L64709soft_stopEv+0x1e>
    (pL6470_AppCmdPkg+id)->p2=0;
 800435a:	e9c2 3301 	strd	r3, r3, [r2, #4]
 800435e:	e9c2 3305 	strd	r3, r3, [r2, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8004362:	2401      	movs	r4, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8004364:	7013      	strb	r3, [r2, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 8004366:	60d3      	str	r3, [r2, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8004368:	7413      	strb	r3, [r2, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 800436a:	61d3      	str	r3, [r2, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800436c:	700c      	strb	r4, [r1, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 800436e:	7d43      	ldrb	r3, [r0, #21]
 8004370:	011c      	lsls	r4, r3, #4
 8004372:	eb02 1303 	add.w	r3, r2, r3, lsl #4
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 8004376:	2100      	movs	r1, #0
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8004378:	250e      	movs	r5, #14
 800437a:	5515      	strb	r5, [r2, r4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 800437c:	e9c3 1101 	strd	r1, r1, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8004380:	60d9      	str	r1, [r3, #12]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004382:	f7fe f8b5 	bl	80024f0 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh.constprop.0>
    }
 8004386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800438a:	f7ff bdd1 	b.w	8003f30 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0>
 800438e:	bf00      	nop
 8004390:	20001208 	.word	0x20001208
 8004394:	200011d4 	.word	0x200011d4
	...

080043a0 <_ZN5L64704moveEN12StepperMotor11direction_tEj>:
    virtual void move(direction_t direction, unsigned int steps)
 80043a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(!L6470_DaisyChain_HalfPrepared)
 80043a2:	4d11      	ldr	r5, [pc, #68]	; (80043e8 <_ZN5L64704moveEN12StepperMotor11direction_tEj+0x48>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80043a4:	4c11      	ldr	r4, [pc, #68]	; (80043ec <_ZN5L64704moveEN12StepperMotor11direction_tEj+0x4c>)
  if(!L6470_DaisyChain_HalfPrepared)
 80043a6:	782b      	ldrb	r3, [r5, #0]
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 80043a8:	f1a1 0101 	sub.w	r1, r1, #1
 80043ac:	fab1 f181 	clz	r1, r1
 80043b0:	0949      	lsrs	r1, r1, #5
 80043b2:	b94b      	cbnz	r3, 80043c8 <_ZN5L64704moveEN12StepperMotor11direction_tEj+0x28>
    (pL6470_AppCmdPkg+id)->p2=0;
 80043b4:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80043b8:	e9c4 3305 	strd	r3, r3, [r4, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 80043bc:	2601      	movs	r6, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80043be:	7023      	strb	r3, [r4, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 80043c0:	60e3      	str	r3, [r4, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80043c2:	7423      	strb	r3, [r4, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 80043c4:	61e3      	str	r3, [r4, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 80043c6:	702e      	strb	r6, [r5, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80043c8:	7d43      	ldrb	r3, [r0, #21]
 80043ca:	011e      	lsls	r6, r3, #4
 80043cc:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 80043d0:	2705      	movs	r7, #5
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 80043d2:	2500      	movs	r5, #0
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80043d4:	55a7      	strb	r7, [r4, r6]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 80043d6:	e9c3 1201 	strd	r1, r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 80043da:	60dd      	str	r5, [r3, #12]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80043dc:	f7fe f888 	bl	80024f0 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh.constprop.0>
    }
 80043e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80043e4:	f7ff bda4 	b.w	8003f30 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0>
 80043e8:	20001208 	.word	0x20001208
 80043ec:	200011d4 	.word	0x200011d4

080043f0 <_ZN5L64708go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void go_until(eL6470_ActId_t action, direction_t direction, unsigned int speed)
 80043f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f2:	4607      	mov	r7, r0
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80043f4:	4618      	mov	r0, r3
    virtual void go_until(eL6470_ActId_t action, direction_t direction, unsigned int speed)
 80043f6:	460e      	mov	r6, r1
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80043f8:	f1a2 0501 	sub.w	r5, r2, #1
 80043fc:	f7fc f82c 	bl	8000458 <__aeabi_ui2f>
 8004400:	fab5 f585 	clz	r5, r5
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 8004404:	4917      	ldr	r1, [pc, #92]	; (8004464 <_ZN5L64708go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x74>)
 8004406:	096d      	lsrs	r5, r5, #5
 8004408:	4604      	mov	r4, r0
 800440a:	f7fc fa25 	bl	8000858 <__aeabi_fcmple>
 800440e:	b330      	cbz	r0, 800445e <_ZN5L64708go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x6e>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 8004410:	4915      	ldr	r1, [pc, #84]	; (8004468 <_ZN5L64708go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x78>)
 8004412:	4620      	mov	r0, r4
 8004414:	f7fc f92c 	bl	8000670 <__aeabi_fdiv>
 8004418:	f7fc fa62 	bl	80008e0 <__aeabi_f2uiz>
 800441c:	4603      	mov	r3, r0
  if(!L6470_DaisyChain_HalfPrepared)
 800441e:	4813      	ldr	r0, [pc, #76]	; (800446c <_ZN5L64708go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x7c>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8004420:	4a13      	ldr	r2, [pc, #76]	; (8004470 <_ZN5L64708go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x80>)
  if(!L6470_DaisyChain_HalfPrepared)
 8004422:	7801      	ldrb	r1, [r0, #0]
 8004424:	b949      	cbnz	r1, 800443a <_ZN5L64708go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x4a>
    (pL6470_AppCmdPkg+id)->p2=0;
 8004426:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800442a:	e9c2 1105 	strd	r1, r1, [r2, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800442e:	2401      	movs	r4, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8004430:	7011      	strb	r1, [r2, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 8004432:	60d1      	str	r1, [r2, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8004434:	7411      	strb	r1, [r2, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 8004436:	61d1      	str	r1, [r2, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8004438:	7004      	strb	r4, [r0, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 800443a:	7d7c      	ldrb	r4, [r7, #21]
 800443c:	0121      	lsls	r1, r4, #4
 800443e:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8004442:	f04f 0c08 	mov.w	ip, #8
 8004446:	f802 c001 	strb.w	ip, [r2, r1]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800444a:	4638      	mov	r0, r7
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 800444c:	e9c4 6501 	strd	r6, r5, [r4, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8004450:	60e3      	str	r3, [r4, #12]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004452:	f7fe f84d 	bl	80024f0 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh.constprop.0>
    }
 8004456:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800445a:	f7ff bd69 	b.w	8003f30 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0>
    return 0;   // Warning
 800445e:	4603      	mov	r3, r0
 8004460:	e7dd      	b.n	800441e <_ZN5L64708go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x2e>
 8004462:	bf00      	nop
 8004464:	4674241b 	.word	0x4674241b
 8004468:	3c74242a 	.word	0x3c74242a
 800446c:	20001208 	.word	0x20001208
 8004470:	200011d4 	.word	0x200011d4
	...

08004480 <_ZN5L64707go_markEv>:
    virtual void go_mark(void)
 8004480:	b538      	push	{r3, r4, r5, lr}
  if(!L6470_DaisyChain_HalfPrepared)
 8004482:	490f      	ldr	r1, [pc, #60]	; (80044c0 <_ZN5L64707go_markEv+0x40>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8004484:	4a0f      	ldr	r2, [pc, #60]	; (80044c4 <_ZN5L64707go_markEv+0x44>)
  if(!L6470_DaisyChain_HalfPrepared)
 8004486:	780b      	ldrb	r3, [r1, #0]
 8004488:	b94b      	cbnz	r3, 800449e <_ZN5L64707go_markEv+0x1e>
    (pL6470_AppCmdPkg+id)->p2=0;
 800448a:	e9c2 3301 	strd	r3, r3, [r2, #4]
 800448e:	e9c2 3305 	strd	r3, r3, [r2, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8004492:	2401      	movs	r4, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8004494:	7013      	strb	r3, [r2, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 8004496:	60d3      	str	r3, [r2, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8004498:	7413      	strb	r3, [r2, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 800449a:	61d3      	str	r3, [r2, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800449c:	700c      	strb	r4, [r1, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 800449e:	7d43      	ldrb	r3, [r0, #21]
 80044a0:	011c      	lsls	r4, r3, #4
 80044a2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 80044a6:	2100      	movs	r1, #0
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80044a8:	250b      	movs	r5, #11
 80044aa:	5515      	strb	r5, [r2, r4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 80044ac:	e9c3 1101 	strd	r1, r1, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 80044b0:	60d9      	str	r1, [r3, #12]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80044b2:	f7fe f81d 	bl	80024f0 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh.constprop.0>
    }
 80044b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80044ba:	f7ff bd39 	b.w	8003f30 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0>
 80044be:	bf00      	nop
 80044c0:	20001208 	.word	0x20001208
 80044c4:	200011d4 	.word	0x200011d4
	...

080044d0 <_ZN5L64707go_homeEv>:
    virtual void go_home(void)
 80044d0:	b538      	push	{r3, r4, r5, lr}
  if(!L6470_DaisyChain_HalfPrepared)
 80044d2:	490f      	ldr	r1, [pc, #60]	; (8004510 <_ZN5L64707go_homeEv+0x40>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80044d4:	4a0f      	ldr	r2, [pc, #60]	; (8004514 <_ZN5L64707go_homeEv+0x44>)
  if(!L6470_DaisyChain_HalfPrepared)
 80044d6:	780b      	ldrb	r3, [r1, #0]
 80044d8:	b94b      	cbnz	r3, 80044ee <_ZN5L64707go_homeEv+0x1e>
    (pL6470_AppCmdPkg+id)->p2=0;
 80044da:	e9c2 3301 	strd	r3, r3, [r2, #4]
 80044de:	e9c2 3305 	strd	r3, r3, [r2, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 80044e2:	2401      	movs	r4, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80044e4:	7013      	strb	r3, [r2, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 80044e6:	60d3      	str	r3, [r2, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80044e8:	7413      	strb	r3, [r2, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 80044ea:	61d3      	str	r3, [r2, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 80044ec:	700c      	strb	r4, [r1, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80044ee:	7d43      	ldrb	r3, [r0, #21]
 80044f0:	011c      	lsls	r4, r3, #4
 80044f2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 80044f6:	2100      	movs	r1, #0
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80044f8:	250a      	movs	r5, #10
 80044fa:	5515      	strb	r5, [r2, r4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 80044fc:	e9c3 1101 	strd	r1, r1, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8004500:	60d9      	str	r1, [r3, #12]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004502:	f7fd fff5 	bl	80024f0 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh.constprop.0>
    }
 8004506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800450a:	f7ff bd11 	b.w	8003f30 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0>
 800450e:	bf00      	nop
 8004510:	20001208 	.word	0x20001208
 8004514:	200011d4 	.word	0x200011d4
	...

08004520 <_ZN5L64705go_toEiN12StepperMotor11direction_tE>:
    virtual void go_to(signed int position, direction_t direction)
 8004520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004522:	4604      	mov	r4, r0
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8004524:	4608      	mov	r0, r1
 8004526:	f7fe f88b 	bl	8002640 <_ZN5L647023L6470_Position_2_AbsPosEl.constprop.0>
  if (AbsPos <= L6470_POSITION_RANGE)
 800452a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 800452e:	d224      	bcs.n	800457a <_ZN5L64705go_toEiN12StepperMotor11direction_tE+0x5a>
  if(!L6470_DaisyChain_HalfPrepared)
 8004530:	4d12      	ldr	r5, [pc, #72]	; (800457c <_ZN5L64705go_toEiN12StepperMotor11direction_tE+0x5c>)
 8004532:	f1a2 0201 	sub.w	r2, r2, #1
 8004536:	7829      	ldrb	r1, [r5, #0]
 8004538:	fab2 f282 	clz	r2, r2
 800453c:	4603      	mov	r3, r0
 800453e:	0952      	lsrs	r2, r2, #5
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8004540:	480f      	ldr	r0, [pc, #60]	; (8004580 <_ZN5L64705go_toEiN12StepperMotor11direction_tE+0x60>)
  if(!L6470_DaisyChain_HalfPrepared)
 8004542:	b949      	cbnz	r1, 8004558 <_ZN5L64705go_toEiN12StepperMotor11direction_tE+0x38>
    (pL6470_AppCmdPkg+id)->p2=0;
 8004544:	e9c0 1101 	strd	r1, r1, [r0, #4]
 8004548:	e9c0 1105 	strd	r1, r1, [r0, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800454c:	2601      	movs	r6, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 800454e:	7001      	strb	r1, [r0, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 8004550:	60c1      	str	r1, [r0, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8004552:	7401      	strb	r1, [r0, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 8004554:	61c1      	str	r1, [r0, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8004556:	702e      	strb	r6, [r5, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8004558:	7d61      	ldrb	r1, [r4, #21]
 800455a:	010e      	lsls	r6, r1, #4
 800455c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8004560:	2707      	movs	r7, #7
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8004562:	2500      	movs	r5, #0
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8004564:	5587      	strb	r7, [r0, r6]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8004566:	e9c1 2301 	strd	r2, r3, [r1, #4]
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800456a:	4620      	mov	r0, r4
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 800456c:	60cd      	str	r5, [r1, #12]
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800456e:	f7fd ffbf 	bl	80024f0 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh.constprop.0>
    }
 8004572:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004576:	f7ff bcdb 	b.w	8003f30 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0>
 800457a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800457c:	20001208 	.word	0x20001208
 8004580:	200011d4 	.word	0x200011d4
	...

08004590 <_ZN5L64705go_toEi>:
    virtual void go_to(signed int position)
 8004590:	b570      	push	{r4, r5, r6, lr}
 8004592:	4604      	mov	r4, r0
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8004594:	4608      	mov	r0, r1
 8004596:	f7fe f853 	bl	8002640 <_ZN5L647023L6470_Position_2_AbsPosEl.constprop.0>
  if (AbsPos <= L6470_POSITION_RANGE)
 800459a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 800459e:	d21f      	bcs.n	80045e0 <_ZN5L64705go_toEi+0x50>
 80045a0:	4603      	mov	r3, r0
  if(!L6470_DaisyChain_HalfPrepared)
 80045a2:	4810      	ldr	r0, [pc, #64]	; (80045e4 <_ZN5L64705go_toEi+0x54>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80045a4:	4910      	ldr	r1, [pc, #64]	; (80045e8 <_ZN5L64705go_toEi+0x58>)
  if(!L6470_DaisyChain_HalfPrepared)
 80045a6:	7802      	ldrb	r2, [r0, #0]
 80045a8:	b94a      	cbnz	r2, 80045be <_ZN5L64705go_toEi+0x2e>
    (pL6470_AppCmdPkg+id)->p2=0;
 80045aa:	e9c1 2201 	strd	r2, r2, [r1, #4]
 80045ae:	e9c1 2205 	strd	r2, r2, [r1, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 80045b2:	2501      	movs	r5, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80045b4:	700a      	strb	r2, [r1, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 80045b6:	60ca      	str	r2, [r1, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80045b8:	740a      	strb	r2, [r1, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 80045ba:	61ca      	str	r2, [r1, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 80045bc:	7005      	strb	r5, [r0, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80045be:	7d62      	ldrb	r2, [r4, #21]
 80045c0:	0110      	lsls	r0, r2, #4
 80045c2:	eb01 1202 	add.w	r2, r1, r2, lsl #4
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 80045c6:	2500      	movs	r5, #0
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80045c8:	2606      	movs	r6, #6
 80045ca:	540e      	strb	r6, [r1, r0]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 80045cc:	e9c2 3501 	strd	r3, r5, [r2, #4]
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80045d0:	4620      	mov	r0, r4
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 80045d2:	60d5      	str	r5, [r2, #12]
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80045d4:	f7fd ff8c 	bl	80024f0 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh.constprop.0>
    }
 80045d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80045dc:	f7ff bca8 	b.w	8003f30 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0>
 80045e0:	bd70      	pop	{r4, r5, r6, pc}
 80045e2:	bf00      	nop
 80045e4:	20001208 	.word	0x20001208
 80045e8:	200011d4 	.word	0x200011d4
 80045ec:	00000000 	.word	0x00000000

080045f0 <_ZN5L64708set_homeEv>:
    virtual void set_home(void)
 80045f0:	b538      	push	{r3, r4, r5, lr}
  if(!L6470_DaisyChain_HalfPrepared)
 80045f2:	490f      	ldr	r1, [pc, #60]	; (8004630 <_ZN5L64708set_homeEv+0x40>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80045f4:	4a0f      	ldr	r2, [pc, #60]	; (8004634 <_ZN5L64708set_homeEv+0x44>)
  if(!L6470_DaisyChain_HalfPrepared)
 80045f6:	780b      	ldrb	r3, [r1, #0]
 80045f8:	b94b      	cbnz	r3, 800460e <_ZN5L64708set_homeEv+0x1e>
    (pL6470_AppCmdPkg+id)->p2=0;
 80045fa:	e9c2 3301 	strd	r3, r3, [r2, #4]
 80045fe:	e9c2 3305 	strd	r3, r3, [r2, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8004602:	2401      	movs	r4, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8004604:	7013      	strb	r3, [r2, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 8004606:	60d3      	str	r3, [r2, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8004608:	7413      	strb	r3, [r2, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 800460a:	61d3      	str	r3, [r2, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800460c:	700c      	strb	r4, [r1, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 800460e:	7d43      	ldrb	r3, [r0, #21]
 8004610:	011c      	lsls	r4, r3, #4
 8004612:	eb02 1303 	add.w	r3, r2, r3, lsl #4
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 8004616:	2100      	movs	r1, #0
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8004618:	250c      	movs	r5, #12
 800461a:	5515      	strb	r5, [r2, r4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 800461c:	e9c3 1101 	strd	r1, r1, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8004620:	60d9      	str	r1, [r3, #12]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004622:	f7fd ff65 	bl	80024f0 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh.constprop.0>
    }
 8004626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800462a:	f7ff bc81 	b.w	8003f30 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0>
 800462e:	bf00      	nop
 8004630:	20001208 	.word	0x20001208
 8004634:	200011d4 	.word	0x200011d4
	...

08004640 <_ZN5L647015L6470_GetStatusEv>:
{
 8004640:	b538      	push	{r3, r4, r5, lr}
  if(!L6470_DaisyChain_HalfPrepared)
 8004642:	4913      	ldr	r1, [pc, #76]	; (8004690 <_ZN5L647015L6470_GetStatusEv+0x50>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8004644:	4a13      	ldr	r2, [pc, #76]	; (8004694 <_ZN5L647015L6470_GetStatusEv+0x54>)
  if(!L6470_DaisyChain_HalfPrepared)
 8004646:	780b      	ldrb	r3, [r1, #0]
{
 8004648:	4604      	mov	r4, r0
  if(!L6470_DaisyChain_HalfPrepared)
 800464a:	b94b      	cbnz	r3, 8004660 <_ZN5L647015L6470_GetStatusEv+0x20>
    (pL6470_AppCmdPkg+id)->p2=0;
 800464c:	e9c2 3301 	strd	r3, r3, [r2, #4]
 8004650:	e9c2 3305 	strd	r3, r3, [r2, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8004654:	2001      	movs	r0, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8004656:	7013      	strb	r3, [r2, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 8004658:	60d3      	str	r3, [r2, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 800465a:	7413      	strb	r3, [r2, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 800465c:	61d3      	str	r3, [r2, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800465e:	7008      	strb	r0, [r1, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8004660:	7d63      	ldrb	r3, [r4, #21]
 8004662:	0118      	lsls	r0, r3, #4
 8004664:	eb02 1303 	add.w	r3, r2, r3, lsl #4
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 8004668:	2100      	movs	r1, #0
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 800466a:	2512      	movs	r5, #18
 800466c:	5415      	strb	r5, [r2, r0]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 800466e:	e9c3 1101 	strd	r1, r1, [r3, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004672:	4620      	mov	r0, r4
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8004674:	60d9      	str	r1, [r3, #12]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004676:	f7fd ff3b 	bl	80024f0 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh.constprop.0>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800467a:	f7ff fc59 	bl	8003f30 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0>
  uint8_t i;

  value = 0x000000;
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
  {
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 800467e:	7d62      	ldrb	r2, [r4, #21]
 8004680:	4b05      	ldr	r3, [pc, #20]	; (8004698 <_ZN5L647015L6470_GetStatusEv+0x58>)
 8004682:	4413      	add	r3, r2
 8004684:	7898      	ldrb	r0, [r3, #2]
 8004686:	791b      	ldrb	r3, [r3, #4]
}
 8004688:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 800468c:	bd38      	pop	{r3, r4, r5, pc}
 800468e:	bf00      	nop
 8004690:	20001208 	.word	0x20001208
 8004694:	200011d4 	.word	0x200011d4
 8004698:	200011f8 	.word	0x200011f8
 800469c:	00000000 	.word	0x00000000

080046a0 <_ZN5L647010get_statusEv>:
    virtual unsigned int get_status(void)
 80046a0:	b508      	push	{r3, lr}
        return (unsigned int) L6470_GetStatus();
 80046a2:	f7ff ffcd 	bl	8004640 <_ZN5L647015L6470_GetStatusEv>
    }
 80046a6:	bd08      	pop	{r3, pc}
	...

080046b0 <_ZN5L647013L6470_SoftHiZEv>:
{
 80046b0:	b538      	push	{r3, r4, r5, lr}
  if(!L6470_DaisyChain_HalfPrepared)
 80046b2:	490f      	ldr	r1, [pc, #60]	; (80046f0 <_ZN5L647013L6470_SoftHiZEv+0x40>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80046b4:	4a0f      	ldr	r2, [pc, #60]	; (80046f4 <_ZN5L647013L6470_SoftHiZEv+0x44>)
  if(!L6470_DaisyChain_HalfPrepared)
 80046b6:	780b      	ldrb	r3, [r1, #0]
 80046b8:	b94b      	cbnz	r3, 80046ce <_ZN5L647013L6470_SoftHiZEv+0x1e>
    (pL6470_AppCmdPkg+id)->p2=0;
 80046ba:	e9c2 3301 	strd	r3, r3, [r2, #4]
 80046be:	e9c2 3305 	strd	r3, r3, [r2, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 80046c2:	2401      	movs	r4, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80046c4:	7013      	strb	r3, [r2, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 80046c6:	60d3      	str	r3, [r2, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80046c8:	7413      	strb	r3, [r2, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 80046ca:	61d3      	str	r3, [r2, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 80046cc:	700c      	strb	r4, [r1, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80046ce:	7d43      	ldrb	r3, [r0, #21]
 80046d0:	011c      	lsls	r4, r3, #4
 80046d2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 80046d6:	2100      	movs	r1, #0
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80046d8:	2510      	movs	r5, #16
 80046da:	5515      	strb	r5, [r2, r4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 80046dc:	e9c3 1101 	strd	r1, r1, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 80046e0:	60d9      	str	r1, [r3, #12]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80046e2:	f7fd ff05 	bl	80024f0 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh.constprop.0>
}
 80046e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80046ea:	f7ff bc21 	b.w	8003f30 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0>
 80046ee:	bf00      	nop
 80046f0:	20001208 	.word	0x20001208
 80046f4:	200011d4 	.word	0x200011d4
	...

08004700 <_ZN5L64708soft_hizEv>:
        L6470_SoftHiZ();
 8004700:	f7ff bfd6 	b.w	80046b0 <_ZN5L647013L6470_SoftHiZEv>
	...

08004710 <_ZN5L647010step_clockEN12StepperMotor11direction_tE>:
        soft_hiz();
 8004710:	6803      	ldr	r3, [r0, #0]
 8004712:	4a17      	ldr	r2, [pc, #92]	; (8004770 <_ZN5L647010step_clockEN12StepperMotor11direction_tE+0x60>)
 8004714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004716:	4293      	cmp	r3, r2
    virtual void step_clock(direction_t direction)
 8004718:	b570      	push	{r4, r5, r6, lr}
 800471a:	4604      	mov	r4, r0
 800471c:	460d      	mov	r5, r1
 800471e:	d125      	bne.n	800476c <_ZN5L647010step_clockEN12StepperMotor11direction_tE+0x5c>
        L6470_SoftHiZ();
 8004720:	f7ff ffc6 	bl	80046b0 <_ZN5L647013L6470_SoftHiZEv>
  if(!L6470_DaisyChain_HalfPrepared)
 8004724:	4913      	ldr	r1, [pc, #76]	; (8004774 <_ZN5L647010step_clockEN12StepperMotor11direction_tE+0x64>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8004726:	4a14      	ldr	r2, [pc, #80]	; (8004778 <_ZN5L647010step_clockEN12StepperMotor11direction_tE+0x68>)
  if(!L6470_DaisyChain_HalfPrepared)
 8004728:	780b      	ldrb	r3, [r1, #0]
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 800472a:	f1a5 0501 	sub.w	r5, r5, #1
 800472e:	fab5 f585 	clz	r5, r5
 8004732:	096d      	lsrs	r5, r5, #5
 8004734:	b94b      	cbnz	r3, 800474a <_ZN5L647010step_clockEN12StepperMotor11direction_tE+0x3a>
    (pL6470_AppCmdPkg+id)->p2=0;
 8004736:	e9c2 3301 	strd	r3, r3, [r2, #4]
 800473a:	e9c2 3305 	strd	r3, r3, [r2, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800473e:	2001      	movs	r0, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8004740:	7013      	strb	r3, [r2, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 8004742:	60d3      	str	r3, [r2, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8004744:	7413      	strb	r3, [r2, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 8004746:	61d3      	str	r3, [r2, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8004748:	7008      	strb	r0, [r1, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 800474a:	7d63      	ldrb	r3, [r4, #21]
 800474c:	0118      	lsls	r0, r3, #4
 800474e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8004752:	2100      	movs	r1, #0
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8004754:	2604      	movs	r6, #4
 8004756:	5416      	strb	r6, [r2, r0]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8004758:	e9c3 5101 	strd	r5, r1, [r3, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800475c:	4620      	mov	r0, r4
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 800475e:	60d9      	str	r1, [r3, #12]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004760:	f7fd fec6 	bl	80024f0 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh.constprop.0>
    }
 8004764:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004768:	f7ff bbe2 	b.w	8003f30 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0>
        soft_hiz();
 800476c:	4798      	blx	r3
 800476e:	e7d9      	b.n	8004724 <_ZN5L647010step_clockEN12StepperMotor11direction_tE+0x14>
 8004770:	08004701 	.word	0x08004701
 8004774:	20001208 	.word	0x20001208
 8004778:	200011d4 	.word	0x200011d4
 800477c:	00000000 	.word	0x00000000

08004780 <_ZN5L647017L6470_ResetDeviceEv>:
{
 8004780:	b538      	push	{r3, r4, r5, lr}
  if(!L6470_DaisyChain_HalfPrepared)
 8004782:	490f      	ldr	r1, [pc, #60]	; (80047c0 <_ZN5L647017L6470_ResetDeviceEv+0x40>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8004784:	4a0f      	ldr	r2, [pc, #60]	; (80047c4 <_ZN5L647017L6470_ResetDeviceEv+0x44>)
  if(!L6470_DaisyChain_HalfPrepared)
 8004786:	780b      	ldrb	r3, [r1, #0]
 8004788:	b94b      	cbnz	r3, 800479e <_ZN5L647017L6470_ResetDeviceEv+0x1e>
    (pL6470_AppCmdPkg+id)->p2=0;
 800478a:	e9c2 3301 	strd	r3, r3, [r2, #4]
 800478e:	e9c2 3305 	strd	r3, r3, [r2, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8004792:	2401      	movs	r4, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8004794:	7013      	strb	r3, [r2, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 8004796:	60d3      	str	r3, [r2, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8004798:	7413      	strb	r3, [r2, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 800479a:	61d3      	str	r3, [r2, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800479c:	700c      	strb	r4, [r1, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 800479e:	7d43      	ldrb	r3, [r0, #21]
 80047a0:	011c      	lsls	r4, r3, #4
 80047a2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 80047a6:	2100      	movs	r1, #0
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80047a8:	250d      	movs	r5, #13
 80047aa:	5515      	strb	r5, [r2, r4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 80047ac:	e9c3 1101 	strd	r1, r1, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 80047b0:	60d9      	str	r1, [r3, #12]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80047b2:	f7fd fe9d 	bl	80024f0 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh.constprop.0>
}
 80047b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80047ba:	f7ff bbb9 	b.w	8003f30 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0>
 80047be:	bf00      	nop
 80047c0:	20001208 	.word	0x20001208
 80047c4:	200011d4 	.word	0x200011d4
	...

080047d0 <_ZN5L647012reset_deviceEv>:
        L6470_ResetDevice();
 80047d0:	f7ff bfd6 	b.w	8004780 <_ZN5L647017L6470_ResetDeviceEv>
	...

080047e0 <_ZN5L64709L6470_RunE14eL6470_DirId_tm>:
{
 80047e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(!L6470_DaisyChain_HalfPrepared)
 80047e2:	4d0f      	ldr	r5, [pc, #60]	; (8004820 <_ZN5L64709L6470_RunE14eL6470_DirId_tm+0x40>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80047e4:	4c0f      	ldr	r4, [pc, #60]	; (8004824 <_ZN5L64709L6470_RunE14eL6470_DirId_tm+0x44>)
  if(!L6470_DaisyChain_HalfPrepared)
 80047e6:	782b      	ldrb	r3, [r5, #0]
 80047e8:	b94b      	cbnz	r3, 80047fe <_ZN5L64709L6470_RunE14eL6470_DirId_tm+0x1e>
    (pL6470_AppCmdPkg+id)->p2=0;
 80047ea:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80047ee:	e9c4 3305 	strd	r3, r3, [r4, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 80047f2:	2601      	movs	r6, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80047f4:	7023      	strb	r3, [r4, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 80047f6:	60e3      	str	r3, [r4, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80047f8:	7423      	strb	r3, [r4, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 80047fa:	61e3      	str	r3, [r4, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 80047fc:	702e      	strb	r6, [r5, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80047fe:	7d43      	ldrb	r3, [r0, #21]
 8004800:	011e      	lsls	r6, r3, #4
 8004802:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 8004806:	2703      	movs	r7, #3
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8004808:	2500      	movs	r5, #0
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 800480a:	55a7      	strb	r7, [r4, r6]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 800480c:	e9c3 1201 	strd	r1, r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8004810:	60dd      	str	r5, [r3, #12]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004812:	f7fd fe6d 	bl	80024f0 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh.constprop.0>
}
 8004816:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800481a:	f7ff bb89 	b.w	8003f30 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0>
 800481e:	bf00      	nop
 8004820:	20001208 	.word	0x20001208
 8004824:	200011d4 	.word	0x200011d4
	...

08004830 <_ZN5L64703runEN12StepperMotor11direction_tEj>:
    virtual void run(direction_t direction, unsigned int speed)
 8004830:	b570      	push	{r4, r5, r6, lr}
 8004832:	4604      	mov	r4, r0
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8004834:	4610      	mov	r0, r2
 8004836:	f1a1 0501 	sub.w	r5, r1, #1
 800483a:	f7fb fe0d 	bl	8000458 <__aeabi_ui2f>
 800483e:	fab5 f585 	clz	r5, r5
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 8004842:	490d      	ldr	r1, [pc, #52]	; (8004878 <_ZN5L64703runEN12StepperMotor11direction_tEj+0x48>)
 8004844:	096d      	lsrs	r5, r5, #5
 8004846:	4606      	mov	r6, r0
 8004848:	f7fc f806 	bl	8000858 <__aeabi_fcmple>
 800484c:	b160      	cbz	r0, 8004868 <_ZN5L64703runEN12StepperMotor11direction_tEj+0x38>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 800484e:	490b      	ldr	r1, [pc, #44]	; (800487c <_ZN5L64703runEN12StepperMotor11direction_tEj+0x4c>)
 8004850:	4630      	mov	r0, r6
 8004852:	f7fb ff0d 	bl	8000670 <__aeabi_fdiv>
 8004856:	f7fc f843 	bl	80008e0 <__aeabi_f2uiz>
 800485a:	4629      	mov	r1, r5
 800485c:	4602      	mov	r2, r0
 800485e:	4620      	mov	r0, r4
    }
 8004860:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8004864:	f7ff bfbc 	b.w	80047e0 <_ZN5L64709L6470_RunE14eL6470_DirId_tm>
 8004868:	4602      	mov	r2, r0
 800486a:	4629      	mov	r1, r5
 800486c:	4620      	mov	r0, r4
    }
 800486e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8004872:	f7ff bfb5 	b.w	80047e0 <_ZN5L64709L6470_RunE14eL6470_DirId_tm>
 8004876:	bf00      	nop
 8004878:	4674241b 	.word	0x4674241b
 800487c:	3c74242a 	.word	0x3c74242a

08004880 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t>:
{
 8004880:	b570      	push	{r4, r5, r6, lr}
  if(!L6470_DaisyChain_HalfPrepared)
 8004882:	4c1c      	ldr	r4, [pc, #112]	; (80048f4 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t+0x74>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8004884:	4a1c      	ldr	r2, [pc, #112]	; (80048f8 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t+0x78>)
  if(!L6470_DaisyChain_HalfPrepared)
 8004886:	7823      	ldrb	r3, [r4, #0]
{
 8004888:	4606      	mov	r6, r0
 800488a:	460d      	mov	r5, r1
  if(!L6470_DaisyChain_HalfPrepared)
 800488c:	b94b      	cbnz	r3, 80048a2 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t+0x22>
    (pL6470_AppCmdPkg+id)->p2=0;
 800488e:	e9c2 3301 	strd	r3, r3, [r2, #4]
 8004892:	e9c2 3305 	strd	r3, r3, [r2, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8004896:	2101      	movs	r1, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8004898:	7013      	strb	r3, [r2, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 800489a:	60d3      	str	r3, [r2, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 800489c:	7413      	strb	r3, [r2, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 800489e:	61d3      	str	r3, [r2, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 80048a0:	7021      	strb	r1, [r4, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80048a2:	7d73      	ldrb	r3, [r6, #21]
 80048a4:	0119      	lsls	r1, r3, #4
 80048a6:	eb02 1303 	add.w	r3, r2, r3, lsl #4
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 80048aa:	2400      	movs	r4, #0
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80048ac:	2002      	movs	r0, #2
 80048ae:	5450      	strb	r0, [r2, r1]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 80048b0:	e9c3 5401 	strd	r5, r4, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 80048b4:	60dc      	str	r4, [r3, #12]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80048b6:	4630      	mov	r0, r6
 80048b8:	f7fd fe1a 	bl	80024f0 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh.constprop.0>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80048bc:	f7ff fb38 	bl	8003f30 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0>
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 80048c0:	69b2      	ldr	r2, [r6, #24]
 80048c2:	4b0e      	ldr	r3, [pc, #56]	; (80048fc <_ZN5L647014L6470_GetParamE14eL6470_RegId_t+0x7c>)
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 80048c4:	7d71      	ldrb	r1, [r6, #21]
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 80048c6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80048ca:	eb02 0585 	add.w	r5, r2, r5, lsl #2
  value = 0x000000;
 80048ce:	4620      	mov	r0, r4
 80048d0:	7bac      	ldrb	r4, [r5, #14]
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 80048d2:	185d      	adds	r5, r3, r1
 80048d4:	00e4      	lsls	r4, r4, #3
 80048d6:	2301      	movs	r3, #1
 80048d8:	f815 2013 	ldrb.w	r2, [r5, r3, lsl #1]
 80048dc:	ebc3 7143 	rsb	r1, r3, r3, lsl #29
 80048e0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80048e4:	3301      	adds	r3, #1
 80048e6:	408a      	lsls	r2, r1
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 80048e8:	2b04      	cmp	r3, #4
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 80048ea:	ea40 0002 	orr.w	r0, r0, r2
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 80048ee:	d1f3      	bne.n	80048d8 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t+0x58>
}
 80048f0:	bd70      	pop	{r4, r5, r6, pc}
 80048f2:	bf00      	nop
 80048f4:	20001208 	.word	0x20001208
 80048f8:	200011d4 	.word	0x200011d4
 80048fc:	200011f8 	.word	0x200011f8

08004900 <_ZN5L647012get_positionEv>:
    virtual signed int get_position(void)
 8004900:	b508      	push	{r3, lr}
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8004902:	2100      	movs	r1, #0
 8004904:	f7ff ffbc 	bl	8004880 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t>
  if (AbsPos > L6470_MAX_POSITION)
 8004908:	f5b0 1f00 	cmp.w	r0, #2097152	; 0x200000
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 800490c:	bf28      	it	cs
 800490e:	f5a0 0080 	subcs.w	r0, r0, #4194304	; 0x400000
    }
 8004912:	bd08      	pop	{r3, pc}
	...

08004920 <_ZN5L647011prepare_runEN12StepperMotor11direction_tE>:
    virtual void prepare_run(direction_t direction)
 8004920:	b538      	push	{r3, r4, r5, lr}
 8004922:	460d      	mov	r5, r1
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8004924:	2106      	movs	r1, #6
    virtual void prepare_run(direction_t direction)
 8004926:	4604      	mov	r4, r0
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8004928:	f7ff ffaa 	bl	8004880 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t>
 800492c:	f1a5 0101 	sub.w	r1, r5, #1
 8004930:	fab1 f181 	clz	r1, r1
 8004934:	4602      	mov	r2, r0
 8004936:	0949      	lsrs	r1, r1, #5
 8004938:	4620      	mov	r0, r4
 800493a:	f7fe f959 	bl	8002bf0 <_ZN5L647016L6470_PrepareRunE14eL6470_DirId_tm>
        prepared_action = PREPARED_NO_ACTION;
 800493e:	2300      	movs	r3, #0
 8004940:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    }
 8004944:	bd38      	pop	{r3, r4, r5, pc}
 8004946:	bf00      	nop
	...

08004950 <_ZN5L647017wait_while_activeEv>:
    virtual void wait_while_active(void)
 8004950:	b510      	push	{r4, lr}
 8004952:	4604      	mov	r4, r0

uint8_t L6470::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
{
  uint8_t state = 0;

  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 8004954:	2118      	movs	r1, #24
 8004956:	4620      	mov	r0, r4
 8004958:	f7ff ff92 	bl	8004880 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t>
 800495c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800495e:	8018      	strh	r0, [r3, #0]
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 8004960:	0783      	lsls	r3, r0, #30
 8004962:	d5f7      	bpl.n	8004954 <_ZN5L647017wait_while_activeEv+0x4>
    }
 8004964:	bd10      	pop	{r4, pc}
 8004966:	bf00      	nop
	...

08004970 <_ZN5L64703runEN12StepperMotor11direction_tE>:
    virtual void run(direction_t direction)
 8004970:	b538      	push	{r3, r4, r5, lr}
 8004972:	460d      	mov	r5, r1
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8004974:	2106      	movs	r1, #6
    virtual void run(direction_t direction)
 8004976:	4604      	mov	r4, r0
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8004978:	f7ff ff82 	bl	8004880 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t>
 800497c:	f1a5 0101 	sub.w	r1, r5, #1
 8004980:	fab1 f181 	clz	r1, r1
 8004984:	4602      	mov	r2, r0
 8004986:	0949      	lsrs	r1, r1, #5
 8004988:	4620      	mov	r0, r4
    }
 800498a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 800498e:	f7ff bf27 	b.w	80047e0 <_ZN5L64709L6470_RunE14eL6470_DirId_tm>
 8004992:	bf00      	nop
	...

080049a0 <_ZN5L647013get_directionEv>:
    virtual direction_t get_direction(void)
 80049a0:	b510      	push	{r4, lr}
 80049a2:	2118      	movs	r1, #24
 80049a4:	4604      	mov	r4, r0
 80049a6:	f7ff ff6b 	bl	8004880 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t>
 80049aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80049ac:	8018      	strh	r0, [r3, #0]
    }
 80049ae:	f3c0 1000 	ubfx	r0, r0, #4, #1
 80049b2:	bd10      	pop	{r4, pc}
	...

080049c0 <_ZN5L647016get_decelerationEv>:
    virtual unsigned int get_deceleration(void)
 80049c0:	b538      	push	{r3, r4, r5, lr}
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 80049c2:	2105      	movs	r1, #5
 80049c4:	f7ff ff5c 	bl	8004880 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t>
  if (Acc <= L6470_MAX_ACC)
 80049c8:	b283      	uxth	r3, r0
 80049ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ce:	d21d      	bcs.n	8004a0c <_ZN5L647016get_decelerationEv+0x4c>
    return (Acc * ((float)1.4552e1));
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7fb fd45 	bl	8000460 <__aeabi_i2f>
 80049d6:	4918      	ldr	r1, [pc, #96]	; (8004a38 <_ZN5L647016get_decelerationEv+0x78>)
 80049d8:	f7fb fd96 	bl	8000508 <__aeabi_fmul>
        if (f >= 0) {
 80049dc:	2100      	movs	r1, #0
 80049de:	4605      	mov	r5, r0
 80049e0:	f7fb ff44 	bl	800086c <__aeabi_fcmpge>
 80049e4:	b9a0      	cbnz	r0, 8004a10 <_ZN5L647016get_decelerationEv+0x50>
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 80049e6:	4628      	mov	r0, r5
 80049e8:	f7fb ff54 	bl	8000894 <__aeabi_f2iz>
 80049ec:	4604      	mov	r4, r0
 80049ee:	f7fb fd37 	bl	8000460 <__aeabi_i2f>
 80049f2:	4601      	mov	r1, r0
 80049f4:	4628      	mov	r0, r5
 80049f6:	f7fb fc7d 	bl	80002f4 <__aeabi_fsub>
 80049fa:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 80049fe:	f7fb ff21 	bl	8000844 <__aeabi_fcmplt>
 8004a02:	2800      	cmp	r0, #0
 8004a04:	bf0c      	ite	eq
 8004a06:	4620      	moveq	r0, r4
 8004a08:	1e60      	subne	r0, r4, #1
    }
 8004a0a:	bd38      	pop	{r3, r4, r5, pc}
  if (Acc <= L6470_MAX_ACC)
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	bd38      	pop	{r3, r4, r5, pc}
 8004a10:	4628      	mov	r0, r5
 8004a12:	f7fb ff3f 	bl	8000894 <__aeabi_f2iz>
 8004a16:	4604      	mov	r4, r0
 8004a18:	f7fb fd22 	bl	8000460 <__aeabi_i2f>
 8004a1c:	4601      	mov	r1, r0
 8004a1e:	4628      	mov	r0, r5
 8004a20:	f7fb fc68 	bl	80002f4 <__aeabi_fsub>
 8004a24:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004a28:	f7fb ff0c 	bl	8000844 <__aeabi_fcmplt>
 8004a2c:	2800      	cmp	r0, #0
 8004a2e:	bf14      	ite	ne
 8004a30:	4620      	movne	r0, r4
 8004a32:	1c60      	addeq	r0, r4, #1
 8004a34:	bd38      	pop	{r3, r4, r5, pc}
 8004a36:	bf00      	nop
 8004a38:	4168d4fe 	.word	0x4168d4fe
 8004a3c:	00000000 	.word	0x00000000

08004a40 <_ZN5L647016get_accelerationEv>:
    virtual unsigned int get_acceleration(void)
 8004a40:	b538      	push	{r3, r4, r5, lr}
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 8004a42:	2104      	movs	r1, #4
 8004a44:	f7ff ff1c 	bl	8004880 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t>
 8004a48:	b283      	uxth	r3, r0
 8004a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a4e:	d21d      	bcs.n	8004a8c <_ZN5L647016get_accelerationEv+0x4c>
    return (Acc * ((float)1.4552e1));
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7fb fd05 	bl	8000460 <__aeabi_i2f>
 8004a56:	4918      	ldr	r1, [pc, #96]	; (8004ab8 <_ZN5L647016get_accelerationEv+0x78>)
 8004a58:	f7fb fd56 	bl	8000508 <__aeabi_fmul>
        if (f >= 0) {
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	4605      	mov	r5, r0
 8004a60:	f7fb ff04 	bl	800086c <__aeabi_fcmpge>
 8004a64:	b9a0      	cbnz	r0, 8004a90 <_ZN5L647016get_accelerationEv+0x50>
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 8004a66:	4628      	mov	r0, r5
 8004a68:	f7fb ff14 	bl	8000894 <__aeabi_f2iz>
 8004a6c:	4604      	mov	r4, r0
 8004a6e:	f7fb fcf7 	bl	8000460 <__aeabi_i2f>
 8004a72:	4601      	mov	r1, r0
 8004a74:	4628      	mov	r0, r5
 8004a76:	f7fb fc3d 	bl	80002f4 <__aeabi_fsub>
 8004a7a:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 8004a7e:	f7fb fee1 	bl	8000844 <__aeabi_fcmplt>
 8004a82:	2800      	cmp	r0, #0
 8004a84:	bf0c      	ite	eq
 8004a86:	4620      	moveq	r0, r4
 8004a88:	1e60      	subne	r0, r4, #1
    }
 8004a8a:	bd38      	pop	{r3, r4, r5, pc}
  if (Acc <= L6470_MAX_ACC)
 8004a8c:	2000      	movs	r0, #0
 8004a8e:	bd38      	pop	{r3, r4, r5, pc}
 8004a90:	4628      	mov	r0, r5
 8004a92:	f7fb feff 	bl	8000894 <__aeabi_f2iz>
 8004a96:	4604      	mov	r4, r0
 8004a98:	f7fb fce2 	bl	8000460 <__aeabi_i2f>
 8004a9c:	4601      	mov	r1, r0
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	f7fb fc28 	bl	80002f4 <__aeabi_fsub>
 8004aa4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004aa8:	f7fb fecc 	bl	8000844 <__aeabi_fcmplt>
 8004aac:	2800      	cmp	r0, #0
 8004aae:	bf14      	ite	ne
 8004ab0:	4620      	movne	r0, r4
 8004ab2:	1c60      	addeq	r0, r4, #1
 8004ab4:	bd38      	pop	{r3, r4, r5, pc}
 8004ab6:	bf00      	nop
 8004ab8:	4168d4fe 	.word	0x4168d4fe
 8004abc:	00000000 	.word	0x00000000

08004ac0 <_ZN5L647013get_min_speedEv>:
    virtual unsigned int get_min_speed(void)
 8004ac0:	b538      	push	{r3, r4, r5, lr}
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 8004ac2:	2107      	movs	r1, #7
 8004ac4:	f7ff fedc 	bl	8004880 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t>
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 8004ac8:	b283      	uxth	r3, r0
 8004aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ace:	d21d      	bcs.n	8004b0c <_ZN5L647013get_min_speedEv+0x4c>
    return (MinSpeed * ((float)238.4186e-3));
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7fb fcc5 	bl	8000460 <__aeabi_i2f>
 8004ad6:	4918      	ldr	r1, [pc, #96]	; (8004b38 <_ZN5L647013get_min_speedEv+0x78>)
 8004ad8:	f7fb fd16 	bl	8000508 <__aeabi_fmul>
        if (f >= 0) {
 8004adc:	2100      	movs	r1, #0
 8004ade:	4605      	mov	r5, r0
 8004ae0:	f7fb fec4 	bl	800086c <__aeabi_fcmpge>
 8004ae4:	b9a0      	cbnz	r0, 8004b10 <_ZN5L647013get_min_speedEv+0x50>
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	f7fb fed4 	bl	8000894 <__aeabi_f2iz>
 8004aec:	4604      	mov	r4, r0
 8004aee:	f7fb fcb7 	bl	8000460 <__aeabi_i2f>
 8004af2:	4601      	mov	r1, r0
 8004af4:	4628      	mov	r0, r5
 8004af6:	f7fb fbfd 	bl	80002f4 <__aeabi_fsub>
 8004afa:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 8004afe:	f7fb fea1 	bl	8000844 <__aeabi_fcmplt>
 8004b02:	2800      	cmp	r0, #0
 8004b04:	bf0c      	ite	eq
 8004b06:	4620      	moveq	r0, r4
 8004b08:	1e60      	subne	r0, r4, #1
    }
 8004b0a:	bd38      	pop	{r3, r4, r5, pc}
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	bd38      	pop	{r3, r4, r5, pc}
 8004b10:	4628      	mov	r0, r5
 8004b12:	f7fb febf 	bl	8000894 <__aeabi_f2iz>
 8004b16:	4604      	mov	r4, r0
 8004b18:	f7fb fca2 	bl	8000460 <__aeabi_i2f>
 8004b1c:	4601      	mov	r1, r0
 8004b1e:	4628      	mov	r0, r5
 8004b20:	f7fb fbe8 	bl	80002f4 <__aeabi_fsub>
 8004b24:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004b28:	f7fb fe8c 	bl	8000844 <__aeabi_fcmplt>
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	bf14      	ite	ne
 8004b30:	4620      	movne	r0, r4
 8004b32:	1c60      	addeq	r0, r4, #1
 8004b34:	bd38      	pop	{r3, r4, r5, pc}
 8004b36:	bf00      	nop
 8004b38:	3e742401 	.word	0x3e742401
 8004b3c:	00000000 	.word	0x00000000

08004b40 <_ZN5L647013get_max_speedEv>:
    virtual unsigned int get_max_speed(void)
 8004b40:	b538      	push	{r3, r4, r5, lr}
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 8004b42:	2106      	movs	r1, #6
 8004b44:	f7ff fe9c 	bl	8004880 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t>
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 8004b48:	b283      	uxth	r3, r0
 8004b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b4e:	d21d      	bcs.n	8004b8c <_ZN5L647013get_max_speedEv+0x4c>
    return (MaxSpeed * ((float)15.2588));
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7fb fc85 	bl	8000460 <__aeabi_i2f>
 8004b56:	4918      	ldr	r1, [pc, #96]	; (8004bb8 <_ZN5L647013get_max_speedEv+0x78>)
 8004b58:	f7fb fcd6 	bl	8000508 <__aeabi_fmul>
        if (f >= 0) {
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	4605      	mov	r5, r0
 8004b60:	f7fb fe84 	bl	800086c <__aeabi_fcmpge>
 8004b64:	b9a0      	cbnz	r0, 8004b90 <_ZN5L647013get_max_speedEv+0x50>
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 8004b66:	4628      	mov	r0, r5
 8004b68:	f7fb fe94 	bl	8000894 <__aeabi_f2iz>
 8004b6c:	4604      	mov	r4, r0
 8004b6e:	f7fb fc77 	bl	8000460 <__aeabi_i2f>
 8004b72:	4601      	mov	r1, r0
 8004b74:	4628      	mov	r0, r5
 8004b76:	f7fb fbbd 	bl	80002f4 <__aeabi_fsub>
 8004b7a:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 8004b7e:	f7fb fe61 	bl	8000844 <__aeabi_fcmplt>
 8004b82:	2800      	cmp	r0, #0
 8004b84:	bf0c      	ite	eq
 8004b86:	4620      	moveq	r0, r4
 8004b88:	1e60      	subne	r0, r4, #1
    }
 8004b8a:	bd38      	pop	{r3, r4, r5, pc}
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	bd38      	pop	{r3, r4, r5, pc}
 8004b90:	4628      	mov	r0, r5
 8004b92:	f7fb fe7f 	bl	8000894 <__aeabi_f2iz>
 8004b96:	4604      	mov	r4, r0
 8004b98:	f7fb fc62 	bl	8000460 <__aeabi_i2f>
 8004b9c:	4601      	mov	r1, r0
 8004b9e:	4628      	mov	r0, r5
 8004ba0:	f7fb fba8 	bl	80002f4 <__aeabi_fsub>
 8004ba4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004ba8:	f7fb fe4c 	bl	8000844 <__aeabi_fcmplt>
 8004bac:	2800      	cmp	r0, #0
 8004bae:	bf14      	ite	ne
 8004bb0:	4620      	movne	r0, r4
 8004bb2:	1c60      	addeq	r0, r4, #1
 8004bb4:	bd38      	pop	{r3, r4, r5, pc}
 8004bb6:	bf00      	nop
 8004bb8:	4174240b 	.word	0x4174240b
 8004bbc:	00000000 	.word	0x00000000

08004bc0 <_ZN5L64709get_speedEv>:
    virtual unsigned int get_speed(void)
 8004bc0:	b538      	push	{r3, r4, r5, lr}
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 8004bc2:	2103      	movs	r1, #3
 8004bc4:	f7ff fe5c 	bl	8004880 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t>
  return (Speed * ((float)14.9012e-3));
 8004bc8:	f7fb fc46 	bl	8000458 <__aeabi_ui2f>
 8004bcc:	4916      	ldr	r1, [pc, #88]	; (8004c28 <_ZN5L64709get_speedEv+0x68>)
 8004bce:	f7fb fc9b 	bl	8000508 <__aeabi_fmul>
        if (f >= 0) {
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	4605      	mov	r5, r0
 8004bd6:	f7fb fe49 	bl	800086c <__aeabi_fcmpge>
 8004bda:	b190      	cbz	r0, 8004c02 <_ZN5L64709get_speedEv+0x42>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 8004bdc:	4628      	mov	r0, r5
 8004bde:	f7fb fe59 	bl	8000894 <__aeabi_f2iz>
 8004be2:	4604      	mov	r4, r0
 8004be4:	f7fb fc3c 	bl	8000460 <__aeabi_i2f>
 8004be8:	4601      	mov	r1, r0
 8004bea:	4628      	mov	r0, r5
 8004bec:	f7fb fb82 	bl	80002f4 <__aeabi_fsub>
 8004bf0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004bf4:	f7fb fe26 	bl	8000844 <__aeabi_fcmplt>
 8004bf8:	2800      	cmp	r0, #0
 8004bfa:	bf14      	ite	ne
 8004bfc:	4620      	movne	r0, r4
 8004bfe:	1c60      	addeq	r0, r4, #1
    }
 8004c00:	bd38      	pop	{r3, r4, r5, pc}
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 8004c02:	4628      	mov	r0, r5
 8004c04:	f7fb fe46 	bl	8000894 <__aeabi_f2iz>
 8004c08:	4604      	mov	r4, r0
 8004c0a:	f7fb fc29 	bl	8000460 <__aeabi_i2f>
 8004c0e:	4601      	mov	r1, r0
 8004c10:	4628      	mov	r0, r5
 8004c12:	f7fb fb6f 	bl	80002f4 <__aeabi_fsub>
 8004c16:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 8004c1a:	f7fb fe13 	bl	8000844 <__aeabi_fcmplt>
 8004c1e:	2800      	cmp	r0, #0
 8004c20:	bf0c      	ite	eq
 8004c22:	4620      	moveq	r0, r4
 8004c24:	1e60      	subne	r0, r4, #1
    }
 8004c26:	bd38      	pop	{r3, r4, r5, pc}
 8004c28:	3c74242a 	.word	0x3c74242a
 8004c2c:	00000000 	.word	0x00000000

08004c30 <_ZN5L64708get_markEv>:
    virtual signed int get_mark(void)
 8004c30:	b508      	push	{r3, lr}
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 8004c32:	2102      	movs	r1, #2
 8004c34:	f7ff fe24 	bl	8004880 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t>
  if (AbsPos > L6470_MAX_POSITION)
 8004c38:	f5b0 1f00 	cmp.w	r0, #2097152	; 0x200000
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 8004c3c:	bf28      	it	cs
 8004c3e:	f5a0 0080 	subcs.w	r0, r0, #4194304	; 0x400000
    }
 8004c42:	bd08      	pop	{r3, pc}
	...

08004c50 <_ZN5L647013get_parameterEj>:
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 8004c50:	b2c9      	uxtb	r1, r1
 8004c52:	f7ff be15 	b.w	8004880 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t>
 8004c56:	bf00      	nop
	...

08004c60 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>:
{
 8004c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(!L6470_DaisyChain_HalfPrepared)
 8004c62:	4d0f      	ldr	r5, [pc, #60]	; (8004ca0 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm+0x40>)
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8004c64:	4c0f      	ldr	r4, [pc, #60]	; (8004ca4 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm+0x44>)
  if(!L6470_DaisyChain_HalfPrepared)
 8004c66:	782b      	ldrb	r3, [r5, #0]
 8004c68:	b94b      	cbnz	r3, 8004c7e <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm+0x1e>
    (pL6470_AppCmdPkg+id)->p2=0;
 8004c6a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8004c6e:	e9c4 3305 	strd	r3, r3, [r4, #20]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8004c72:	2601      	movs	r6, #1
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8004c74:	7023      	strb	r3, [r4, #0]
    (pL6470_AppCmdPkg+id)->p3=0;
 8004c76:	60e3      	str	r3, [r4, #12]
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8004c78:	7423      	strb	r3, [r4, #16]
    (pL6470_AppCmdPkg+id)->p3=0;
 8004c7a:	61e3      	str	r3, [r4, #28]
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8004c7c:	702e      	strb	r6, [r5, #0]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8004c7e:	7d43      	ldrb	r3, [r0, #21]
 8004c80:	011e      	lsls	r6, r3, #4
 8004c82:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 8004c86:	2701      	movs	r7, #1
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8004c88:	2500      	movs	r5, #0
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8004c8a:	55a7      	strb	r7, [r4, r6]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8004c8c:	e9c3 1201 	strd	r1, r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8004c90:	60dd      	str	r5, [r3, #12]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004c92:	f7fd fc2d 	bl	80024f0 <_ZN5L647030L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh.constprop.0>
}
 8004c96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004c9a:	f7ff b949 	b.w	8003f30 <_ZN5L647023L6470_DaisyChainCommandEPhS0_.constprop.0>
 8004c9e:	bf00      	nop
 8004ca0:	20001208 	.word	0x20001208
 8004ca4:	200011d4 	.word	0x200011d4
	...

08004cb0 <_ZN5L647016set_decelerationEj>:
    virtual bool set_deceleration(unsigned int deceleration)
 8004cb0:	b538      	push	{r3, r4, r5, lr}
 8004cb2:	4604      	mov	r4, r0
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8004cb4:	4608      	mov	r0, r1
 8004cb6:	f7fb fbcf 	bl	8000458 <__aeabi_ui2f>
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 8004cba:	490c      	ldr	r1, [pc, #48]	; (8004cec <_ZN5L647016set_decelerationEj+0x3c>)
 8004cbc:	4605      	mov	r5, r0
 8004cbe:	f7fb fdcb 	bl	8000858 <__aeabi_fcmple>
 8004cc2:	b160      	cbz	r0, 8004cde <_ZN5L647016set_decelerationEj+0x2e>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8004cc4:	490a      	ldr	r1, [pc, #40]	; (8004cf0 <_ZN5L647016set_decelerationEj+0x40>)
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	f7fb fcd2 	bl	8000670 <__aeabi_fdiv>
 8004ccc:	f7fb fe08 	bl	80008e0 <__aeabi_f2uiz>
 8004cd0:	2105      	movs	r1, #5
 8004cd2:	b282      	uxth	r2, r0
 8004cd4:	4620      	mov	r0, r4
 8004cd6:	f7ff ffc3 	bl	8004c60 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
    }
 8004cda:	2001      	movs	r0, #1
 8004cdc:	bd38      	pop	{r3, r4, r5, pc}
 8004cde:	4602      	mov	r2, r0
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8004ce0:	2105      	movs	r1, #5
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	f7ff ffbc 	bl	8004c60 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
    }
 8004ce8:	2001      	movs	r0, #1
 8004cea:	bd38      	pop	{r3, r4, r5, pc}
 8004cec:	4768c671 	.word	0x4768c671
 8004cf0:	4168d4fe 	.word	0x4168d4fe
	...

08004d00 <_ZN5L647016set_accelerationEj>:
    virtual bool set_acceleration(unsigned int acceleration)
 8004d00:	b538      	push	{r3, r4, r5, lr}
 8004d02:	4604      	mov	r4, r0
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8004d04:	4608      	mov	r0, r1
 8004d06:	f7fb fba7 	bl	8000458 <__aeabi_ui2f>
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 8004d0a:	490c      	ldr	r1, [pc, #48]	; (8004d3c <_ZN5L647016set_accelerationEj+0x3c>)
 8004d0c:	4605      	mov	r5, r0
 8004d0e:	f7fb fda3 	bl	8000858 <__aeabi_fcmple>
 8004d12:	b160      	cbz	r0, 8004d2e <_ZN5L647016set_accelerationEj+0x2e>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8004d14:	490a      	ldr	r1, [pc, #40]	; (8004d40 <_ZN5L647016set_accelerationEj+0x40>)
 8004d16:	4628      	mov	r0, r5
 8004d18:	f7fb fcaa 	bl	8000670 <__aeabi_fdiv>
 8004d1c:	f7fb fde0 	bl	80008e0 <__aeabi_f2uiz>
 8004d20:	2104      	movs	r1, #4
 8004d22:	b282      	uxth	r2, r0
 8004d24:	4620      	mov	r0, r4
 8004d26:	f7ff ff9b 	bl	8004c60 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
    }
 8004d2a:	2001      	movs	r0, #1
 8004d2c:	bd38      	pop	{r3, r4, r5, pc}
 8004d2e:	4602      	mov	r2, r0
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8004d30:	2104      	movs	r1, #4
 8004d32:	4620      	mov	r0, r4
 8004d34:	f7ff ff94 	bl	8004c60 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
    }
 8004d38:	2001      	movs	r0, #1
 8004d3a:	bd38      	pop	{r3, r4, r5, pc}
 8004d3c:	4768c671 	.word	0x4768c671
 8004d40:	4168d4fe 	.word	0x4168d4fe
	...

08004d50 <_ZN5L647013set_min_speedEj>:
    virtual bool set_min_speed(unsigned int speed)
 8004d50:	b538      	push	{r3, r4, r5, lr}
 8004d52:	4604      	mov	r4, r0
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8004d54:	4608      	mov	r0, r1
 8004d56:	f7fb fb7f 	bl	8000458 <__aeabi_ui2f>
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 8004d5a:	490c      	ldr	r1, [pc, #48]	; (8004d8c <_ZN5L647013set_min_speedEj+0x3c>)
 8004d5c:	4605      	mov	r5, r0
 8004d5e:	f7fb fd7b 	bl	8000858 <__aeabi_fcmple>
 8004d62:	b160      	cbz	r0, 8004d7e <_ZN5L647013set_min_speedEj+0x2e>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 8004d64:	490a      	ldr	r1, [pc, #40]	; (8004d90 <_ZN5L647013set_min_speedEj+0x40>)
 8004d66:	4628      	mov	r0, r5
 8004d68:	f7fb fc82 	bl	8000670 <__aeabi_fdiv>
 8004d6c:	f7fb fdb8 	bl	80008e0 <__aeabi_f2uiz>
 8004d70:	2107      	movs	r1, #7
 8004d72:	b282      	uxth	r2, r0
 8004d74:	4620      	mov	r0, r4
 8004d76:	f7ff ff73 	bl	8004c60 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
    }
 8004d7a:	2001      	movs	r0, #1
 8004d7c:	bd38      	pop	{r3, r4, r5, pc}
 8004d7e:	4602      	mov	r2, r0
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8004d80:	2107      	movs	r1, #7
 8004d82:	4620      	mov	r0, r4
 8004d84:	f7ff ff6c 	bl	8004c60 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
    }
 8004d88:	2001      	movs	r0, #1
 8004d8a:	bd38      	pop	{r3, r4, r5, pc}
 8004d8c:	447414bf 	.word	0x447414bf
 8004d90:	3e742401 	.word	0x3e742401
	...

08004da0 <_ZN5L647013set_max_speedEj>:
    virtual bool set_max_speed(unsigned int speed)
 8004da0:	b538      	push	{r3, r4, r5, lr}
 8004da2:	4604      	mov	r4, r0
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8004da4:	4608      	mov	r0, r1
 8004da6:	f7fb fb57 	bl	8000458 <__aeabi_ui2f>
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 8004daa:	490c      	ldr	r1, [pc, #48]	; (8004ddc <_ZN5L647013set_max_speedEj+0x3c>)
 8004dac:	4605      	mov	r5, r0
 8004dae:	f7fb fd53 	bl	8000858 <__aeabi_fcmple>
 8004db2:	b160      	cbz	r0, 8004dce <_ZN5L647013set_max_speedEj+0x2e>
    return (uint16_t)(Step_s / ((float)15.2588));
 8004db4:	490a      	ldr	r1, [pc, #40]	; (8004de0 <_ZN5L647013set_max_speedEj+0x40>)
 8004db6:	4628      	mov	r0, r5
 8004db8:	f7fb fc5a 	bl	8000670 <__aeabi_fdiv>
 8004dbc:	f7fb fd90 	bl	80008e0 <__aeabi_f2uiz>
 8004dc0:	2106      	movs	r1, #6
 8004dc2:	b282      	uxth	r2, r0
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	f7ff ff4b 	bl	8004c60 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
    }
 8004dca:	2001      	movs	r0, #1
 8004dcc:	bd38      	pop	{r3, r4, r5, pc}
 8004dce:	4602      	mov	r2, r0
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8004dd0:	2106      	movs	r1, #6
 8004dd2:	4620      	mov	r0, r4
 8004dd4:	f7ff ff44 	bl	8004c60 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
    }
 8004dd8:	2001      	movs	r0, #1
 8004dda:	bd38      	pop	{r3, r4, r5, pc}
 8004ddc:	4673e702 	.word	0x4673e702
 8004de0:	4174240b 	.word	0x4174240b
	...

08004df0 <_ZN5L64708set_markEi>:
    virtual void set_mark(signed int position)
 8004df0:	b508      	push	{r3, lr}
 8004df2:	4603      	mov	r3, r0
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8004df4:	4608      	mov	r0, r1
 8004df6:	f7fd fc23 	bl	8002640 <_ZN5L647023L6470_Position_2_AbsPosEl.constprop.0>
 8004dfa:	2102      	movs	r1, #2
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	4618      	mov	r0, r3
    }
 8004e00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8004e04:	f7ff bf2c 	b.w	8004c60 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
	...

08004e10 <_ZN5L64708set_markEv>:
    virtual void set_mark(void)
 8004e10:	b510      	push	{r4, lr}
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8004e12:	2100      	movs	r1, #0
    virtual void set_mark(void)
 8004e14:	4604      	mov	r4, r0
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8004e16:	f7ff fd33 	bl	8004880 <_ZN5L647014L6470_GetParamE14eL6470_RegId_t>
 8004e1a:	2102      	movs	r1, #2
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	4620      	mov	r0, r4
    }
 8004e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8004e24:	f7ff bf1c 	b.w	8004c60 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
	...

08004e30 <_ZN5L647013set_parameterEjj>:
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8004e30:	b2c9      	uxtb	r1, r1
 8004e32:	f7ff bf15 	b.w	8004c60 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
 8004e36:	bf00      	nop
	...

08004e40 <_ZN5L647013set_step_modeEN12StepperMotor11step_mode_tE>:
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 8004e40:	2907      	cmp	r1, #7
 8004e42:	d810      	bhi.n	8004e66 <_ZN5L647013set_step_modeEN12StepperMotor11step_mode_tE+0x26>
    virtual bool set_step_mode(step_mode_t step_mode)
 8004e44:	b538      	push	{r3, r4, r5, lr}
        soft_hiz();
 8004e46:	6803      	ldr	r3, [r0, #0]
 8004e48:	4a09      	ldr	r2, [pc, #36]	; (8004e70 <_ZN5L647013set_step_modeEN12StepperMotor11step_mode_tE+0x30>)
 8004e4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	460c      	mov	r4, r1
 8004e50:	4605      	mov	r5, r0
 8004e52:	d10a      	bne.n	8004e6a <_ZN5L647013set_step_modeEN12StepperMotor11step_mode_tE+0x2a>
        L6470_SoftHiZ();
 8004e54:	f7ff fc2c 	bl	80046b0 <_ZN5L647013L6470_SoftHiZEv>
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 8004e58:	4628      	mov	r0, r5
 8004e5a:	4622      	mov	r2, r4
 8004e5c:	2115      	movs	r1, #21
 8004e5e:	f7ff feff 	bl	8004c60 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
 8004e62:	2001      	movs	r0, #1
    }
 8004e64:	bd38      	pop	{r3, r4, r5, pc}
            return false;
 8004e66:	2000      	movs	r0, #0
    }
 8004e68:	4770      	bx	lr
        soft_hiz();
 8004e6a:	4798      	blx	r3
 8004e6c:	e7f4      	b.n	8004e58 <_ZN5L647013set_step_modeEN12StepperMotor11step_mode_tE+0x18>
 8004e6e:	bf00      	nop
 8004e70:	08004701 	.word	0x08004701
	...

08004e80 <_ZN5L64704initEPv>:
  * @param  init The pointer to the initialization structure.
  */
status_t L6470::L6470_Config(void *init)
{
  /* Reset devices. */
  reset_device();
 8004e80:	6803      	ldr	r3, [r0, #0]
 8004e82:	4a8b      	ldr	r2, [pc, #556]	; (80050b0 <_ZN5L64704initEPv+0x230>)
 8004e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e88:	4293      	cmp	r3, r2
    virtual int init(void *init)
 8004e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e8e:	4604      	mov	r4, r0
 8004e90:	460d      	mov	r5, r1
 8004e92:	f040 81d9 	bne.w	8005248 <_ZN5L64704initEPv+0x3c8>
        L6470_ResetDevice();
 8004e96:	f7ff fc73 	bl	8004780 <_ZN5L647017L6470_ResetDeviceEv>

  /* Reset Status Register flags. */
  get_status();
 8004e9a:	6823      	ldr	r3, [r4, #0]
 8004e9c:	4a85      	ldr	r2, [pc, #532]	; (80050b4 <_ZN5L64704initEPv+0x234>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	4293      	cmp	r3, r2
        return (unsigned int) L6470_GetStatus();
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	f040 81d2 	bne.w	800524c <_ZN5L64704initEPv+0x3cc>
 8004ea8:	f7ff fbca 	bl	8004640 <_ZN5L647015L6470_GetStatusEv>

  /* Prepare the 'Register' field of StepperMotorDriverHandle */
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 8004eac:	696e      	ldr	r6, [r5, #20]
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 8004eae:	4982      	ldr	r1, [pc, #520]	; (80050b8 <_ZN5L64704initEPv+0x238>)
 8004eb0:	4630      	mov	r0, r6
 8004eb2:	f7fb fcd1 	bl	8000858 <__aeabi_fcmple>
 8004eb6:	2800      	cmp	r0, #0
 8004eb8:	f000 81af 	beq.w	800521a <_ZN5L64704initEPv+0x39a>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8004ebc:	497f      	ldr	r1, [pc, #508]	; (80050bc <_ZN5L64704initEPv+0x23c>)
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	f7fb fbd6 	bl	8000670 <__aeabi_fdiv>
 8004ec4:	f7fb fd0c 	bl	80008e0 <__aeabi_f2uiz>
 8004ec8:	b280      	uxth	r0, r0
 8004eca:	4607      	mov	r7, r0
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 8004ecc:	69ae      	ldr	r6, [r5, #24]
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 8004ece:	497a      	ldr	r1, [pc, #488]	; (80050b8 <_ZN5L64704initEPv+0x238>)
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 8004ed0:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 8004ed4:	4630      	mov	r0, r6
 8004ed6:	f7fb fcbf 	bl	8000858 <__aeabi_fcmple>
 8004eda:	b130      	cbz	r0, 8004eea <_ZN5L64704initEPv+0x6a>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8004edc:	4977      	ldr	r1, [pc, #476]	; (80050bc <_ZN5L64704initEPv+0x23c>)
 8004ede:	4630      	mov	r0, r6
 8004ee0:	f7fb fbc6 	bl	8000670 <__aeabi_fdiv>
 8004ee4:	f7fb fcfc 	bl	80008e0 <__aeabi_f2uiz>
 8004ee8:	b280      	uxth	r0, r0
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 8004eea:	69ee      	ldr	r6, [r5, #28]
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 8004eec:	4974      	ldr	r1, [pc, #464]	; (80050c0 <_ZN5L64704initEPv+0x240>)
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 8004eee:	f8a4 0042 	strh.w	r0, [r4, #66]	; 0x42
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 8004ef2:	4630      	mov	r0, r6
 8004ef4:	f7fb fcb0 	bl	8000858 <__aeabi_fcmple>
 8004ef8:	b130      	cbz	r0, 8004f08 <_ZN5L64704initEPv+0x88>
    return (uint16_t)(Step_s / ((float)15.2588));
 8004efa:	4972      	ldr	r1, [pc, #456]	; (80050c4 <_ZN5L64704initEPv+0x244>)
 8004efc:	4630      	mov	r0, r6
 8004efe:	f7fb fbb7 	bl	8000670 <__aeabi_fdiv>
 8004f02:	f7fb fced 	bl	80008e0 <__aeabi_f2uiz>
 8004f06:	b280      	uxth	r0, r0
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 8004f08:	6a2e      	ldr	r6, [r5, #32]
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 8004f0a:	496f      	ldr	r1, [pc, #444]	; (80050c8 <_ZN5L64704initEPv+0x248>)
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 8004f0c:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 8004f10:	4630      	mov	r0, r6
 8004f12:	f7fb fca1 	bl	8000858 <__aeabi_fcmple>
 8004f16:	b130      	cbz	r0, 8004f26 <_ZN5L64704initEPv+0xa6>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 8004f18:	496c      	ldr	r1, [pc, #432]	; (80050cc <_ZN5L64704initEPv+0x24c>)
 8004f1a:	4630      	mov	r0, r6
 8004f1c:	f7fb fba8 	bl	8000670 <__aeabi_fdiv>
 8004f20:	f7fb fcde 	bl	80008e0 <__aeabi_f2uiz>
 8004f24:	b280      	uxth	r0, r0
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 8004f26:	6a6e      	ldr	r6, [r5, #36]	; 0x24
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 8004f28:	4969      	ldr	r1, [pc, #420]	; (80050d0 <_ZN5L64704initEPv+0x250>)
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 8004f2a:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 8004f2e:	4630      	mov	r0, r6
 8004f30:	f7fb fc92 	bl	8000858 <__aeabi_fcmple>
 8004f34:	b150      	cbz	r0, 8004f4c <_ZN5L64704initEPv+0xcc>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 8004f36:	4967      	ldr	r1, [pc, #412]	; (80050d4 <_ZN5L64704initEPv+0x254>)
 8004f38:	4630      	mov	r0, r6
 8004f3a:	f7fb fb99 	bl	8000670 <__aeabi_fdiv>
 8004f3e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004f42:	f7fb f9d7 	bl	80002f4 <__aeabi_fsub>
 8004f46:	f7fb fccb 	bl	80008e0 <__aeabi_f2uiz>
 8004f4a:	b280      	uxth	r0, r0
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 8004f4c:	682e      	ldr	r6, [r5, #0]
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 8004f4e:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 8004f52:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8004f56:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8004f58:	f7fb fad6 	bl	8000508 <__aeabi_fmul>
 8004f5c:	4631      	mov	r1, r6
 8004f5e:	f7fb fb87 	bl	8000670 <__aeabi_fdiv>
 8004f62:	f7fb fcbd 	bl	80008e0 <__aeabi_f2uiz>
 8004f66:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 8004f6a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8004f6c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8004f70:	f7fb faca 	bl	8000508 <__aeabi_fmul>
 8004f74:	4631      	mov	r1, r6
 8004f76:	f7fb fb7b 	bl	8000670 <__aeabi_fdiv>
 8004f7a:	f7fb fcb1 	bl	80008e0 <__aeabi_f2uiz>
 8004f7e:	f884 004b 	strb.w	r0, [r4, #75]	; 0x4b
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 8004f82:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004f84:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8004f88:	f7fb fabe 	bl	8000508 <__aeabi_fmul>
 8004f8c:	4631      	mov	r1, r6
 8004f8e:	f7fb fb6f 	bl	8000670 <__aeabi_fdiv>
 8004f92:	f7fb fca5 	bl	80008e0 <__aeabi_f2uiz>
 8004f96:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 8004f9a:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8004f9c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8004fa0:	f7fb fab2 	bl	8000508 <__aeabi_fmul>
 8004fa4:	4631      	mov	r1, r6
 8004fa6:	f7fb fb63 	bl	8000670 <__aeabi_fdiv>
 8004faa:	f7fb fc99 	bl	80008e0 <__aeabi_f2uiz>
 8004fae:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 8004fb2:	6bae      	ldr	r6, [r5, #56]	; 0x38
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 8004fb4:	4948      	ldr	r1, [pc, #288]	; (80050d8 <_ZN5L64704initEPv+0x258>)
 8004fb6:	4630      	mov	r0, r6
 8004fb8:	f7fb fc4e 	bl	8000858 <__aeabi_fcmple>
 8004fbc:	b130      	cbz	r0, 8004fcc <_ZN5L64704initEPv+0x14c>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 8004fbe:	4947      	ldr	r1, [pc, #284]	; (80050dc <_ZN5L64704initEPv+0x25c>)
 8004fc0:	4630      	mov	r0, r6
 8004fc2:	f7fb fb55 	bl	8000670 <__aeabi_fdiv>
 8004fc6:	f7fb fc8b 	bl	80008e0 <__aeabi_f2uiz>
 8004fca:	b280      	uxth	r0, r0
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 8004fcc:	6bee      	ldr	r6, [r5, #60]	; 0x3c
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 8004fce:	4944      	ldr	r1, [pc, #272]	; (80050e0 <_ZN5L64704initEPv+0x260>)
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 8004fd0:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 8004fd4:	4630      	mov	r0, r6
 8004fd6:	f7fb fc3f 	bl	8000858 <__aeabi_fcmple>
 8004fda:	b130      	cbz	r0, 8004fea <_ZN5L64704initEPv+0x16a>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8004fdc:	4941      	ldr	r1, [pc, #260]	; (80050e4 <_ZN5L64704initEPv+0x264>)
 8004fde:	4630      	mov	r0, r6
 8004fe0:	f7fb fb46 	bl	8000670 <__aeabi_fdiv>
 8004fe4:	f7fb fc7c 	bl	80008e0 <__aeabi_f2uiz>
 8004fe8:	b2c0      	uxtb	r0, r0
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 8004fea:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 8004fee:	6c2e      	ldr	r6, [r5, #64]	; 0x40
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 8004ff0:	493b      	ldr	r1, [pc, #236]	; (80050e0 <_ZN5L64704initEPv+0x260>)
 8004ff2:	4630      	mov	r0, r6
 8004ff4:	f7fb fc30 	bl	8000858 <__aeabi_fcmple>
 8004ff8:	b130      	cbz	r0, 8005008 <_ZN5L64704initEPv+0x188>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8004ffa:	493a      	ldr	r1, [pc, #232]	; (80050e4 <_ZN5L64704initEPv+0x264>)
 8004ffc:	4630      	mov	r0, r6
 8004ffe:	f7fb fb37 	bl	8000670 <__aeabi_fdiv>
 8005002:	f7fb fc6d 	bl	80008e0 <__aeabi_f2uiz>
 8005006:	b2c0      	uxtb	r0, r0
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 8005008:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 800500c:	6c6e      	ldr	r6, [r5, #68]	; 0x44
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 800500e:	4934      	ldr	r1, [pc, #208]	; (80050e0 <_ZN5L64704initEPv+0x260>)
 8005010:	4630      	mov	r0, r6
 8005012:	f7fb fc21 	bl	8000858 <__aeabi_fcmple>
 8005016:	b130      	cbz	r0, 8005026 <_ZN5L64704initEPv+0x1a6>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8005018:	4932      	ldr	r1, [pc, #200]	; (80050e4 <_ZN5L64704initEPv+0x264>)
 800501a:	4630      	mov	r0, r6
 800501c:	f7fb fb28 	bl	8000670 <__aeabi_fdiv>
 8005020:	f7fb fc5e 	bl	80008e0 <__aeabi_f2uiz>
 8005024:	b2c0      	uxtb	r0, r0
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 8005026:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 800502a:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 800502e:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 8005032:	6cee      	ldr	r6, [r5, #76]	; 0x4c
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 8005034:	492c      	ldr	r1, [pc, #176]	; (80050e8 <_ZN5L64704initEPv+0x268>)
 8005036:	4630      	mov	r0, r6
 8005038:	f7fb fc0e 	bl	8000858 <__aeabi_fcmple>
 800503c:	2800      	cmp	r0, #0
 800503e:	f000 80f6 	beq.w	800522e <_ZN5L64704initEPv+0x3ae>
    result = (mA / ((float)375));
 8005042:	492a      	ldr	r1, [pc, #168]	; (80050ec <_ZN5L64704initEPv+0x26c>)
 8005044:	4630      	mov	r0, r6
 8005046:	f7fb fb13 	bl	8000670 <__aeabi_fdiv>
 800504a:	4680      	mov	r8, r0
    decimal = result - (uint8_t)result;
 800504c:	f7fb fc48 	bl	80008e0 <__aeabi_f2uiz>
 8005050:	b2c6      	uxtb	r6, r0
 8005052:	4630      	mov	r0, r6
 8005054:	f7fb fa04 	bl	8000460 <__aeabi_i2f>
 8005058:	4601      	mov	r1, r0
 800505a:	4640      	mov	r0, r8
 800505c:	f7fb f94a 	bl	80002f4 <__aeabi_fsub>
    if (decimal < (float)0.5)
 8005060:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005064:	f7fb fbee 	bl	8000844 <__aeabi_fcmplt>
 8005068:	2800      	cmp	r0, #0
 800506a:	f040 80db 	bne.w	8005224 <_ZN5L64704initEPv+0x3a4>
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 800506e:	f884 6055 	strb.w	r6, [r4, #85]	; 0x55
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 8005072:	6d2e      	ldr	r6, [r5, #80]	; 0x50
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 8005074:	491e      	ldr	r1, [pc, #120]	; (80050f0 <_ZN5L64704initEPv+0x270>)
 8005076:	4630      	mov	r0, r6
 8005078:	f7fb fbee 	bl	8000858 <__aeabi_fcmple>
 800507c:	2800      	cmp	r0, #0
 800507e:	f000 80d4 	beq.w	800522a <_ZN5L64704initEPv+0x3aa>
    result = (mA / ((float)31.25));
 8005082:	491c      	ldr	r1, [pc, #112]	; (80050f4 <_ZN5L64704initEPv+0x274>)
 8005084:	4630      	mov	r0, r6
 8005086:	f7fb faf3 	bl	8000670 <__aeabi_fdiv>
 800508a:	4680      	mov	r8, r0
    decimal = result - (uint8_t)result;
 800508c:	f7fb fc28 	bl	80008e0 <__aeabi_f2uiz>
 8005090:	b2c6      	uxtb	r6, r0
 8005092:	4630      	mov	r0, r6
 8005094:	f7fb f9e4 	bl	8000460 <__aeabi_i2f>
 8005098:	4601      	mov	r1, r0
 800509a:	4640      	mov	r0, r8
 800509c:	f7fb f92a 	bl	80002f4 <__aeabi_fsub>
    if (decimal < (float)0.5)
 80050a0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80050a4:	f7fb fbce 	bl	8000844 <__aeabi_fcmplt>
 80050a8:	2800      	cmp	r0, #0
 80050aa:	f040 80b8 	bne.w	800521e <_ZN5L64704initEPv+0x39e>
 80050ae:	e023      	b.n	80050f8 <_ZN5L64704initEPv+0x278>
 80050b0:	080047d1 	.word	0x080047d1
 80050b4:	080046a1 	.word	0x080046a1
 80050b8:	4768c671 	.word	0x4768c671
 80050bc:	4168d4fe 	.word	0x4168d4fe
 80050c0:	4673e702 	.word	0x4673e702
 80050c4:	4174240b 	.word	0x4174240b
 80050c8:	447414bf 	.word	0x447414bf
 80050cc:	3e742401 	.word	0x3e742401
 80050d0:	4673e180 	.word	0x4673e180
 80050d4:	41740000 	.word	0x41740000
 80050d8:	44742023 	.word	0x44742023
 80050dc:	3d7423f4 	.word	0x3d7423f4
 80050e0:	3b8311d9 	.word	0x3b8311d9
 80050e4:	3783956e 	.word	0x3783956e
 80050e8:	45bb8000 	.word	0x45bb8000
 80050ec:	43bb8000 	.word	0x43bb8000
 80050f0:	457a0000 	.word	0x457a0000
 80050f4:	41fa0000 	.word	0x41fa0000
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 80050f8:	f884 6056 	strb.w	r6, [r4, #86]	; 0x56
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 80050fc:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 8005100:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 8005104:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8005108:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 800510c:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 8005110:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57

  /* Write the L6470 registers with the prepared data */
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 8005114:	463a      	mov	r2, r7
 8005116:	2104      	movs	r1, #4
 8005118:	4620      	mov	r0, r4
 800511a:	f7ff fda1 	bl	8004c60 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 800511e:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 8005122:	2105      	movs	r1, #5
 8005124:	4620      	mov	r0, r4
 8005126:	f7ff fd9b 	bl	8004c60 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 800512a:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
 800512e:	2106      	movs	r1, #6
 8005130:	4620      	mov	r0, r4
 8005132:	f7ff fd95 	bl	8004c60 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 8005136:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800513a:	2107      	movs	r1, #7
 800513c:	4620      	mov	r0, r4
 800513e:	f7ff fd8f 	bl	8004c60 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 8005142:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8005146:	2108      	movs	r1, #8
 8005148:	4620      	mov	r0, r4
 800514a:	f7ff fd89 	bl	8004c60 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 800514e:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
 8005152:	2109      	movs	r1, #9
 8005154:	4620      	mov	r0, r4
 8005156:	f7ff fd83 	bl	8004c60 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 800515a:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
 800515e:	210a      	movs	r1, #10
 8005160:	4620      	mov	r0, r4
 8005162:	f7ff fd7d 	bl	8004c60 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 8005166:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 800516a:	210b      	movs	r1, #11
 800516c:	4620      	mov	r0, r4
 800516e:	f7ff fd77 	bl	8004c60 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 8005172:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 8005176:	210c      	movs	r1, #12
 8005178:	4620      	mov	r0, r4
 800517a:	f7ff fd71 	bl	8004c60 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 800517e:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
 8005182:	210d      	movs	r1, #13
 8005184:	4620      	mov	r0, r4
 8005186:	f7ff fd6b 	bl	8004c60 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 800518a:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800518e:	210e      	movs	r1, #14
 8005190:	4620      	mov	r0, r4
 8005192:	f7ff fd65 	bl	8004c60 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 8005196:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 800519a:	210f      	movs	r1, #15
 800519c:	4620      	mov	r0, r4
 800519e:	f7ff fd5f 	bl	8004c60 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 80051a2:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 80051a6:	2110      	movs	r1, #16
 80051a8:	4620      	mov	r0, r4
 80051aa:	f7ff fd59 	bl	8004c60 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 80051ae:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
 80051b2:	2111      	movs	r1, #17
 80051b4:	4620      	mov	r0, r4
 80051b6:	f7ff fd53 	bl	8004c60 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 80051ba:	f894 2055 	ldrb.w	r2, [r4, #85]	; 0x55
 80051be:	2113      	movs	r1, #19
 80051c0:	4620      	mov	r0, r4
 80051c2:	f7ff fd4d 	bl	8004c60 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 80051c6:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
 80051ca:	2114      	movs	r1, #20
 80051cc:	4620      	mov	r0, r4
 80051ce:	f7ff fd47 	bl	8004c60 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 80051d2:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 80051d6:	2116      	movs	r1, #22
 80051d8:	4620      	mov	r0, r4
 80051da:	f7ff fd41 	bl	8004c60 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 80051de:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 80051e2:	2117      	movs	r1, #23
 80051e4:	4620      	mov	r0, r4
 80051e6:	f7ff fd3b 	bl	8004c60 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	4919      	ldr	r1, [pc, #100]	; (8005254 <_ZN5L64704initEPv+0x3d4>)
 80051ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051f0:	f894 5057 	ldrb.w	r5, [r4, #87]	; 0x57
 80051f4:	428a      	cmp	r2, r1
 80051f6:	d11f      	bne.n	8005238 <_ZN5L64704initEPv+0x3b8>
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 80051f8:	2d07      	cmp	r5, #7
 80051fa:	d81a      	bhi.n	8005232 <_ZN5L64704initEPv+0x3b2>
        soft_hiz();
 80051fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051fe:	4a16      	ldr	r2, [pc, #88]	; (8005258 <_ZN5L64704initEPv+0x3d8>)
 8005200:	4293      	cmp	r3, r2
        L6470_SoftHiZ();
 8005202:	4620      	mov	r0, r4
 8005204:	d124      	bne.n	8005250 <_ZN5L64704initEPv+0x3d0>
 8005206:	f7ff fa53 	bl	80046b0 <_ZN5L647013L6470_SoftHiZEv>
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 800520a:	4620      	mov	r0, r4
 800520c:	462a      	mov	r2, r5
 800520e:	2115      	movs	r1, #21
 8005210:	f7ff fd26 	bl	8004c60 <_ZN5L647014L6470_SetParamE14eL6470_RegId_tm>
 8005214:	2000      	movs	r0, #0
    }
 8005216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 800521a:	4607      	mov	r7, r0
 800521c:	e656      	b.n	8004ecc <_ZN5L64704initEPv+0x4c>
      return ((uint8_t)result - 1);
 800521e:	3e01      	subs	r6, #1
 8005220:	b2f6      	uxtb	r6, r6
 8005222:	e769      	b.n	80050f8 <_ZN5L64704initEPv+0x278>
      return ((uint8_t)result - 1);
 8005224:	3e01      	subs	r6, #1
 8005226:	b2f6      	uxtb	r6, r6
 8005228:	e721      	b.n	800506e <_ZN5L64704initEPv+0x1ee>
    return 0;   // Warning
 800522a:	4606      	mov	r6, r0
 800522c:	e764      	b.n	80050f8 <_ZN5L64704initEPv+0x278>
    return 0;   // Warning
 800522e:	4606      	mov	r6, r0
 8005230:	e71d      	b.n	800506e <_ZN5L64704initEPv+0x1ee>
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 8005232:	2001      	movs	r0, #1
    }
 8005234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 8005238:	4629      	mov	r1, r5
 800523a:	4620      	mov	r0, r4
 800523c:	4790      	blx	r2
 800523e:	f080 0001 	eor.w	r0, r0, #1
 8005242:	b2c0      	uxtb	r0, r0
 8005244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  reset_device();
 8005248:	4798      	blx	r3
 800524a:	e626      	b.n	8004e9a <_ZN5L64704initEPv+0x1a>
  get_status();
 800524c:	4798      	blx	r3
 800524e:	e62d      	b.n	8004eac <_ZN5L64704initEPv+0x2c>
        soft_hiz();
 8005250:	4798      	blx	r3
 8005252:	e7da      	b.n	800520a <_ZN5L64704initEPv+0x38a>
 8005254:	08004e41 	.word	0x08004e41
 8005258:	08004701 	.word	0x08004701
 800525c:	00000000 	.word	0x00000000

08005260 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8005260:	4a84      	ldr	r2, [pc, #528]	; (8005474 <__early_init+0x214>)
  gpiop->OTYPER  = config->otyper;
 8005262:	4885      	ldr	r0, [pc, #532]	; (8005478 <__early_init+0x218>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8005264:	6913      	ldr	r3, [r2, #16]
  gpiop->OTYPER  = config->otyper;
 8005266:	4985      	ldr	r1, [pc, #532]	; (800547c <__early_init+0x21c>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8005268:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 800526c:	b5f0      	push	{r4, r5, r6, r7, lr}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 800526e:	6113      	str	r3, [r2, #16]
 8005270:	6913      	ldr	r3, [r2, #16]
  gpiop->PUPDR   = config->pupdr;
 8005272:	4c83      	ldr	r4, [pc, #524]	; (8005480 <__early_init+0x220>)
  gpiop->OTYPER  = config->otyper;
 8005274:	4e83      	ldr	r6, [pc, #524]	; (8005484 <__early_init+0x224>)
  gpiop->MODER   = config->moder;
 8005276:	4f84      	ldr	r7, [pc, #528]	; (8005488 <__early_init+0x228>)
  gpiop->OTYPER  = config->otyper;
 8005278:	4d84      	ldr	r5, [pc, #528]	; (800548c <__early_init+0x22c>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 800527a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800527e:	6113      	str	r3, [r2, #16]
 8005280:	6913      	ldr	r3, [r2, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8005282:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005284:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8005288:	6313      	str	r3, [r2, #48]	; 0x30
 800528a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800528c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8005290:	6513      	str	r3, [r2, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
 8005292:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
  gpiop->OTYPER  = config->otyper;
 8005296:	2300      	movs	r3, #0
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8005298:	f8d2 e050 	ldr.w	lr, [r2, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 800529c:	6043      	str	r3, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800529e:	f8c0 c008 	str.w	ip, [r0, #8]
  gpiop->ODR     = config->odr;
 80052a2:	f64f 7cdf 	movw	ip, #65503	; 0xffdf
  gpiop->PUPDR   = config->pupdr;
 80052a6:	60c4      	str	r4, [r0, #12]
  gpiop->ODR     = config->odr;
 80052a8:	f8c0 c014 	str.w	ip, [r0, #20]
  gpiop->AFRL    = config->afrl;
 80052ac:	f44f 44ee 	mov.w	r4, #30464	; 0x7700
  gpiop->AFRH    = config->afrh;
 80052b0:	f44f 2c2a 	mov.w	ip, #696320	; 0xaa000
  gpiop->AFRL    = config->afrl;
 80052b4:	6204      	str	r4, [r0, #32]
  gpiop->AFRH    = config->afrh;
 80052b6:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
  gpiop->OSPEEDR = config->ospeedr;
 80052ba:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  gpiop->MODER   = config->moder;
 80052be:	6007      	str	r7, [r0, #0]
  gpiop->PUPDR   = config->pupdr;
 80052c0:	f04f 3c55 	mov.w	ip, #1431655765	; 0x55555555
  gpiop->ODR     = config->odr;
 80052c4:	f64f 70ff 	movw	r0, #65535	; 0xffff
  gpiop->MODER   = config->moder;
 80052c8:	2780      	movs	r7, #128	; 0x80
  gpiop->OTYPER  = config->otyper;
 80052ca:	6073      	str	r3, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80052cc:	60b4      	str	r4, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 80052ce:	f8c6 c00c 	str.w	ip, [r6, #12]
  gpiop->ODR     = config->odr;
 80052d2:	6170      	str	r0, [r6, #20]
  gpiop->AFRL    = config->afrl;
 80052d4:	6233      	str	r3, [r6, #32]
  gpiop->AFRH    = config->afrh;
 80052d6:	6273      	str	r3, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80052d8:	6037      	str	r7, [r6, #0]
  gpiop->OTYPER  = config->otyper;
 80052da:	4f6d      	ldr	r7, [pc, #436]	; (8005490 <__early_init+0x230>)
  gpiop->PUPDR   = config->pupdr;
 80052dc:	4e6d      	ldr	r6, [pc, #436]	; (8005494 <__early_init+0x234>)
  gpiop->OTYPER  = config->otyper;
 80052de:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80052e0:	60ac      	str	r4, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 80052e2:	60ee      	str	r6, [r5, #12]
  gpiop->OTYPER  = config->otyper;
 80052e4:	4e6c      	ldr	r6, [pc, #432]	; (8005498 <__early_init+0x238>)
  gpiop->ODR     = config->odr;
 80052e6:	6168      	str	r0, [r5, #20]
  gpiop->AFRL    = config->afrl;
 80052e8:	622b      	str	r3, [r5, #32]
  gpiop->AFRH    = config->afrh;
 80052ea:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80052ec:	602b      	str	r3, [r5, #0]
  gpiop->OTYPER  = config->otyper;
 80052ee:	604b      	str	r3, [r1, #4]
 80052f0:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
  gpiop->OSPEEDR = config->ospeedr;
 80052f4:	608c      	str	r4, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 80052f6:	f8c1 c00c 	str.w	ip, [r1, #12]
  gpiop->ODR     = config->odr;
 80052fa:	6148      	str	r0, [r1, #20]
  gpiop->AFRL    = config->afrl;
 80052fc:	620b      	str	r3, [r1, #32]
  gpiop->AFRH    = config->afrh;
 80052fe:	624b      	str	r3, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8005300:	600b      	str	r3, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 8005302:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8005306:	607b      	str	r3, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8005308:	60bc      	str	r4, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 800530a:	f8c7 c00c 	str.w	ip, [r7, #12]
  gpiop->ODR     = config->odr;
 800530e:	6178      	str	r0, [r7, #20]
  gpiop->AFRL    = config->afrl;
 8005310:	623b      	str	r3, [r7, #32]
  gpiop->AFRH    = config->afrh;
 8005312:	627b      	str	r3, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8005314:	603b      	str	r3, [r7, #0]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8005316:	f5a7 37d0 	sub.w	r7, r7, #106496	; 0x1a000
  gpiop->OTYPER  = config->otyper;
 800531a:	6073      	str	r3, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800531c:	60b4      	str	r4, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 800531e:	f8c6 c00c 	str.w	ip, [r6, #12]
  gpiop->ODR     = config->odr;
 8005322:	6170      	str	r0, [r6, #20]
  gpiop->AFRL    = config->afrl;
 8005324:	6233      	str	r3, [r6, #32]
  gpiop->AFRH    = config->afrh;
 8005326:	6273      	str	r3, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8005328:	6033      	str	r3, [r6, #0]
  gpiop->OTYPER  = config->otyper;
 800532a:	606b      	str	r3, [r5, #4]
  gpiop->PUPDR   = config->pupdr;
 800532c:	4e5b      	ldr	r6, [pc, #364]	; (800549c <__early_init+0x23c>)
  gpiop->OSPEEDR = config->ospeedr;
 800532e:	60ac      	str	r4, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8005330:	f8c5 c00c 	str.w	ip, [r5, #12]
  gpiop->ODR     = config->odr;
 8005334:	6168      	str	r0, [r5, #20]
  gpiop->AFRL    = config->afrl;
 8005336:	622b      	str	r3, [r5, #32]
  gpiop->AFRH    = config->afrh;
 8005338:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800533a:	602b      	str	r3, [r5, #0]
  gpiop->OTYPER  = config->otyper;
 800533c:	604b      	str	r3, [r1, #4]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800533e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  gpiop->OSPEEDR = config->ospeedr;
 8005342:	608c      	str	r4, [r1, #8]
  PWR->CR = STM32_VOS;
 8005344:	f44f 4440 	mov.w	r4, #49152	; 0xc000
  gpiop->PUPDR   = config->pupdr;
 8005348:	60ce      	str	r6, [r1, #12]
  gpiop->ODR     = config->odr;
 800534a:	6148      	str	r0, [r1, #20]
  gpiop->AFRL    = config->afrl;
 800534c:	620b      	str	r3, [r1, #32]
  gpiop->AFRH    = config->afrh;
 800534e:	624b      	str	r3, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8005350:	600b      	str	r3, [r1, #0]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8005352:	6415      	str	r5, [r2, #64]	; 0x40
  PWR->CR = STM32_VOS;
 8005354:	603c      	str	r4, [r7, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8005356:	6813      	ldr	r3, [r2, #0]
 8005358:	f043 0301 	orr.w	r3, r3, #1
 800535c:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800535e:	6813      	ldr	r3, [r2, #0]
 8005360:	0799      	lsls	r1, r3, #30
 8005362:	d5fc      	bpl.n	800535e <__early_init+0xfe>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8005364:	6891      	ldr	r1, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8005366:	4b43      	ldr	r3, [pc, #268]	; (8005474 <__early_init+0x214>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8005368:	f021 0103 	bic.w	r1, r1, #3
 800536c:	6091      	str	r1, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	f012 020c 	ands.w	r2, r2, #12
 8005374:	d1fb      	bne.n	800536e <__early_init+0x10e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8005376:	6818      	ldr	r0, [r3, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8005378:	493e      	ldr	r1, [pc, #248]	; (8005474 <__early_init+0x214>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800537a:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 800537e:	6018      	str	r0, [r3, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8005380:	609a      	str	r2, [r3, #8]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 8005388:	601a      	str	r2, [r3, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 800538a:	680b      	ldr	r3, [r1, #0]
 800538c:	039b      	lsls	r3, r3, #14
 800538e:	d5fc      	bpl.n	800538a <__early_init+0x12a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8005390:	6f4a      	ldr	r2, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8005392:	4b38      	ldr	r3, [pc, #224]	; (8005474 <__early_init+0x214>)
  RCC->CSR |= RCC_CSR_LSION;
 8005394:	f042 0201 	orr.w	r2, r2, #1
 8005398:	674a      	str	r2, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800539a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800539c:	0797      	lsls	r7, r2, #30
 800539e:	d5fc      	bpl.n	800539a <__early_init+0x13a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 80053a0:	4a3f      	ldr	r2, [pc, #252]	; (80054a0 <__early_init+0x240>)
 80053a2:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 80053a4:	6819      	ldr	r1, [r3, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80053a6:	4a3f      	ldr	r2, [pc, #252]	; (80054a4 <__early_init+0x244>)
  RCC->CR |= RCC_CR_PLLON;
 80053a8:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80053ac:	6019      	str	r1, [r3, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80053ae:	6853      	ldr	r3, [r2, #4]
 80053b0:	045e      	lsls	r6, r3, #17
 80053b2:	d5fc      	bpl.n	80053ae <__early_init+0x14e>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR |= PWR_CR_ODEN;
 80053b4:	6811      	ldr	r1, [r2, #0]
  while (!(PWR->CSR & PWR_CSR_ODRDY))
 80053b6:	4b3b      	ldr	r3, [pc, #236]	; (80054a4 <__early_init+0x244>)
  PWR->CR |= PWR_CR_ODEN;
 80053b8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80053bc:	6011      	str	r1, [r2, #0]
  while (!(PWR->CSR & PWR_CSR_ODRDY))
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	03d5      	lsls	r5, r2, #15
 80053c2:	d5fc      	bpl.n	80053be <__early_init+0x15e>
      ;
  PWR->CR |= PWR_CR_ODSWEN;
 80053c4:	681a      	ldr	r2, [r3, #0]
  while (!(PWR->CSR & PWR_CSR_ODSWRDY))
 80053c6:	4937      	ldr	r1, [pc, #220]	; (80054a4 <__early_init+0x244>)
  PWR->CR |= PWR_CR_ODSWEN;
 80053c8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80053cc:	601a      	str	r2, [r3, #0]
  while (!(PWR->CSR & PWR_CSR_ODSWRDY))
 80053ce:	684b      	ldr	r3, [r1, #4]
 80053d0:	039c      	lsls	r4, r3, #14
 80053d2:	d5fc      	bpl.n	80053ce <__early_init+0x16e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80053d4:	4b27      	ldr	r3, [pc, #156]	; (8005474 <__early_init+0x214>)
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	0190      	lsls	r0, r2, #6
 80053da:	d5fc      	bpl.n	80053d6 <__early_init+0x176>
    ;
#endif /* STM32_ACTIVATE_PLL */

#if STM32_ACTIVATE_PLLI2S
  /* PLLI2S activation.*/
  RCC->PLLI2SCFGR = STM32_PLLI2SR | STM32_PLLI2SN | STM32_PLLI2SP |
 80053dc:	4a32      	ldr	r2, [pc, #200]	; (80054a8 <__early_init+0x248>)
 80053de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                    STM32_PLLI2SSRC | STM32_PLLI2SQ | STM32_PLLI2SM;
  RCC->CR |= RCC_CR_PLLI2SON;
 80053e2:	6819      	ldr	r1, [r3, #0]

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLI2SRDY))
 80053e4:	4a23      	ldr	r2, [pc, #140]	; (8005474 <__early_init+0x214>)
  RCC->CR |= RCC_CR_PLLI2SON;
 80053e6:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 80053ea:	6019      	str	r1, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLI2SRDY))
 80053ec:	6813      	ldr	r3, [r2, #0]
 80053ee:	0119      	lsls	r1, r3, #4
 80053f0:	d5fc      	bpl.n	80053ec <__early_init+0x18c>
    ;
#endif /* STM32_ACTIVATE_PLLI2S */

#if STM32_ACTIVATE_PLLSAI
  /* PLLSAI activation.*/
  RCC->PLLSAICFGR = STM32_PLLSAIR | STM32_PLLSAIN | STM32_PLLSAIP |
 80053f2:	4b2e      	ldr	r3, [pc, #184]	; (80054ac <__early_init+0x24c>)
 80053f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                    STM32_PLLSAIQ | STM32_PLLSAIM;
  RCC->CR |= RCC_CR_PLLSAION;
 80053f8:	6811      	ldr	r1, [r2, #0]

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
 80053fa:	4b1e      	ldr	r3, [pc, #120]	; (8005474 <__early_init+0x214>)
  RCC->CR |= RCC_CR_PLLSAION;
 80053fc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8005400:	6011      	str	r1, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	0092      	lsls	r2, r2, #2
 8005406:	d5fc      	bpl.n	8005402 <__early_init+0x1a2>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
#if !defined(STM32F413xx)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8005408:	4929      	ldr	r1, [pc, #164]	; (80054b0 <__early_init+0x250>)
 800540a:	6099      	str	r1, [r3, #8]
  /* Special case, in those devices STM32_CK48MSEL is located in the
     DCKCFGR register.*/
    dckcfgr |= STM32_CK48MSEL;
#endif
#if !defined(STM32F413xx)
    RCC->DCKCFGR = dckcfgr |
 800540c:	4829      	ldr	r0, [pc, #164]	; (80054b4 <__early_init+0x254>)

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 800540e:	4a2a      	ldr	r2, [pc, #168]	; (80054b8 <__early_init+0x258>)
    RCC->DCKCFGR = dckcfgr |
 8005410:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_CK48MSEL;
 8005414:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8005418:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 800541c:	6812      	ldr	r2, [r2, #0]
 800541e:	4b27      	ldr	r3, [pc, #156]	; (80054bc <__early_init+0x25c>)
 8005420:	429a      	cmp	r2, r3
 8005422:	d01d      	beq.n	8005460 <__early_init+0x200>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8005424:	4b26      	ldr	r3, [pc, #152]	; (80054c0 <__early_init+0x260>)
 8005426:	f240 7205 	movw	r2, #1797	; 0x705
 800542a:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 800542c:	4a24      	ldr	r2, [pc, #144]	; (80054c0 <__early_init+0x260>)
 800542e:	6813      	ldr	r3, [r2, #0]
 8005430:	f003 030f 	and.w	r3, r3, #15
 8005434:	2b05      	cmp	r3, #5
 8005436:	d1fa      	bne.n	800542e <__early_init+0x1ce>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8005438:	4b0e      	ldr	r3, [pc, #56]	; (8005474 <__early_init+0x214>)
 800543a:	689a      	ldr	r2, [r3, #8]
 800543c:	f042 0202 	orr.w	r2, r2, #2
 8005440:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8005442:	689a      	ldr	r2, [r3, #8]
 8005444:	f002 020c 	and.w	r2, r2, #12
 8005448:	2a08      	cmp	r2, #8
 800544a:	d1fa      	bne.n	8005442 <__early_init+0x1e2>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 800544c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800544e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005452:	645a      	str	r2, [r3, #68]	; 0x44
 8005454:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005456:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800545a:	665a      	str	r2, [r3, #100]	; 0x64
 800545c:	6e5b      	ldr	r3, [r3, #100]	; 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
 800545e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8005460:	4a18      	ldr	r2, [pc, #96]	; (80054c4 <__early_init+0x264>)
 8005462:	4b19      	ldr	r3, [pc, #100]	; (80054c8 <__early_init+0x268>)
 8005464:	6812      	ldr	r2, [r2, #0]
 8005466:	429a      	cmp	r2, r3
 8005468:	d1dc      	bne.n	8005424 <__early_init+0x1c4>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 800546a:	4b15      	ldr	r3, [pc, #84]	; (80054c0 <__early_init+0x260>)
 800546c:	f240 1205 	movw	r2, #261	; 0x105
 8005470:	601a      	str	r2, [r3, #0]
 8005472:	e7db      	b.n	800542c <__early_init+0x1cc>
 8005474:	40023800 	.word	0x40023800
 8005478:	40020000 	.word	0x40020000
 800547c:	40020c00 	.word	0x40020c00
 8005480:	64155105 	.word	0x64155105
 8005484:	40020400 	.word	0x40020400
 8005488:	2a8004a0 	.word	0x2a8004a0
 800548c:	40020800 	.word	0x40020800
 8005490:	40021000 	.word	0x40021000
 8005494:	01555555 	.word	0x01555555
 8005498:	40021400 	.word	0x40021400
 800549c:	55555550 	.word	0x55555550
 80054a0:	07405a08 	.word	0x07405a08
 80054a4:	40007000 	.word	0x40007000
 80054a8:	44413004 	.word	0x44413004
 80054ac:	44033004 	.word	0x44033004
 80054b0:	40089400 	.word	0x40089400
 80054b4:	00800003 	.word	0x00800003
 80054b8:	e0042000 	.word	0xe0042000
 80054bc:	20006411 	.word	0x20006411
 80054c0:	40023c00 	.word	0x40023c00
 80054c4:	e000ed00 	.word	0xe000ed00
 80054c8:	410fc241 	.word	0x410fc241
 80054cc:	00000000 	.word	0x00000000

080054d0 <VectorD8>:
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 80054d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 80054d4:	4c66      	ldr	r4, [pc, #408]	; (8005670 <VectorD8+0x1a0>)
 80054d6:	6f66      	ldr	r6, [r4, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 80054d8:	68f7      	ldr	r7, [r6, #12]
  uint16_t sr = u->SR;
 80054da:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 80054dc:	05da      	lsls	r2, r3, #23
  uint16_t sr = u->SR;
 80054de:	b29d      	uxth	r5, r3
  if (sr & USART_SR_LBD) {
 80054e0:	d47b      	bmi.n	80055da <VectorD8+0x10a>
 80054e2:	2320      	movs	r3, #32
 80054e4:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80054e8:	f015 0f2f 	tst.w	r5, #47	; 0x2f
 80054ec:	d04d      	beq.n	800558a <VectorD8+0xba>
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 80054ee:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8005678 <VectorD8+0x1a8>

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 80054f2:	f04f 0900 	mov.w	r9, #0
 80054f6:	e008      	b.n	800550a <VectorD8+0x3a>
    if (sr & USART_SR_RXNE)
 80054f8:	06ad      	lsls	r5, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 80054fa:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 80054fe:	d41d      	bmi.n	800553c <VectorD8+0x6c>
    sr = u->SR;
 8005500:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8005502:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8005506:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8005508:	d03f      	beq.n	800558a <VectorD8+0xba>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 800550a:	072b      	lsls	r3, r5, #28
 800550c:	d0f4      	beq.n	80054f8 <VectorD8+0x28>
    sts |= SD_OVERRUN_ERROR;
 800550e:	f015 0f08 	tst.w	r5, #8
 8005512:	bf0c      	ite	eq
 8005514:	2000      	moveq	r0, #0
 8005516:	2080      	movne	r0, #128	; 0x80
  if (sr & USART_SR_PE)
 8005518:	07e9      	lsls	r1, r5, #31
    sts |= SD_PARITY_ERROR;
 800551a:	bf48      	it	mi
 800551c:	f040 0020 	orrmi.w	r0, r0, #32
  if (sr & USART_SR_FE)
 8005520:	07aa      	lsls	r2, r5, #30
    sts |= SD_FRAMING_ERROR;
 8005522:	bf48      	it	mi
 8005524:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (sr & USART_SR_NE)
 8005528:	076b      	lsls	r3, r5, #29
    sts |= SD_NOISE_ERROR;
 800552a:	bf48      	it	mi
 800552c:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8005530:	f7fd fdf6 	bl	8003120 <chEvtBroadcastFlagsI.constprop.0>
    if (sr & USART_SR_RXNE)
 8005534:	06ad      	lsls	r5, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8005536:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 800553a:	d5e1      	bpl.n	8005500 <VectorD8+0x30>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 800553c:	6963      	ldr	r3, [r4, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 800553e:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
 8005542:	2b00      	cmp	r3, #0
 8005544:	d03a      	beq.n	80055bc <VectorD8+0xec>
  if (!iqIsFullI(iqp)) {
 8005546:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 800554a:	4293      	cmp	r3, r2
 800554c:	d03d      	beq.n	80055ca <VectorD8+0xfa>
    iqp->q_counter++;
 800554e:	6962      	ldr	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 8005550:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 8005552:	3201      	adds	r2, #1
 8005554:	ea05 050a 	and.w	r5, r5, sl
 8005558:	6162      	str	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 800555a:	6221      	str	r1, [r4, #32]
 800555c:	701d      	strb	r5, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 800555e:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8005562:	429a      	cmp	r2, r3
 8005564:	d301      	bcc.n	800556a <VectorD8+0x9a>
      iqp->q_wrptr = iqp->q_buffer;
 8005566:	69a3      	ldr	r3, [r4, #24]
 8005568:	6223      	str	r3, [r4, #32]
  return (bool)(tqp->next != (const thread_t *)tqp);
 800556a:	68e0      	ldr	r0, [r4, #12]
 800556c:	4540      	cmp	r0, r8
 800556e:	d0c7      	beq.n	8005500 <VectorD8+0x30>
  tqp->next             = tp->queue.next;
 8005570:	6803      	ldr	r3, [r0, #0]
 8005572:	60e3      	str	r3, [r4, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
 8005574:	f8c3 8004 	str.w	r8, [r3, #4]
 8005578:	f8c0 9024 	str.w	r9, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 800557c:	f7fd fdb8 	bl	80030f0 <chSchReadyI>
    sr = u->SR;
 8005580:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8005582:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8005586:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8005588:	d1bf      	bne.n	800550a <VectorD8+0x3a>
 800558a:	2300      	movs	r3, #0
 800558c:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8005590:	0638      	lsls	r0, r7, #24
 8005592:	d501      	bpl.n	8005598 <VectorD8+0xc8>
 8005594:	0629      	lsls	r1, r5, #24
 8005596:	d42e      	bmi.n	80055f6 <VectorD8+0x126>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8005598:	067a      	lsls	r2, r7, #25
 800559a:	d50b      	bpl.n	80055b4 <VectorD8+0xe4>
 800559c:	066b      	lsls	r3, r5, #25
 800559e:	d509      	bpl.n	80055b4 <VectorD8+0xe4>
 80055a0:	2320      	movs	r3, #32
 80055a2:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 80055a6:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d049      	beq.n	8005642 <VectorD8+0x172>
 80055ae:	2300      	movs	r3, #0
 80055b0:	f383 8811 	msr	BASEPRI, r3
}
 80055b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 80055b8:	f7fd bcf2 	b.w	8002fa0 <_port_irq_epilogue>
 80055bc:	2004      	movs	r0, #4
 80055be:	f7fd fdaf 	bl	8003120 <chEvtBroadcastFlagsI.constprop.0>
  if (!iqIsFullI(iqp)) {
 80055c2:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d1c1      	bne.n	800554e <VectorD8+0x7e>
 80055ca:	6962      	ldr	r2, [r4, #20]
 80055cc:	2a00      	cmp	r2, #0
 80055ce:	d0be      	beq.n	800554e <VectorD8+0x7e>
 80055d0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80055d4:	f7fd fda4 	bl	8003120 <chEvtBroadcastFlagsI.constprop.0>
 80055d8:	e792      	b.n	8005500 <VectorD8+0x30>
 80055da:	2320      	movs	r3, #32
 80055dc:	f383 8811 	msr	BASEPRI, r3
 80055e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80055e4:	f7fd fd9c 	bl	8003120 <chEvtBroadcastFlagsI.constprop.0>
    u->SR = ~USART_SR_LBD;
 80055e8:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80055ec:	6033      	str	r3, [r6, #0]
 80055ee:	2300      	movs	r3, #0
 80055f0:	f383 8811 	msr	BASEPRI, r3
 80055f4:	e775      	b.n	80054e2 <VectorD8+0x12>
 80055f6:	2320      	movs	r3, #32
 80055f8:	f383 8811 	msr	BASEPRI, r3
  if (!oqIsEmptyI(oqp)) {
 80055fc:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 8005600:	429a      	cmp	r2, r3
 8005602:	d029      	beq.n	8005658 <VectorD8+0x188>
    oqp->q_counter++;
 8005604:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    if (oqp->q_rdptr >= oqp->q_top) {
 8005606:	6c21      	ldr	r1, [r4, #64]	; 0x40
    b = *oqp->q_rdptr++;
 8005608:	1c58      	adds	r0, r3, #1
    oqp->q_counter++;
 800560a:	3201      	adds	r2, #1
 800560c:	63a2      	str	r2, [r4, #56]	; 0x38
    b = *oqp->q_rdptr++;
 800560e:	64a0      	str	r0, [r4, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 8005610:	4288      	cmp	r0, r1
    b = *oqp->q_rdptr++;
 8005612:	f893 8000 	ldrb.w	r8, [r3]
    if (oqp->q_rdptr >= oqp->q_top) {
 8005616:	d301      	bcc.n	800561c <VectorD8+0x14c>
      oqp->q_rdptr = oqp->q_buffer;
 8005618:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800561a:	64a3      	str	r3, [r4, #72]	; 0x48
  return (bool)(tqp->next != (const thread_t *)tqp);
 800561c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800561e:	4b15      	ldr	r3, [pc, #84]	; (8005674 <VectorD8+0x1a4>)
 8005620:	4298      	cmp	r0, r3
 8005622:	d006      	beq.n	8005632 <VectorD8+0x162>
  tqp->next             = tp->queue.next;
 8005624:	6802      	ldr	r2, [r0, #0]
 8005626:	6322      	str	r2, [r4, #48]	; 0x30
  tp->u.rdymsg = msg;
 8005628:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 800562a:	6053      	str	r3, [r2, #4]
 800562c:	6241      	str	r1, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 800562e:	f7fd fd5f 	bl	80030f0 <chSchReadyI>
      u->DR = b;
 8005632:	f8c6 8004 	str.w	r8, [r6, #4]
 8005636:	2300      	movs	r3, #0
 8005638:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 800563c:	067a      	lsls	r2, r7, #25
 800563e:	d5b9      	bpl.n	80055b4 <VectorD8+0xe4>
 8005640:	e7ac      	b.n	800559c <VectorD8+0xcc>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8005642:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005644:	2b00      	cmp	r3, #0
 8005646:	d0b2      	beq.n	80055ae <VectorD8+0xde>
 8005648:	2010      	movs	r0, #16
 800564a:	f7fd fd69 	bl	8003120 <chEvtBroadcastFlagsI.constprop.0>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 800564e:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8005652:	401f      	ands	r7, r3
 8005654:	60f7      	str	r7, [r6, #12]
 8005656:	e7aa      	b.n	80055ae <VectorD8+0xde>
  if (!oqIsEmptyI(oqp)) {
 8005658:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800565a:	2a00      	cmp	r2, #0
 800565c:	d0d2      	beq.n	8005604 <VectorD8+0x134>
 800565e:	2008      	movs	r0, #8
 8005660:	f7fd fd5e 	bl	8003120 <chEvtBroadcastFlagsI.constprop.0>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 8005664:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8005668:	403b      	ands	r3, r7
 800566a:	60f3      	str	r3, [r6, #12]
 800566c:	e7e3      	b.n	8005636 <VectorD8+0x166>
 800566e:	bf00      	nop
 8005670:	20001128 	.word	0x20001128
 8005674:	20001158 	.word	0x20001158
 8005678:	20001134 	.word	0x20001134
 800567c:	00000000 	.word	0x00000000

08005680 <VectorB0>:
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 8005680:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8005684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  sr  = timp->SR;
 8005688:	6903      	ldr	r3, [r0, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 800568a:	68c2      	ldr	r2, [r0, #12]
 800568c:	4013      	ands	r3, r2
 800568e:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 8005690:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 8005692:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 8005694:	6102      	str	r2, [r0, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 8005696:	d403      	bmi.n	80056a0 <VectorB0+0x20>
}
 8005698:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 800569c:	f7fd bc80 	b.w	8002fa0 <_port_irq_epilogue>
 80056a0:	2320      	movs	r3, #32
 80056a2:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 80056a6:	4d23      	ldr	r5, [pc, #140]	; (8005734 <VectorB0+0xb4>)
  return (systime_t)STM32_ST_TIM->CNT;
 80056a8:	6a47      	ldr	r7, [r0, #36]	; 0x24
 80056aa:	69eb      	ldr	r3, [r5, #28]
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 80056ac:	6aaa      	ldr	r2, [r5, #40]	; 0x28

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 80056ae:	6899      	ldr	r1, [r3, #8]
  return (sysinterval_t)((systime_t)(end - start));
 80056b0:	1abe      	subs	r6, r7, r2
 80056b2:	42b1      	cmp	r1, r6
 80056b4:	bf88      	it	hi
 80056b6:	f105 091c 	addhi.w	r9, r5, #28
 80056ba:	d825      	bhi.n	8005708 <VectorB0+0x88>
  STM32_ST_TIM->DIER = 0U;
 80056bc:	4604      	mov	r4, r0
 80056be:	f105 091c 	add.w	r9, r5, #28
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 80056c2:	f04f 0800 	mov.w	r8, #0
 80056c6:	2720      	movs	r7, #32
 80056c8:	e000      	b.n	80056cc <VectorB0+0x4c>
 80056ca:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 80056cc:	6818      	ldr	r0, [r3, #0]
      ch.vtlist.lasttime += vtp->delta;
 80056ce:	440a      	add	r2, r1

      /* If the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 80056d0:	4548      	cmp	r0, r9
      ch.vtlist.lasttime += vtp->delta;
 80056d2:	62aa      	str	r2, [r5, #40]	; 0x28
      nowdelta -= vtp->delta;
 80056d4:	eba6 0601 	sub.w	r6, r6, r1
      fn = vtp->func;
 80056d8:	68da      	ldr	r2, [r3, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 80056da:	f8c0 9004 	str.w	r9, [r0, #4]
      ch.vtlist.next = vtp->next;
 80056de:	61e8      	str	r0, [r5, #28]
      vtp->func = NULL;
 80056e0:	f8c3 800c 	str.w	r8, [r3, #12]
 80056e4:	bf08      	it	eq
 80056e6:	f8c4 800c 	streq.w	r8, [r4, #12]
 80056ea:	f388 8811 	msr	BASEPRI, r8
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 80056ee:	6918      	ldr	r0, [r3, #16]
 80056f0:	4790      	blx	r2
 80056f2:	f387 8811 	msr	BASEPRI, r7
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 80056f6:	69eb      	ldr	r3, [r5, #28]
    }
    while (vtp->delta <= nowdelta);
 80056f8:	6899      	ldr	r1, [r3, #8]
 80056fa:	428e      	cmp	r6, r1
 80056fc:	d2e5      	bcs.n	80056ca <VectorB0+0x4a>
  return (systime_t)STM32_ST_TIM->CNT;
 80056fe:	6a67      	ldr	r7, [r4, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8005700:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8005702:	1abe      	subs	r6, r7, r2
    if (nowdelta < vtp->delta) {
 8005704:	428e      	cmp	r6, r1
 8005706:	d2de      	bcs.n	80056c6 <VectorB0+0x46>
  }

  /* If the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8005708:	454b      	cmp	r3, r9
 800570a:	d00b      	beq.n	8005724 <VectorB0+0xa4>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 800570c:	6899      	ldr	r1, [r3, #8]
  ch.vtlist.lasttime += nowdelta;
 800570e:	62af      	str	r7, [r5, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 8005710:	1bc9      	subs	r1, r1, r7
 8005712:	440a      	add	r2, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8005714:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 8005718:	2a02      	cmp	r2, #2
 800571a:	bf2c      	ite	cs
 800571c:	18bf      	addcs	r7, r7, r2
 800571e:	3702      	addcc	r7, #2
 8005720:	609a      	str	r2, [r3, #8]
 8005722:	634f      	str	r7, [r1, #52]	; 0x34
 8005724:	2300      	movs	r3, #0
 8005726:	f383 8811 	msr	BASEPRI, r3
}
 800572a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 800572e:	f7fd bc37 	b.w	8002fa0 <_port_irq_epilogue>
 8005732:	bf00      	nop
 8005734:	2000128c 	.word	0x2000128c
	...

08005740 <Vector158>:
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8005740:	4b08      	ldr	r3, [pc, #32]	; (8005764 <Vector158+0x24>)
  if (dma.streams[15].func)
 8005742:	4809      	ldr	r0, [pc, #36]	; (8005768 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8005744:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[15].func)
 8005746:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8005748:	0d89      	lsrs	r1, r1, #22
 800574a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 800574e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22U;
 8005750:	058c      	lsls	r4, r1, #22
 8005752:	60dc      	str	r4, [r3, #12]
  if (dma.streams[15].func)
 8005754:	b112      	cbz	r2, 800575c <Vector158+0x1c>
    dma.streams[15].func(dma.streams[15].param, flags);
 8005756:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800575a:	4790      	blx	r2
}
 800575c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8005760:	f7fd bc1e 	b.w	8002fa0 <_port_irq_epilogue>
 8005764:	40026400 	.word	0x40026400
 8005768:	2000144c 	.word	0x2000144c
 800576c:	00000000 	.word	0x00000000

08005770 <Vector154>:
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8005770:	4b08      	ldr	r3, [pc, #32]	; (8005794 <Vector154+0x24>)
  if (dma.streams[14].func)
 8005772:	4809      	ldr	r0, [pc, #36]	; (8005798 <Vector154+0x28>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8005774:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[14].func)
 8005776:	6f42      	ldr	r2, [r0, #116]	; 0x74
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8005778:	0c09      	lsrs	r1, r1, #16
 800577a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 800577e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16U;
 8005780:	040c      	lsls	r4, r1, #16
 8005782:	60dc      	str	r4, [r3, #12]
  if (dma.streams[14].func)
 8005784:	b10a      	cbz	r2, 800578a <Vector154+0x1a>
    dma.streams[14].func(dma.streams[14].param, flags);
 8005786:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8005788:	4790      	blx	r2
}
 800578a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800578e:	f7fd bc07 	b.w	8002fa0 <_port_irq_epilogue>
 8005792:	bf00      	nop
 8005794:	40026400 	.word	0x40026400
 8005798:	2000144c 	.word	0x2000144c
 800579c:	00000000 	.word	0x00000000

080057a0 <Vector150>:
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80057a0:	4b08      	ldr	r3, [pc, #32]	; (80057c4 <Vector150+0x24>)
  if (dma.streams[13].func)
 80057a2:	4809      	ldr	r0, [pc, #36]	; (80057c8 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80057a4:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[13].func)
 80057a6:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80057a8:	0989      	lsrs	r1, r1, #6
 80057aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 80057ae:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6U;
 80057b0:	018c      	lsls	r4, r1, #6
 80057b2:	60dc      	str	r4, [r3, #12]
  if (dma.streams[13].func)
 80057b4:	b10a      	cbz	r2, 80057ba <Vector150+0x1a>
    dma.streams[13].func(dma.streams[13].param, flags);
 80057b6:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80057b8:	4790      	blx	r2
}
 80057ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80057be:	f7fd bbef 	b.w	8002fa0 <_port_irq_epilogue>
 80057c2:	bf00      	nop
 80057c4:	40026400 	.word	0x40026400
 80057c8:	2000144c 	.word	0x2000144c
 80057cc:	00000000 	.word	0x00000000

080057d0 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 80057d0:	b508      	push	{r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80057d2:	4b07      	ldr	r3, [pc, #28]	; (80057f0 <Vector130+0x20>)
  if (dma.streams[12].func)
 80057d4:	4807      	ldr	r0, [pc, #28]	; (80057f4 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80057d6:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[12].func)
 80057d8:	6e42      	ldr	r2, [r0, #100]	; 0x64
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80057da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 80057de:	60d9      	str	r1, [r3, #12]
  if (dma.streams[12].func)
 80057e0:	b10a      	cbz	r2, 80057e6 <Vector130+0x16>
    dma.streams[12].func(dma.streams[12].param, flags);
 80057e2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80057e4:	4790      	blx	r2
}
 80057e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80057ea:	f7fd bbd9 	b.w	8002fa0 <_port_irq_epilogue>
 80057ee:	bf00      	nop
 80057f0:	40026400 	.word	0x40026400
 80057f4:	2000144c 	.word	0x2000144c
	...

08005800 <Vector12C>:
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8005800:	4b08      	ldr	r3, [pc, #32]	; (8005824 <Vector12C+0x24>)
  if (dma.streams[11].func)
 8005802:	4809      	ldr	r0, [pc, #36]	; (8005828 <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8005804:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[11].func)
 8005806:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8005808:	0d89      	lsrs	r1, r1, #22
 800580a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 800580e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22U;
 8005810:	058c      	lsls	r4, r1, #22
 8005812:	609c      	str	r4, [r3, #8]
  if (dma.streams[11].func)
 8005814:	b10a      	cbz	r2, 800581a <Vector12C+0x1a>
    dma.streams[11].func(dma.streams[11].param, flags);
 8005816:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8005818:	4790      	blx	r2
}
 800581a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800581e:	f7fd bbbf 	b.w	8002fa0 <_port_irq_epilogue>
 8005822:	bf00      	nop
 8005824:	40026400 	.word	0x40026400
 8005828:	2000144c 	.word	0x2000144c
 800582c:	00000000 	.word	0x00000000

08005830 <Vector128>:
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8005830:	4b08      	ldr	r3, [pc, #32]	; (8005854 <Vector128+0x24>)
  if (dma.streams[10].func)
 8005832:	4809      	ldr	r0, [pc, #36]	; (8005858 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8005834:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[10].func)
 8005836:	6d42      	ldr	r2, [r0, #84]	; 0x54
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8005838:	0c09      	lsrs	r1, r1, #16
 800583a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 800583e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16U;
 8005840:	040c      	lsls	r4, r1, #16
 8005842:	609c      	str	r4, [r3, #8]
  if (dma.streams[10].func)
 8005844:	b10a      	cbz	r2, 800584a <Vector128+0x1a>
    dma.streams[10].func(dma.streams[10].param, flags);
 8005846:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8005848:	4790      	blx	r2
}
 800584a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800584e:	f7fd bba7 	b.w	8002fa0 <_port_irq_epilogue>
 8005852:	bf00      	nop
 8005854:	40026400 	.word	0x40026400
 8005858:	2000144c 	.word	0x2000144c
 800585c:	00000000 	.word	0x00000000

08005860 <Vector124>:
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8005860:	4b08      	ldr	r3, [pc, #32]	; (8005884 <Vector124+0x24>)
  if (dma.streams[9].func)
 8005862:	4809      	ldr	r0, [pc, #36]	; (8005888 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8005864:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[9].func)
 8005866:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8005868:	0989      	lsrs	r1, r1, #6
 800586a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 800586e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6U;
 8005870:	018c      	lsls	r4, r1, #6
 8005872:	609c      	str	r4, [r3, #8]
  if (dma.streams[9].func)
 8005874:	b10a      	cbz	r2, 800587a <Vector124+0x1a>
    dma.streams[9].func(dma.streams[9].param, flags);
 8005876:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8005878:	4790      	blx	r2
}
 800587a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800587e:	f7fd bb8f 	b.w	8002fa0 <_port_irq_epilogue>
 8005882:	bf00      	nop
 8005884:	40026400 	.word	0x40026400
 8005888:	2000144c 	.word	0x2000144c
 800588c:	00000000 	.word	0x00000000

08005890 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8005890:	b508      	push	{r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8005892:	4b07      	ldr	r3, [pc, #28]	; (80058b0 <Vector120+0x20>)
  if (dma.streams[8].func)
 8005894:	4807      	ldr	r0, [pc, #28]	; (80058b4 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8005896:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[8].func)
 8005898:	6c42      	ldr	r2, [r0, #68]	; 0x44
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800589a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 800589e:	6099      	str	r1, [r3, #8]
  if (dma.streams[8].func)
 80058a0:	b10a      	cbz	r2, 80058a6 <Vector120+0x16>
    dma.streams[8].func(dma.streams[8].param, flags);
 80058a2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80058a4:	4790      	blx	r2
}
 80058a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80058aa:	f7fd bb79 	b.w	8002fa0 <_port_irq_epilogue>
 80058ae:	bf00      	nop
 80058b0:	40026400 	.word	0x40026400
 80058b4:	2000144c 	.word	0x2000144c
	...

080058c0 <VectorFC>:
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80058c0:	4b08      	ldr	r3, [pc, #32]	; (80058e4 <VectorFC+0x24>)
  if (dma.streams[7].func)
 80058c2:	4809      	ldr	r0, [pc, #36]	; (80058e8 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80058c4:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[7].func)
 80058c6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80058c8:	0d89      	lsrs	r1, r1, #22
 80058ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 80058ce:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22U;
 80058d0:	058c      	lsls	r4, r1, #22
 80058d2:	60dc      	str	r4, [r3, #12]
  if (dma.streams[7].func)
 80058d4:	b10a      	cbz	r2, 80058da <VectorFC+0x1a>
    dma.streams[7].func(dma.streams[7].param, flags);
 80058d6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80058d8:	4790      	blx	r2
}
 80058da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80058de:	f7fd bb5f 	b.w	8002fa0 <_port_irq_epilogue>
 80058e2:	bf00      	nop
 80058e4:	40026000 	.word	0x40026000
 80058e8:	2000144c 	.word	0x2000144c
 80058ec:	00000000 	.word	0x00000000

080058f0 <Vector84>:
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80058f0:	4b08      	ldr	r3, [pc, #32]	; (8005914 <Vector84+0x24>)
  if (dma.streams[6].func)
 80058f2:	4809      	ldr	r0, [pc, #36]	; (8005918 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80058f4:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[6].func)
 80058f6:	6b42      	ldr	r2, [r0, #52]	; 0x34
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80058f8:	0c09      	lsrs	r1, r1, #16
 80058fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 80058fe:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16U;
 8005900:	040c      	lsls	r4, r1, #16
 8005902:	60dc      	str	r4, [r3, #12]
  if (dma.streams[6].func)
 8005904:	b10a      	cbz	r2, 800590a <Vector84+0x1a>
    dma.streams[6].func(dma.streams[6].param, flags);
 8005906:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005908:	4790      	blx	r2
}
 800590a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800590e:	f7fd bb47 	b.w	8002fa0 <_port_irq_epilogue>
 8005912:	bf00      	nop
 8005914:	40026000 	.word	0x40026000
 8005918:	2000144c 	.word	0x2000144c
 800591c:	00000000 	.word	0x00000000

08005920 <Vector80>:
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8005920:	4b08      	ldr	r3, [pc, #32]	; (8005944 <Vector80+0x24>)
  if (dma.streams[5].func)
 8005922:	4809      	ldr	r0, [pc, #36]	; (8005948 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8005924:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[5].func)
 8005926:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8005928:	0989      	lsrs	r1, r1, #6
 800592a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 800592e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6U;
 8005930:	018c      	lsls	r4, r1, #6
 8005932:	60dc      	str	r4, [r3, #12]
  if (dma.streams[5].func)
 8005934:	b10a      	cbz	r2, 800593a <Vector80+0x1a>
    dma.streams[5].func(dma.streams[5].param, flags);
 8005936:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8005938:	4790      	blx	r2
}
 800593a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800593e:	f7fd bb2f 	b.w	8002fa0 <_port_irq_epilogue>
 8005942:	bf00      	nop
 8005944:	40026000 	.word	0x40026000
 8005948:	2000144c 	.word	0x2000144c
 800594c:	00000000 	.word	0x00000000

08005950 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8005950:	b508      	push	{r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8005952:	4b07      	ldr	r3, [pc, #28]	; (8005970 <Vector7C+0x20>)
  if (dma.streams[4].func)
 8005954:	4807      	ldr	r0, [pc, #28]	; (8005974 <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8005956:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[4].func)
 8005958:	6a42      	ldr	r2, [r0, #36]	; 0x24
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800595a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 800595e:	60d9      	str	r1, [r3, #12]
  if (dma.streams[4].func)
 8005960:	b10a      	cbz	r2, 8005966 <Vector7C+0x16>
    dma.streams[4].func(dma.streams[4].param, flags);
 8005962:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005964:	4790      	blx	r2
}
 8005966:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800596a:	f7fd bb19 	b.w	8002fa0 <_port_irq_epilogue>
 800596e:	bf00      	nop
 8005970:	40026000 	.word	0x40026000
 8005974:	2000144c 	.word	0x2000144c
	...

08005980 <Vector78>:
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8005980:	4b08      	ldr	r3, [pc, #32]	; (80059a4 <Vector78+0x24>)
  if (dma.streams[3].func)
 8005982:	4809      	ldr	r0, [pc, #36]	; (80059a8 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8005984:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[3].func)
 8005986:	69c2      	ldr	r2, [r0, #28]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8005988:	0d89      	lsrs	r1, r1, #22
 800598a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 800598e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22U;
 8005990:	058c      	lsls	r4, r1, #22
 8005992:	609c      	str	r4, [r3, #8]
  if (dma.streams[3].func)
 8005994:	b10a      	cbz	r2, 800599a <Vector78+0x1a>
    dma.streams[3].func(dma.streams[3].param, flags);
 8005996:	6a00      	ldr	r0, [r0, #32]
 8005998:	4790      	blx	r2
}
 800599a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800599e:	f7fd baff 	b.w	8002fa0 <_port_irq_epilogue>
 80059a2:	bf00      	nop
 80059a4:	40026000 	.word	0x40026000
 80059a8:	2000144c 	.word	0x2000144c
 80059ac:	00000000 	.word	0x00000000

080059b0 <Vector74>:
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80059b0:	4b08      	ldr	r3, [pc, #32]	; (80059d4 <Vector74+0x24>)
  if (dma.streams[2].func)
 80059b2:	4809      	ldr	r0, [pc, #36]	; (80059d8 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80059b4:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[2].func)
 80059b6:	6942      	ldr	r2, [r0, #20]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80059b8:	0c09      	lsrs	r1, r1, #16
 80059ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 80059be:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16U;
 80059c0:	040c      	lsls	r4, r1, #16
 80059c2:	609c      	str	r4, [r3, #8]
  if (dma.streams[2].func)
 80059c4:	b10a      	cbz	r2, 80059ca <Vector74+0x1a>
    dma.streams[2].func(dma.streams[2].param, flags);
 80059c6:	6980      	ldr	r0, [r0, #24]
 80059c8:	4790      	blx	r2
}
 80059ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80059ce:	f7fd bae7 	b.w	8002fa0 <_port_irq_epilogue>
 80059d2:	bf00      	nop
 80059d4:	40026000 	.word	0x40026000
 80059d8:	2000144c 	.word	0x2000144c
 80059dc:	00000000 	.word	0x00000000

080059e0 <Vector70>:
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80059e0:	4b08      	ldr	r3, [pc, #32]	; (8005a04 <Vector70+0x24>)
  if (dma.streams[1].func)
 80059e2:	4809      	ldr	r0, [pc, #36]	; (8005a08 <Vector70+0x28>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80059e4:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[1].func)
 80059e6:	68c2      	ldr	r2, [r0, #12]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80059e8:	0989      	lsrs	r1, r1, #6
 80059ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 80059ee:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6U;
 80059f0:	018c      	lsls	r4, r1, #6
 80059f2:	609c      	str	r4, [r3, #8]
  if (dma.streams[1].func)
 80059f4:	b10a      	cbz	r2, 80059fa <Vector70+0x1a>
    dma.streams[1].func(dma.streams[1].param, flags);
 80059f6:	6900      	ldr	r0, [r0, #16]
 80059f8:	4790      	blx	r2
}
 80059fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80059fe:	f7fd bacf 	b.w	8002fa0 <_port_irq_epilogue>
 8005a02:	bf00      	nop
 8005a04:	40026000 	.word	0x40026000
 8005a08:	2000144c 	.word	0x2000144c
 8005a0c:	00000000 	.word	0x00000000

08005a10 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8005a10:	b508      	push	{r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8005a12:	4b07      	ldr	r3, [pc, #28]	; (8005a30 <Vector6C+0x20>)
  if (dma.streams[0].func)
 8005a14:	4807      	ldr	r0, [pc, #28]	; (8005a34 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8005a16:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[0].func)
 8005a18:	6842      	ldr	r2, [r0, #4]
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8005a1a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 8005a1e:	6099      	str	r1, [r3, #8]
  if (dma.streams[0].func)
 8005a20:	b10a      	cbz	r2, 8005a26 <Vector6C+0x16>
    dma.streams[0].func(dma.streams[0].param, flags);
 8005a22:	6880      	ldr	r0, [r0, #8]
 8005a24:	4790      	blx	r2
}
 8005a26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8005a2a:	f7fd bab9 	b.w	8002fa0 <_port_irq_epilogue>
 8005a2e:	bf00      	nop
 8005a30:	40026000 	.word	0x40026000
 8005a34:	2000144c 	.word	0x2000144c
	...

08005a40 <VectorE0>:
OSAL_IRQ_HANDLER(VectorE0) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8005a40:	4b1a      	ldr	r3, [pc, #104]	; (8005aac <VectorE0+0x6c>)
OSAL_IRQ_HANDLER(VectorE0) {
 8005a42:	b510      	push	{r4, lr}
  pr = EXTI->PR;
 8005a44:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
 8005a46:	681c      	ldr	r4, [r3, #0]
 8005a48:	4014      	ands	r4, r2
 8005a4a:	f404 427c 	and.w	r2, r4, #64512	; 0xfc00
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
 8005a4e:	615a      	str	r2, [r3, #20]

  exti_serve_irq(pr, 10);
 8005a50:	0562      	lsls	r2, r4, #21
 8005a52:	d504      	bpl.n	8005a5e <VectorE0+0x1e>
 8005a54:	4a16      	ldr	r2, [pc, #88]	; (8005ab0 <VectorE0+0x70>)
 8005a56:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005a58:	b10b      	cbz	r3, 8005a5e <VectorE0+0x1e>
 8005a5a:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8005a5c:	4798      	blx	r3
  exti_serve_irq(pr, 11);
 8005a5e:	0523      	lsls	r3, r4, #20
 8005a60:	d504      	bpl.n	8005a6c <VectorE0+0x2c>
 8005a62:	4a13      	ldr	r2, [pc, #76]	; (8005ab0 <VectorE0+0x70>)
 8005a64:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005a66:	b10b      	cbz	r3, 8005a6c <VectorE0+0x2c>
 8005a68:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 8005a6a:	4798      	blx	r3
  exti_serve_irq(pr, 12);
 8005a6c:	04e0      	lsls	r0, r4, #19
 8005a6e:	d504      	bpl.n	8005a7a <VectorE0+0x3a>
 8005a70:	4a0f      	ldr	r2, [pc, #60]	; (8005ab0 <VectorE0+0x70>)
 8005a72:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8005a74:	b10b      	cbz	r3, 8005a7a <VectorE0+0x3a>
 8005a76:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8005a78:	4798      	blx	r3
  exti_serve_irq(pr, 13);
 8005a7a:	04a1      	lsls	r1, r4, #18
 8005a7c:	d504      	bpl.n	8005a88 <VectorE0+0x48>
 8005a7e:	4a0c      	ldr	r2, [pc, #48]	; (8005ab0 <VectorE0+0x70>)
 8005a80:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8005a82:	b10b      	cbz	r3, 8005a88 <VectorE0+0x48>
 8005a84:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8005a86:	4798      	blx	r3
  exti_serve_irq(pr, 14);
 8005a88:	0462      	lsls	r2, r4, #17
 8005a8a:	d504      	bpl.n	8005a96 <VectorE0+0x56>
 8005a8c:	4a08      	ldr	r2, [pc, #32]	; (8005ab0 <VectorE0+0x70>)
 8005a8e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8005a90:	b10b      	cbz	r3, 8005a96 <VectorE0+0x56>
 8005a92:	6f50      	ldr	r0, [r2, #116]	; 0x74
 8005a94:	4798      	blx	r3
  exti_serve_irq(pr, 15);
 8005a96:	0423      	lsls	r3, r4, #16
 8005a98:	d504      	bpl.n	8005aa4 <VectorE0+0x64>
 8005a9a:	4a05      	ldr	r2, [pc, #20]	; (8005ab0 <VectorE0+0x70>)
 8005a9c:	6f93      	ldr	r3, [r2, #120]	; 0x78
 8005a9e:	b10b      	cbz	r3, 8005aa4 <VectorE0+0x64>
 8005aa0:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
 8005aa2:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8005aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8005aa8:	f7fd ba7a 	b.w	8002fa0 <_port_irq_epilogue>
 8005aac:	40013c00 	.word	0x40013c00
 8005ab0:	2000120c 	.word	0x2000120c
	...

08005ac0 <Vector9C>:
  pr = EXTI->PR;
 8005ac0:	4b17      	ldr	r3, [pc, #92]	; (8005b20 <Vector9C+0x60>)
OSAL_IRQ_HANDLER(Vector9C) {
 8005ac2:	b510      	push	{r4, lr}
  pr = EXTI->PR;
 8005ac4:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
 8005ac6:	681c      	ldr	r4, [r3, #0]
 8005ac8:	4014      	ands	r4, r2
 8005aca:	f404 7278 	and.w	r2, r4, #992	; 0x3e0
  EXTI->PR = pr;
 8005ace:	615a      	str	r2, [r3, #20]
  exti_serve_irq(pr, 5);
 8005ad0:	06a3      	lsls	r3, r4, #26
 8005ad2:	d504      	bpl.n	8005ade <Vector9C+0x1e>
 8005ad4:	4a13      	ldr	r2, [pc, #76]	; (8005b24 <Vector9C+0x64>)
 8005ad6:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8005ad8:	b10b      	cbz	r3, 8005ade <Vector9C+0x1e>
 8005ada:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8005adc:	4798      	blx	r3
  exti_serve_irq(pr, 6);
 8005ade:	0660      	lsls	r0, r4, #25
 8005ae0:	d504      	bpl.n	8005aec <Vector9C+0x2c>
 8005ae2:	4a10      	ldr	r2, [pc, #64]	; (8005b24 <Vector9C+0x64>)
 8005ae4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005ae6:	b10b      	cbz	r3, 8005aec <Vector9C+0x2c>
 8005ae8:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8005aea:	4798      	blx	r3
  exti_serve_irq(pr, 7);
 8005aec:	0621      	lsls	r1, r4, #24
 8005aee:	d504      	bpl.n	8005afa <Vector9C+0x3a>
 8005af0:	4a0c      	ldr	r2, [pc, #48]	; (8005b24 <Vector9C+0x64>)
 8005af2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005af4:	b10b      	cbz	r3, 8005afa <Vector9C+0x3a>
 8005af6:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 8005af8:	4798      	blx	r3
  exti_serve_irq(pr, 8);
 8005afa:	05e2      	lsls	r2, r4, #23
 8005afc:	d504      	bpl.n	8005b08 <Vector9C+0x48>
 8005afe:	4a09      	ldr	r2, [pc, #36]	; (8005b24 <Vector9C+0x64>)
 8005b00:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005b02:	b10b      	cbz	r3, 8005b08 <Vector9C+0x48>
 8005b04:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8005b06:	4798      	blx	r3
  exti_serve_irq(pr, 9);
 8005b08:	05a3      	lsls	r3, r4, #22
 8005b0a:	d504      	bpl.n	8005b16 <Vector9C+0x56>
 8005b0c:	4a05      	ldr	r2, [pc, #20]	; (8005b24 <Vector9C+0x64>)
 8005b0e:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8005b10:	b10b      	cbz	r3, 8005b16 <Vector9C+0x56>
 8005b12:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8005b14:	4798      	blx	r3
}
 8005b16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8005b1a:	f7fd ba41 	b.w	8002fa0 <_port_irq_epilogue>
 8005b1e:	bf00      	nop
 8005b20:	40013c00 	.word	0x40013c00
 8005b24:	2000120c 	.word	0x2000120c
	...

08005b30 <Vector68>:
  pr = EXTI->PR;
 8005b30:	4a08      	ldr	r2, [pc, #32]	; (8005b54 <Vector68+0x24>)
OSAL_IRQ_HANDLER(Vector68) {
 8005b32:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8005b34:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 4);
 8005b36:	6813      	ldr	r3, [r2, #0]
 8005b38:	400b      	ands	r3, r1
 8005b3a:	f003 0310 	and.w	r3, r3, #16
  EXTI->PR = pr;
 8005b3e:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 4);
 8005b40:	b123      	cbz	r3, 8005b4c <Vector68+0x1c>
 8005b42:	4a05      	ldr	r2, [pc, #20]	; (8005b58 <Vector68+0x28>)
 8005b44:	6a13      	ldr	r3, [r2, #32]
 8005b46:	b10b      	cbz	r3, 8005b4c <Vector68+0x1c>
 8005b48:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8005b4a:	4798      	blx	r3
}
 8005b4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8005b50:	f7fd ba26 	b.w	8002fa0 <_port_irq_epilogue>
 8005b54:	40013c00 	.word	0x40013c00
 8005b58:	2000120c 	.word	0x2000120c
 8005b5c:	00000000 	.word	0x00000000

08005b60 <Vector64>:
  pr = EXTI->PR;
 8005b60:	4a08      	ldr	r2, [pc, #32]	; (8005b84 <Vector64+0x24>)
OSAL_IRQ_HANDLER(Vector64) {
 8005b62:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8005b64:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 3);
 8005b66:	6813      	ldr	r3, [r2, #0]
 8005b68:	400b      	ands	r3, r1
 8005b6a:	f003 0308 	and.w	r3, r3, #8
  EXTI->PR = pr;
 8005b6e:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 3);
 8005b70:	b123      	cbz	r3, 8005b7c <Vector64+0x1c>
 8005b72:	4a05      	ldr	r2, [pc, #20]	; (8005b88 <Vector64+0x28>)
 8005b74:	6993      	ldr	r3, [r2, #24]
 8005b76:	b10b      	cbz	r3, 8005b7c <Vector64+0x1c>
 8005b78:	69d0      	ldr	r0, [r2, #28]
 8005b7a:	4798      	blx	r3
}
 8005b7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8005b80:	f7fd ba0e 	b.w	8002fa0 <_port_irq_epilogue>
 8005b84:	40013c00 	.word	0x40013c00
 8005b88:	2000120c 	.word	0x2000120c
 8005b8c:	00000000 	.word	0x00000000

08005b90 <Vector60>:
  pr = EXTI->PR;
 8005b90:	4a08      	ldr	r2, [pc, #32]	; (8005bb4 <Vector60+0x24>)
OSAL_IRQ_HANDLER(Vector60) {
 8005b92:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8005b94:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 2);
 8005b96:	6813      	ldr	r3, [r2, #0]
 8005b98:	400b      	ands	r3, r1
 8005b9a:	f003 0304 	and.w	r3, r3, #4
  EXTI->PR = pr;
 8005b9e:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 2);
 8005ba0:	b123      	cbz	r3, 8005bac <Vector60+0x1c>
 8005ba2:	4a05      	ldr	r2, [pc, #20]	; (8005bb8 <Vector60+0x28>)
 8005ba4:	6913      	ldr	r3, [r2, #16]
 8005ba6:	b10b      	cbz	r3, 8005bac <Vector60+0x1c>
 8005ba8:	6950      	ldr	r0, [r2, #20]
 8005baa:	4798      	blx	r3
}
 8005bac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8005bb0:	f7fd b9f6 	b.w	8002fa0 <_port_irq_epilogue>
 8005bb4:	40013c00 	.word	0x40013c00
 8005bb8:	2000120c 	.word	0x2000120c
 8005bbc:	00000000 	.word	0x00000000

08005bc0 <Vector5C>:
  pr = EXTI->PR;
 8005bc0:	4a08      	ldr	r2, [pc, #32]	; (8005be4 <Vector5C+0x24>)
OSAL_IRQ_HANDLER(Vector5C) {
 8005bc2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8005bc4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 1);
 8005bc6:	6813      	ldr	r3, [r2, #0]
 8005bc8:	400b      	ands	r3, r1
 8005bca:	f003 0302 	and.w	r3, r3, #2
  EXTI->PR = pr;
 8005bce:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 1);
 8005bd0:	b123      	cbz	r3, 8005bdc <Vector5C+0x1c>
 8005bd2:	4a05      	ldr	r2, [pc, #20]	; (8005be8 <Vector5C+0x28>)
 8005bd4:	6893      	ldr	r3, [r2, #8]
 8005bd6:	b10b      	cbz	r3, 8005bdc <Vector5C+0x1c>
 8005bd8:	68d0      	ldr	r0, [r2, #12]
 8005bda:	4798      	blx	r3
}
 8005bdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8005be0:	f7fd b9de 	b.w	8002fa0 <_port_irq_epilogue>
 8005be4:	40013c00 	.word	0x40013c00
 8005be8:	2000120c 	.word	0x2000120c
 8005bec:	00000000 	.word	0x00000000

08005bf0 <Vector58>:
  pr = EXTI->PR;
 8005bf0:	4a08      	ldr	r2, [pc, #32]	; (8005c14 <Vector58+0x24>)
OSAL_IRQ_HANDLER(Vector58) {
 8005bf2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8005bf4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 0);
 8005bf6:	6813      	ldr	r3, [r2, #0]
 8005bf8:	400b      	ands	r3, r1
 8005bfa:	f003 0301 	and.w	r3, r3, #1
  EXTI->PR = pr;
 8005bfe:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 0);
 8005c00:	b123      	cbz	r3, 8005c0c <Vector58+0x1c>
 8005c02:	4a05      	ldr	r2, [pc, #20]	; (8005c18 <Vector58+0x28>)
 8005c04:	6813      	ldr	r3, [r2, #0]
 8005c06:	b10b      	cbz	r3, 8005c0c <Vector58+0x1c>
 8005c08:	6850      	ldr	r0, [r2, #4]
 8005c0a:	4798      	blx	r3
}
 8005c0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8005c10:	f7fd b9c6 	b.w	8002fa0 <_port_irq_epilogue>
 8005c14:	40013c00 	.word	0x40013c00
 8005c18:	2000120c 	.word	0x2000120c
 8005c1c:	00000000 	.word	0x00000000

08005c20 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8005c20:	b4f0      	push	{r4, r5, r6, r7}
 8005c22:	4f14      	ldr	r7, [pc, #80]	; (8005c74 <__init_ram_areas+0x54>)
 8005c24:	4d14      	ldr	r5, [pc, #80]	; (8005c78 <__init_ram_areas+0x58>)
 8005c26:	4815      	ldr	r0, [pc, #84]	; (8005c7c <__init_ram_areas+0x5c>)
 8005c28:	4b15      	ldr	r3, [pc, #84]	; (8005c80 <__init_ram_areas+0x60>)
 8005c2a:	4916      	ldr	r1, [pc, #88]	; (8005c84 <__init_ram_areas+0x64>)
 8005c2c:	f107 0c70 	add.w	ip, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8005c30:	2600      	movs	r6, #0
    while (p < rap->clear_area) {
 8005c32:	4298      	cmp	r0, r3
 8005c34:	d911      	bls.n	8005c5a <__init_ram_areas+0x3a>
 8005c36:	3904      	subs	r1, #4
 8005c38:	461a      	mov	r2, r3
      *p = *tp;
 8005c3a:	f851 4f04 	ldr.w	r4, [r1, #4]!
 8005c3e:	f842 4b04 	str.w	r4, [r2], #4
    while (p < rap->clear_area) {
 8005c42:	4290      	cmp	r0, r2
 8005c44:	d8f9      	bhi.n	8005c3a <__init_ram_areas+0x1a>
 8005c46:	1e42      	subs	r2, r0, #1
 8005c48:	1ad2      	subs	r2, r2, r3
 8005c4a:	f022 0203 	bic.w	r2, r2, #3
 8005c4e:	3204      	adds	r2, #4
 8005c50:	4413      	add	r3, r2
    while (p < rap->no_init_area) {
 8005c52:	429d      	cmp	r5, r3
 8005c54:	d903      	bls.n	8005c5e <__init_ram_areas+0x3e>
      *p = 0;
 8005c56:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 8005c5a:	429d      	cmp	r5, r3
 8005c5c:	d8fb      	bhi.n	8005c56 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8005c5e:	4567      	cmp	r7, ip
 8005c60:	d005      	beq.n	8005c6e <__init_ram_areas+0x4e>
 8005c62:	e9d7 1304 	ldrd	r1, r3, [r7, #16]
 8005c66:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	e7e1      	b.n	8005c32 <__init_ram_areas+0x12>
#endif
}
 8005c6e:	bcf0      	pop	{r4, r5, r6, r7}
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	080061f0 	.word	0x080061f0
 8005c78:	200014dc 	.word	0x200014dc
 8005c7c:	200014dc 	.word	0x200014dc
 8005c80:	200014dc 	.word	0x200014dc
 8005c84:	08006c90 	.word	0x08006c90
	...

08005c90 <__default_exit>:
  while (true) {
 8005c90:	e7fe      	b.n	8005c90 <__default_exit>
 8005c92:	bf00      	nop
	...

08005ca0 <__late_init>:
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
	...

08005cb0 <__core_init>:
}
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
