
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002b9 	.word	0x080002b9
 8000008:	080002bb 	.word	0x080002bb
 800000c:	080002bb 	.word	0x080002bb
 8000010:	080002bb 	.word	0x080002bb
 8000014:	080002bb 	.word	0x080002bb
 8000018:	080002bb 	.word	0x080002bb
 800001c:	080002bb 	.word	0x080002bb
 8000020:	080002bb 	.word	0x080002bb
 8000024:	080002bb 	.word	0x080002bb
 8000028:	080002bb 	.word	0x080002bb
 800002c:	08003901 	.word	0x08003901
 8000030:	080002bb 	.word	0x080002bb
 8000034:	080002bb 	.word	0x080002bb
 8000038:	080002bb 	.word	0x080002bb
 800003c:	080002bb 	.word	0x080002bb
 8000040:	080002bb 	.word	0x080002bb
 8000044:	080002bb 	.word	0x080002bb
 8000048:	080002bb 	.word	0x080002bb
 800004c:	080002bb 	.word	0x080002bb
 8000050:	080002bb 	.word	0x080002bb
 8000054:	080002bb 	.word	0x080002bb
 8000058:	080002bb 	.word	0x080002bb
 800005c:	080002bb 	.word	0x080002bb
 8000060:	080002bb 	.word	0x080002bb
 8000064:	080002bb 	.word	0x080002bb
 8000068:	080002bb 	.word	0x080002bb
 800006c:	080002bb 	.word	0x080002bb
 8000070:	080002bb 	.word	0x080002bb
 8000074:	080002bb 	.word	0x080002bb
 8000078:	080002bb 	.word	0x080002bb
 800007c:	080002bb 	.word	0x080002bb
 8000080:	080002bb 	.word	0x080002bb
 8000084:	080002bb 	.word	0x080002bb
 8000088:	080002bb 	.word	0x080002bb
 800008c:	080002bb 	.word	0x080002bb
 8000090:	080002bb 	.word	0x080002bb
 8000094:	080002bb 	.word	0x080002bb
 8000098:	080002bb 	.word	0x080002bb
 800009c:	080002bb 	.word	0x080002bb
 80000a0:	080002bb 	.word	0x080002bb
 80000a4:	080002bb 	.word	0x080002bb
 80000a8:	080002bb 	.word	0x080002bb
 80000ac:	080002bb 	.word	0x080002bb
 80000b0:	08008de1 	.word	0x08008de1
 80000b4:	080002bb 	.word	0x080002bb
 80000b8:	080002bb 	.word	0x080002bb
 80000bc:	080002bb 	.word	0x080002bb
 80000c0:	080002bb 	.word	0x080002bb
 80000c4:	080002bb 	.word	0x080002bb
 80000c8:	080002bb 	.word	0x080002bb
 80000cc:	080002bb 	.word	0x080002bb
 80000d0:	080002bb 	.word	0x080002bb
 80000d4:	080002bb 	.word	0x080002bb
 80000d8:	08008c41 	.word	0x08008c41
 80000dc:	080002bb 	.word	0x080002bb
 80000e0:	080002bb 	.word	0x080002bb
 80000e4:	080002bb 	.word	0x080002bb
 80000e8:	080002bb 	.word	0x080002bb
 80000ec:	080002bb 	.word	0x080002bb
 80000f0:	080002bb 	.word	0x080002bb
 80000f4:	080002bb 	.word	0x080002bb
 80000f8:	080002bb 	.word	0x080002bb
 80000fc:	080002bb 	.word	0x080002bb
 8000100:	080002bb 	.word	0x080002bb
 8000104:	080002bb 	.word	0x080002bb
 8000108:	080002bb 	.word	0x080002bb
 800010c:	080002bb 	.word	0x080002bb
 8000110:	080002bb 	.word	0x080002bb
 8000114:	080002bb 	.word	0x080002bb
 8000118:	080002bb 	.word	0x080002bb
 800011c:	080002bb 	.word	0x080002bb
 8000120:	080002bb 	.word	0x080002bb
 8000124:	080002bb 	.word	0x080002bb
 8000128:	080002bb 	.word	0x080002bb
 800012c:	080002bb 	.word	0x080002bb
 8000130:	080002bb 	.word	0x080002bb
 8000134:	080002bb 	.word	0x080002bb
 8000138:	080002bb 	.word	0x080002bb
 800013c:	080002bb 	.word	0x080002bb
 8000140:	080002bb 	.word	0x080002bb
 8000144:	080002bb 	.word	0x080002bb
 8000148:	080002bb 	.word	0x080002bb
 800014c:	080002bb 	.word	0x080002bb
 8000150:	080002bb 	.word	0x080002bb
 8000154:	080002bb 	.word	0x080002bb
 8000158:	080002bb 	.word	0x080002bb
 800015c:	080002bb 	.word	0x080002bb
 8000160:	080002bb 	.word	0x080002bb
 8000164:	080002bb 	.word	0x080002bb
 8000168:	080002bb 	.word	0x080002bb
 800016c:	080002bb 	.word	0x080002bb
 8000170:	080002bb 	.word	0x080002bb
 8000174:	080002bb 	.word	0x080002bb
 8000178:	080002bb 	.word	0x080002bb
 800017c:	080002bb 	.word	0x080002bb
 8000180:	080002bb 	.word	0x080002bb
 8000184:	080002bb 	.word	0x080002bb
 8000188:	080002bb 	.word	0x080002bb
 800018c:	080002bb 	.word	0x080002bb
 8000190:	080002bb 	.word	0x080002bb
 8000194:	080002bb 	.word	0x080002bb
 8000198:	080002bb 	.word	0x080002bb
 800019c:	080002bb 	.word	0x080002bb
 80001a0:	080002bb 	.word	0x080002bb
 80001a4:	080002bb 	.word	0x080002bb
 80001a8:	080002bb 	.word	0x080002bb
 80001ac:	080002bb 	.word	0x080002bb
 80001b0:	080002bb 	.word	0x080002bb
 80001b4:	080002bb 	.word	0x080002bb
 80001b8:	080002bb 	.word	0x080002bb
 80001bc:	080002bb 	.word	0x080002bb
 80001c0:	080002bb 	.word	0x080002bb
 80001c4:	080002bb 	.word	0x080002bb
 80001c8:	080002bb 	.word	0x080002bb
 80001cc:	080002bb 	.word	0x080002bb
 80001d0:	080002bb 	.word	0x080002bb
 80001d4:	080002bb 	.word	0x080002bb
 80001d8:	080002bb 	.word	0x080002bb
 80001dc:	080002bb 	.word	0x080002bb

Disassembly of section .text:

080001e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001e2:	4827      	ldr	r0, [pc, #156]	; (8000280 <endfiniloop+0x4>)
                msr     MSP, r0
 80001e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001e8:	4826      	ldr	r0, [pc, #152]	; (8000284 <endfiniloop+0x8>)
                msr     PSP, r0
 80001ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80001ee:	4826      	ldr	r0, [pc, #152]	; (8000288 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80001f0:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 80001f4:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001f8:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 80001fa:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 80001fc:	f380 8814 	msr	CONTROL, r0
                isb
 8000200:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000204:	f008 fe94 	bl	8008f30 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000208:	f008 fbe2 	bl	80089d0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800020c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000210:	491e      	ldr	r1, [pc, #120]	; (800028c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000212:	4a1b      	ldr	r2, [pc, #108]	; (8000280 <endfiniloop+0x4>)

08000214 <msloop>:
msloop:
                cmp     r1, r2
 8000214:	4291      	cmp	r1, r2
                itt     lo
 8000216:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000218:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800021c:	e7fa      	bcc.n	8000214 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800021e:	491c      	ldr	r1, [pc, #112]	; (8000290 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 8000220:	4a18      	ldr	r2, [pc, #96]	; (8000284 <endfiniloop+0x8>)

08000222 <psloop>:
psloop:
                cmp     r1, r2
 8000222:	4291      	cmp	r1, r2
                itt     lo
 8000224:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000226:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800022a:	e7fa      	bcc.n	8000222 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 800022c:	4919      	ldr	r1, [pc, #100]	; (8000294 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 800022e:	4a1a      	ldr	r2, [pc, #104]	; (8000298 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 8000230:	4b1a      	ldr	r3, [pc, #104]	; (800029c <endfiniloop+0x20>)

08000232 <dloop>:
dloop:
                cmp     r2, r3
 8000232:	429a      	cmp	r2, r3
                ittt    lo
 8000234:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000236:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800023a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800023e:	e7f8      	bcc.n	8000232 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000240:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8000242:	4917      	ldr	r1, [pc, #92]	; (80002a0 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 8000244:	4a17      	ldr	r2, [pc, #92]	; (80002a4 <endfiniloop+0x28>)

08000246 <bloop>:
bloop:
                cmp     r1, r2
 8000246:	4291      	cmp	r1, r2
                itt     lo
 8000248:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800024a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800024e:	e7fa      	bcc.n	8000246 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000250:	f008 fe26 	bl	8008ea0 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000254:	f008 fe64 	bl	8008f20 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000258:	4c13      	ldr	r4, [pc, #76]	; (80002a8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 800025a:	4d14      	ldr	r5, [pc, #80]	; (80002ac <endfiniloop+0x30>)

0800025c <initloop>:
initloop:
                cmp     r4, r5
 800025c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800025e:	da03      	bge.n	8000268 <endinitloop>
                ldr     r1, [r4], #4
 8000260:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000264:	4788      	blx	r1
                b       initloop
 8000266:	e7f9      	b.n	800025c <initloop>

08000268 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000268:	f003 f96a 	bl	8003540 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 800026c:	4c10      	ldr	r4, [pc, #64]	; (80002b0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 800026e:	4d11      	ldr	r5, [pc, #68]	; (80002b4 <endfiniloop+0x38>)

08000270 <finiloop>:
finiloop:
                cmp     r4, r5
 8000270:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000272:	da03      	bge.n	800027c <endfiniloop>
                ldr     r1, [r4], #4
 8000274:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000278:	4788      	blx	r1
                b       finiloop
 800027a:	e7f9      	b.n	8000270 <finiloop>

0800027c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800027c:	f008 be48 	b.w	8008f10 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000280:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000284:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000288:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800028c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000290:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000294:	0800b5b0 	.word	0x0800b5b0
                ldr     r2, =__data_base__
 8000298:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 800029c:	200008dc 	.word	0x200008dc
                ldr     r1, =__bss_base__
 80002a0:	200008e0 	.word	0x200008e0
                ldr     r2, =__bss_end__
 80002a4:	20001b98 	.word	0x20001b98
                ldr     r4, =__init_array_base__
 80002a8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end__
 80002ac:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_base__
 80002b0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end__
 80002b4:	080001e0 	.word	0x080001e0

080002b8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002b8:	e792      	b.n	80001e0 <_crt0_entry>

080002ba <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002ba:	f000 f800 	bl	80002be <_unhandled_exception>

080002be <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002be:	e7fe      	b.n	80002be <_unhandled_exception>

080002c0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002c4:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002c8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002ca:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002d0 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002d0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002d2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002d6:	4628      	mov	r0, r5
                blx     r4
 80002d8:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 80002da:	2000      	movs	r0, #0
                bl      chThdExit
 80002dc:	f003 fb20 	bl	8003920 <chThdExit>

080002e0 <_zombies>:
_zombies:       b       _zombies
 80002e0:	e7fe      	b.n	80002e0 <_zombies>

080002e2 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 80002e2:	f003 fb75 	bl	80039d0 <chSchDoReschedule>

080002e6 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80002e6:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 80002e8:	e7fe      	b.n	80002e8 <_port_exit_from_isr+0x2>
	...

080002ec <memcmp>:
 80002ec:	2a03      	cmp	r2, #3
 80002ee:	b470      	push	{r4, r5, r6}
 80002f0:	d912      	bls.n	8000318 <memcmp+0x2c>
 80002f2:	ea40 0501 	orr.w	r5, r0, r1
 80002f6:	07ad      	lsls	r5, r5, #30
 80002f8:	4604      	mov	r4, r0
 80002fa:	460b      	mov	r3, r1
 80002fc:	d120      	bne.n	8000340 <memcmp+0x54>
 80002fe:	4619      	mov	r1, r3
 8000300:	4620      	mov	r0, r4
 8000302:	f853 5b04 	ldr.w	r5, [r3], #4
 8000306:	f854 6b04 	ldr.w	r6, [r4], #4
 800030a:	42ae      	cmp	r6, r5
 800030c:	d118      	bne.n	8000340 <memcmp+0x54>
 800030e:	3a04      	subs	r2, #4
 8000310:	2a03      	cmp	r2, #3
 8000312:	4620      	mov	r0, r4
 8000314:	4619      	mov	r1, r3
 8000316:	d8f2      	bhi.n	80002fe <memcmp+0x12>
 8000318:	1e54      	subs	r4, r2, #1
 800031a:	b172      	cbz	r2, 800033a <memcmp+0x4e>
 800031c:	7803      	ldrb	r3, [r0, #0]
 800031e:	780a      	ldrb	r2, [r1, #0]
 8000320:	429a      	cmp	r2, r3
 8000322:	bf08      	it	eq
 8000324:	1824      	addeq	r4, r4, r0
 8000326:	d006      	beq.n	8000336 <memcmp+0x4a>
 8000328:	e00c      	b.n	8000344 <memcmp+0x58>
 800032a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800032e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8000332:	4293      	cmp	r3, r2
 8000334:	d106      	bne.n	8000344 <memcmp+0x58>
 8000336:	42a0      	cmp	r0, r4
 8000338:	d1f7      	bne.n	800032a <memcmp+0x3e>
 800033a:	2000      	movs	r0, #0
 800033c:	bc70      	pop	{r4, r5, r6}
 800033e:	4770      	bx	lr
 8000340:	1e54      	subs	r4, r2, #1
 8000342:	e7eb      	b.n	800031c <memcmp+0x30>
 8000344:	1a98      	subs	r0, r3, r2
 8000346:	bc70      	pop	{r4, r5, r6}
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop

0800034c <memcpy>:
 800034c:	4684      	mov	ip, r0
 800034e:	ea41 0300 	orr.w	r3, r1, r0
 8000352:	f013 0303 	ands.w	r3, r3, #3
 8000356:	d16d      	bne.n	8000434 <memcpy+0xe8>
 8000358:	3a40      	subs	r2, #64	; 0x40
 800035a:	d341      	bcc.n	80003e0 <memcpy+0x94>
 800035c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000360:	f840 3b04 	str.w	r3, [r0], #4
 8000364:	f851 3b04 	ldr.w	r3, [r1], #4
 8000368:	f840 3b04 	str.w	r3, [r0], #4
 800036c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000370:	f840 3b04 	str.w	r3, [r0], #4
 8000374:	f851 3b04 	ldr.w	r3, [r1], #4
 8000378:	f840 3b04 	str.w	r3, [r0], #4
 800037c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000380:	f840 3b04 	str.w	r3, [r0], #4
 8000384:	f851 3b04 	ldr.w	r3, [r1], #4
 8000388:	f840 3b04 	str.w	r3, [r0], #4
 800038c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000390:	f840 3b04 	str.w	r3, [r0], #4
 8000394:	f851 3b04 	ldr.w	r3, [r1], #4
 8000398:	f840 3b04 	str.w	r3, [r0], #4
 800039c:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a0:	f840 3b04 	str.w	r3, [r0], #4
 80003a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a8:	f840 3b04 	str.w	r3, [r0], #4
 80003ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b0:	f840 3b04 	str.w	r3, [r0], #4
 80003b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b8:	f840 3b04 	str.w	r3, [r0], #4
 80003bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c0:	f840 3b04 	str.w	r3, [r0], #4
 80003c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c8:	f840 3b04 	str.w	r3, [r0], #4
 80003cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003d0:	f840 3b04 	str.w	r3, [r0], #4
 80003d4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003d8:	f840 3b04 	str.w	r3, [r0], #4
 80003dc:	3a40      	subs	r2, #64	; 0x40
 80003de:	d2bd      	bcs.n	800035c <memcpy+0x10>
 80003e0:	3230      	adds	r2, #48	; 0x30
 80003e2:	d311      	bcc.n	8000408 <memcpy+0xbc>
 80003e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003e8:	f840 3b04 	str.w	r3, [r0], #4
 80003ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80003f0:	f840 3b04 	str.w	r3, [r0], #4
 80003f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003f8:	f840 3b04 	str.w	r3, [r0], #4
 80003fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000400:	f840 3b04 	str.w	r3, [r0], #4
 8000404:	3a10      	subs	r2, #16
 8000406:	d2ed      	bcs.n	80003e4 <memcpy+0x98>
 8000408:	320c      	adds	r2, #12
 800040a:	d305      	bcc.n	8000418 <memcpy+0xcc>
 800040c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000410:	f840 3b04 	str.w	r3, [r0], #4
 8000414:	3a04      	subs	r2, #4
 8000416:	d2f9      	bcs.n	800040c <memcpy+0xc0>
 8000418:	3204      	adds	r2, #4
 800041a:	d008      	beq.n	800042e <memcpy+0xe2>
 800041c:	07d2      	lsls	r2, r2, #31
 800041e:	bf1c      	itt	ne
 8000420:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000424:	f800 3b01 	strbne.w	r3, [r0], #1
 8000428:	d301      	bcc.n	800042e <memcpy+0xe2>
 800042a:	880b      	ldrh	r3, [r1, #0]
 800042c:	8003      	strh	r3, [r0, #0]
 800042e:	4660      	mov	r0, ip
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	2a08      	cmp	r2, #8
 8000436:	d313      	bcc.n	8000460 <memcpy+0x114>
 8000438:	078b      	lsls	r3, r1, #30
 800043a:	d08d      	beq.n	8000358 <memcpy+0xc>
 800043c:	f010 0303 	ands.w	r3, r0, #3
 8000440:	d08a      	beq.n	8000358 <memcpy+0xc>
 8000442:	f1c3 0304 	rsb	r3, r3, #4
 8000446:	1ad2      	subs	r2, r2, r3
 8000448:	07db      	lsls	r3, r3, #31
 800044a:	bf1c      	itt	ne
 800044c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000450:	f800 3b01 	strbne.w	r3, [r0], #1
 8000454:	d380      	bcc.n	8000358 <memcpy+0xc>
 8000456:	f831 3b02 	ldrh.w	r3, [r1], #2
 800045a:	f820 3b02 	strh.w	r3, [r0], #2
 800045e:	e77b      	b.n	8000358 <memcpy+0xc>
 8000460:	3a04      	subs	r2, #4
 8000462:	d3d9      	bcc.n	8000418 <memcpy+0xcc>
 8000464:	3a01      	subs	r2, #1
 8000466:	f811 3b01 	ldrb.w	r3, [r1], #1
 800046a:	f800 3b01 	strb.w	r3, [r0], #1
 800046e:	d2f9      	bcs.n	8000464 <memcpy+0x118>
 8000470:	780b      	ldrb	r3, [r1, #0]
 8000472:	7003      	strb	r3, [r0, #0]
 8000474:	784b      	ldrb	r3, [r1, #1]
 8000476:	7043      	strb	r3, [r0, #1]
 8000478:	788b      	ldrb	r3, [r1, #2]
 800047a:	7083      	strb	r3, [r0, #2]
 800047c:	4660      	mov	r0, ip
 800047e:	4770      	bx	lr

08000480 <memset>:
 8000480:	b4f0      	push	{r4, r5, r6, r7}
 8000482:	0786      	lsls	r6, r0, #30
 8000484:	d046      	beq.n	8000514 <memset+0x94>
 8000486:	1e54      	subs	r4, r2, #1
 8000488:	2a00      	cmp	r2, #0
 800048a:	d03c      	beq.n	8000506 <memset+0x86>
 800048c:	b2ca      	uxtb	r2, r1
 800048e:	4603      	mov	r3, r0
 8000490:	e002      	b.n	8000498 <memset+0x18>
 8000492:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8000496:	d336      	bcc.n	8000506 <memset+0x86>
 8000498:	f803 2b01 	strb.w	r2, [r3], #1
 800049c:	079d      	lsls	r5, r3, #30
 800049e:	d1f8      	bne.n	8000492 <memset+0x12>
 80004a0:	2c03      	cmp	r4, #3
 80004a2:	d929      	bls.n	80004f8 <memset+0x78>
 80004a4:	b2cd      	uxtb	r5, r1
 80004a6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80004aa:	2c0f      	cmp	r4, #15
 80004ac:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80004b0:	d933      	bls.n	800051a <memset+0x9a>
 80004b2:	f1a4 0610 	sub.w	r6, r4, #16
 80004b6:	0936      	lsrs	r6, r6, #4
 80004b8:	f103 0720 	add.w	r7, r3, #32
 80004bc:	eb07 1706 	add.w	r7, r7, r6, lsl #4
 80004c0:	f103 0210 	add.w	r2, r3, #16
 80004c4:	e942 5504 	strd	r5, r5, [r2, #-16]
 80004c8:	e942 5502 	strd	r5, r5, [r2, #-8]
 80004cc:	3210      	adds	r2, #16
 80004ce:	42ba      	cmp	r2, r7
 80004d0:	d1f8      	bne.n	80004c4 <memset+0x44>
 80004d2:	1c72      	adds	r2, r6, #1
 80004d4:	f014 0f0c 	tst.w	r4, #12
 80004d8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80004dc:	f004 060f 	and.w	r6, r4, #15
 80004e0:	d013      	beq.n	800050a <memset+0x8a>
 80004e2:	1f33      	subs	r3, r6, #4
 80004e4:	f023 0303 	bic.w	r3, r3, #3
 80004e8:	3304      	adds	r3, #4
 80004ea:	4413      	add	r3, r2
 80004ec:	f842 5b04 	str.w	r5, [r2], #4
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d1fb      	bne.n	80004ec <memset+0x6c>
 80004f4:	f006 0403 	and.w	r4, r6, #3
 80004f8:	b12c      	cbz	r4, 8000506 <memset+0x86>
 80004fa:	b2c9      	uxtb	r1, r1
 80004fc:	441c      	add	r4, r3
 80004fe:	f803 1b01 	strb.w	r1, [r3], #1
 8000502:	429c      	cmp	r4, r3
 8000504:	d1fb      	bne.n	80004fe <memset+0x7e>
 8000506:	bcf0      	pop	{r4, r5, r6, r7}
 8000508:	4770      	bx	lr
 800050a:	4634      	mov	r4, r6
 800050c:	4613      	mov	r3, r2
 800050e:	2c00      	cmp	r4, #0
 8000510:	d1f3      	bne.n	80004fa <memset+0x7a>
 8000512:	e7f8      	b.n	8000506 <memset+0x86>
 8000514:	4614      	mov	r4, r2
 8000516:	4603      	mov	r3, r0
 8000518:	e7c2      	b.n	80004a0 <memset+0x20>
 800051a:	461a      	mov	r2, r3
 800051c:	4626      	mov	r6, r4
 800051e:	e7e0      	b.n	80004e2 <memset+0x62>

08000520 <strncmp>:
 8000520:	2a00      	cmp	r2, #0
 8000522:	d046      	beq.n	80005b2 <strncmp+0x92>
 8000524:	ea40 0301 	orr.w	r3, r0, r1
 8000528:	f013 0303 	ands.w	r3, r3, #3
 800052c:	b4f0      	push	{r4, r5, r6, r7}
 800052e:	d125      	bne.n	800057c <strncmp+0x5c>
 8000530:	2a03      	cmp	r2, #3
 8000532:	d923      	bls.n	800057c <strncmp+0x5c>
 8000534:	6804      	ldr	r4, [r0, #0]
 8000536:	680d      	ldr	r5, [r1, #0]
 8000538:	42ac      	cmp	r4, r5
 800053a:	d13c      	bne.n	80005b6 <strncmp+0x96>
 800053c:	3a04      	subs	r2, #4
 800053e:	d035      	beq.n	80005ac <strncmp+0x8c>
 8000540:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 8000544:	ea25 0404 	bic.w	r4, r5, r4
 8000548:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 800054c:	d12e      	bne.n	80005ac <strncmp+0x8c>
 800054e:	1d07      	adds	r7, r0, #4
 8000550:	1d0d      	adds	r5, r1, #4
 8000552:	e00d      	b.n	8000570 <strncmp+0x50>
 8000554:	f857 3b04 	ldr.w	r3, [r7], #4
 8000558:	680e      	ldr	r6, [r1, #0]
 800055a:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 800055e:	42b3      	cmp	r3, r6
 8000560:	ea24 0403 	bic.w	r4, r4, r3
 8000564:	d127      	bne.n	80005b6 <strncmp+0x96>
 8000566:	3a04      	subs	r2, #4
 8000568:	d020      	beq.n	80005ac <strncmp+0x8c>
 800056a:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 800056e:	d11d      	bne.n	80005ac <strncmp+0x8c>
 8000570:	2a03      	cmp	r2, #3
 8000572:	4629      	mov	r1, r5
 8000574:	4638      	mov	r0, r7
 8000576:	f105 0504 	add.w	r5, r5, #4
 800057a:	d8eb      	bhi.n	8000554 <strncmp+0x34>
 800057c:	7803      	ldrb	r3, [r0, #0]
 800057e:	780d      	ldrb	r5, [r1, #0]
 8000580:	429d      	cmp	r5, r3
 8000582:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 8000586:	d10e      	bne.n	80005a6 <strncmp+0x86>
 8000588:	b186      	cbz	r6, 80005ac <strncmp+0x8c>
 800058a:	b17b      	cbz	r3, 80005ac <strncmp+0x8c>
 800058c:	4604      	mov	r4, r0
 800058e:	e002      	b.n	8000596 <strncmp+0x76>
 8000590:	1882      	adds	r2, r0, r2
 8000592:	d00b      	beq.n	80005ac <strncmp+0x8c>
 8000594:	b153      	cbz	r3, 80005ac <strncmp+0x8c>
 8000596:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800059a:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800059e:	42ab      	cmp	r3, r5
 80005a0:	eba6 0204 	sub.w	r2, r6, r4
 80005a4:	d0f4      	beq.n	8000590 <strncmp+0x70>
 80005a6:	1b58      	subs	r0, r3, r5
 80005a8:	bcf0      	pop	{r4, r5, r6, r7}
 80005aa:	4770      	bx	lr
 80005ac:	2000      	movs	r0, #0
 80005ae:	bcf0      	pop	{r4, r5, r6, r7}
 80005b0:	4770      	bx	lr
 80005b2:	4610      	mov	r0, r2
 80005b4:	4770      	bx	lr
 80005b6:	7803      	ldrb	r3, [r0, #0]
 80005b8:	780d      	ldrb	r5, [r1, #0]
 80005ba:	429d      	cmp	r5, r3
 80005bc:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 80005c0:	d0e3      	beq.n	800058a <strncmp+0x6a>
 80005c2:	e7f0      	b.n	80005a6 <strncmp+0x86>

080005c4 <strncpy>:
 80005c4:	b470      	push	{r4, r5, r6}
 80005c6:	ea40 0401 	orr.w	r4, r0, r1
 80005ca:	07a3      	lsls	r3, r4, #30
 80005cc:	d127      	bne.n	800061e <strncpy+0x5a>
 80005ce:	2a03      	cmp	r2, #3
 80005d0:	d925      	bls.n	800061e <strncpy+0x5a>
 80005d2:	460b      	mov	r3, r1
 80005d4:	4606      	mov	r6, r0
 80005d6:	4619      	mov	r1, r3
 80005d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80005dc:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
 80005e0:	ea24 0405 	bic.w	r4, r4, r5
 80005e4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 80005e8:	d106      	bne.n	80005f8 <strncpy+0x34>
 80005ea:	3a04      	subs	r2, #4
 80005ec:	2a03      	cmp	r2, #3
 80005ee:	f846 5b04 	str.w	r5, [r6], #4
 80005f2:	4619      	mov	r1, r3
 80005f4:	d8ef      	bhi.n	80005d6 <strncpy+0x12>
 80005f6:	b182      	cbz	r2, 800061a <strncpy+0x56>
 80005f8:	4633      	mov	r3, r6
 80005fa:	780c      	ldrb	r4, [r1, #0]
 80005fc:	f803 4b01 	strb.w	r4, [r3], #1
 8000600:	1e55      	subs	r5, r2, #1
 8000602:	b174      	cbz	r4, 8000622 <strncpy+0x5e>
 8000604:	4432      	add	r2, r6
 8000606:	442e      	add	r6, r5
 8000608:	e005      	b.n	8000616 <strncpy+0x52>
 800060a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800060e:	1af5      	subs	r5, r6, r3
 8000610:	f803 4b01 	strb.w	r4, [r3], #1
 8000614:	b12c      	cbz	r4, 8000622 <strncpy+0x5e>
 8000616:	429a      	cmp	r2, r3
 8000618:	d1f7      	bne.n	800060a <strncpy+0x46>
 800061a:	bc70      	pop	{r4, r5, r6}
 800061c:	4770      	bx	lr
 800061e:	4606      	mov	r6, r0
 8000620:	e7e9      	b.n	80005f6 <strncpy+0x32>
 8000622:	2d00      	cmp	r5, #0
 8000624:	d0f9      	beq.n	800061a <strncpy+0x56>
 8000626:	441d      	add	r5, r3
 8000628:	2200      	movs	r2, #0
 800062a:	f803 2b01 	strb.w	r2, [r3], #1
 800062e:	42ab      	cmp	r3, r5
 8000630:	d1fb      	bne.n	800062a <strncpy+0x66>
 8000632:	bc70      	pop	{r4, r5, r6}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
	...

08000640 <chMtxTryLock.constprop.0>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000640:	2320      	movs	r3, #32
 8000642:	f383 8811 	msr	BASEPRI, r3
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->owner != NULL) {
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <chMtxTryLock.constprop.0+0x2c>)
 8000648:	689a      	ldr	r2, [r3, #8]
 800064a:	b122      	cbz	r2, 8000656 <chMtxTryLock.constprop.0+0x16>
    if (mp->owner == currp) {
      mp->cnt++;
      return true;
    }
#endif
    return false;
 800064c:	2000      	movs	r0, #0
 800064e:	2300      	movs	r3, #0
 8000650:	f383 8811 	msr	BASEPRI, r3
}
 8000654:	4770      	bx	lr

  chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");

  mp->cnt++;
#endif
  mp->owner = currp;
 8000656:	4a06      	ldr	r2, [pc, #24]	; (8000670 <chMtxTryLock.constprop.0+0x30>)
 8000658:	6992      	ldr	r2, [r2, #24]
 800065a:	609a      	str	r2, [r3, #8]
  mp->next = currp->mtxlist;
 800065c:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800065e:	60d9      	str	r1, [r3, #12]
  currp->mtxlist = mp;
 8000660:	6393      	str	r3, [r2, #56]	; 0x38
 8000662:	2001      	movs	r0, #1
 8000664:	2300      	movs	r3, #0
 8000666:	f383 8811 	msr	BASEPRI, r3
}
 800066a:	4770      	bx	lr
 800066c:	2000082c 	.word	0x2000082c
 8000670:	200009b0 	.word	0x200009b0
	...

08000680 <chEvtGetAndClearEvents.constprop.0>:
 8000680:	2320      	movs	r3, #32
 8000682:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
eventmask_t chEvtGetAndClearEventsI(eventmask_t events) {
  eventmask_t m;

  m = currp->epending & events;
 8000686:	4b04      	ldr	r3, [pc, #16]	; (8000698 <chEvtGetAndClearEvents.constprop.0+0x18>)
 8000688:	699a      	ldr	r2, [r3, #24]
  currp->epending &= ~events;
 800068a:	2300      	movs	r3, #0
  m = currp->epending & events;
 800068c:	6b50      	ldr	r0, [r2, #52]	; 0x34
  currp->epending &= ~events;
 800068e:	6353      	str	r3, [r2, #52]	; 0x34
 8000690:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  m = chEvtGetAndClearEventsI(events);
  chSysUnlock();

  return m;
}
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	200009b0 	.word	0x200009b0
 800069c:	00000000 	.word	0x00000000

080006a0 <_test_assert_time_window.constprop.0>:
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80006a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
                (systime_t)((systime_t)end - (systime_t)start));
 80006a4:	1a09      	subs	r1, r1, r0
 80006a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 80006a8:	1a18      	subs	r0, r3, r0
  return true;
}

bool _test_assert(bool condition, const char *msg) {

  if (!condition)
 80006aa:	4288      	cmp	r0, r1
 80006ac:	d201      	bcs.n	80006b2 <_test_assert_time_window.constprop.0+0x12>
    return _test_fail(msg);
  return false;
 80006ae:	2000      	movs	r0, #0
                              systime_t end,
                              const char *msg) {

  return _test_assert(osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end),
                      msg);
}
 80006b0:	4770      	bx	lr
  test_failure_message = msg;
 80006b2:	4904      	ldr	r1, [pc, #16]	; (80006c4 <_test_assert_time_window.constprop.0+0x24>)
  test_local_fail      = true;
 80006b4:	4a04      	ldr	r2, [pc, #16]	; (80006c8 <_test_assert_time_window.constprop.0+0x28>)
  test_global_fail     = true;
 80006b6:	4b05      	ldr	r3, [pc, #20]	; (80006cc <_test_assert_time_window.constprop.0+0x2c>)
  test_failure_message = msg;
 80006b8:	4805      	ldr	r0, [pc, #20]	; (80006d0 <_test_assert_time_window.constprop.0+0x30>)
 80006ba:	6008      	str	r0, [r1, #0]
  test_local_fail      = true;
 80006bc:	2001      	movs	r0, #1
 80006be:	7010      	strb	r0, [r2, #0]
  test_global_fail     = true;
 80006c0:	7018      	strb	r0, [r3, #0]
 80006c2:	4770      	bx	lr
 80006c4:	200013f4 	.word	0x200013f4
 80006c8:	20001498 	.word	0x20001498
 80006cc:	200013f8 	.word	0x200013f8
 80006d0:	08008f34 	.word	0x08008f34
	...

080006e0 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 80006e0:	b430      	push	{r4, r5}
 80006e2:	2320      	movs	r3, #32
 80006e4:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80006e8:	4c0b      	ldr	r4, [pc, #44]	; (8000718 <chCoreAllocFromTop+0x38>)
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80006ea:	e9d4 3500 	ldrd	r3, r5, [r4]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80006ee:	4249      	negs	r1, r1
 80006f0:	1a28      	subs	r0, r5, r0
 80006f2:	4008      	ands	r0, r1
  prev = p - offset;
 80006f4:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d307      	bcc.n	800070a <chCoreAllocFromTop+0x2a>
 80006fa:	4295      	cmp	r5, r2
 80006fc:	d305      	bcc.n	800070a <chCoreAllocFromTop+0x2a>
  ch_memcore.topmem = prev;
 80006fe:	6062      	str	r2, [r4, #4]
 8000700:	2300      	movs	r3, #0
 8000702:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 8000706:	bc30      	pop	{r4, r5}
 8000708:	4770      	bx	lr
    return NULL;
 800070a:	2000      	movs	r0, #0
 800070c:	2300      	movs	r3, #0
 800070e:	f383 8811 	msr	BASEPRI, r3
}
 8000712:	bc30      	pop	{r4, r5}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	20000b48 	.word	0x20000b48
 800071c:	00000000 	.word	0x00000000

08000720 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000720:	4a02      	ldr	r2, [pc, #8]	; (800072c <notify2+0xc>)
 8000722:	68d3      	ldr	r3, [r2, #12]
 8000724:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000728:	60d3      	str	r3, [r2, #12]
}
 800072a:	4770      	bx	lr
 800072c:	40004400 	.word	0x40004400

08000730 <oslib_test_008_001_setup>:
 * @param[in] size      heap size
 *
 * @init
 */
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8000730:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <oslib_test_008_001_setup+0x30>)
  /*lint -save -e9033 [10.8] Required cast operations.*/
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
  /*lint restore*/

  /* Initializing the heap header.*/
  heapp->provider = NULL;
 8000732:	4a0c      	ldr	r2, [pc, #48]	; (8000764 <oslib_test_008_001_setup+0x34>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8000734:	1dd9      	adds	r1, r3, #7
 8000736:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 800073a:	1acb      	subs	r3, r1, r3
  H_NEXT(&heapp->header) = hp;
  H_PAGES(&heapp->header) = 0;
  H_NEXT(hp) = NULL;
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 800073c:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 * - [8.1.10] Testing final conditions. The heap geometry must be the
 *   same than the one registered at beginning.
 * .
 */

static void oslib_test_008_001_setup(void) {
 8000740:	b410      	push	{r4}
  heapp->provider = NULL;
 8000742:	2000      	movs	r0, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8000744:	f102 040c 	add.w	r4, r2, #12
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8000748:	08db      	lsrs	r3, r3, #3
 800074a:	604b      	str	r3, [r1, #4]
  H_NEXT(&heapp->header) = hp;
 800074c:	6051      	str	r1, [r2, #4]
  H_NEXT(hp) = NULL;
 800074e:	6008      	str	r0, [r1, #0]
  tqp->prev = (thread_t *)tqp;
 8000750:	e9c2 4403 	strd	r4, r4, [r2, #12]
  heapp->provider = NULL;
 8000754:	6010      	str	r0, [r2, #0]
  chHeapObjectInit(&test_heap, test_heap_buffer, sizeof(test_heap_buffer));
}
 8000756:	bc10      	pop	{r4}
  H_PAGES(&heapp->header) = 0;
 8000758:	6090      	str	r0, [r2, #8]
  mp->owner = NULL;
 800075a:	6150      	str	r0, [r2, #20]
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	20001418 	.word	0x20001418
 8000764:	200013fc 	.word	0x200013fc
	...

08000770 <oslib_test_007_003_setup>:
  chDbgCheck((mp != NULL) &&
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <oslib_test_007_003_setup+0x18>)
 8000772:	2200      	movs	r2, #0
  mp->object_size = size;
 8000774:	2104      	movs	r1, #4
 8000776:	e9c3 3300 	strd	r3, r3, [r3]
  mp->align = align;
 800077a:	e9c3 1104 	strd	r1, r1, [r3, #16]
  mp->next = NULL;
 800077e:	60da      	str	r2, [r3, #12]
  mp->provider = provider;
 8000780:	619a      	str	r2, [r3, #24]
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->queue);
  sp->cnt = n;
 8000782:	609a      	str	r2, [r3, #8]
 * .
 */

static void oslib_test_007_003_setup(void) {
  chGuardedPoolObjectInit(&gmp1, sizeof (uint32_t));
}
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	20000810 	.word	0x20000810
 800078c:	00000000 	.word	0x00000000

08000790 <oslib_test_007_002_setup>:
 8000790:	f7ff bfee 	b.w	8000770 <oslib_test_007_003_setup>
	...

080007a0 <null_provider>:
}
 80007a0:	2000      	movs	r0, #0
 80007a2:	4770      	bx	lr
	...

080007b0 <oslib_test_007_001_setup>:
  mp->next = NULL;
 80007b0:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <oslib_test_007_001_setup+0x10>)
 80007b2:	2100      	movs	r1, #0
  mp->object_size = size;
 80007b4:	2204      	movs	r2, #4
  mp->align = align;
 80007b6:	e9c3 2201 	strd	r2, r2, [r3, #4]
  mp->next = NULL;
 80007ba:	6019      	str	r1, [r3, #0]
  mp->provider = provider;
 80007bc:	60d9      	str	r1, [r3, #12]
}
 80007be:	4770      	bx	lr
 80007c0:	20000874 	.word	0x20000874
	...

080007d0 <__ch_delegate_fn0>:
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn0(va_list *argsp) {
  delegate_fn0_t fn0 = (delegate_fn0_t)va_arg(*argsp, delegate_fn0_t);
 80007d0:	6803      	ldr	r3, [r0, #0]
 80007d2:	1d1a      	adds	r2, r3, #4
 80007d4:	6002      	str	r2, [r0, #0]
  return fn0();
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4718      	bx	r3
 80007da:	bf00      	nop
 80007dc:	0000      	movs	r0, r0
	...

080007e0 <__ch_delegate_fn1>:
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn1(va_list *argsp) {
  delegate_fn1_t fn1 = (delegate_fn1_t)va_arg(*argsp, delegate_fn1_t);
 80007e0:	6801      	ldr	r1, [r0, #0]
msg_t __ch_delegate_fn1(va_list *argsp) {
 80007e2:	4603      	mov	r3, r0
  delegate_fn1_t fn1 = (delegate_fn1_t)va_arg(*argsp, delegate_fn1_t);
 80007e4:	460a      	mov	r2, r1
 80007e6:	1d08      	adds	r0, r1, #4
msg_t __ch_delegate_fn1(va_list *argsp) {
 80007e8:	b410      	push	{r4}
  delegate_fn1_t fn1 = (delegate_fn1_t)va_arg(*argsp, delegate_fn1_t);
 80007ea:	6018      	str	r0, [r3, #0]
 80007ec:	f852 4b08 	ldr.w	r4, [r2], #8
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
  return fn1(p1);
 80007f0:	6848      	ldr	r0, [r1, #4]
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
 80007f2:	601a      	str	r2, [r3, #0]
  return fn1(p1);
 80007f4:	4623      	mov	r3, r4
}
 80007f6:	bc10      	pop	{r4}
  return fn1(p1);
 80007f8:	4718      	bx	r3
 80007fa:	bf00      	nop
 80007fc:	0000      	movs	r0, r0
	...

08000800 <__ch_delegate_fn2>:
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn2(va_list *argsp) {
  delegate_fn2_t fn2 = (delegate_fn2_t)va_arg(*argsp, delegate_fn2_t);
 8000800:	6802      	ldr	r2, [r0, #0]
msg_t __ch_delegate_fn2(va_list *argsp) {
 8000802:	b430      	push	{r4, r5}
 8000804:	4603      	mov	r3, r0
  delegate_fn2_t fn2 = (delegate_fn2_t)va_arg(*argsp, delegate_fn2_t);
 8000806:	1d11      	adds	r1, r2, #4
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
 8000808:	6850      	ldr	r0, [r2, #4]
  delegate_fn2_t fn2 = (delegate_fn2_t)va_arg(*argsp, delegate_fn2_t);
 800080a:	6019      	str	r1, [r3, #0]
 800080c:	6814      	ldr	r4, [r2, #0]
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
  return fn2(p1, p2);
 800080e:	6891      	ldr	r1, [r2, #8]
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 8000810:	f102 050c 	add.w	r5, r2, #12
 8000814:	601d      	str	r5, [r3, #0]
  return fn2(p1, p2);
 8000816:	4623      	mov	r3, r4
}
 8000818:	bc30      	pop	{r4, r5}
  return fn2(p1, p2);
 800081a:	4718      	bx	r3
 800081c:	0000      	movs	r0, r0
	...

08000820 <__ch_delegate_fn3>:
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn3(va_list *argsp) {
  delegate_fn3_t fn3 = (delegate_fn3_t)va_arg(*argsp, delegate_fn3_t);
 8000820:	6803      	ldr	r3, [r0, #0]
msg_t __ch_delegate_fn3(va_list *argsp) {
 8000822:	b470      	push	{r4, r5, r6}
 8000824:	4604      	mov	r4, r0
  delegate_fn3_t fn3 = (delegate_fn3_t)va_arg(*argsp, delegate_fn3_t);
 8000826:	1d1a      	adds	r2, r3, #4
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 8000828:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
  delegate_fn3_t fn3 = (delegate_fn3_t)va_arg(*argsp, delegate_fn3_t);
 800082c:	6022      	str	r2, [r4, #0]
 800082e:	681d      	ldr	r5, [r3, #0]
  msg_t p3 = (msg_t)va_arg(*argsp, msg_t);
  return fn3(p1, p2, p3);
 8000830:	68da      	ldr	r2, [r3, #12]
  msg_t p3 = (msg_t)va_arg(*argsp, msg_t);
 8000832:	f103 0610 	add.w	r6, r3, #16
 8000836:	6026      	str	r6, [r4, #0]
  return fn3(p1, p2, p3);
 8000838:	462b      	mov	r3, r5
}
 800083a:	bc70      	pop	{r4, r5, r6}
  return fn3(p1, p2, p3);
 800083c:	4718      	bx	r3
 800083e:	bf00      	nop

08000840 <__ch_delegate_fn4>:
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn4(va_list *argsp) {
  delegate_fn4_t fn4 = (delegate_fn4_t)va_arg(*argsp, delegate_fn4_t);
 8000840:	6803      	ldr	r3, [r0, #0]
msg_t __ch_delegate_fn4(va_list *argsp) {
 8000842:	b470      	push	{r4, r5, r6}
 8000844:	4604      	mov	r4, r0
  delegate_fn4_t fn4 = (delegate_fn4_t)va_arg(*argsp, delegate_fn4_t);
 8000846:	1d1d      	adds	r5, r3, #4
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 8000848:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
  msg_t p3 = (msg_t)va_arg(*argsp, msg_t);
 800084c:	68da      	ldr	r2, [r3, #12]
  delegate_fn4_t fn4 = (delegate_fn4_t)va_arg(*argsp, delegate_fn4_t);
 800084e:	6025      	str	r5, [r4, #0]
 8000850:	681d      	ldr	r5, [r3, #0]
  msg_t p4 = (msg_t)va_arg(*argsp, msg_t);
 8000852:	f103 0614 	add.w	r6, r3, #20
  return fn4(p1, p2, p3, p4);
 8000856:	46ac      	mov	ip, r5
 8000858:	691b      	ldr	r3, [r3, #16]
  msg_t p4 = (msg_t)va_arg(*argsp, msg_t);
 800085a:	6026      	str	r6, [r4, #0]
}
 800085c:	bc70      	pop	{r4, r5, r6}
  return fn4(p1, p2, p3, p4);
 800085e:	4760      	bx	ip

08000860 <oslib_test_003_002_setup>:
 * - [3.2.1] Reading while pipe is empty.
 * - [3.2.2] Writing a string larger than pipe buffer.
 * .
 */

static void oslib_test_003_002_setup(void) {
 8000860:	b430      	push	{r4, r5}
 */
void chPipeObjectInit(pipe_t *pp, uint8_t *buf, size_t n) {

  chDbgCheck((pp != NULL) && (buf != NULL) && (n > (size_t)0));

  pp->buffer = buf;
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <oslib_test_003_002_setup+0x40>)
 8000864:	4a0f      	ldr	r2, [pc, #60]	; (80008a4 <oslib_test_003_002_setup+0x44>)
 8000866:	601a      	str	r2, [r3, #0]
  pp->rdptr  = buf;
  pp->wrptr  = buf;
  pp->top    = &buf[n];
 8000868:	f102 0508 	add.w	r5, r2, #8
  tqp->next = (thread_t *)tqp;
 800086c:	f103 0420 	add.w	r4, r3, #32
  pp->wrptr  = buf;
 8000870:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8000874:	f103 0030 	add.w	r0, r3, #48	; 0x30
  pp->cnt    = (size_t)0;
 8000878:	2200      	movs	r2, #0
 800087a:	f103 0140 	add.w	r1, r3, #64	; 0x40
  tqp->prev = (thread_t *)tqp;
 800087e:	e9c3 4408 	strd	r4, r4, [r3, #32]
  pp->top    = &buf[n];
 8000882:	605d      	str	r5, [r3, #4]
 8000884:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
  chPipeObjectInit(&pipe1, buffer, PIPE_SIZE / 2);
}
 8000888:	bc30      	pop	{r4, r5}
 800088a:	e9c3 1110 	strd	r1, r1, [r3, #64]	; 0x40
  pp->reset  = false;
  pp->wtr    = NULL;
  pp->rtr    = NULL;
 800088e:	e9c3 2206 	strd	r2, r2, [r3, #24]
  pp->cnt    = (size_t)0;
 8000892:	611a      	str	r2, [r3, #16]
  pp->reset  = false;
 8000894:	751a      	strb	r2, [r3, #20]
 8000896:	629a      	str	r2, [r3, #40]	; 0x28
 8000898:	639a      	str	r2, [r3, #56]	; 0x38
 800089a:	649a      	str	r2, [r3, #72]	; 0x48
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	2000088c 	.word	0x2000088c
 80008a4:	2000095c 	.word	0x2000095c
	...

080008b0 <oslib_test_003_001_setup>:
static void oslib_test_003_001_setup(void) {
 80008b0:	b430      	push	{r4, r5}
  pp->buffer = buf;
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <oslib_test_003_001_setup+0x40>)
 80008b4:	4a0f      	ldr	r2, [pc, #60]	; (80008f4 <oslib_test_003_001_setup+0x44>)
 80008b6:	601a      	str	r2, [r3, #0]
  pp->top    = &buf[n];
 80008b8:	f102 0510 	add.w	r5, r2, #16
  tqp->next = (thread_t *)tqp;
 80008bc:	f103 0420 	add.w	r4, r3, #32
  pp->wrptr  = buf;
 80008c0:	e9c3 2202 	strd	r2, r2, [r3, #8]
 80008c4:	f103 0030 	add.w	r0, r3, #48	; 0x30
  pp->cnt    = (size_t)0;
 80008c8:	2200      	movs	r2, #0
 80008ca:	f103 0140 	add.w	r1, r3, #64	; 0x40
  tqp->prev = (thread_t *)tqp;
 80008ce:	e9c3 4408 	strd	r4, r4, [r3, #32]
  pp->top    = &buf[n];
 80008d2:	605d      	str	r5, [r3, #4]
 80008d4:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
}
 80008d8:	bc30      	pop	{r4, r5}
 80008da:	e9c3 1110 	strd	r1, r1, [r3, #64]	; 0x40
  pp->rtr    = NULL;
 80008de:	e9c3 2206 	strd	r2, r2, [r3, #24]
  pp->cnt    = (size_t)0;
 80008e2:	611a      	str	r2, [r3, #16]
  pp->reset  = false;
 80008e4:	751a      	strb	r2, [r3, #20]
 80008e6:	629a      	str	r2, [r3, #40]	; 0x28
 80008e8:	639a      	str	r2, [r3, #56]	; 0x38
 80008ea:	649a      	str	r2, [r3, #72]	; 0x48
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	2000088c 	.word	0x2000088c
 80008f4:	2000095c 	.word	0x2000095c
	...

08000900 <oslib_test_002_003_setup>:
 *   active state.
 * - [2.3.4] Testing chMBFetchTimeout() and chMBFetchI() timeout.
 * .
 */

static void oslib_test_002_003_setup(void) {
 8000900:	b430      	push	{r4, r5}
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, size_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (size_t)0));

  mbp->buffer = buf;
 8000902:	4b0a      	ldr	r3, [pc, #40]	; (800092c <oslib_test_002_003_setup+0x2c>)
 8000904:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <oslib_test_002_003_setup+0x30>)
 8000906:	601a      	str	r2, [r3, #0]
  mbp->rdptr  = buf;
  mbp->wrptr  = buf;
  mbp->top    = &buf[n];
 8000908:	f102 0510 	add.w	r5, r2, #16
  tqp->next = (thread_t *)tqp;
 800090c:	f103 0418 	add.w	r4, r3, #24
  mbp->cnt    = (size_t)0;
 8000910:	2100      	movs	r1, #0
 8000912:	f103 0020 	add.w	r0, r3, #32
  tqp->prev = (thread_t *)tqp;
 8000916:	e9c3 4406 	strd	r4, r4, [r3, #24]
  mbp->top    = &buf[n];
 800091a:	605d      	str	r5, [r3, #4]
  mbp->wrptr  = buf;
 800091c:	e9c3 2202 	strd	r2, r2, [r3, #8]
  chMBObjectInit(&mb1, mb_buffer, MB_SIZE);
}
 8000920:	bc30      	pop	{r4, r5}
 8000922:	e9c3 0008 	strd	r0, r0, [r3, #32]
  mbp->cnt    = (size_t)0;
 8000926:	6119      	str	r1, [r3, #16]
  mbp->reset  = false;
 8000928:	7519      	strb	r1, [r3, #20]
 800092a:	4770      	bx	lr
 800092c:	2000084c 	.word	0x2000084c
 8000930:	20000c30 	.word	0x20000c30
	...

08000940 <oslib_test_002_002_setup>:
 8000940:	f7ff bfde 	b.w	8000900 <oslib_test_002_003_setup>
	...

08000950 <oslib_test_002_001_setup>:
 8000950:	f7ff bfd6 	b.w	8000900 <oslib_test_002_003_setup>
	...

08000960 <rt_test_011_011_setup>:
  tqp->next = (thread_t *)tqp;
 8000960:	4b02      	ldr	r3, [pc, #8]	; (800096c <rt_test_011_011_setup+0xc>)
 8000962:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 8000964:	e9c3 3300 	strd	r3, r3, [r3]
 8000968:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_011_011_setup(void) {
  chMtxObjectInit(&mtx1);
}
 800096a:	4770      	bx	lr
 800096c:	20000c60 	.word	0x20000c60

08000970 <rt_test_011_010_setup>:
  tqp->next = (thread_t *)tqp;
 8000970:	4b02      	ldr	r3, [pc, #8]	; (800097c <rt_test_011_010_setup+0xc>)
 8000972:	2201      	movs	r2, #1
  tqp->prev = (thread_t *)tqp;
 8000974:	e9c3 3300 	strd	r3, r3, [r3]
 8000978:	609a      	str	r2, [r3, #8]
}
 800097a:	4770      	bx	lr
 800097c:	20000d7c 	.word	0x20000d7c

08000980 <tmo>:
static void tmo(void *param) {(void)param;}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
	...

08000990 <rt_test_011_007_setup>:
  tqp->next = (thread_t *)tqp;
 8000990:	4b02      	ldr	r3, [pc, #8]	; (800099c <rt_test_011_007_setup+0xc>)
 8000992:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 8000994:	e9c3 3300 	strd	r3, r3, [r3]
 8000998:	609a      	str	r2, [r3, #8]
}
 800099a:	4770      	bx	lr
 800099c:	20000d7c 	.word	0x20000d7c

080009a0 <rt_test_010_002_setup>:
  mp->next = NULL;
 80009a0:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <rt_test_010_002_setup+0x14>)
 80009a2:	2200      	movs	r2, #0
  mp->object_size = size;
 80009a4:	f44f 70a4 	mov.w	r0, #328	; 0x148
  mp->align = align;
 80009a8:	2104      	movs	r1, #4
 80009aa:	e9c3 0101 	strd	r0, r1, [r3, #4]
  mp->next = NULL;
 80009ae:	601a      	str	r2, [r3, #0]
  mp->provider = provider;
 80009b0:	60da      	str	r2, [r3, #12]
 * .
 */

static void rt_test_010_002_setup(void) {
  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}
 80009b2:	4770      	bx	lr
 80009b4:	20000c40 	.word	0x20000c40
	...

080009c0 <rt_test_010_001_setup>:
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 80009c0:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <rt_test_010_001_setup+0x30>)
  heapp->provider = NULL;
 80009c2:	4a0c      	ldr	r2, [pc, #48]	; (80009f4 <rt_test_010_001_setup+0x34>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 80009c4:	1dd9      	adds	r1, r3, #7
 80009c6:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 80009ca:	1acb      	subs	r3, r1, r3
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 80009cc:	f5c3 63cc 	rsb	r3, r3, #1632	; 0x660
static void rt_test_010_001_setup(void) {
 80009d0:	b410      	push	{r4}
  heapp->provider = NULL;
 80009d2:	2000      	movs	r0, #0
  tqp->next = (thread_t *)tqp;
 80009d4:	f102 040c 	add.w	r4, r2, #12
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 80009d8:	08db      	lsrs	r3, r3, #3
 80009da:	604b      	str	r3, [r1, #4]
  H_NEXT(&heapp->header) = hp;
 80009dc:	6051      	str	r1, [r2, #4]
  H_NEXT(hp) = NULL;
 80009de:	6008      	str	r0, [r1, #0]
  tqp->prev = (thread_t *)tqp;
 80009e0:	e9c2 4403 	strd	r4, r4, [r2, #12]
  heapp->provider = NULL;
 80009e4:	6010      	str	r0, [r2, #0]
}
 80009e6:	bc10      	pop	{r4}
  H_PAGES(&heapp->header) = 0;
 80009e8:	6090      	str	r0, [r2, #8]
 80009ea:	6150      	str	r0, [r2, #20]
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	20000d88 	.word	0x20000d88
 80009f4:	20000bb0 	.word	0x20000bb0
	...

08000a00 <rt_test_009_007_setup>:
 *   has been emptied.
 * - [9.7.4] Unregistering from the Event Sources.
 * .
 */

static void rt_test_009_007_setup(void) {
 8000a00:	b508      	push	{r3, lr}
  chEvtGetAndClearEvents(ALL_EVENTS);
 8000a02:	f7ff fe3d 	bl	8000680 <chEvtGetAndClearEvents.constprop.0>
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8000a06:	4a02      	ldr	r2, [pc, #8]	; (8000a10 <rt_test_009_007_setup+0x10>)
 8000a08:	4b02      	ldr	r3, [pc, #8]	; (8000a14 <rt_test_009_007_setup+0x14>)
 8000a0a:	6012      	str	r2, [r2, #0]
 8000a0c:	601b      	str	r3, [r3, #0]
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
}
 8000a0e:	bd08      	pop	{r3, pc}
 8000a10:	20000808 	.word	0x20000808
 8000a14:	2000080c 	.word	0x2000080c
	...

08000a20 <rt_test_009_006_setup>:
  chEvtGetAndClearEvents(ALL_EVENTS);
 8000a20:	f7ff be2e 	b.w	8000680 <chEvtGetAndClearEvents.constprop.0>
	...

08000a30 <rt_test_009_005_setup>:
 8000a30:	f7ff bff6 	b.w	8000a20 <rt_test_009_006_setup>
	...

08000a40 <rt_test_009_004_setup>:
 8000a40:	f7ff bfee 	b.w	8000a20 <rt_test_009_006_setup>
	...

08000a50 <rt_test_009_003_setup>:
 8000a50:	f7ff bfe6 	b.w	8000a20 <rt_test_009_006_setup>
	...

08000a60 <rt_test_009_002_setup>:
 8000a60:	f7ff bfde 	b.w	8000a20 <rt_test_009_006_setup>
	...

08000a70 <rt_test_007_009_setup>:
  tqp->next = (thread_t *)tqp;
 8000a70:	4906      	ldr	r1, [pc, #24]	; (8000a8c <rt_test_007_009_setup+0x1c>)
 8000a72:	4a07      	ldr	r2, [pc, #28]	; (8000a90 <rt_test_007_009_setup+0x20>)
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <rt_test_007_009_setup+0x24>)
 8000a76:	6009      	str	r1, [r1, #0]
 8000a78:	2000      	movs	r0, #0
  tqp->prev = (thread_t *)tqp;
 8000a7a:	e9c2 2200 	strd	r2, r2, [r2]
 8000a7e:	e9c3 3300 	strd	r3, r3, [r3]
 8000a82:	6049      	str	r1, [r1, #4]
 8000a84:	6090      	str	r0, [r2, #8]
 8000a86:	6098      	str	r0, [r3, #8]

static void rt_test_007_009_setup(void) {
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20000800 	.word	0x20000800
 8000a90:	2000082c 	.word	0x2000082c
 8000a94:	2000083c 	.word	0x2000083c
	...

08000aa0 <rt_test_007_008_setup>:
  tqp->next = (thread_t *)tqp;
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <rt_test_007_008_setup+0x14>)
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <rt_test_007_008_setup+0x18>)
 8000aa4:	6012      	str	r2, [r2, #0]
 8000aa6:	2100      	movs	r1, #0
  tqp->prev = (thread_t *)tqp;
 8000aa8:	e9c3 3300 	strd	r3, r3, [r3]
 8000aac:	6052      	str	r2, [r2, #4]
 8000aae:	6099      	str	r1, [r3, #8]
}
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20000800 	.word	0x20000800
 8000ab8:	2000082c 	.word	0x2000082c
 8000abc:	00000000 	.word	0x00000000

08000ac0 <rt_test_007_007_setup>:
 8000ac0:	f7ff bfee 	b.w	8000aa0 <rt_test_007_008_setup>
	...

08000ad0 <rt_test_007_005_setup>:
  tqp->next = (thread_t *)tqp;
 8000ad0:	4b02      	ldr	r3, [pc, #8]	; (8000adc <rt_test_007_005_setup+0xc>)
 8000ad2:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 8000ad4:	e9c3 3300 	strd	r3, r3, [r3]
 8000ad8:	609a      	str	r2, [r3, #8]
}
 8000ada:	4770      	bx	lr
 8000adc:	2000082c 	.word	0x2000082c

08000ae0 <rt_test_007_004_setup>:
  tqp->next = (thread_t *)tqp;
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <rt_test_007_004_setup+0x14>)
 8000ae2:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <rt_test_007_004_setup+0x18>)
 8000ae4:	6012      	str	r2, [r2, #0]
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	e9c2 2101 	strd	r2, r1, [r2, #4]
  tqp->prev = (thread_t *)tqp;
 8000aec:	e9c3 3300 	strd	r3, r3, [r3]
 8000af0:	6099      	str	r1, [r3, #8]
}
 8000af2:	4770      	bx	lr
 8000af4:	2000082c 	.word	0x2000082c
 8000af8:	2000083c 	.word	0x2000083c
 8000afc:	00000000 	.word	0x00000000

08000b00 <rt_test_007_001_setup>:
 8000b00:	f7ff bfe6 	b.w	8000ad0 <rt_test_007_005_setup>
	...

08000b10 <rt_test_006_005_setup>:
  tqp->next = (thread_t *)tqp;
 8000b10:	4b02      	ldr	r3, [pc, #8]	; (8000b1c <rt_test_006_005_setup+0xc>)
 8000b12:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 8000b14:	e9c3 3300 	strd	r3, r3, [r3]
 8000b18:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_006_005_setup(void) {
  chSemObjectInit(&sem1, 0);
}
 8000b1a:	4770      	bx	lr
 8000b1c:	20000d70 	.word	0x20000d70

08000b20 <rt_test_006_004_setup>:
 8000b20:	f7ff bff6 	b.w	8000b10 <rt_test_006_005_setup>
	...

08000b30 <rt_test_006_003_setup>:
 8000b30:	f7ff bfee 	b.w	8000b10 <rt_test_006_005_setup>
	...

08000b40 <rt_test_006_002_setup>:
 8000b40:	f7ff bfe6 	b.w	8000b10 <rt_test_006_005_setup>
	...

08000b50 <rt_test_006_001_setup>:
  tqp->next = (thread_t *)tqp;
 8000b50:	4b02      	ldr	r3, [pc, #8]	; (8000b5c <rt_test_006_001_setup+0xc>)
 8000b52:	2201      	movs	r2, #1
  tqp->prev = (thread_t *)tqp;
 8000b54:	e9c3 3300 	strd	r3, r3, [r3]
 8000b58:	609a      	str	r2, [r3, #8]
}
 8000b5a:	4770      	bx	lr
 8000b5c:	20000d70 	.word	0x20000d70

08000b60 <rt_test_005_001_setup>:
 *   the state of the reference are tested.
 * .
 */

static void rt_test_005_001_setup(void) {
  tr1 = NULL;
 8000b60:	4b01      	ldr	r3, [pc, #4]	; (8000b68 <rt_test_005_001_setup+0x8>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
}
 8000b66:	4770      	bx	lr
 8000b68:	200014c8 	.word	0x200014c8
 8000b6c:	00000000 	.word	0x00000000

08000b70 <_test_assert>:
  if (!condition)
 8000b70:	b108      	cbz	r0, 8000b76 <_test_assert+0x6>
  return false;
 8000b72:	2000      	movs	r0, #0
}
 8000b74:	4770      	bx	lr
bool _test_assert(bool condition, const char *msg) {
 8000b76:	b410      	push	{r4}
  test_global_fail     = true;
 8000b78:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <_test_assert+0x1c>)
  test_local_fail      = true;
 8000b7a:	4c05      	ldr	r4, [pc, #20]	; (8000b90 <_test_assert+0x20>)
  test_failure_message = msg;
 8000b7c:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <_test_assert+0x24>)
  test_local_fail      = true;
 8000b7e:	2001      	movs	r0, #1
 8000b80:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 8000b82:	7010      	strb	r0, [r2, #0]
}
 8000b84:	bc10      	pop	{r4}
  test_failure_message = msg;
 8000b86:	6019      	str	r1, [r3, #0]
}
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	200013f8 	.word	0x200013f8
 8000b90:	20001498 	.word	0x20001498
 8000b94:	200013f4 	.word	0x200013f4
	...

08000ba0 <rt_test_003_002_execute>:
    test_assert(b == false, "in range");
  }
  test_end_step(2);

  /* [3.2.3] Checking boundaries for start > end.*/
  test_set_step(3);
 8000ba0:	4b01      	ldr	r3, [pc, #4]	; (8000ba8 <rt_test_003_002_execute+0x8>)
 8000ba2:	2203      	movs	r2, #3
 8000ba4:	601a      	str	r2, [r3, #0]
    test_assert(b == true, "not in range");
    b = chTimeIsInRangeX((systime_t)10, (systime_t)100, (systime_t)10);
    test_assert(b == false, "in range");
  }
  test_end_step(3);
}
 8000ba6:	4770      	bx	lr
 8000ba8:	2000149c 	.word	0x2000149c
 8000bac:	00000000 	.word	0x00000000

08000bb0 <rt_test_003_001_execute>:
  test_set_step(1);
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <rt_test_003_001_execute+0x14>)
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bb8:	6019      	str	r1, [r3, #0]
 8000bba:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000bbc:	6a53      	ldr	r3, [r2, #36]	; 0x24
    while (time == chVTGetSystemTimeX()) {
 8000bbe:	4299      	cmp	r1, r3
 8000bc0:	d0fc      	beq.n	8000bbc <rt_test_003_001_execute+0xc>
}
 8000bc2:	4770      	bx	lr
 8000bc4:	2000149c 	.word	0x2000149c
	...

08000bd0 <rt_test_002_003_execute>:

static void rt_test_002_003_execute(void) {

  /* [2.3.1] Testing chSysSuspend(), chSysDisable() and
     chSysEnable().*/
  test_set_step(1);
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <rt_test_002_003_execute+0x20>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	2320      	movs	r3, #32
 8000bd8:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000bdc:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
 8000bde:	b672      	cpsid	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000be0:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000be4:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000be6:	2300      	movs	r3, #0
 8000be8:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000bec:	b662      	cpsie	i
    chSysDisable();
    chSysSuspend();
    chSysEnable();
  }
  test_end_step(1);
}
 8000bee:	4770      	bx	lr
 8000bf0:	2000149c 	.word	0x2000149c
	...

08000c00 <test_terminate_threads>:
 * Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
  unsigned i;

  for (i = 0; i < MAX_THREADS; i++)
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <test_terminate_threads+0x30>)
void test_terminate_threads(void) {
 8000c02:	b430      	push	{r4, r5}
 8000c04:	f103 0014 	add.w	r0, r3, #20
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000c08:	2520      	movs	r5, #32
 8000c0a:	2400      	movs	r4, #0
    if (threads[i])
 8000c0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000c10:	b14a      	cbz	r2, 8000c26 <test_terminate_threads+0x26>
 8000c12:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chThdTerminate(thread_t *tp) {

  chSysLock();
  tp->flags |= CH_FLAG_TERMINATE;
 8000c16:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 8000c1a:	f041 0104 	orr.w	r1, r1, #4
 8000c1e:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
 8000c22:	f384 8811 	msr	BASEPRI, r4
  for (i = 0; i < MAX_THREADS; i++)
 8000c26:	4283      	cmp	r3, r0
 8000c28:	d1f0      	bne.n	8000c0c <test_terminate_threads+0xc>
      chThdTerminate(threads[i]);
}
 8000c2a:	bc30      	pop	{r4, r5}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	200014b4 	.word	0x200014b4
	...

08000c40 <test_printn.part.0>:

  if (!n)
    streamPut(test_chp, '0');
  else {
    p = buf;
    while (n)
 8000c40:	b310      	cbz	r0, 8000c88 <test_printn.part.0+0x48>
void test_printn(uint32_t n) {
 8000c42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c44:	b085      	sub	sp, #20
    p = buf;
 8000c46:	466c      	mov	r4, sp
      *p++ = (n % 10) + '0', n /= 10;
 8000c48:	4f10      	ldr	r7, [pc, #64]	; (8000c8c <test_printn.part.0+0x4c>)
    p = buf;
 8000c4a:	4622      	mov	r2, r4
      *p++ = (n % 10) + '0', n /= 10;
 8000c4c:	fba7 1300 	umull	r1, r3, r7, r0
 8000c50:	08db      	lsrs	r3, r3, #3
 8000c52:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8000c56:	eba0 0141 	sub.w	r1, r0, r1, lsl #1
 8000c5a:	4606      	mov	r6, r0
 8000c5c:	3130      	adds	r1, #48	; 0x30
 8000c5e:	b2c9      	uxtb	r1, r1
    while (n)
 8000c60:	2e09      	cmp	r6, #9
 8000c62:	4615      	mov	r5, r2
      *p++ = (n % 10) + '0', n /= 10;
 8000c64:	4618      	mov	r0, r3
 8000c66:	f802 1b01 	strb.w	r1, [r2], #1
    while (n)
 8000c6a:	d8ef      	bhi.n	8000c4c <test_printn.part.0+0xc>
    while (p > buf)
 8000c6c:	42a2      	cmp	r2, r4
 8000c6e:	d909      	bls.n	8000c84 <test_printn.part.0+0x44>
 8000c70:	4e07      	ldr	r6, [pc, #28]	; (8000c90 <test_printn.part.0+0x50>)
 8000c72:	e001      	b.n	8000c78 <test_printn.part.0+0x38>
 8000c74:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
      streamPut(test_chp, *--p);
 8000c78:	6830      	ldr	r0, [r6, #0]
 8000c7a:	6803      	ldr	r3, [r0, #0]
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	4798      	blx	r3
    while (p > buf)
 8000c80:	42ac      	cmp	r4, r5
 8000c82:	d1f7      	bne.n	8000c74 <test_printn.part.0+0x34>
  }
}
 8000c84:	b005      	add	sp, #20
 8000c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	cccccccd 	.word	0xcccccccd
 8000c90:	200013f0 	.word	0x200013f0
	...

08000ca0 <test_printn>:
  if (!n)
 8000ca0:	b928      	cbnz	r0, 8000cae <test_printn+0xe>
    streamPut(test_chp, '0');
 8000ca2:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <test_printn+0x14>)
 8000ca4:	6818      	ldr	r0, [r3, #0]
 8000ca6:	6803      	ldr	r3, [r0, #0]
 8000ca8:	2130      	movs	r1, #48	; 0x30
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	4718      	bx	r3
 8000cae:	f7ff bfc7 	b.w	8000c40 <test_printn.part.0>
 8000cb2:	bf00      	nop
 8000cb4:	200013f0 	.word	0x200013f0
	...

08000cc0 <test_emit_token>:
 8000cc0:	2320      	movs	r3, #32
 8000cc2:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void test_emit_token(char token) {

  osalSysLock();
  if (test_tokp < &test_tokens_buffer[TEST_CFG_MAX_TOKENS])
 8000cc6:	4a06      	ldr	r2, [pc, #24]	; (8000ce0 <test_emit_token+0x20>)
 8000cc8:	4906      	ldr	r1, [pc, #24]	; (8000ce4 <test_emit_token+0x24>)
 8000cca:	6813      	ldr	r3, [r2, #0]
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d202      	bcs.n	8000cd6 <test_emit_token+0x16>
    *test_tokp++ = token;
 8000cd0:	1c59      	adds	r1, r3, #1
 8000cd2:	7018      	strb	r0, [r3, #0]
 8000cd4:	6011      	str	r1, [r2, #0]
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	200014b0 	.word	0x200014b0
 8000ce4:	200014b0 	.word	0x200014b0
	...

08000cf0 <obj_write>:
  return false;
}

static bool obj_write(objects_cache_t *ocp,
                      oc_object_t *objp,
                      bool async) {
 8000cf0:	b508      	push	{r3, lr}
  (void)ocp;
  (void)async;

  test_emit_token('A' + objp->obj_key);
 8000cf2:	6948      	ldr	r0, [r1, #20]
 8000cf4:	3041      	adds	r0, #65	; 0x41
 8000cf6:	b2c0      	uxtb	r0, r0
 8000cf8:	f7ff ffe2 	bl	8000cc0 <test_emit_token>

  return false;
}
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	bd08      	pop	{r3, pc}

08000d00 <dis_func0>:
 * Shared code.
 ****************************************************************************/

static bool exit_flag;

static int dis_func0(void) {
 8000d00:	b508      	push	{r3, lr}

  test_emit_token('0');
 8000d02:	2030      	movs	r0, #48	; 0x30
 8000d04:	f7ff ffdc 	bl	8000cc0 <test_emit_token>

  return (msg_t)0x55AA;
}
 8000d08:	f245 50aa 	movw	r0, #21930	; 0x55aa
 8000d0c:	bd08      	pop	{r3, pc}
 8000d0e:	bf00      	nop

08000d10 <dis_func1>:

static msg_t dis_func1(msg_t a) {
 8000d10:	b510      	push	{r4, lr}
 8000d12:	4604      	mov	r4, r0

  test_emit_token((char)a);
 8000d14:	b2c0      	uxtb	r0, r0
 8000d16:	f7ff ffd3 	bl	8000cc0 <test_emit_token>

  return (msg_t)a;
}
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	bd10      	pop	{r4, pc}
 8000d1e:	bf00      	nop

08000d20 <dis_func2>:

static msg_t dis_func2(msg_t a, msg_t b) {
 8000d20:	b538      	push	{r3, r4, r5, lr}
 8000d22:	460d      	mov	r5, r1
 8000d24:	4604      	mov	r4, r0

  test_emit_token((char)a);
 8000d26:	b2c0      	uxtb	r0, r0
 8000d28:	f7ff ffca 	bl	8000cc0 <test_emit_token>
  test_emit_token((char)b);
 8000d2c:	b2e8      	uxtb	r0, r5
 8000d2e:	f7ff ffc7 	bl	8000cc0 <test_emit_token>

  return (msg_t)a;
}
 8000d32:	4620      	mov	r0, r4
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop
	...

08000d40 <dis_func3>:

static msg_t dis_func3(msg_t a, msg_t b, msg_t c) {
 8000d40:	b570      	push	{r4, r5, r6, lr}
 8000d42:	460e      	mov	r6, r1
 8000d44:	4604      	mov	r4, r0

  test_emit_token((char)a);
 8000d46:	b2c0      	uxtb	r0, r0
static msg_t dis_func3(msg_t a, msg_t b, msg_t c) {
 8000d48:	4615      	mov	r5, r2
  test_emit_token((char)a);
 8000d4a:	f7ff ffb9 	bl	8000cc0 <test_emit_token>
  test_emit_token((char)b);
 8000d4e:	b2f0      	uxtb	r0, r6
 8000d50:	f7ff ffb6 	bl	8000cc0 <test_emit_token>
  test_emit_token((char)c);
 8000d54:	b2e8      	uxtb	r0, r5
 8000d56:	f7ff ffb3 	bl	8000cc0 <test_emit_token>

  return (msg_t)a;
}
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	bd70      	pop	{r4, r5, r6, pc}
 8000d5e:	bf00      	nop

08000d60 <dis_func4>:

static msg_t dis_func4(msg_t a, msg_t b, msg_t c, msg_t d) {
 8000d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d62:	460f      	mov	r7, r1
 8000d64:	4604      	mov	r4, r0

  test_emit_token((char)a);
 8000d66:	b2c0      	uxtb	r0, r0
static msg_t dis_func4(msg_t a, msg_t b, msg_t c, msg_t d) {
 8000d68:	4616      	mov	r6, r2
 8000d6a:	461d      	mov	r5, r3
  test_emit_token((char)a);
 8000d6c:	f7ff ffa8 	bl	8000cc0 <test_emit_token>
  test_emit_token((char)b);
 8000d70:	b2f8      	uxtb	r0, r7
 8000d72:	f7ff ffa5 	bl	8000cc0 <test_emit_token>
  test_emit_token((char)c);
 8000d76:	b2f0      	uxtb	r0, r6
 8000d78:	f7ff ffa2 	bl	8000cc0 <test_emit_token>
  test_emit_token((char)d);
 8000d7c:	b2e8      	uxtb	r0, r5
 8000d7e:	f7ff ff9f 	bl	8000cc0 <test_emit_token>

  return (msg_t)a;
}
 8000d82:	4620      	mov	r0, r4
 8000d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d86:	bf00      	nop
	...

08000d90 <dis_func_end>:

static int dis_func_end(void) {
 8000d90:	b508      	push	{r3, lr}

  test_emit_token('Z');
 8000d92:	205a      	movs	r0, #90	; 0x5a
 8000d94:	f7ff ff94 	bl	8000cc0 <test_emit_token>
  exit_flag = true;
 8000d98:	4b02      	ldr	r3, [pc, #8]	; (8000da4 <dis_func_end+0x14>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	701a      	strb	r2, [r3, #0]

  return (msg_t)0xAA55;
}
 8000d9e:	f64a 2055 	movw	r0, #43605	; 0xaa55
 8000da2:	bd08      	pop	{r3, pc}
 8000da4:	20000b6c 	.word	0x20000b6c
	...

08000db0 <h3>:
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 8000db0:	2043      	movs	r0, #67	; 0x43
 8000db2:	f7ff bf85 	b.w	8000cc0 <test_emit_token>
 8000db6:	bf00      	nop
	...

08000dc0 <h2>:
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 8000dc0:	2042      	movs	r0, #66	; 0x42
 8000dc2:	f7ff bf7d 	b.w	8000cc0 <test_emit_token>
 8000dc6:	bf00      	nop
	...

08000dd0 <h1>:
static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8000dd0:	2041      	movs	r0, #65	; 0x41
 8000dd2:	f7ff bf75 	b.w	8000cc0 <test_emit_token>
 8000dd6:	bf00      	nop
	...

08000de0 <thread>:
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 8000de0:	7800      	ldrb	r0, [r0, #0]
 8000de2:	f7ff bf6d 	b.w	8000cc0 <test_emit_token>
 8000de6:	bf00      	nop
	...

08000df0 <dyn_thread1>:
 8000df0:	f7ff bff6 	b.w	8000de0 <thread>
	...

08000e00 <test_println>:
void test_println(const char *msgp) {
 8000e00:	b570      	push	{r4, r5, r6, lr}
  while (*msgp)
 8000e02:	7801      	ldrb	r1, [r0, #0]
 8000e04:	b189      	cbz	r1, 8000e2a <test_println+0x2a>
 8000e06:	4d0a      	ldr	r5, [pc, #40]	; (8000e30 <test_println+0x30>)
 8000e08:	4604      	mov	r4, r0
    streamPut(test_chp, *msgp++);
 8000e0a:	6828      	ldr	r0, [r5, #0]
 8000e0c:	6803      	ldr	r3, [r0, #0]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	4798      	blx	r3
  while (*msgp)
 8000e12:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000e16:	2900      	cmp	r1, #0
 8000e18:	d1f7      	bne.n	8000e0a <test_println+0xa>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000e1a:	6828      	ldr	r0, [r5, #0]
 8000e1c:	4905      	ldr	r1, [pc, #20]	; (8000e34 <test_println+0x34>)
 8000e1e:	6803      	ldr	r3, [r0, #0]
}
 8000e20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	2202      	movs	r2, #2
 8000e28:	4718      	bx	r3
 8000e2a:	4d01      	ldr	r5, [pc, #4]	; (8000e30 <test_println+0x30>)
 8000e2c:	e7f5      	b.n	8000e1a <test_println+0x1a>
 8000e2e:	bf00      	nop
 8000e30:	200013f0 	.word	0x200013f0
 8000e34:	08008f48 	.word	0x08008f48
	...

08000e40 <test_print>:
  while (*msgp)
 8000e40:	7801      	ldrb	r1, [r0, #0]
 8000e42:	b159      	cbz	r1, 8000e5c <test_print+0x1c>
void test_print(const char *msgp) {
 8000e44:	b538      	push	{r3, r4, r5, lr}
 8000e46:	4d06      	ldr	r5, [pc, #24]	; (8000e60 <test_print+0x20>)
 8000e48:	4604      	mov	r4, r0
    streamPut(test_chp, *msgp++);
 8000e4a:	6828      	ldr	r0, [r5, #0]
 8000e4c:	6803      	ldr	r3, [r0, #0]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	4798      	blx	r3
  while (*msgp)
 8000e52:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000e56:	2900      	cmp	r1, #0
 8000e58:	d1f7      	bne.n	8000e4a <test_print+0xa>
}
 8000e5a:	bd38      	pop	{r3, r4, r5, pc}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	200013f0 	.word	0x200013f0
	...

08000e70 <_test_assert_sequence>:
bool _test_assert_sequence(char *expected, const char *msg) {
 8000e70:	b4f0      	push	{r4, r5, r6, r7}
  while (cp < test_tokp) {
 8000e72:	4e0d      	ldr	r6, [pc, #52]	; (8000ea8 <_test_assert_sequence+0x38>)
  char *cp = test_tokens_buffer;
 8000e74:	4f0d      	ldr	r7, [pc, #52]	; (8000eac <_test_assert_sequence+0x3c>)
  while (cp < test_tokp) {
 8000e76:	6835      	ldr	r5, [r6, #0]
  char *cp = test_tokens_buffer;
 8000e78:	463b      	mov	r3, r7
 8000e7a:	e005      	b.n	8000e88 <_test_assert_sequence+0x18>
    if (*cp++ != *expected++)
 8000e7c:	f813 4b01 	ldrb.w	r4, [r3], #1
 8000e80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e84:	4294      	cmp	r4, r2
 8000e86:	d106      	bne.n	8000e96 <_test_assert_sequence+0x26>
  while (cp < test_tokp) {
 8000e88:	429d      	cmp	r5, r3
 8000e8a:	d8f7      	bhi.n	8000e7c <_test_assert_sequence+0xc>
  if (*expected)
 8000e8c:	7800      	ldrb	r0, [r0, #0]
 8000e8e:	b910      	cbnz	r0, 8000e96 <_test_assert_sequence+0x26>
  test_tokp = test_tokens_buffer;
 8000e90:	6037      	str	r7, [r6, #0]
}
 8000e92:	bcf0      	pop	{r4, r5, r6, r7}
 8000e94:	4770      	bx	lr
  test_local_fail      = true;
 8000e96:	4c06      	ldr	r4, [pc, #24]	; (8000eb0 <_test_assert_sequence+0x40>)
  test_global_fail     = true;
 8000e98:	4a06      	ldr	r2, [pc, #24]	; (8000eb4 <_test_assert_sequence+0x44>)
  test_failure_message = msg;
 8000e9a:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <_test_assert_sequence+0x48>)
  test_local_fail      = true;
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 8000ea0:	7010      	strb	r0, [r2, #0]
}
 8000ea2:	bcf0      	pop	{r4, r5, r6, r7}
  test_failure_message = msg;
 8000ea4:	6019      	str	r1, [r3, #0]
}
 8000ea6:	4770      	bx	lr
 8000ea8:	200014b0 	.word	0x200014b0
 8000eac:	200014a0 	.word	0x200014a0
 8000eb0:	20001498 	.word	0x20001498
 8000eb4:	200013f8 	.word	0x200013f8
 8000eb8:	200013f4 	.word	0x200013f4
 8000ebc:	00000000 	.word	0x00000000

08000ec0 <rt_test_009_002_execute>:
  test_set_step(1);
 8000ec0:	4a0f      	ldr	r2, [pc, #60]	; (8000f00 <rt_test_009_002_execute+0x40>)
static void rt_test_009_002_execute(void) {
 8000ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8000ec4:	2601      	movs	r6, #1
 8000ec6:	4f0f      	ldr	r7, [pc, #60]	; (8000f04 <rt_test_009_002_execute+0x44>)
 8000ec8:	6016      	str	r6, [r2, #0]
 8000eca:	2507      	movs	r5, #7
void chEvtDispatch(const evhandler_t *handlers, eventmask_t events) {
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
 8000ecc:	2400      	movs	r4, #0
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8000ece:	fa25 f304 	lsr.w	r3, r5, r4
 8000ed2:	f013 0f01 	tst.w	r3, #1
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 8000ed6:	fa06 f204 	lsl.w	r2, r6, r4
      handlers[eid](eid);
 8000eda:	4620      	mov	r0, r4
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8000edc:	d00d      	beq.n	8000efa <rt_test_009_002_execute+0x3a>
      handlers[eid](eid);
 8000ede:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
      events &= ~EVENT_MASK(eid);
 8000ee2:	ea25 0502 	bic.w	r5, r5, r2
    }
    eid++;
 8000ee6:	3401      	adds	r4, #1
      handlers[eid](eid);
 8000ee8:	4798      	blx	r3
  while (events != (eventmask_t)0) {
 8000eea:	2d00      	cmp	r5, #0
 8000eec:	d1ef      	bne.n	8000ece <rt_test_009_002_execute+0xe>
}
 8000eee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 8000ef2:	4905      	ldr	r1, [pc, #20]	; (8000f08 <rt_test_009_002_execute+0x48>)
 8000ef4:	4805      	ldr	r0, [pc, #20]	; (8000f0c <rt_test_009_002_execute+0x4c>)
 8000ef6:	f7ff bfbb 	b.w	8000e70 <_test_assert_sequence>
    eid++;
 8000efa:	3401      	adds	r4, #1
 8000efc:	e7e7      	b.n	8000ece <rt_test_009_002_execute+0xe>
 8000efe:	bf00      	nop
 8000f00:	2000149c 	.word	0x2000149c
 8000f04:	0800ae00 	.word	0x0800ae00
 8000f08:	08008f4c 	.word	0x08008f4c
 8000f0c:	08008f60 	.word	0x08008f60

08000f10 <print_line>:
static void print_line(void) {
 8000f10:	b570      	push	{r4, r5, r6, lr}
 8000f12:	4d08      	ldr	r5, [pc, #32]	; (8000f34 <print_line+0x24>)
 8000f14:	244c      	movs	r4, #76	; 0x4c
    streamPut(test_chp, '-');
 8000f16:	6828      	ldr	r0, [r5, #0]
 8000f18:	6803      	ldr	r3, [r0, #0]
 8000f1a:	212d      	movs	r1, #45	; 0x2d
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	4798      	blx	r3
  for (i = 0; i < 76; i++)
 8000f20:	3c01      	subs	r4, #1
 8000f22:	d1f8      	bne.n	8000f16 <print_line+0x6>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000f24:	6828      	ldr	r0, [r5, #0]
 8000f26:	4904      	ldr	r1, [pc, #16]	; (8000f38 <print_line+0x28>)
 8000f28:	6803      	ldr	r3, [r0, #0]
}
 8000f2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	2202      	movs	r2, #2
 8000f32:	4718      	bx	r3
 8000f34:	200013f0 	.word	0x200013f0
 8000f38:	08008f48 	.word	0x08008f48
 8000f3c:	00000000 	.word	0x00000000

08000f40 <_port_irq_epilogue>:
 8000f40:	2320      	movs	r3, #32
 8000f42:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <_port_irq_epilogue+0x3c>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8000f4e:	d102      	bne.n	8000f56 <_port_irq_epilogue+0x16>
 8000f50:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8000f54:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000f56:	f3ef 8309 	mrs	r3, PSP
    s_psp -= sizeof (struct port_extctx);
 8000f5a:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8000f5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f60:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000f62:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8000f66:	4a06      	ldr	r2, [pc, #24]	; (8000f80 <_port_irq_epilogue+0x40>)
 8000f68:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 8000f6a:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 8000f6c:	6889      	ldr	r1, [r1, #8]
 8000f6e:	6892      	ldr	r2, [r2, #8]
 8000f70:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8000f72:	bf8c      	ite	hi
 8000f74:	4a03      	ldrhi	r2, [pc, #12]	; (8000f84 <_port_irq_epilogue+0x44>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8000f76:	4a04      	ldrls	r2, [pc, #16]	; (8000f88 <_port_irq_epilogue+0x48>)
 8000f78:	619a      	str	r2, [r3, #24]
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00
 8000f80:	200009b0 	.word	0x200009b0
 8000f84:	080002e3 	.word	0x080002e3
 8000f88:	080002e6 	.word	0x080002e6
 8000f8c:	00000000 	.word	0x00000000

08000f90 <chCoreAllocAlignedI>:
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000f90:	4a08      	ldr	r2, [pc, #32]	; (8000fb4 <chCoreAllocAlignedI+0x24>)
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8000f92:	b410      	push	{r4}
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000f94:	e9d2 3400 	ldrd	r3, r4, [r2]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000f98:	4249      	negs	r1, r1
 8000f9a:	1a20      	subs	r0, r4, r0
 8000f9c:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000f9e:	4298      	cmp	r0, r3
 8000fa0:	d304      	bcc.n	8000fac <chCoreAllocAlignedI+0x1c>
 8000fa2:	4284      	cmp	r4, r0
 8000fa4:	d302      	bcc.n	8000fac <chCoreAllocAlignedI+0x1c>

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8000fa6:	bc10      	pop	{r4}
  ch_memcore.topmem = prev;
 8000fa8:	6050      	str	r0, [r2, #4]
 8000faa:	4770      	bx	lr
    return NULL;
 8000fac:	2000      	movs	r0, #0
 8000fae:	bc10      	pop	{r4}
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000b48 	.word	0x20000b48
	...

08000fc0 <chPoolAlloc>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @api
 */
void *chPoolAlloc(memory_pool_t *mp) {
 8000fc0:	b508      	push	{r3, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000fc2:	2220      	movs	r2, #32
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	f382 8811 	msr	BASEPRI, r2
  objp = mp->next;
 8000fca:	6800      	ldr	r0, [r0, #0]
  if (objp != NULL) {
 8000fcc:	b128      	cbz	r0, 8000fda <chPoolAlloc+0x1a>
    mp->next = mp->next->next;
 8000fce:	6802      	ldr	r2, [r0, #0]
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 8000fd8:	bd08      	pop	{r3, pc}
  else if (mp->provider != NULL) {
 8000fda:	68da      	ldr	r2, [r3, #12]
 8000fdc:	2a00      	cmp	r2, #0
 8000fde:	d0f8      	beq.n	8000fd2 <chPoolAlloc+0x12>
    objp = mp->provider(mp->object_size, mp->align);
 8000fe0:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
 8000fe4:	4790      	blx	r2
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f383 8811 	msr	BASEPRI, r3
}
 8000fec:	bd08      	pop	{r3, pc}
 8000fee:	bf00      	nop

08000ff0 <oslib_test_007_001_execute>:
static void oslib_test_007_001_execute(void) {
 8000ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8000ff4:	4e3b      	ldr	r6, [pc, #236]	; (80010e4 <oslib_test_007_001_execute+0xf4>)
 8000ff6:	4b3c      	ldr	r3, [pc, #240]	; (80010e8 <oslib_test_007_001_execute+0xf8>)
 8000ff8:	4c3c      	ldr	r4, [pc, #240]	; (80010ec <oslib_test_007_001_execute+0xfc>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	6032      	str	r2, [r6, #0]
 8000ffe:	2520      	movs	r5, #32
 8001000:	2204      	movs	r2, #4
 8001002:	2000      	movs	r0, #0
 8001004:	f385 8811 	msr	BASEPRI, r5
  chDbgCheckClassI();
  chDbgCheck((mp != NULL) &&
             (objp != NULL) &&
             MEM_IS_ALIGNED(objp, mp->align));

  php->next = mp->next;
 8001008:	6821      	ldr	r1, [r4, #0]
 800100a:	6019      	str	r1, [r3, #0]
  mp->next = php;
 800100c:	6023      	str	r3, [r4, #0]
 800100e:	f380 8811 	msr	BASEPRI, r0
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8001012:	6861      	ldr	r1, [r4, #4]
  while (n != 0U) {
 8001014:	3a01      	subs	r2, #1
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8001016:	440b      	add	r3, r1
  while (n != 0U) {
 8001018:	d1f4      	bne.n	8001004 <oslib_test_007_001_execute+0x14>
  test_set_step(2);
 800101a:	2302      	movs	r3, #2
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 800101c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 80010ec <oslib_test_007_001_execute+0xfc>
 8001020:	4f33      	ldr	r7, [pc, #204]	; (80010f0 <oslib_test_007_001_execute+0x100>)
  test_set_step(2);
 8001022:	6033      	str	r3, [r6, #0]
 8001024:	2504      	movs	r5, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 8001026:	4640      	mov	r0, r8
 8001028:	f7ff ffca 	bl	8000fc0 <chPoolAlloc>
 800102c:	3800      	subs	r0, #0
 800102e:	bf18      	it	ne
 8001030:	2001      	movne	r0, #1
 8001032:	4639      	mov	r1, r7
 8001034:	f7ff fd9c 	bl	8000b70 <_test_assert>
 8001038:	2800      	cmp	r0, #0
 800103a:	d150      	bne.n	80010de <oslib_test_007_001_execute+0xee>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800103c:	3d01      	subs	r5, #1
 800103e:	d1f2      	bne.n	8001026 <oslib_test_007_001_execute+0x36>
  test_set_step(3);
 8001040:	2303      	movs	r3, #3
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8001042:	482a      	ldr	r0, [pc, #168]	; (80010ec <oslib_test_007_001_execute+0xfc>)
  test_set_step(3);
 8001044:	6033      	str	r3, [r6, #0]
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8001046:	f7ff ffbb 	bl	8000fc0 <chPoolAlloc>
 800104a:	fab0 f080 	clz	r0, r0
 800104e:	4929      	ldr	r1, [pc, #164]	; (80010f4 <oslib_test_007_001_execute+0x104>)
 8001050:	0940      	lsrs	r0, r0, #5
 8001052:	f7ff fd8d 	bl	8000b70 <_test_assert>
 8001056:	2800      	cmp	r0, #0
 8001058:	d141      	bne.n	80010de <oslib_test_007_001_execute+0xee>
  test_set_step(4);
 800105a:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <oslib_test_007_001_execute+0xf8>)
 800105c:	2204      	movs	r2, #4
 800105e:	f103 0710 	add.w	r7, r3, #16
 8001062:	6032      	str	r2, [r6, #0]
 8001064:	2020      	movs	r0, #32
      chPoolFree(&mp1, &objects[i]);
 8001066:	461a      	mov	r2, r3
 8001068:	f380 8811 	msr	BASEPRI, r0
  php->next = mp->next;
 800106c:	6821      	ldr	r1, [r4, #0]
 800106e:	f843 1b04 	str.w	r1, [r3], #4
  mp->next = php;
 8001072:	6022      	str	r2, [r4, #0]
 8001074:	f385 8811 	msr	BASEPRI, r5
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8001078:	42bb      	cmp	r3, r7
 800107a:	d1f4      	bne.n	8001066 <oslib_test_007_001_execute+0x76>
  test_set_step(5);
 800107c:	2305      	movs	r3, #5
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 800107e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80010ec <oslib_test_007_001_execute+0xfc>
 8001082:	4f1b      	ldr	r7, [pc, #108]	; (80010f0 <oslib_test_007_001_execute+0x100>)
  test_set_step(5);
 8001084:	6033      	str	r3, [r6, #0]
 8001086:	2504      	movs	r5, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 8001088:	4640      	mov	r0, r8
 800108a:	f7ff ff99 	bl	8000fc0 <chPoolAlloc>
 800108e:	3800      	subs	r0, #0
 8001090:	bf18      	it	ne
 8001092:	2001      	movne	r0, #1
 8001094:	4639      	mov	r1, r7
 8001096:	f7ff fd6b 	bl	8000b70 <_test_assert>
 800109a:	bb00      	cbnz	r0, 80010de <oslib_test_007_001_execute+0xee>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800109c:	3d01      	subs	r5, #1
 800109e:	d1f3      	bne.n	8001088 <oslib_test_007_001_execute+0x98>
  test_set_step(6);
 80010a0:	2306      	movs	r3, #6
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 80010a2:	4812      	ldr	r0, [pc, #72]	; (80010ec <oslib_test_007_001_execute+0xfc>)
  test_set_step(6);
 80010a4:	6033      	str	r3, [r6, #0]
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 80010a6:	f7ff ff8b 	bl	8000fc0 <chPoolAlloc>
 80010aa:	fab0 f080 	clz	r0, r0
 80010ae:	4911      	ldr	r1, [pc, #68]	; (80010f4 <oslib_test_007_001_execute+0x104>)
 80010b0:	0940      	lsrs	r0, r0, #5
 80010b2:	f7ff fd5d 	bl	8000b70 <_test_assert>
 80010b6:	b990      	cbnz	r0, 80010de <oslib_test_007_001_execute+0xee>
  test_set_step(7);
 80010b8:	2107      	movs	r1, #7
  mp->provider = provider;
 80010ba:	4a0f      	ldr	r2, [pc, #60]	; (80010f8 <oslib_test_007_001_execute+0x108>)
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 80010bc:	480b      	ldr	r0, [pc, #44]	; (80010ec <oslib_test_007_001_execute+0xfc>)
  test_set_step(7);
 80010be:	6031      	str	r1, [r6, #0]
  mp->object_size = size;
 80010c0:	2304      	movs	r3, #4
  mp->align = align;
 80010c2:	e9c4 3301 	strd	r3, r3, [r4, #4]
  mp->next = NULL;
 80010c6:	6025      	str	r5, [r4, #0]
  mp->provider = provider;
 80010c8:	60e2      	str	r2, [r4, #12]
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 80010ca:	f7ff ff79 	bl	8000fc0 <chPoolAlloc>
 80010ce:	fab0 f080 	clz	r0, r0
}
 80010d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 80010d6:	4909      	ldr	r1, [pc, #36]	; (80010fc <oslib_test_007_001_execute+0x10c>)
 80010d8:	0940      	lsrs	r0, r0, #5
 80010da:	f7ff bd49 	b.w	8000b70 <_test_assert>
}
 80010de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010e2:	bf00      	nop
 80010e4:	2000149c 	.word	0x2000149c
 80010e8:	20000d60 	.word	0x20000d60
 80010ec:	20000874 	.word	0x20000874
 80010f0:	08008f64 	.word	0x08008f64
 80010f4:	08008f70 	.word	0x08008f70
 80010f8:	080007a1 	.word	0x080007a1
 80010fc:	08008f80 	.word	0x08008f80

08001100 <chEvtAddEvents>:
 8001100:	2320      	movs	r3, #32
 8001102:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline eventmask_t chEvtAddEventsI(eventmask_t events) {

  return currp->epending |= events;
 8001106:	4b04      	ldr	r3, [pc, #16]	; (8001118 <chEvtAddEvents+0x18>)
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800110c:	4310      	orrs	r0, r2
 800110e:	6358      	str	r0, [r3, #52]	; 0x34
 8001110:	2300      	movs	r3, #0
 8001112:	f383 8811 	msr	BASEPRI, r3
}
 8001116:	4770      	bx	lr
 8001118:	200009b0 	.word	0x200009b0
 800111c:	00000000 	.word	0x00000000

08001120 <chEvtUnregister>:
 8001120:	2320      	movs	r3, #32
 8001122:	f383 8811 	msr	BASEPRI, r3
  p = (event_listener_t *)esp;
 8001126:	4603      	mov	r3, r0
 8001128:	e001      	b.n	800112e <chEvtUnregister+0xe>
    if (p->next == elp) {
 800112a:	428b      	cmp	r3, r1
 800112c:	d007      	beq.n	800113e <chEvtUnregister+0x1e>
  while (p->next != (event_listener_t *)esp) {
 800112e:	461a      	mov	r2, r3
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4283      	cmp	r3, r0
 8001134:	d1f9      	bne.n	800112a <chEvtUnregister+0xa>
 8001136:	2300      	movs	r3, #0
 8001138:	f383 8811 	msr	BASEPRI, r3
}
 800113c:	4770      	bx	lr
      p->next = elp->next;
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	2300      	movs	r3, #0
 8001144:	f383 8811 	msr	BASEPRI, r3
}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	0000      	movs	r0, r0
	...

08001150 <rt_test_009_001_execute>:
static void rt_test_009_001_execute(void) {
 8001150:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  esp->next = (event_listener_t *)esp;
 8001154:	4c36      	ldr	r4, [pc, #216]	; (8001230 <rt_test_009_001_execute+0xe0>)
  test_set_step(2);
 8001156:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8001240 <rt_test_009_001_execute+0xf0>
 800115a:	6024      	str	r4, [r4, #0]
 800115c:	2202      	movs	r2, #2
static void rt_test_009_001_execute(void) {
 800115e:	b08b      	sub	sp, #44	; 0x2c
  test_set_step(2);
 8001160:	f8c8 2000 	str.w	r2, [r8]
 8001164:	2720      	movs	r7, #32
 8001166:	f387 8811 	msr	BASEPRI, r7
  elp->listener = currp;
 800116a:	4932      	ldr	r1, [pc, #200]	; (8001234 <rt_test_009_001_execute+0xe4>)
  elp->next     = esp->next;
 800116c:	6820      	ldr	r0, [r4, #0]
  elp->listener = currp;
 800116e:	698b      	ldr	r3, [r1, #24]
  elp->next     = esp->next;
 8001170:	9005      	str	r0, [sp, #20]
  esp->next     = elp;
 8001172:	f10d 0914 	add.w	r9, sp, #20
  elp->events   = events;
 8001176:	2001      	movs	r0, #1
  elp->flags    = (eventflags_t)0;
 8001178:	2500      	movs	r5, #0
  elp->listener = currp;
 800117a:	9306      	str	r3, [sp, #24]
  elp->wflags   = wflags;
 800117c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001180:	e9cd 5308 	strd	r5, r3, [sp, #32]
  elp->events   = events;
 8001184:	9007      	str	r0, [sp, #28]
  esp->next     = elp;
 8001186:	f8c4 9000 	str.w	r9, [r4]
 800118a:	f385 8811 	msr	BASEPRI, r5
 800118e:	f387 8811 	msr	BASEPRI, r7
  elp->listener = currp;
 8001192:	6988      	ldr	r0, [r1, #24]
  elp->next     = esp->next;
 8001194:	6821      	ldr	r1, [r4, #0]
 8001196:	9100      	str	r1, [sp, #0]
  elp->events   = events;
 8001198:	e9cd 0201 	strd	r0, r2, [sp, #4]
  elp->wflags   = wflags;
 800119c:	e9cd 5303 	strd	r5, r3, [sp, #12]
  esp->next     = elp;
 80011a0:	f8c4 d000 	str.w	sp, [r4]
 80011a4:	f385 8811 	msr	BASEPRI, r5
 80011a8:	f387 8811 	msr	BASEPRI, r7
  return (bool)(esp != (event_source_t *)esp->next);
 80011ac:	6820      	ldr	r0, [r4, #0]
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 80011ae:	4922      	ldr	r1, [pc, #136]	; (8001238 <rt_test_009_001_execute+0xe8>)
 80011b0:	1b00      	subs	r0, r0, r4
 80011b2:	bf18      	it	ne
 80011b4:	2001      	movne	r0, #1
 80011b6:	f7ff fcdb 	bl	8000b70 <_test_assert>
 80011ba:	b120      	cbz	r0, 80011c6 <rt_test_009_001_execute+0x76>
 80011bc:	f385 8811 	msr	BASEPRI, r5
}
 80011c0:	b00b      	add	sp, #44	; 0x2c
 80011c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011c6:	4606      	mov	r6, r0
 80011c8:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 80011cc:	2303      	movs	r3, #3
    chEvtUnregister(&es1, &el1);
 80011ce:	4649      	mov	r1, r9
 80011d0:	4620      	mov	r0, r4
  test_set_step(3);
 80011d2:	f8c8 3000 	str.w	r3, [r8]
    chEvtUnregister(&es1, &el1);
 80011d6:	f7ff ffa3 	bl	8001120 <chEvtUnregister>
 80011da:	f387 8811 	msr	BASEPRI, r7
 80011de:	6820      	ldr	r0, [r4, #0]
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 80011e0:	4915      	ldr	r1, [pc, #84]	; (8001238 <rt_test_009_001_execute+0xe8>)
 80011e2:	1b00      	subs	r0, r0, r4
 80011e4:	bf18      	it	ne
 80011e6:	2001      	movne	r0, #1
 80011e8:	f7ff fcc2 	bl	8000b70 <_test_assert>
 80011ec:	4605      	mov	r5, r0
 80011ee:	b120      	cbz	r0, 80011fa <rt_test_009_001_execute+0xaa>
 80011f0:	f386 8811 	msr	BASEPRI, r6
}
 80011f4:	b00b      	add	sp, #44	; 0x2c
 80011f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011fa:	f380 8811 	msr	BASEPRI, r0
  test_set_step(4);
 80011fe:	2304      	movs	r3, #4
    chEvtUnregister(&es1, &el2);
 8001200:	4669      	mov	r1, sp
 8001202:	4620      	mov	r0, r4
  test_set_step(4);
 8001204:	f8c8 3000 	str.w	r3, [r8]
    chEvtUnregister(&es1, &el2);
 8001208:	f7ff ff8a 	bl	8001120 <chEvtUnregister>
 800120c:	f387 8811 	msr	BASEPRI, r7
    test_assert_lock(!chEvtIsListeningI(&es1), "stuck listener");
 8001210:	6820      	ldr	r0, [r4, #0]
 8001212:	490a      	ldr	r1, [pc, #40]	; (800123c <rt_test_009_001_execute+0xec>)
 8001214:	1b00      	subs	r0, r0, r4
 8001216:	fab0 f080 	clz	r0, r0
 800121a:	0940      	lsrs	r0, r0, #5
 800121c:	f7ff fca8 	bl	8000b70 <_test_assert>
 8001220:	2800      	cmp	r0, #0
 8001222:	d1cb      	bne.n	80011bc <rt_test_009_001_execute+0x6c>
 8001224:	f380 8811 	msr	BASEPRI, r0
}
 8001228:	b00b      	add	sp, #44	; 0x2c
 800122a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800122e:	bf00      	nop
 8001230:	20000808 	.word	0x20000808
 8001234:	200009b0 	.word	0x200009b0
 8001238:	08008f9c 	.word	0x08008f9c
 800123c:	08008fa8 	.word	0x08008fa8
 8001240:	2000149c 	.word	0x2000149c
	...

08001250 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8001250:	4a0e      	ldr	r2, [pc, #56]	; (800128c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8001252:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <chTMStopMeasurementX+0x40>)
 8001254:	6852      	ldr	r2, [r2, #4]
 8001256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  tmp->last = (now - tmp->last) - offset;
 8001258:	6881      	ldr	r1, [r0, #8]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 800125a:	b430      	push	{r4, r5}
  tmp->last = (now - tmp->last) - offset;
 800125c:	1ad3      	subs	r3, r2, r3
  tmp->cumulative += (rttime_t)tmp->last;
 800125e:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->n++;
 8001262:	68c2      	ldr	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8001264:	1a5b      	subs	r3, r3, r1
  tmp->n++;
 8001266:	3201      	adds	r2, #1
  if (tmp->last > tmp->worst) {
 8001268:	6841      	ldr	r1, [r0, #4]
  tmp->n++;
 800126a:	60c2      	str	r2, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 800126c:	18e4      	adds	r4, r4, r3
  if (tmp->last < tmp->best) {
 800126e:	6802      	ldr	r2, [r0, #0]
  tmp->last = (now - tmp->last) - offset;
 8001270:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8001272:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8001276:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 8001278:	bf88      	it	hi
 800127a:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 800127c:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 800127e:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
 8001282:	bf38      	it	cc
 8001284:	6003      	strcc	r3, [r0, #0]
}
 8001286:	bc30      	pop	{r4, r5}
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e0001000 	.word	0xe0001000
 8001290:	200009b0 	.word	0x200009b0
	...

080012a0 <chTMStartMeasurementX>:
 80012a0:	4b01      	ldr	r3, [pc, #4]	; (80012a8 <chTMStartMeasurementX+0x8>)
 80012a2:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 80012a4:	6083      	str	r3, [r0, #8]
}
 80012a6:	4770      	bx	lr
 80012a8:	e0001000 	.word	0xe0001000
 80012ac:	00000000 	.word	0x00000000

080012b0 <chThdCreateSuspendedI>:
  tp = (thread_t *)((uint8_t *)tdp->wend -
 80012b0:	6883      	ldr	r3, [r0, #8]
  tp->wabase = tdp->wbase;
 80012b2:	6841      	ldr	r1, [r0, #4]
  REG_INSERT(tp);
 80012b4:	4a1a      	ldr	r2, [pc, #104]	; (8001320 <chThdCreateSuspendedI+0x70>)
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 80012b6:	b4f0      	push	{r4, r5, r6, r7}
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80012b8:	e9d0 7504 	ldrd	r7, r5, [r0, #16]
  tp->state     = CH_STATE_WTSTART;
 80012bc:	2602      	movs	r6, #2
  tp->wabase = tdp->wbase;
 80012be:	f843 1c2c 	str.w	r1, [r3, #-44]
  tp->refs      = (trefs_t)1;
 80012c2:	2401      	movs	r4, #1
  tp->flags     = CH_FLAG_MODE_STATIC;
 80012c4:	2100      	movs	r1, #0
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80012c6:	e943 751b 	strd	r7, r5, [r3, #-108]	; 0x6c
  return _thread_init(tp, tdp->name, tdp->prio);
 80012ca:	6805      	ldr	r5, [r0, #0]
 80012cc:	68c0      	ldr	r0, [r0, #12]
  tp->flags     = CH_FLAG_MODE_STATIC;
 80012ce:	f803 1c27 	strb.w	r1, [r3, #-39]
  tp->state     = CH_STATE_WTSTART;
 80012d2:	f803 6c28 	strb.w	r6, [r3, #-40]
  tp->refs      = (trefs_t)1;
 80012d6:	f803 4c26 	strb.w	r4, [r3, #-38]
  REG_INSERT(tp);
 80012da:	f843 2c38 	str.w	r2, [r3, #-56]
 80012de:	6954      	ldr	r4, [r2, #20]
  tp->prio      = prio;
 80012e0:	f843 0c40 	str.w	r0, [r3, #-64]
  tp->realprio  = prio;
 80012e4:	f843 0c0c 	str.w	r0, [r3, #-12]
  tp->name      = name;
 80012e8:	f843 5c30 	str.w	r5, [r3, #-48]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80012ec:	f1a3 006c 	sub.w	r0, r3, #108	; 0x6c
 80012f0:	4d0c      	ldr	r5, [pc, #48]	; (8001324 <chThdCreateSuspendedI+0x74>)
 80012f2:	f843 0c3c 	str.w	r0, [r3, #-60]
  tp->epending  = (eventmask_t)0;
 80012f6:	e943 1105 	strd	r1, r1, [r3, #-20]
  tp = (thread_t *)((uint8_t *)tdp->wend -
 80012fa:	f1a3 0048 	sub.w	r0, r3, #72	; 0x48
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80012fe:	f843 5c4c 	str.w	r5, [r3, #-76]
  queue_init(&tp->msgqueue);
 8001302:	f1a3 011c 	sub.w	r1, r3, #28
  list_init(&tp->waiting);
 8001306:	f1a3 0520 	sub.w	r5, r3, #32
  REG_INSERT(tp);
 800130a:	f843 4c34 	str.w	r4, [r3, #-52]
 800130e:	6120      	str	r0, [r4, #16]
 8001310:	6150      	str	r0, [r2, #20]
  tqp->next = (thread_t *)tqp;
 8001312:	e943 5108 	strd	r5, r1, [r3, #-32]
  tqp->prev = (thread_t *)tqp;
 8001316:	f843 1c18 	str.w	r1, [r3, #-24]
}
 800131a:	bcf0      	pop	{r4, r5, r6, r7}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	200009b0 	.word	0x200009b0
 8001324:	080002d1 	.word	0x080002d1
	...

08001330 <wakeup>:
 8001330:	2320      	movs	r3, #32
 8001332:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 8001336:	f890 3020 	ldrb.w	r3, [r0, #32]
 800133a:	2b07      	cmp	r3, #7
 800133c:	d80d      	bhi.n	800135a <wakeup+0x2a>
 800133e:	e8df f003 	tbb	[pc, r3]
 8001342:	0c27      	.short	0x0c27
 8001344:	0408230c 	.word	0x0408230c
 8001348:	080c      	.short	0x080c
    chSemFastSignalI(tp->u.wtsemp);
 800134a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 800134c:	6893      	ldr	r3, [r2, #8]
 800134e:	3301      	adds	r3, #1
 8001350:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8001352:	e9d0 3200 	ldrd	r3, r2, [r0]
 8001356:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8001358:	605a      	str	r2, [r3, #4]
static void wakeup(void *p) {
 800135a:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 800135c:	2200      	movs	r2, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 800135e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  } while (cp->prio >= tp->prio);
 8001362:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <wakeup+0x68>)
  tp->u.rdymsg = MSG_TIMEOUT;
 8001366:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 8001368:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 800136c:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	428a      	cmp	r2, r1
 8001372:	d2fb      	bcs.n	800136c <wakeup+0x3c>
  tp->queue.prev             = cp->queue.prev;
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	2100      	movs	r1, #0
 8001378:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 800137c:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800137e:	6058      	str	r0, [r3, #4]
 8001380:	f381 8811 	msr	BASEPRI, r1
}
 8001384:	bc10      	pop	{r4}
 8001386:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 8001388:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
    break;
 800138e:	e7e4      	b.n	800135a <wakeup+0x2a>
 8001390:	2300      	movs	r3, #0
 8001392:	f383 8811 	msr	BASEPRI, r3
 8001396:	4770      	bx	lr
 8001398:	200009b0 	.word	0x200009b0
 800139c:	00000000 	.word	0x00000000

080013a0 <chSchReadyI>:
  tp->state = CH_STATE_READY;
 80013a0:	2200      	movs	r2, #0
  } while (cp->prio >= tp->prio);
 80013a2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <chSchReadyI+0x20>)
  tp->state = CH_STATE_READY;
 80013a6:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 80013aa:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	428a      	cmp	r2, r1
 80013b0:	d2fb      	bcs.n	80013aa <chSchReadyI+0xa>
  tp->queue.prev             = cp->queue.prev;
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 80013b8:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80013ba:	6058      	str	r0, [r3, #4]
}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	200009b0 	.word	0x200009b0
	...

080013d0 <chThdDequeueNextI.constprop.0>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 80013d0:	4603      	mov	r3, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 80013d2:	6800      	ldr	r0, [r0, #0]

  if (queue_notempty(tqp)) {
 80013d4:	4283      	cmp	r3, r0
 80013d6:	d006      	beq.n	80013e6 <chThdDequeueNextI.constprop.0+0x16>
  tqp->next             = tp->queue.next;
 80013d8:	6802      	ldr	r2, [r0, #0]
 80013da:	601a      	str	r2, [r3, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 80013dc:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 80013de:	6053      	str	r3, [r2, #4]
 80013e0:	6241      	str	r1, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 80013e2:	f7ff bfdd 	b.w	80013a0 <chSchReadyI>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 80013e6:	4770      	bx	lr
	...

080013f0 <chMBPostI.constprop.0>:

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <chMBPostI.constprop.0+0x40>)
 80013f2:	7d1a      	ldrb	r2, [r3, #20]
 80013f4:	b9ca      	cbnz	r2, 800142a <chMBPostI.constprop.0+0x3a>
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 80013f6:	b570      	push	{r4, r5, r6, lr}
 */
static inline size_t chMBGetFreeCountI(const mailbox_t *mbp) {

  chDbgCheckClassI();

  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80013f8:	e9d3 6100 	ldrd	r6, r1, [r3]
 80013fc:	691a      	ldr	r2, [r3, #16]
  return (size_t)(mbp->top - mbp->buffer);
 80013fe:	1b8c      	subs	r4, r1, r6
    return MSG_RESET;
  }

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8001400:	ebb2 0fa4 	cmp.w	r2, r4, asr #2
 8001404:	d00e      	beq.n	8001424 <chMBPostI.constprop.0+0x34>
    *mbp->wrptr++ = msg;
 8001406:	689d      	ldr	r5, [r3, #8]
 8001408:	1d2c      	adds	r4, r5, #4
 800140a:	609c      	str	r4, [r3, #8]
    if (mbp->wrptr >= mbp->top) {
 800140c:	42a1      	cmp	r1, r4
    *mbp->wrptr++ = msg;
 800140e:	6028      	str	r0, [r5, #0]
      mbp->wrptr = mbp->buffer;
    }
    mbp->cnt++;
 8001410:	f102 0201 	add.w	r2, r2, #1

    /* If there is a reader waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 8001414:	4807      	ldr	r0, [pc, #28]	; (8001434 <chMBPostI.constprop.0+0x44>)
      mbp->wrptr = mbp->buffer;
 8001416:	bf98      	it	ls
 8001418:	609e      	strls	r6, [r3, #8]
    mbp->cnt++;
 800141a:	611a      	str	r2, [r3, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 800141c:	f7ff ffd8 	bl	80013d0 <chThdDequeueNextI.constprop.0>

    return MSG_OK;
 8001420:	2000      	movs	r0, #0
  }

  /* No space, immediate timeout.*/
  return MSG_TIMEOUT;
}
 8001422:	bd70      	pop	{r4, r5, r6, pc}
  return MSG_TIMEOUT;
 8001424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001428:	bd70      	pop	{r4, r5, r6, pc}
    return MSG_RESET;
 800142a:	f06f 0001 	mvn.w	r0, #1
}
 800142e:	4770      	bx	lr
 8001430:	2000084c 	.word	0x2000084c
 8001434:	2000086c 	.word	0x2000086c
	...

08001440 <chMBPostAheadI.constprop.0>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8001440:	b538      	push	{r3, r4, r5, lr}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <chMBPostAheadI.constprop.0+0x40>)
 8001444:	7d1a      	ldrb	r2, [r3, #20]
 8001446:	b9ba      	cbnz	r2, 8001478 <chMBPostAheadI.constprop.0+0x38>
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8001448:	e9d3 4500 	ldrd	r4, r5, [r3]
 800144c:	6919      	ldr	r1, [r3, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800144e:	1b2a      	subs	r2, r5, r4
    return MSG_RESET;
  }

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8001450:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
 8001454:	d00d      	beq.n	8001472 <chMBPostAheadI.constprop.0+0x32>
    if (--mbp->rdptr < mbp->buffer) {
 8001456:	68da      	ldr	r2, [r3, #12]
 8001458:	3a04      	subs	r2, #4
 800145a:	4294      	cmp	r4, r2
      mbp->rdptr = mbp->top - 1;
 800145c:	bf88      	it	hi
 800145e:	1f2a      	subhi	r2, r5, #4
 8001460:	60da      	str	r2, [r3, #12]
    }
    *mbp->rdptr = msg;
    mbp->cnt++;
 8001462:	3101      	adds	r1, #1
    *mbp->rdptr = msg;
 8001464:	6010      	str	r0, [r2, #0]

    /* If there is a reader waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 8001466:	4807      	ldr	r0, [pc, #28]	; (8001484 <chMBPostAheadI.constprop.0+0x44>)
    mbp->cnt++;
 8001468:	6119      	str	r1, [r3, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 800146a:	f7ff ffb1 	bl	80013d0 <chThdDequeueNextI.constprop.0>

    return MSG_OK;
 800146e:	2000      	movs	r0, #0
  }

  /* No space, immediate timeout.*/
  return MSG_TIMEOUT;
}
 8001470:	bd38      	pop	{r3, r4, r5, pc}
  return MSG_TIMEOUT;
 8001472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001476:	bd38      	pop	{r3, r4, r5, pc}
    return MSG_RESET;
 8001478:	f06f 0001 	mvn.w	r0, #1
}
 800147c:	bd38      	pop	{r3, r4, r5, pc}
 800147e:	bf00      	nop
 8001480:	2000084c 	.word	0x2000084c
 8001484:	2000086c 	.word	0x2000086c
	...

08001490 <chMBFetchI.constprop.0>:
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 8001490:	b538      	push	{r3, r4, r5, lr}

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <chMBFetchI.constprop.0+0x40>)
 8001494:	7d1a      	ldrb	r2, [r3, #20]
 8001496:	b9ba      	cbnz	r2, 80014c8 <chMBFetchI.constprop.0+0x38>
    return MSG_RESET;
  }

  /* Is there a message in queue? if so then fetch.*/
  if (chMBGetUsedCountI(mbp) > (size_t)0) {
 8001498:	6919      	ldr	r1, [r3, #16]
 800149a:	b191      	cbz	r1, 80014c2 <chMBFetchI.constprop.0+0x32>
    *msgp = *mbp->rdptr++;
 800149c:	68da      	ldr	r2, [r3, #12]
    if (mbp->rdptr >= mbp->top) {
 800149e:	685c      	ldr	r4, [r3, #4]
    *msgp = *mbp->rdptr++;
 80014a0:	6815      	ldr	r5, [r2, #0]
 80014a2:	3204      	adds	r2, #4
    if (mbp->rdptr >= mbp->top) {
 80014a4:	42a2      	cmp	r2, r4
    *msgp = *mbp->rdptr++;
 80014a6:	60da      	str	r2, [r3, #12]
      mbp->rdptr = mbp->buffer;
    }
    mbp->cnt--;
 80014a8:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
    *msgp = *mbp->rdptr++;
 80014ac:	6005      	str	r5, [r0, #0]
      mbp->rdptr = mbp->buffer;
 80014ae:	bf28      	it	cs
 80014b0:	681a      	ldrcs	r2, [r3, #0]

    /* If there is a writer waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qw, MSG_OK);
 80014b2:	4808      	ldr	r0, [pc, #32]	; (80014d4 <chMBFetchI.constprop.0+0x44>)
      mbp->rdptr = mbp->buffer;
 80014b4:	bf28      	it	cs
 80014b6:	60da      	strcs	r2, [r3, #12]
    mbp->cnt--;
 80014b8:	6119      	str	r1, [r3, #16]
    chThdDequeueNextI(&mbp->qw, MSG_OK);
 80014ba:	f7ff ff89 	bl	80013d0 <chThdDequeueNextI.constprop.0>

    return MSG_OK;
 80014be:	2000      	movs	r0, #0
  }

  /* No message, immediate timeout.*/
  return MSG_TIMEOUT;
}
 80014c0:	bd38      	pop	{r3, r4, r5, pc}
  return MSG_TIMEOUT;
 80014c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80014c6:	bd38      	pop	{r3, r4, r5, pc}
    return MSG_RESET;
 80014c8:	f06f 0001 	mvn.w	r0, #1
}
 80014cc:	bd38      	pop	{r3, r4, r5, pc}
 80014ce:	bf00      	nop
 80014d0:	2000084c 	.word	0x2000084c
 80014d4:	20000864 	.word	0x20000864
	...

080014e0 <chThdDequeueAllI.constprop.0>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 80014e0:	b538      	push	{r3, r4, r5, lr}
 80014e2:	4604      	mov	r4, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 80014e4:	6800      	ldr	r0, [r0, #0]

  while (queue_notempty(tqp)) {
 80014e6:	4284      	cmp	r4, r0
 80014e8:	d00a      	beq.n	8001500 <chThdDequeueAllI.constprop.0+0x20>
  tp->u.rdymsg = msg;
 80014ea:	f06f 0501 	mvn.w	r5, #1
  tqp->next             = tp->queue.next;
 80014ee:	6803      	ldr	r3, [r0, #0]
 80014f0:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80014f2:	605c      	str	r4, [r3, #4]
 80014f4:	6245      	str	r5, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 80014f6:	f7ff ff53 	bl	80013a0 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 80014fa:	6820      	ldr	r0, [r4, #0]
 80014fc:	42a0      	cmp	r0, r4
 80014fe:	d1f6      	bne.n	80014ee <chThdDequeueAllI.constprop.0+0xe>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8001500:	bd38      	pop	{r3, r4, r5, pc}
 8001502:	bf00      	nop
	...

08001510 <chCondSignalI.constprop.0>:
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <chCondSignalI.constprop.0+0x18>)
 8001512:	6818      	ldr	r0, [r3, #0]
void chCondSignalI(condition_variable_t *cp) {

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->queue)) {
 8001514:	4298      	cmp	r0, r3
 8001516:	d006      	beq.n	8001526 <chCondSignalI.constprop.0+0x16>
  tqp->next             = tp->queue.next;
 8001518:	6802      	ldr	r2, [r0, #0]
 800151a:	601a      	str	r2, [r3, #0]
    thread_t *tp = queue_fifo_remove(&cp->queue);
    tp->u.rdymsg = MSG_OK;
 800151c:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 800151e:	6053      	str	r3, [r2, #4]
 8001520:	6241      	str	r1, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8001522:	f7ff bf3d 	b.w	80013a0 <chSchReadyI>
  }
}
 8001526:	4770      	bx	lr
 8001528:	20000800 	.word	0x20000800
 800152c:	00000000 	.word	0x00000000

08001530 <chEvtSignalI>:
  tp->epending |= events;
 8001530:	6b42      	ldr	r2, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001532:	f890 3020 	ldrb.w	r3, [r0, #32]
  tp->epending |= events;
 8001536:	4311      	orrs	r1, r2
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001538:	2b0a      	cmp	r3, #10
  tp->epending |= events;
 800153a:	6341      	str	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 800153c:	d009      	beq.n	8001552 <chEvtSignalI+0x22>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800153e:	2b0b      	cmp	r3, #11
 8001540:	d000      	beq.n	8001544 <chEvtSignalI+0x14>
}
 8001542:	4770      	bx	lr
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8001544:	6a43      	ldr	r3, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8001546:	438b      	bics	r3, r1
 8001548:	d1fb      	bne.n	8001542 <chEvtSignalI+0x12>
    tp->u.rdymsg = MSG_OK;
 800154a:	2300      	movs	r3, #0
 800154c:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 800154e:	f7ff bf27 	b.w	80013a0 <chSchReadyI>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8001552:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001554:	4219      	tst	r1, r3
 8001556:	d1f8      	bne.n	800154a <chEvtSignalI+0x1a>
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	0000      	movs	r0, r0
	...

08001560 <chEvtBroadcastFlagsI>:
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001560:	b570      	push	{r4, r5, r6, lr}
  elp = esp->next;
 8001562:	6804      	ldr	r4, [r0, #0]
  while (elp != (event_listener_t *)esp) {
 8001564:	42a0      	cmp	r0, r4
 8001566:	d00f      	beq.n	8001588 <chEvtBroadcastFlagsI+0x28>
 8001568:	4606      	mov	r6, r0
 800156a:	460d      	mov	r5, r1
    elp->flags |= flags;
 800156c:	68e3      	ldr	r3, [r4, #12]
 800156e:	432b      	orrs	r3, r5
 8001570:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8001572:	b115      	cbz	r5, 800157a <chEvtBroadcastFlagsI+0x1a>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8001574:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8001576:	421d      	tst	r5, r3
 8001578:	d003      	beq.n	8001582 <chEvtBroadcastFlagsI+0x22>
      chEvtSignalI(elp->listener, elp->events);
 800157a:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 800157e:	f7ff ffd7 	bl	8001530 <chEvtSignalI>
    elp = elp->next;
 8001582:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8001584:	42a6      	cmp	r6, r4
 8001586:	d1f1      	bne.n	800156c <chEvtBroadcastFlagsI+0xc>
}
 8001588:	bd70      	pop	{r4, r5, r6, pc}
 800158a:	bf00      	nop
 800158c:	0000      	movs	r0, r0
	...

08001590 <chMtxUnlockS>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <chMtxUnlockS+0x48>)
void chMtxUnlockS(mutex_t *mp) {
 8001592:	4601      	mov	r1, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 8001594:	6800      	ldr	r0, [r0, #0]
 8001596:	b430      	push	{r4, r5}
  thread_t *ctp = currp;
 8001598:	699d      	ldr	r5, [r3, #24]
    chDbgAssert(ctp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 800159a:	68cb      	ldr	r3, [r1, #12]
 800159c:	63ab      	str	r3, [r5, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 800159e:	4288      	cmp	r0, r1
 80015a0:	d016      	beq.n	80015d0 <chMtxUnlockS+0x40>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 80015a2:	6bec      	ldr	r4, [r5, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 80015a4:	b14b      	cbz	r3, 80015ba <chMtxUnlockS+0x2a>
 80015a6:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d003      	beq.n	80015b4 <chMtxUnlockS+0x24>
 80015ac:	6892      	ldr	r2, [r2, #8]
 80015ae:	4294      	cmp	r4, r2
 80015b0:	bf38      	it	cc
 80015b2:	4614      	movcc	r4, r2
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 80015b4:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f5      	bne.n	80015a6 <chMtxUnlockS+0x16>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 80015ba:	6b82      	ldr	r2, [r0, #56]	; 0x38
  tqp->next             = tp->queue.next;
 80015bc:	6803      	ldr	r3, [r0, #0]
      ctp->prio = newprio;
 80015be:	60ac      	str	r4, [r5, #8]
 80015c0:	600b      	str	r3, [r1, #0]
      mp->owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 80015c2:	bc30      	pop	{r4, r5}
  tqp->next->queue.prev = (thread_t *)tqp;
 80015c4:	6059      	str	r1, [r3, #4]
      mp->next = tp->mtxlist;
 80015c6:	e9c1 0202 	strd	r0, r2, [r1, #8]
      tp->mtxlist = mp;
 80015ca:	6381      	str	r1, [r0, #56]	; 0x38
      (void) chSchReadyI(tp);
 80015cc:	f7ff bee8 	b.w	80013a0 <chSchReadyI>
      mp->owner = NULL;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	bc30      	pop	{r4, r5}
      mp->owner = NULL;
 80015d4:	6083      	str	r3, [r0, #8]
}
 80015d6:	4770      	bx	lr
 80015d8:	200009b0 	.word	0x200009b0
 80015dc:	00000000 	.word	0x00000000

080015e0 <chSemSignalI>:
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (++sp->cnt <= (cnt_t)0) {
 80015e0:	6883      	ldr	r3, [r0, #8]
 80015e2:	3301      	adds	r3, #1
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	6083      	str	r3, [r0, #8]
 80015e8:	dd00      	ble.n	80015ec <chSemSignalI+0xc>
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->queue);
    tp->u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
  }
}
 80015ea:	4770      	bx	lr
  thread_t *tp = tqp->next;
 80015ec:	6803      	ldr	r3, [r0, #0]
  tqp->next             = tp->queue.next;
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	6002      	str	r2, [r0, #0]
    tp->u.rdymsg = MSG_OK;
 80015f2:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 80015f4:	6050      	str	r0, [r2, #4]
    (void) chSchReadyI(tp);
 80015f6:	4618      	mov	r0, r3
    tp->u.rdymsg = MSG_OK;
 80015f8:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 80015fa:	f7ff bed1 	b.w	80013a0 <chSchReadyI>
 80015fe:	bf00      	nop

08001600 <chCacheReleaseObjectI>:
 * @param[in] objp      pointer to the @p oc_object_t structure
 *
 * @iclass
 */
void chCacheReleaseObjectI(objects_cache_t *ocp,
                           oc_object_t *objp) {
 8001600:	b538      	push	{r3, r4, r5, lr}
  chDbgAssert(chSemGetCounterI(&objp->obj_sem) <= (cnt_t)0,
              "semaphore counter greater than 0");

  /* If some thread is waiting for this specific buffer then it is
     handed directly without going through the LRU.*/
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 8001602:	6a0b      	ldr	r3, [r1, #32]
 8001604:	2b00      	cmp	r3, #0
                           oc_object_t *objp) {
 8001606:	460c      	mov	r4, r1
    /* Clearing all flags except those that are still meaningful, note,
       OC_FLAG_NOTSYNC and OC_FLAG_LAZYWRITE are passed, the other thread
       will handle them.*/
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 8001608:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 800160a:	db2f      	blt.n	800166c <chCacheReleaseObjectI+0x6c>
    return;
  }

  /* If the object specifies OC_FLAG_NOTSYNC then it must be invalidated
     and removed from the hash table.*/
  if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 800160c:	0719      	lsls	r1, r3, #28
 800160e:	d414      	bmi.n	800163a <chCacheReleaseObjectI+0x3a>
    objp->obj_key   = 0U;
    objp->obj_flags = OC_FLAG_INLRU;
  }
  else {
    /* LRU insertion point depends on the OC_FLAG_FORGET flag.*/
    if ((objp->obj_flags & OC_FLAG_FORGET) == 0U) {
 8001610:	069a      	lsls	r2, r3, #26
 8001612:	d423      	bmi.n	800165c <chCacheReleaseObjectI+0x5c>
      /* Placing it on head.*/
      LRU_INSERT_HEAD(ocp, objp);
 8001614:	69c2      	ldr	r2, [r0, #28]
 8001616:	60a2      	str	r2, [r4, #8]
 8001618:	f100 0114 	add.w	r1, r0, #20
 800161c:	60e1      	str	r1, [r4, #12]
 800161e:	60d4      	str	r4, [r2, #12]
 8001620:	61c4      	str	r4, [r0, #28]
    }
    else {
      /* Low priority data, placing it on tail.*/
      LRU_INSERT_TAIL(ocp, objp);
    }
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_LAZYWRITE;
 8001622:	f003 0312 	and.w	r3, r3, #18
    objp->obj_flags |= OC_FLAG_INLRU;
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6263      	str	r3, [r4, #36]	; 0x24
  }

  /* Increasing the LRU counter semaphore.*/
  chSemSignalI(&ocp->lru_sem);
 800162c:	3030      	adds	r0, #48	; 0x30
 800162e:	f7ff ffd7 	bl	80015e0 <chSemSignalI>
 8001632:	6a23      	ldr	r3, [r4, #32]
 8001634:	3301      	adds	r3, #1
 8001636:	6223      	str	r3, [r4, #32]

  /* Releasing the object, we know there are no threads waiting so
     using the "fast" signal variant.*/
  chSemFastSignalI(&objp->obj_sem);
}
 8001638:	bd38      	pop	{r3, r4, r5, pc}
    HASH_REMOVE(objp);
 800163a:	e9d4 2500 	ldrd	r2, r5, [r4]
    LRU_INSERT_TAIL(ocp, objp);
 800163e:	6a01      	ldr	r1, [r0, #32]
    HASH_REMOVE(objp);
 8001640:	602a      	str	r2, [r5, #0]
    LRU_INSERT_TAIL(ocp, objp);
 8001642:	f100 0314 	add.w	r3, r0, #20
    HASH_REMOVE(objp);
 8001646:	6055      	str	r5, [r2, #4]
    objp->obj_group = 0U;
 8001648:	2200      	movs	r2, #0
    objp->obj_flags = OC_FLAG_INLRU;
 800164a:	2501      	movs	r5, #1
    LRU_INSERT_TAIL(ocp, objp);
 800164c:	e9c4 3102 	strd	r3, r1, [r4, #8]
 8001650:	608c      	str	r4, [r1, #8]
 8001652:	6204      	str	r4, [r0, #32]
    objp->obj_key   = 0U;
 8001654:	e9c4 2204 	strd	r2, r2, [r4, #16]
    objp->obj_flags = OC_FLAG_INLRU;
 8001658:	6265      	str	r5, [r4, #36]	; 0x24
 800165a:	e7e7      	b.n	800162c <chCacheReleaseObjectI+0x2c>
      LRU_INSERT_TAIL(ocp, objp);
 800165c:	6a02      	ldr	r2, [r0, #32]
 800165e:	60e2      	str	r2, [r4, #12]
 8001660:	f100 0114 	add.w	r1, r0, #20
 8001664:	60a1      	str	r1, [r4, #8]
 8001666:	6094      	str	r4, [r2, #8]
 8001668:	6204      	str	r4, [r0, #32]
 800166a:	e7da      	b.n	8001622 <chCacheReleaseObjectI+0x22>
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 800166c:	f003 031a 	and.w	r3, r3, #26
 8001670:	624b      	str	r3, [r1, #36]	; 0x24
    chSemSignalI(&objp->obj_sem);
 8001672:	f101 0018 	add.w	r0, r1, #24
}
 8001676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    chSemSignalI(&objp->obj_sem);
 800167a:	f7ff bfb1 	b.w	80015e0 <chSemSignalI>
 800167e:	bf00      	nop

08001680 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8001680:	b410      	push	{r4}
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8001682:	4a1e      	ldr	r2, [pc, #120]	; (80016fc <chVTDoResetI+0x7c>)
 8001684:	69d1      	ldr	r1, [r2, #28]
void chVTDoResetI(virtual_timer_t *vtp) {
 8001686:	b083      	sub	sp, #12
  if (ch.vtlist.next != vtp) {
 8001688:	4281      	cmp	r1, r0
void chVTDoResetI(virtual_timer_t *vtp) {
 800168a:	9001      	str	r0, [sp, #4]
  if (ch.vtlist.next != vtp) {
 800168c:	d011      	beq.n	80016b2 <chVTDoResetI+0x32>
 800168e:	4603      	mov	r3, r0
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8001690:	e9d0 1000 	ldrd	r1, r0, [r0]
 8001694:	6001      	str	r1, [r0, #0]
    vtp->next->prev = vtp->prev;
 8001696:	6819      	ldr	r1, [r3, #0]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8001698:	321c      	adds	r2, #28
    vtp->func = NULL;
 800169a:	2400      	movs	r4, #0
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800169c:	4291      	cmp	r1, r2
    vtp->next->prev = vtp->prev;
 800169e:	6048      	str	r0, [r1, #4]
    vtp->func = NULL;
 80016a0:	60dc      	str	r4, [r3, #12]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80016a2:	d003      	beq.n	80016ac <chVTDoResetI+0x2c>
      vtp->next->delta += vtp->delta;
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	688b      	ldr	r3, [r1, #8]
 80016a8:	4413      	add	r3, r2
 80016aa:	608b      	str	r3, [r1, #8]
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 80016ac:	b003      	add	sp, #12
 80016ae:	bc10      	pop	{r4}
 80016b0:	4770      	bx	lr
  ch.vtlist.next = vtp->next;
 80016b2:	4610      	mov	r0, r2
 80016b4:	680b      	ldr	r3, [r1, #0]
 80016b6:	f840 3f1c 	str.w	r3, [r0, #28]!
  vtp->func = NULL;
 80016ba:	2400      	movs	r4, #0
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80016bc:	4283      	cmp	r3, r0
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 80016be:	6058      	str	r0, [r3, #4]
  vtp->func = NULL;
 80016c0:	60cc      	str	r4, [r1, #12]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80016c2:	d016      	beq.n	80016f2 <chVTDoResetI+0x72>
  ch.vtlist.next->delta += vtp->delta;
 80016c4:	688c      	ldr	r4, [r1, #8]
 80016c6:	6899      	ldr	r1, [r3, #8]
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 80016c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 80016ca:	440c      	add	r4, r1
 80016cc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80016d0:	609c      	str	r4, [r3, #8]
 80016d2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80016d4:	1a99      	subs	r1, r3, r2
  if (nowdelta >= ch.vtlist.next->delta) {
 80016d6:	428c      	cmp	r4, r1
 80016d8:	d9e8      	bls.n	80016ac <chVTDoResetI+0x2c>
  delta = ch.vtlist.next->delta - nowdelta;
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	4423      	add	r3, r4
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 80016de:	2b01      	cmp	r3, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 80016e0:	bf98      	it	ls
 80016e2:	1c8c      	addls	r4, r1, #2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80016e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 80016e8:	4422      	add	r2, r4
 80016ea:	635a      	str	r2, [r3, #52]	; 0x34
}
 80016ec:	b003      	add	sp, #12
 80016ee:	bc10      	pop	{r4}
 80016f0:	4770      	bx	lr
  STM32_ST_TIM->DIER = 0U;
 80016f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016f6:	60dc      	str	r4, [r3, #12]
    return;
 80016f8:	e7d8      	b.n	80016ac <chVTDoResetI+0x2c>
 80016fa:	bf00      	nop
 80016fc:	200009b0 	.word	0x200009b0

08001700 <chVTDoSetI>:
                vtfunc_t vtfunc, void *par) {
 8001700:	b4f0      	push	{r4, r5, r6, r7}
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001702:	4d1f      	ldr	r5, [pc, #124]	; (8001780 <chVTDoSetI+0x80>)
 8001704:	462f      	mov	r7, r5
 8001706:	2902      	cmp	r1, #2
 8001708:	f857 4f1c 	ldr.w	r4, [r7, #28]!
  return (systime_t)STM32_ST_TIM->CNT;
 800170c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8001710:	bf38      	it	cc
 8001712:	2102      	movcc	r1, #2
 8001714:	42bc      	cmp	r4, r7
  vtp->par = par;
 8001716:	e9c0 2303 	strd	r2, r3, [r0, #12]
 800171a:	6a73      	ldr	r3, [r6, #36]	; 0x24
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800171c:	d022      	beq.n	8001764 <chVTDoSetI+0x64>
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 800171e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  return (sysinterval_t)((systime_t)(end - start));
 8001720:	1a9b      	subs	r3, r3, r2
 8001722:	18c9      	adds	r1, r1, r3
    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8001724:	d216      	bcs.n	8001754 <chVTDoSetI+0x54>
    else if (delta < p->delta) {
 8001726:	68a3      	ldr	r3, [r4, #8]
 8001728:	428b      	cmp	r3, r1
 800172a:	d903      	bls.n	8001734 <chVTDoSetI+0x34>
 800172c:	e017      	b.n	800175e <chVTDoSetI+0x5e>
    p = p->next;
 800172e:	6824      	ldr	r4, [r4, #0]
    delta -= p->delta;
 8001730:	1ac9      	subs	r1, r1, r3
  while (p->delta < delta) {
 8001732:	68a3      	ldr	r3, [r4, #8]
 8001734:	428b      	cmp	r3, r1
 8001736:	d3fa      	bcc.n	800172e <chVTDoSetI+0x2e>
  vtp->prev = vtp->next->prev;
 8001738:	6863      	ldr	r3, [r4, #4]
 800173a:	e9c0 4300 	strd	r4, r3, [r0]
  vtp->prev->next = vtp;
 800173e:	6018      	str	r0, [r3, #0]
  p->prev = vtp;
 8001740:	6060      	str	r0, [r4, #4]
  vtp->delta = delta;
 8001742:	6081      	str	r1, [r0, #8]
  p->delta -= delta;
 8001744:	68a3      	ldr	r3, [r4, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8001746:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  p->delta -= delta;
 800174a:	1a59      	subs	r1, r3, r1
 800174c:	60a1      	str	r1, [r4, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 800174e:	626a      	str	r2, [r5, #36]	; 0x24
}
 8001750:	bcf0      	pop	{r4, r5, r6, r7}
 8001752:	4770      	bx	lr
      delta -= p->delta;
 8001754:	68a2      	ldr	r2, [r4, #8]
      p = p->next;
 8001756:	6824      	ldr	r4, [r4, #0]
      delta -= p->delta;
 8001758:	1a89      	subs	r1, r1, r2
  while (p->delta < delta) {
 800175a:	68a3      	ldr	r3, [r4, #8]
 800175c:	e7ea      	b.n	8001734 <chVTDoSetI+0x34>
  return systime + (systime_t)interval;
 800175e:	440a      	add	r2, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001760:	6372      	str	r2, [r6, #52]	; 0x34
 8001762:	e7e7      	b.n	8001734 <chVTDoSetI+0x34>
      ch.vtlist.lasttime = now;
 8001764:	62ab      	str	r3, [r5, #40]	; 0x28
 8001766:	18cf      	adds	r7, r1, r3
  STM32_ST_TIM->SR     = 0;
 8001768:	2200      	movs	r2, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800176a:	2302      	movs	r3, #2
      ch.vtlist.prev = vtp;
 800176c:	e9c5 0007 	strd	r0, r0, [r5, #28]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8001770:	e9c0 4400 	strd	r4, r4, [r0]
      vtp->delta = delay;
 8001774:	6081      	str	r1, [r0, #8]
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001776:	6377      	str	r7, [r6, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8001778:	6132      	str	r2, [r6, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800177a:	60f3      	str	r3, [r6, #12]
 800177c:	e7e8      	b.n	8001750 <chVTDoSetI+0x50>
 800177e:	bf00      	nop
 8001780:	200009b0 	.word	0x200009b0
	...

08001790 <chSysGetStatusAndLockX.part.0>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001790:	f3ef 8305 	mrs	r3, IPSR
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001794:	2320      	movs	r3, #32
 8001796:	f383 8811 	msr	BASEPRI, r3
    else {
      chSysLock();
    }
  }
  return sts;
}
 800179a:	4770      	bx	lr
 800179c:	0000      	movs	r0, r0
	...

080017a0 <chSysIntegrityCheckI>:
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 80017a0:	07c2      	lsls	r2, r0, #31
bool chSysIntegrityCheckI(unsigned testmask) {
 80017a2:	b410      	push	{r4}
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 80017a4:	d512      	bpl.n	80017cc <chSysIntegrityCheckI+0x2c>
    tp = ch.rlist.queue.next;
 80017a6:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <chSysIntegrityCheckI+0xb0>)
 80017a8:	6819      	ldr	r1, [r3, #0]
    while (tp != (thread_t *)&ch.rlist.queue) {
 80017aa:	4299      	cmp	r1, r3
 80017ac:	d043      	beq.n	8001836 <chSysIntegrityCheckI+0x96>
    n = (cnt_t)0;
 80017ae:	2200      	movs	r2, #0
      tp = tp->queue.next;
 80017b0:	6809      	ldr	r1, [r1, #0]
    while (tp != (thread_t *)&ch.rlist.queue) {
 80017b2:	4299      	cmp	r1, r3
      n++;
 80017b4:	f102 0201 	add.w	r2, r2, #1
    while (tp != (thread_t *)&ch.rlist.queue) {
 80017b8:	d1fa      	bne.n	80017b0 <chSysIntegrityCheckI+0x10>
    tp = ch.rlist.queue.prev;
 80017ba:	684c      	ldr	r4, [r1, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 80017bc:	428c      	cmp	r4, r1
 80017be:	d037      	beq.n	8001830 <chSysIntegrityCheckI+0x90>
      tp = tp->queue.prev;
 80017c0:	6864      	ldr	r4, [r4, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 80017c2:	429c      	cmp	r4, r3
      n--;
 80017c4:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
    while (tp != (thread_t *)&ch.rlist.queue) {
 80017c8:	d1fa      	bne.n	80017c0 <chSysIntegrityCheckI+0x20>
    if (n != (cnt_t)0) {
 80017ca:	bb8a      	cbnz	r2, 8001830 <chSysIntegrityCheckI+0x90>
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
 80017cc:	0783      	lsls	r3, r0, #30
 80017ce:	d514      	bpl.n	80017fa <chSysIntegrityCheckI+0x5a>
    vtp = ch.vtlist.next;
 80017d0:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <chSysIntegrityCheckI+0xb0>)
 80017d2:	461c      	mov	r4, r3
 80017d4:	f854 1f1c 	ldr.w	r1, [r4, #28]!
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80017d8:	42a1      	cmp	r1, r4
 80017da:	d032      	beq.n	8001842 <chSysIntegrityCheckI+0xa2>
    n = (cnt_t)0;
 80017dc:	2200      	movs	r2, #0
      vtp = vtp->next;
 80017de:	6809      	ldr	r1, [r1, #0]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80017e0:	42a1      	cmp	r1, r4
      n++;
 80017e2:	f102 0201 	add.w	r2, r2, #1
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80017e6:	d1fa      	bne.n	80017de <chSysIntegrityCheckI+0x3e>
    vtp = ch.vtlist.prev;
 80017e8:	6a1b      	ldr	r3, [r3, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80017ea:	428b      	cmp	r3, r1
 80017ec:	d020      	beq.n	8001830 <chSysIntegrityCheckI+0x90>
      vtp = vtp->prev;
 80017ee:	685b      	ldr	r3, [r3, #4]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80017f0:	42a3      	cmp	r3, r4
      n--;
 80017f2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80017f6:	d1fa      	bne.n	80017ee <chSysIntegrityCheckI+0x4e>
    if (n != (cnt_t)0) {
 80017f8:	b9d2      	cbnz	r2, 8001830 <chSysIntegrityCheckI+0x90>
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
 80017fa:	f010 0004 	ands.w	r0, r0, #4
 80017fe:	d015      	beq.n	800182c <chSysIntegrityCheckI+0x8c>
    tp = ch.rlist.newer;
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <chSysIntegrityCheckI+0xb0>)
 8001802:	691a      	ldr	r2, [r3, #16]
    while (tp != (thread_t *)&ch.rlist) {
 8001804:	429a      	cmp	r2, r3
    n = (cnt_t)0;
 8001806:	f04f 0000 	mov.w	r0, #0
    while (tp != (thread_t *)&ch.rlist) {
 800180a:	d004      	beq.n	8001816 <chSysIntegrityCheckI+0x76>
      tp = tp->newer;
 800180c:	6912      	ldr	r2, [r2, #16]
    while (tp != (thread_t *)&ch.rlist) {
 800180e:	429a      	cmp	r2, r3
      n++;
 8001810:	f100 0001 	add.w	r0, r0, #1
    while (tp != (thread_t *)&ch.rlist) {
 8001814:	d1fa      	bne.n	800180c <chSysIntegrityCheckI+0x6c>
    tp = ch.rlist.older;
 8001816:	695a      	ldr	r2, [r3, #20]
    while (tp != (thread_t *)&ch.rlist) {
 8001818:	429a      	cmp	r2, r3
 800181a:	d004      	beq.n	8001826 <chSysIntegrityCheckI+0x86>
      tp = tp->older;
 800181c:	6952      	ldr	r2, [r2, #20]
    while (tp != (thread_t *)&ch.rlist) {
 800181e:	429a      	cmp	r2, r3
      n--;
 8001820:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    while (tp != (thread_t *)&ch.rlist) {
 8001824:	d1fa      	bne.n	800181c <chSysIntegrityCheckI+0x7c>
    if (n != (cnt_t)0) {
 8001826:	3800      	subs	r0, #0
 8001828:	bf18      	it	ne
 800182a:	2001      	movne	r0, #1
}
 800182c:	bc10      	pop	{r4}
 800182e:	4770      	bx	lr
      return true;
 8001830:	2001      	movs	r0, #1
}
 8001832:	bc10      	pop	{r4}
 8001834:	4770      	bx	lr
    tp = ch.rlist.queue.prev;
 8001836:	685c      	ldr	r4, [r3, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 8001838:	429c      	cmp	r4, r3
    n = (cnt_t)0;
 800183a:	bf18      	it	ne
 800183c:	2200      	movne	r2, #0
    while (tp != (thread_t *)&ch.rlist.queue) {
 800183e:	d1bf      	bne.n	80017c0 <chSysIntegrityCheckI+0x20>
 8001840:	e7c4      	b.n	80017cc <chSysIntegrityCheckI+0x2c>
    vtp = ch.vtlist.prev;
 8001842:	6a1b      	ldr	r3, [r3, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001844:	42a3      	cmp	r3, r4
    n = (cnt_t)0;
 8001846:	bf18      	it	ne
 8001848:	2200      	movne	r2, #0
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800184a:	d1d0      	bne.n	80017ee <chSysIntegrityCheckI+0x4e>
 800184c:	e7d5      	b.n	80017fa <chSysIntegrityCheckI+0x5a>
 800184e:	bf00      	nop
 8001850:	200009b0 	.word	0x200009b0
	...

08001860 <rt_test_002_001_execute>:
static void rt_test_002_001_execute(void) {
 8001860:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8001862:	4e24      	ldr	r6, [pc, #144]	; (80018f4 <rt_test_002_001_execute+0x94>)
 8001864:	2001      	movs	r0, #1
 8001866:	6030      	str	r0, [r6, #0]
 8001868:	2520      	movs	r5, #32
 800186a:	f385 8811 	msr	BASEPRI, r5
    result = chSysIntegrityCheckI(CH_INTEGRITY_RLIST);
 800186e:	f7ff ff97 	bl	80017a0 <chSysIntegrityCheckI>
 8001872:	2300      	movs	r3, #0
 8001874:	f383 8811 	msr	BASEPRI, r3
    test_assert(result == false, "ready list check failed");
 8001878:	f080 0001 	eor.w	r0, r0, #1
 800187c:	491e      	ldr	r1, [pc, #120]	; (80018f8 <rt_test_002_001_execute+0x98>)
 800187e:	b2c0      	uxtb	r0, r0
 8001880:	f7ff f976 	bl	8000b70 <_test_assert>
 8001884:	b100      	cbz	r0, 8001888 <rt_test_002_001_execute+0x28>
}
 8001886:	bd70      	pop	{r4, r5, r6, pc}
  test_set_step(2);
 8001888:	4604      	mov	r4, r0
 800188a:	2002      	movs	r0, #2
 800188c:	6030      	str	r0, [r6, #0]
 800188e:	f385 8811 	msr	BASEPRI, r5
    result = chSysIntegrityCheckI(CH_INTEGRITY_VTLIST);
 8001892:	f7ff ff85 	bl	80017a0 <chSysIntegrityCheckI>
 8001896:	f384 8811 	msr	BASEPRI, r4
    test_assert(result == false, "virtual timers list check failed");
 800189a:	f080 0001 	eor.w	r0, r0, #1
 800189e:	4917      	ldr	r1, [pc, #92]	; (80018fc <rt_test_002_001_execute+0x9c>)
 80018a0:	b2c0      	uxtb	r0, r0
 80018a2:	f7ff f965 	bl	8000b70 <_test_assert>
 80018a6:	4604      	mov	r4, r0
 80018a8:	2800      	cmp	r0, #0
 80018aa:	d1ec      	bne.n	8001886 <rt_test_002_001_execute+0x26>
  test_set_step(3);
 80018ac:	2303      	movs	r3, #3
 80018ae:	6033      	str	r3, [r6, #0]
 80018b0:	f385 8811 	msr	BASEPRI, r5
    result = chSysIntegrityCheckI(CH_INTEGRITY_REGISTRY);
 80018b4:	2004      	movs	r0, #4
 80018b6:	f7ff ff73 	bl	80017a0 <chSysIntegrityCheckI>
 80018ba:	f384 8811 	msr	BASEPRI, r4
    test_assert(result == false, "registry list check failed");
 80018be:	f080 0001 	eor.w	r0, r0, #1
 80018c2:	490f      	ldr	r1, [pc, #60]	; (8001900 <rt_test_002_001_execute+0xa0>)
 80018c4:	b2c0      	uxtb	r0, r0
 80018c6:	f7ff f953 	bl	8000b70 <_test_assert>
 80018ca:	4604      	mov	r4, r0
 80018cc:	2800      	cmp	r0, #0
 80018ce:	d1da      	bne.n	8001886 <rt_test_002_001_execute+0x26>
  test_set_step(4);
 80018d0:	2304      	movs	r3, #4
 80018d2:	6033      	str	r3, [r6, #0]
 80018d4:	f385 8811 	msr	BASEPRI, r5
    result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
 80018d8:	2008      	movs	r0, #8
 80018da:	f7ff ff61 	bl	80017a0 <chSysIntegrityCheckI>
 80018de:	f384 8811 	msr	BASEPRI, r4
    test_assert(result == false, "port layer check failed");
 80018e2:	f080 0001 	eor.w	r0, r0, #1
}
 80018e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(result == false, "port layer check failed");
 80018ea:	4906      	ldr	r1, [pc, #24]	; (8001904 <rt_test_002_001_execute+0xa4>)
 80018ec:	b2c0      	uxtb	r0, r0
 80018ee:	f7ff b93f 	b.w	8000b70 <_test_assert>
 80018f2:	bf00      	nop
 80018f4:	2000149c 	.word	0x2000149c
 80018f8:	08008fb8 	.word	0x08008fb8
 80018fc:	08008fd0 	.word	0x08008fd0
 8001900:	08008ff4 	.word	0x08008ff4
 8001904:	08009010 	.word	0x08009010
	...

08001910 <_idle_thread>:
}
 8001910:	e7fe      	b.n	8001910 <_idle_thread>
 8001912:	bf00      	nop
	...

08001920 <_ctl>:
#else
    break;
#endif
  }
  return MSG_OK;
}
 8001920:	2000      	movs	r0, #0
 8001922:	4770      	bx	lr
	...

08001930 <oslib_test_001_003_execute>:
 * <h2>Test Steps</h2>
 * - [1.3.1] Prints the configuration options settings.
 * .
 */

static void oslib_test_001_003_execute(void) {
 8001930:	b538      	push	{r3, r4, r5, lr}

  /* [1.3.1] Prints the configuration options settings.*/
  test_set_step(1);
 8001932:	4b4b      	ldr	r3, [pc, #300]	; (8001a60 <oslib_test_001_003_execute+0x130>)
  {
    test_print("--- CH_CFG_USE_MAILBOXES:               ");
    test_printn(CH_CFG_USE_MAILBOXES);
    test_println("");
 8001934:	4c4b      	ldr	r4, [pc, #300]	; (8001a64 <oslib_test_001_003_execute+0x134>)
    test_print("--- CH_CFG_USE_MAILBOXES:               ");
 8001936:	484c      	ldr	r0, [pc, #304]	; (8001a68 <oslib_test_001_003_execute+0x138>)
  test_set_step(1);
 8001938:	2501      	movs	r5, #1
 800193a:	601d      	str	r5, [r3, #0]
    test_print("--- CH_CFG_USE_MAILBOXES:               ");
 800193c:	f7ff fa80 	bl	8000e40 <test_print>
void test_printn(uint32_t n) {
 8001940:	4628      	mov	r0, r5
 8001942:	f7ff f97d 	bl	8000c40 <test_printn.part.0>
    test_println("");
 8001946:	4620      	mov	r0, r4
 8001948:	f7ff fa5a 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_USE_MEMCORE:                 ");
 800194c:	4847      	ldr	r0, [pc, #284]	; (8001a6c <oslib_test_001_003_execute+0x13c>)
 800194e:	f7ff fa77 	bl	8000e40 <test_print>
 8001952:	4628      	mov	r0, r5
 8001954:	f7ff f974 	bl	8000c40 <test_printn.part.0>
    test_printn(CH_CFG_USE_MEMCORE);
    test_println("");
 8001958:	4620      	mov	r0, r4
 800195a:	f7ff fa51 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_USE_HEAP:                    ");
 800195e:	4844      	ldr	r0, [pc, #272]	; (8001a70 <oslib_test_001_003_execute+0x140>)
 8001960:	f7ff fa6e 	bl	8000e40 <test_print>
 8001964:	4628      	mov	r0, r5
 8001966:	f7ff f96b 	bl	8000c40 <test_printn.part.0>
    test_printn(CH_CFG_USE_HEAP);
    test_println("");
 800196a:	4620      	mov	r0, r4
 800196c:	f7ff fa48 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_USE_MEMPOOLS:                ");
 8001970:	4840      	ldr	r0, [pc, #256]	; (8001a74 <oslib_test_001_003_execute+0x144>)
 8001972:	f7ff fa65 	bl	8000e40 <test_print>
 8001976:	4628      	mov	r0, r5
 8001978:	f7ff f962 	bl	8000c40 <test_printn.part.0>
    test_printn(CH_CFG_USE_MEMPOOLS);
    test_println("");
 800197c:	4620      	mov	r0, r4
 800197e:	f7ff fa3f 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_USE_OBJ_FIFOS:               ");
 8001982:	483d      	ldr	r0, [pc, #244]	; (8001a78 <oslib_test_001_003_execute+0x148>)
 8001984:	f7ff fa5c 	bl	8000e40 <test_print>
 8001988:	4628      	mov	r0, r5
 800198a:	f7ff f959 	bl	8000c40 <test_printn.part.0>
    test_printn(CH_CFG_USE_OBJ_FIFOS);
    test_println("");
 800198e:	4620      	mov	r0, r4
 8001990:	f7ff fa36 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_USE_PIPES:                   ");
 8001994:	4839      	ldr	r0, [pc, #228]	; (8001a7c <oslib_test_001_003_execute+0x14c>)
 8001996:	f7ff fa53 	bl	8000e40 <test_print>
 800199a:	4628      	mov	r0, r5
 800199c:	f7ff f950 	bl	8000c40 <test_printn.part.0>
    test_printn(CH_CFG_USE_PIPES);
    test_println("");
 80019a0:	4620      	mov	r0, r4
 80019a2:	f7ff fa2d 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_USE_OBJ_CACHES:              ");
 80019a6:	4836      	ldr	r0, [pc, #216]	; (8001a80 <oslib_test_001_003_execute+0x150>)
 80019a8:	f7ff fa4a 	bl	8000e40 <test_print>
 80019ac:	4628      	mov	r0, r5
 80019ae:	f7ff f947 	bl	8000c40 <test_printn.part.0>
    test_printn(CH_CFG_USE_OBJ_CACHES);
    test_println("");
 80019b2:	4620      	mov	r0, r4
 80019b4:	f7ff fa24 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_USE_DELEGATES:               ");
 80019b8:	4832      	ldr	r0, [pc, #200]	; (8001a84 <oslib_test_001_003_execute+0x154>)
 80019ba:	f7ff fa41 	bl	8000e40 <test_print>
 80019be:	4628      	mov	r0, r5
 80019c0:	f7ff f93e 	bl	8000c40 <test_printn.part.0>
    test_printn(CH_CFG_USE_DELEGATES);
    test_println("");
 80019c4:	4620      	mov	r0, r4
 80019c6:	f7ff fa1b 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_USE_FACTORY:                 ");
 80019ca:	482f      	ldr	r0, [pc, #188]	; (8001a88 <oslib_test_001_003_execute+0x158>)
 80019cc:	f7ff fa38 	bl	8000e40 <test_print>
 80019d0:	4628      	mov	r0, r5
 80019d2:	f7ff f935 	bl	8000c40 <test_printn.part.0>
    test_printn(CH_CFG_USE_FACTORY);
    test_println("");
 80019d6:	4620      	mov	r0, r4
 80019d8:	f7ff fa12 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_FACTORY_MAX_NAMES_LENGTH:    ");
 80019dc:	482b      	ldr	r0, [pc, #172]	; (8001a8c <oslib_test_001_003_execute+0x15c>)
 80019de:	f7ff fa2f 	bl	8000e40 <test_print>
 80019e2:	2008      	movs	r0, #8
 80019e4:	f7ff f92c 	bl	8000c40 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_MAX_NAMES_LENGTH);
    test_println("");
 80019e8:	4620      	mov	r0, r4
 80019ea:	f7ff fa09 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_FACTORY_OBJECTS_REGISTRY:    ");
 80019ee:	4828      	ldr	r0, [pc, #160]	; (8001a90 <oslib_test_001_003_execute+0x160>)
 80019f0:	f7ff fa26 	bl	8000e40 <test_print>
 80019f4:	4628      	mov	r0, r5
 80019f6:	f7ff f923 	bl	8000c40 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_OBJECTS_REGISTRY);
    test_println("");
 80019fa:	4620      	mov	r0, r4
 80019fc:	f7ff fa00 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_FACTORY_GENERIC_BUFFERS:     ");
 8001a00:	4824      	ldr	r0, [pc, #144]	; (8001a94 <oslib_test_001_003_execute+0x164>)
 8001a02:	f7ff fa1d 	bl	8000e40 <test_print>
 8001a06:	4628      	mov	r0, r5
 8001a08:	f7ff f91a 	bl	8000c40 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_GENERIC_BUFFERS);
    test_println("");
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	f7ff f9f7 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_FACTORY_SEMAPHORES:          ");
 8001a12:	4821      	ldr	r0, [pc, #132]	; (8001a98 <oslib_test_001_003_execute+0x168>)
 8001a14:	f7ff fa14 	bl	8000e40 <test_print>
 8001a18:	4628      	mov	r0, r5
 8001a1a:	f7ff f911 	bl	8000c40 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_SEMAPHORES);
    test_println("");
 8001a1e:	4620      	mov	r0, r4
 8001a20:	f7ff f9ee 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_FACTORY_MAILBOXES:           ");
 8001a24:	481d      	ldr	r0, [pc, #116]	; (8001a9c <oslib_test_001_003_execute+0x16c>)
 8001a26:	f7ff fa0b 	bl	8000e40 <test_print>
 8001a2a:	4628      	mov	r0, r5
 8001a2c:	f7ff f908 	bl	8000c40 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_MAILBOXES);
    test_println("");
 8001a30:	4620      	mov	r0, r4
 8001a32:	f7ff f9e5 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_FACTORY_OBJ_FIFOS:           ");
 8001a36:	481a      	ldr	r0, [pc, #104]	; (8001aa0 <oslib_test_001_003_execute+0x170>)
 8001a38:	f7ff fa02 	bl	8000e40 <test_print>
 8001a3c:	4628      	mov	r0, r5
 8001a3e:	f7ff f8ff 	bl	8000c40 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_OBJ_FIFOS);
    test_println("");
 8001a42:	4620      	mov	r0, r4
 8001a44:	f7ff f9dc 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_FACTORY_PIPES:               ");
 8001a48:	4816      	ldr	r0, [pc, #88]	; (8001aa4 <oslib_test_001_003_execute+0x174>)
 8001a4a:	f7ff f9f9 	bl	8000e40 <test_print>
 8001a4e:	4628      	mov	r0, r5
 8001a50:	f7ff f8f6 	bl	8000c40 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_PIPES);
    test_println("");
 8001a54:	4620      	mov	r0, r4
  }
  test_end_step(1);
}
 8001a56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 8001a5a:	f7ff b9d1 	b.w	8000e00 <test_println>
 8001a5e:	bf00      	nop
 8001a60:	2000149c 	.word	0x2000149c
 8001a64:	08009aec 	.word	0x08009aec
 8001a68:	08009028 	.word	0x08009028
 8001a6c:	08009054 	.word	0x08009054
 8001a70:	08009080 	.word	0x08009080
 8001a74:	080090ac 	.word	0x080090ac
 8001a78:	080090d8 	.word	0x080090d8
 8001a7c:	08009104 	.word	0x08009104
 8001a80:	08009130 	.word	0x08009130
 8001a84:	0800915c 	.word	0x0800915c
 8001a88:	08009188 	.word	0x08009188
 8001a8c:	080091b4 	.word	0x080091b4
 8001a90:	080091e0 	.word	0x080091e0
 8001a94:	0800920c 	.word	0x0800920c
 8001a98:	08009238 	.word	0x08009238
 8001a9c:	08009264 	.word	0x08009264
 8001aa0:	08009290 	.word	0x08009290
 8001aa4:	080092bc 	.word	0x080092bc
	...

08001ab0 <oslib_test_001_002_execute>:
static void oslib_test_001_002_execute(void) {
 8001ab0:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 8001ab2:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <oslib_test_001_002_execute+0x68>)
    test_println("--- Product:                            ChibiOS/LIB");
 8001ab4:	4819      	ldr	r0, [pc, #100]	; (8001b1c <oslib_test_001_002_execute+0x6c>)
    test_println("");
 8001ab6:	4c1a      	ldr	r4, [pc, #104]	; (8001b20 <oslib_test_001_002_execute+0x70>)
  test_set_step(1);
 8001ab8:	2501      	movs	r5, #1
 8001aba:	601d      	str	r5, [r3, #0]
    test_println("--- Product:                            ChibiOS/LIB");
 8001abc:	f7ff f9a0 	bl	8000e00 <test_println>
    test_print("--- Stable Flag:                        ");
 8001ac0:	4818      	ldr	r0, [pc, #96]	; (8001b24 <oslib_test_001_002_execute+0x74>)
 8001ac2:	f7ff f9bd 	bl	8000e40 <test_print>
 8001ac6:	4628      	mov	r0, r5
 8001ac8:	f7ff f8ba 	bl	8000c40 <test_printn.part.0>
    test_println("");
 8001acc:	4620      	mov	r0, r4
 8001ace:	f7ff f997 	bl	8000e00 <test_println>
    test_print("--- Version String:                     ");
 8001ad2:	4815      	ldr	r0, [pc, #84]	; (8001b28 <oslib_test_001_002_execute+0x78>)
 8001ad4:	f7ff f9b4 	bl	8000e40 <test_print>
    test_println(CH_OSLIB_VERSION);
 8001ad8:	4814      	ldr	r0, [pc, #80]	; (8001b2c <oslib_test_001_002_execute+0x7c>)
 8001ada:	f7ff f991 	bl	8000e00 <test_println>
    test_print("--- Major Number:                       ");
 8001ade:	4814      	ldr	r0, [pc, #80]	; (8001b30 <oslib_test_001_002_execute+0x80>)
 8001ae0:	f7ff f9ae 	bl	8000e40 <test_print>
 8001ae4:	4628      	mov	r0, r5
 8001ae6:	f7ff f8ab 	bl	8000c40 <test_printn.part.0>
    test_println("");
 8001aea:	4620      	mov	r0, r4
 8001aec:	f7ff f988 	bl	8000e00 <test_println>
    test_print("--- Minor Number:                       ");
 8001af0:	4810      	ldr	r0, [pc, #64]	; (8001b34 <oslib_test_001_002_execute+0x84>)
 8001af2:	f7ff f9a5 	bl	8000e40 <test_print>
 8001af6:	2002      	movs	r0, #2
 8001af8:	f7ff f8a2 	bl	8000c40 <test_printn.part.0>
    test_println("");
 8001afc:	4620      	mov	r0, r4
 8001afe:	f7ff f97f 	bl	8000e00 <test_println>
    test_print("--- Patch Number:                       ");
 8001b02:	480d      	ldr	r0, [pc, #52]	; (8001b38 <oslib_test_001_002_execute+0x88>)
 8001b04:	f7ff f99c 	bl	8000e40 <test_print>
    test_printn(CH_OSLIB_PATCH);
 8001b08:	2000      	movs	r0, #0
 8001b0a:	f7ff f8c9 	bl	8000ca0 <test_printn>
    test_println("");
 8001b0e:	4620      	mov	r0, r4
}
 8001b10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 8001b14:	f7ff b974 	b.w	8000e00 <test_println>
 8001b18:	2000149c 	.word	0x2000149c
 8001b1c:	080092e8 	.word	0x080092e8
 8001b20:	08009aec 	.word	0x08009aec
 8001b24:	0800931c 	.word	0x0800931c
 8001b28:	08009348 	.word	0x08009348
 8001b2c:	08009374 	.word	0x08009374
 8001b30:	0800937c 	.word	0x0800937c
 8001b34:	080093a8 	.word	0x080093a8
 8001b38:	080093d4 	.word	0x080093d4
 8001b3c:	00000000 	.word	0x00000000

08001b40 <rt_test_011_012_execute>:
 * - [11.12.8] The size of an event listener is printed.
 * - [11.12.9] The size of a mailbox is printed.
 * .
 */

static void rt_test_011_012_execute(void) {
 8001b40:	b570      	push	{r4, r5, r6, lr}

  /* [11.12.1] The size of the system area is printed.*/
  test_set_step(1);
 8001b42:	4d33      	ldr	r5, [pc, #204]	; (8001c10 <rt_test_011_012_execute+0xd0>)
  {
    test_print("--- System: ");
    test_printn(sizeof(ch_system_t));
    test_println(" bytes");
 8001b44:	4c33      	ldr	r4, [pc, #204]	; (8001c14 <rt_test_011_012_execute+0xd4>)
    test_print("--- System: ");
 8001b46:	4834      	ldr	r0, [pc, #208]	; (8001c18 <rt_test_011_012_execute+0xd8>)
  test_set_step(1);
 8001b48:	2301      	movs	r3, #1
 8001b4a:	602b      	str	r3, [r5, #0]
    test_print("--- System: ");
 8001b4c:	f7ff f978 	bl	8000e40 <test_print>
 8001b50:	2078      	movs	r0, #120	; 0x78
 8001b52:	f7ff f875 	bl	8000c40 <test_printn.part.0>
    test_println(" bytes");
 8001b56:	4620      	mov	r0, r4
 8001b58:	f7ff f952 	bl	8000e00 <test_println>
  }
  test_end_step(1);

  /* [11.12.2] The size of a thread structure is printed.*/
  test_set_step(2);
 8001b5c:	2302      	movs	r3, #2
  {
    test_print("--- Thread: ");
 8001b5e:	482f      	ldr	r0, [pc, #188]	; (8001c1c <rt_test_011_012_execute+0xdc>)
  test_set_step(2);
 8001b60:	602b      	str	r3, [r5, #0]
    test_print("--- Thread: ");
 8001b62:	f7ff f96d 	bl	8000e40 <test_print>
 8001b66:	2044      	movs	r0, #68	; 0x44
 8001b68:	f7ff f86a 	bl	8000c40 <test_printn.part.0>
    test_printn(sizeof(thread_t));
    test_println(" bytes");
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	f7ff f947 	bl	8000e00 <test_println>
  }
  test_end_step(2);

  /* [11.12.3] The size of a virtual timer structure is printed.*/
  test_set_step(3);
 8001b72:	2303      	movs	r3, #3
  {
    test_print("--- Timer : ");
 8001b74:	482a      	ldr	r0, [pc, #168]	; (8001c20 <rt_test_011_012_execute+0xe0>)
  test_set_step(3);
 8001b76:	602b      	str	r3, [r5, #0]
    test_print("--- Timer : ");
 8001b78:	f7ff f962 	bl	8000e40 <test_print>
 8001b7c:	2014      	movs	r0, #20
 8001b7e:	f7ff f85f 	bl	8000c40 <test_printn.part.0>
    test_printn(sizeof(virtual_timer_t));
    test_println(" bytes");
 8001b82:	4620      	mov	r0, r4
 8001b84:	f7ff f93c 	bl	8000e00 <test_println>
  }
  test_end_step(3);

  /* [11.12.4] The size of a semaphore structure is printed.*/
  test_set_step(4);
 8001b88:	2604      	movs	r6, #4
  {
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
    test_print("--- Semaph: ");
 8001b8a:	4826      	ldr	r0, [pc, #152]	; (8001c24 <rt_test_011_012_execute+0xe4>)
  test_set_step(4);
 8001b8c:	602e      	str	r6, [r5, #0]
    test_print("--- Semaph: ");
 8001b8e:	f7ff f957 	bl	8000e40 <test_print>
 8001b92:	200c      	movs	r0, #12
 8001b94:	f7ff f854 	bl	8000c40 <test_printn.part.0>
    test_printn(sizeof(semaphore_t));
    test_println(" bytes");
 8001b98:	4620      	mov	r0, r4
 8001b9a:	f7ff f931 	bl	8000e00 <test_println>
#endif
  }
  test_end_step(4);

  /* [11.12.5] The size of a mutex is printed.*/
  test_set_step(5);
 8001b9e:	2305      	movs	r3, #5
  {
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
    test_print("--- Mutex : ");
 8001ba0:	4821      	ldr	r0, [pc, #132]	; (8001c28 <rt_test_011_012_execute+0xe8>)
  test_set_step(5);
 8001ba2:	602b      	str	r3, [r5, #0]
    test_print("--- Mutex : ");
 8001ba4:	f7ff f94c 	bl	8000e40 <test_print>
 8001ba8:	2010      	movs	r0, #16
 8001baa:	f7ff f849 	bl	8000c40 <test_printn.part.0>
    test_printn(sizeof(mutex_t));
    test_println(" bytes");
 8001bae:	4620      	mov	r0, r4
 8001bb0:	f7ff f926 	bl	8000e00 <test_println>
#endif
  }
  test_end_step(5);

  /* [11.12.6] The size of a condition variable is printed.*/
  test_set_step(6);
 8001bb4:	2306      	movs	r3, #6
  {
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
    test_print("--- CondV.: ");
 8001bb6:	481d      	ldr	r0, [pc, #116]	; (8001c2c <rt_test_011_012_execute+0xec>)
  test_set_step(6);
 8001bb8:	602b      	str	r3, [r5, #0]
    test_print("--- CondV.: ");
 8001bba:	f7ff f941 	bl	8000e40 <test_print>
 8001bbe:	2008      	movs	r0, #8
 8001bc0:	f7ff f83e 	bl	8000c40 <test_printn.part.0>
    test_printn(sizeof(condition_variable_t));
    test_println(" bytes");
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	f7ff f91b 	bl	8000e00 <test_println>
#endif
  }
  test_end_step(6);

  /* [11.12.7] The size of an event source is printed.*/
  test_set_step(7);
 8001bca:	2307      	movs	r3, #7
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventS: ");
 8001bcc:	4818      	ldr	r0, [pc, #96]	; (8001c30 <rt_test_011_012_execute+0xf0>)
  test_set_step(7);
 8001bce:	602b      	str	r3, [r5, #0]
    test_print("--- EventS: ");
 8001bd0:	f7ff f936 	bl	8000e40 <test_print>
 8001bd4:	4630      	mov	r0, r6
 8001bd6:	f7ff f833 	bl	8000c40 <test_printn.part.0>
    test_printn(sizeof(event_source_t));
    test_println(" bytes");
 8001bda:	4620      	mov	r0, r4
 8001bdc:	f7ff f910 	bl	8000e00 <test_println>
#endif
  }
  test_end_step(7);

  /* [11.12.8] The size of an event listener is printed.*/
  test_set_step(8);
 8001be0:	2308      	movs	r3, #8
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventL: ");
 8001be2:	4814      	ldr	r0, [pc, #80]	; (8001c34 <rt_test_011_012_execute+0xf4>)
  test_set_step(8);
 8001be4:	602b      	str	r3, [r5, #0]
    test_print("--- EventL: ");
 8001be6:	f7ff f92b 	bl	8000e40 <test_print>
 8001bea:	2014      	movs	r0, #20
 8001bec:	f7ff f828 	bl	8000c40 <test_printn.part.0>
    test_printn(sizeof(event_listener_t));
    test_println(" bytes");
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	f7ff f905 	bl	8000e00 <test_println>
#endif
  }
  test_end_step(8);

  /* [11.12.9] The size of a mailbox is printed.*/
  test_set_step(9);
 8001bf6:	2309      	movs	r3, #9
  {
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
    test_print("--- MailB.: ");
 8001bf8:	480f      	ldr	r0, [pc, #60]	; (8001c38 <rt_test_011_012_execute+0xf8>)
  test_set_step(9);
 8001bfa:	602b      	str	r3, [r5, #0]
    test_print("--- MailB.: ");
 8001bfc:	f7ff f920 	bl	8000e40 <test_print>
 8001c00:	2028      	movs	r0, #40	; 0x28
 8001c02:	f7ff f81d 	bl	8000c40 <test_printn.part.0>
    test_printn(sizeof(mailbox_t));
    test_println(" bytes");
 8001c06:	4620      	mov	r0, r4
#endif
  }
  test_end_step(9);
}
 8001c08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_println(" bytes");
 8001c0c:	f7ff b8f8 	b.w	8000e00 <test_println>
 8001c10:	2000149c 	.word	0x2000149c
 8001c14:	08009410 	.word	0x08009410
 8001c18:	08009400 	.word	0x08009400
 8001c1c:	08009418 	.word	0x08009418
 8001c20:	08009428 	.word	0x08009428
 8001c24:	08009438 	.word	0x08009438
 8001c28:	08009448 	.word	0x08009448
 8001c2c:	08009458 	.word	0x08009458
 8001c30:	08009468 	.word	0x08009468
 8001c34:	08009478 	.word	0x08009478
 8001c38:	08009488 	.word	0x08009488
 8001c3c:	00000000 	.word	0x00000000

08001c40 <rt_test_001_003_execute>:
 * <h2>Test Steps</h2>
 * - [1.3.1] Prints the configuration options settings.
 * .
 */

static void rt_test_001_003_execute(void) {
 8001c40:	b538      	push	{r3, r4, r5, lr}

  /* [1.3.1] Prints the configuration options settings.*/
  test_set_step(1);
 8001c42:	4b93      	ldr	r3, [pc, #588]	; (8001e90 <rt_test_001_003_execute+0x250>)
  {
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
    test_printn(CH_CFG_ST_RESOLUTION);
    test_println("");
 8001c44:	4c93      	ldr	r4, [pc, #588]	; (8001e94 <rt_test_001_003_execute+0x254>)
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
 8001c46:	4894      	ldr	r0, [pc, #592]	; (8001e98 <rt_test_001_003_execute+0x258>)
  test_set_step(1);
 8001c48:	2501      	movs	r5, #1
 8001c4a:	601d      	str	r5, [r3, #0]
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
 8001c4c:	f7ff f8f8 	bl	8000e40 <test_print>
 8001c50:	2020      	movs	r0, #32
 8001c52:	f7fe fff5 	bl	8000c40 <test_printn.part.0>
    test_println("");
 8001c56:	4620      	mov	r0, r4
 8001c58:	f7ff f8d2 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_ST_FREQUENCY:                ");
 8001c5c:	488f      	ldr	r0, [pc, #572]	; (8001e9c <rt_test_001_003_execute+0x25c>)
 8001c5e:	f7ff f8ef 	bl	8000e40 <test_print>
 8001c62:	f242 7010 	movw	r0, #10000	; 0x2710
 8001c66:	f7fe ffeb 	bl	8000c40 <test_printn.part.0>
    test_printn(CH_CFG_ST_FREQUENCY);
    test_println("");
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	f7ff f8c8 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_INTERVALS_SIZE:              ");
 8001c70:	488b      	ldr	r0, [pc, #556]	; (8001ea0 <rt_test_001_003_execute+0x260>)
 8001c72:	f7ff f8e5 	bl	8000e40 <test_print>
 8001c76:	2020      	movs	r0, #32
 8001c78:	f7fe ffe2 	bl	8000c40 <test_printn.part.0>
    test_printn(CH_CFG_INTERVALS_SIZE);
    test_println("");
 8001c7c:	4620      	mov	r0, r4
 8001c7e:	f7ff f8bf 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_TIME_TYPES_SIZE:             ");
 8001c82:	4888      	ldr	r0, [pc, #544]	; (8001ea4 <rt_test_001_003_execute+0x264>)
 8001c84:	f7ff f8dc 	bl	8000e40 <test_print>
 8001c88:	2020      	movs	r0, #32
 8001c8a:	f7fe ffd9 	bl	8000c40 <test_printn.part.0>
    test_printn(CH_CFG_TIME_TYPES_SIZE);
    test_println("");
 8001c8e:	4620      	mov	r0, r4
 8001c90:	f7ff f8b6 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_ST_TIMEDELTA:                ");
 8001c94:	4884      	ldr	r0, [pc, #528]	; (8001ea8 <rt_test_001_003_execute+0x268>)
 8001c96:	f7ff f8d3 	bl	8000e40 <test_print>
 8001c9a:	2002      	movs	r0, #2
 8001c9c:	f7fe ffd0 	bl	8000c40 <test_printn.part.0>
    test_printn(CH_CFG_ST_TIMEDELTA);
    test_println("");
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	f7ff f8ad 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_TIME_QUANTUM:                ");
 8001ca6:	4881      	ldr	r0, [pc, #516]	; (8001eac <rt_test_001_003_execute+0x26c>)
 8001ca8:	f7ff f8ca 	bl	8000e40 <test_print>
    test_printn(CH_CFG_TIME_QUANTUM);
 8001cac:	2000      	movs	r0, #0
 8001cae:	f7fe fff7 	bl	8000ca0 <test_printn>
    test_println("");
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	f7ff f8a4 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_MEMCORE_SIZE:                ");
 8001cb8:	487d      	ldr	r0, [pc, #500]	; (8001eb0 <rt_test_001_003_execute+0x270>)
 8001cba:	f7ff f8c1 	bl	8000e40 <test_print>
    test_printn(CH_CFG_MEMCORE_SIZE);
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	f7fe ffee 	bl	8000ca0 <test_printn>
    test_println("");
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	f7ff f89b 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_NO_IDLE_THREAD:              ");
 8001cca:	487a      	ldr	r0, [pc, #488]	; (8001eb4 <rt_test_001_003_execute+0x274>)
 8001ccc:	f7ff f8b8 	bl	8000e40 <test_print>
    test_printn(CH_CFG_NO_IDLE_THREAD);
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	f7fe ffe5 	bl	8000ca0 <test_printn>
    test_println("");
 8001cd6:	4620      	mov	r0, r4
 8001cd8:	f7ff f892 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_OPTIMIZE_SPEED:              ");
 8001cdc:	4876      	ldr	r0, [pc, #472]	; (8001eb8 <rt_test_001_003_execute+0x278>)
 8001cde:	f7ff f8af 	bl	8000e40 <test_print>
 8001ce2:	4628      	mov	r0, r5
 8001ce4:	f7fe ffac 	bl	8000c40 <test_printn.part.0>
    test_printn(CH_CFG_OPTIMIZE_SPEED);
    test_println("");
 8001ce8:	4620      	mov	r0, r4
 8001cea:	f7ff f889 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_USE_TM:                      ");
 8001cee:	4873      	ldr	r0, [pc, #460]	; (8001ebc <rt_test_001_003_execute+0x27c>)
 8001cf0:	f7ff f8a6 	bl	8000e40 <test_print>
 8001cf4:	4628      	mov	r0, r5
 8001cf6:	f7fe ffa3 	bl	8000c40 <test_printn.part.0>
    test_printn(CH_CFG_USE_TM);
    test_println("");
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	f7ff f880 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_USE_REGISTRY:                ");
 8001d00:	486f      	ldr	r0, [pc, #444]	; (8001ec0 <rt_test_001_003_execute+0x280>)
 8001d02:	f7ff f89d 	bl	8000e40 <test_print>
 8001d06:	4628      	mov	r0, r5
 8001d08:	f7fe ff9a 	bl	8000c40 <test_printn.part.0>
    test_printn(CH_CFG_USE_REGISTRY);
    test_println("");
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	f7ff f877 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_USE_WAITEXIT:                ");
 8001d12:	486c      	ldr	r0, [pc, #432]	; (8001ec4 <rt_test_001_003_execute+0x284>)
 8001d14:	f7ff f894 	bl	8000e40 <test_print>
 8001d18:	4628      	mov	r0, r5
 8001d1a:	f7fe ff91 	bl	8000c40 <test_printn.part.0>
    test_printn(CH_CFG_USE_WAITEXIT);
    test_println("");
 8001d1e:	4620      	mov	r0, r4
 8001d20:	f7ff f86e 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_USE_SEMAPHORES:              ");
 8001d24:	4868      	ldr	r0, [pc, #416]	; (8001ec8 <rt_test_001_003_execute+0x288>)
 8001d26:	f7ff f88b 	bl	8000e40 <test_print>
 8001d2a:	4628      	mov	r0, r5
 8001d2c:	f7fe ff88 	bl	8000c40 <test_printn.part.0>
    test_printn(CH_CFG_USE_SEMAPHORES);
    test_println("");
 8001d30:	4620      	mov	r0, r4
 8001d32:	f7ff f865 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_USE_SEMAPHORES_PRIORITY:     ");
 8001d36:	4865      	ldr	r0, [pc, #404]	; (8001ecc <rt_test_001_003_execute+0x28c>)
 8001d38:	f7ff f882 	bl	8000e40 <test_print>
    test_printn(CH_CFG_USE_SEMAPHORES_PRIORITY);
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f7fe ffaf 	bl	8000ca0 <test_printn>
    test_println("");
 8001d42:	4620      	mov	r0, r4
 8001d44:	f7ff f85c 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_USE_MUTEXES:                 ");
 8001d48:	4861      	ldr	r0, [pc, #388]	; (8001ed0 <rt_test_001_003_execute+0x290>)
 8001d4a:	f7ff f879 	bl	8000e40 <test_print>
 8001d4e:	4628      	mov	r0, r5
 8001d50:	f7fe ff76 	bl	8000c40 <test_printn.part.0>
    test_printn(CH_CFG_USE_MUTEXES);
    test_println("");
 8001d54:	4620      	mov	r0, r4
 8001d56:	f7ff f853 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_USE_MUTEXES_RECURSIVE:       ");
 8001d5a:	485e      	ldr	r0, [pc, #376]	; (8001ed4 <rt_test_001_003_execute+0x294>)
 8001d5c:	f7ff f870 	bl	8000e40 <test_print>
    test_printn(CH_CFG_USE_MUTEXES_RECURSIVE);
 8001d60:	2000      	movs	r0, #0
 8001d62:	f7fe ff9d 	bl	8000ca0 <test_printn>
    test_println("");   
 8001d66:	4620      	mov	r0, r4
 8001d68:	f7ff f84a 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_USE_CONDVARS:                ");
 8001d6c:	485a      	ldr	r0, [pc, #360]	; (8001ed8 <rt_test_001_003_execute+0x298>)
 8001d6e:	f7ff f867 	bl	8000e40 <test_print>
 8001d72:	4628      	mov	r0, r5
 8001d74:	f7fe ff64 	bl	8000c40 <test_printn.part.0>
    test_printn(CH_CFG_USE_CONDVARS);
    test_println("");
 8001d78:	4620      	mov	r0, r4
 8001d7a:	f7ff f841 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_USE_CONDVARS_TIMEOUT:        ");
 8001d7e:	4857      	ldr	r0, [pc, #348]	; (8001edc <rt_test_001_003_execute+0x29c>)
 8001d80:	f7ff f85e 	bl	8000e40 <test_print>
 8001d84:	4628      	mov	r0, r5
 8001d86:	f7fe ff5b 	bl	8000c40 <test_printn.part.0>
    test_printn(CH_CFG_USE_CONDVARS_TIMEOUT);
    test_println("");
 8001d8a:	4620      	mov	r0, r4
 8001d8c:	f7ff f838 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_USE_EVENTS:                  ");
 8001d90:	4853      	ldr	r0, [pc, #332]	; (8001ee0 <rt_test_001_003_execute+0x2a0>)
 8001d92:	f7ff f855 	bl	8000e40 <test_print>
 8001d96:	4628      	mov	r0, r5
 8001d98:	f7fe ff52 	bl	8000c40 <test_printn.part.0>
    test_printn(CH_CFG_USE_EVENTS);
    test_println("");
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	f7ff f82f 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_USE_EVENTS_TIMEOUT:          ");
 8001da2:	4850      	ldr	r0, [pc, #320]	; (8001ee4 <rt_test_001_003_execute+0x2a4>)
 8001da4:	f7ff f84c 	bl	8000e40 <test_print>
 8001da8:	4628      	mov	r0, r5
 8001daa:	f7fe ff49 	bl	8000c40 <test_printn.part.0>
    test_printn(CH_CFG_USE_EVENTS_TIMEOUT);
    test_println("");
 8001dae:	4620      	mov	r0, r4
 8001db0:	f7ff f826 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_USE_MESSAGES:                ");
 8001db4:	484c      	ldr	r0, [pc, #304]	; (8001ee8 <rt_test_001_003_execute+0x2a8>)
 8001db6:	f7ff f843 	bl	8000e40 <test_print>
 8001dba:	4628      	mov	r0, r5
 8001dbc:	f7fe ff40 	bl	8000c40 <test_printn.part.0>
    test_printn(CH_CFG_USE_MESSAGES);
    test_println("");
 8001dc0:	4620      	mov	r0, r4
 8001dc2:	f7ff f81d 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_USE_MESSAGES_PRIORITY:       ");
 8001dc6:	4849      	ldr	r0, [pc, #292]	; (8001eec <rt_test_001_003_execute+0x2ac>)
 8001dc8:	f7ff f83a 	bl	8000e40 <test_print>
    test_printn(CH_CFG_USE_MESSAGES_PRIORITY);
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f7fe ff67 	bl	8000ca0 <test_printn>
    test_println("");
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	f7ff f814 	bl	8000e00 <test_println>
    test_print("--- CH_CFG_USE_DYNAMIC:                 ");
 8001dd8:	4845      	ldr	r0, [pc, #276]	; (8001ef0 <rt_test_001_003_execute+0x2b0>)
 8001dda:	f7ff f831 	bl	8000e40 <test_print>
 8001dde:	4628      	mov	r0, r5
 8001de0:	f7fe ff2e 	bl	8000c40 <test_printn.part.0>
    test_printn(CH_CFG_USE_DYNAMIC);
    test_println("");
 8001de4:	4620      	mov	r0, r4
 8001de6:	f7ff f80b 	bl	8000e00 <test_println>
    test_print("--- CH_DBG_STATISTICS:                  ");
 8001dea:	4842      	ldr	r0, [pc, #264]	; (8001ef4 <rt_test_001_003_execute+0x2b4>)
 8001dec:	f7ff f828 	bl	8000e40 <test_print>
    test_printn(CH_DBG_STATISTICS);
 8001df0:	2000      	movs	r0, #0
 8001df2:	f7fe ff55 	bl	8000ca0 <test_printn>
    test_println("");
 8001df6:	4620      	mov	r0, r4
 8001df8:	f7ff f802 	bl	8000e00 <test_println>
    test_print("--- CH_DBG_SYSTEM_STATE_CHECK:          ");
 8001dfc:	483e      	ldr	r0, [pc, #248]	; (8001ef8 <rt_test_001_003_execute+0x2b8>)
 8001dfe:	f7ff f81f 	bl	8000e40 <test_print>
    test_printn(CH_DBG_SYSTEM_STATE_CHECK);
 8001e02:	2000      	movs	r0, #0
 8001e04:	f7fe ff4c 	bl	8000ca0 <test_printn>
    test_println("");
 8001e08:	4620      	mov	r0, r4
 8001e0a:	f7fe fff9 	bl	8000e00 <test_println>
    test_print("--- CH_DBG_ENABLE_CHECKS:               ");
 8001e0e:	483b      	ldr	r0, [pc, #236]	; (8001efc <rt_test_001_003_execute+0x2bc>)
 8001e10:	f7ff f816 	bl	8000e40 <test_print>
    test_printn(CH_DBG_ENABLE_CHECKS);
 8001e14:	2000      	movs	r0, #0
 8001e16:	f7fe ff43 	bl	8000ca0 <test_printn>
    test_println("");
 8001e1a:	4620      	mov	r0, r4
 8001e1c:	f7fe fff0 	bl	8000e00 <test_println>
    test_print("--- CH_DBG_ENABLE_ASSERTS:              ");
 8001e20:	4837      	ldr	r0, [pc, #220]	; (8001f00 <rt_test_001_003_execute+0x2c0>)
 8001e22:	f7ff f80d 	bl	8000e40 <test_print>
    test_printn(CH_DBG_ENABLE_ASSERTS);
 8001e26:	2000      	movs	r0, #0
 8001e28:	f7fe ff3a 	bl	8000ca0 <test_printn>
    test_println("");
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	f7fe ffe7 	bl	8000e00 <test_println>
    test_print("--- CH_DBG_TRACE_MASK:                  ");
 8001e32:	4834      	ldr	r0, [pc, #208]	; (8001f04 <rt_test_001_003_execute+0x2c4>)
 8001e34:	f7ff f804 	bl	8000e40 <test_print>
 8001e38:	20ff      	movs	r0, #255	; 0xff
 8001e3a:	f7fe ff01 	bl	8000c40 <test_printn.part.0>
    test_printn(CH_DBG_TRACE_MASK);
    test_println("");
 8001e3e:	4620      	mov	r0, r4
 8001e40:	f7fe ffde 	bl	8000e00 <test_println>
    test_print("--- CH_DBG_TRACE_BUFFER_SIZE:           ");
 8001e44:	4830      	ldr	r0, [pc, #192]	; (8001f08 <rt_test_001_003_execute+0x2c8>)
 8001e46:	f7fe fffb 	bl	8000e40 <test_print>
 8001e4a:	2080      	movs	r0, #128	; 0x80
 8001e4c:	f7fe fef8 	bl	8000c40 <test_printn.part.0>
    test_printn(CH_DBG_TRACE_BUFFER_SIZE);
    test_println("");
 8001e50:	4620      	mov	r0, r4
 8001e52:	f7fe ffd5 	bl	8000e00 <test_println>
    test_print("--- CH_DBG_ENABLE_STACK_CHECK:          ");
 8001e56:	482d      	ldr	r0, [pc, #180]	; (8001f0c <rt_test_001_003_execute+0x2cc>)
 8001e58:	f7fe fff2 	bl	8000e40 <test_print>
    test_printn(CH_DBG_ENABLE_STACK_CHECK);
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f7fe ff1f 	bl	8000ca0 <test_printn>
    test_println("");
 8001e62:	4620      	mov	r0, r4
 8001e64:	f7fe ffcc 	bl	8000e00 <test_println>
    test_print("--- CH_DBG_FILL_THREADS:                ");
 8001e68:	4829      	ldr	r0, [pc, #164]	; (8001f10 <rt_test_001_003_execute+0x2d0>)
 8001e6a:	f7fe ffe9 	bl	8000e40 <test_print>
    test_printn(CH_DBG_FILL_THREADS);
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f7fe ff16 	bl	8000ca0 <test_printn>
    test_println("");
 8001e74:	4620      	mov	r0, r4
 8001e76:	f7fe ffc3 	bl	8000e00 <test_println>
    test_print("--- CH_DBG_THREADS_PROFILING:           ");
 8001e7a:	4826      	ldr	r0, [pc, #152]	; (8001f14 <rt_test_001_003_execute+0x2d4>)
 8001e7c:	f7fe ffe0 	bl	8000e40 <test_print>
    test_printn(CH_DBG_THREADS_PROFILING);
 8001e80:	2000      	movs	r0, #0
 8001e82:	f7fe ff0d 	bl	8000ca0 <test_printn>
    test_println("");
 8001e86:	4620      	mov	r0, r4
  }
  test_end_step(1);
}
 8001e88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 8001e8c:	f7fe bfb8 	b.w	8000e00 <test_println>
 8001e90:	2000149c 	.word	0x2000149c
 8001e94:	08009aec 	.word	0x08009aec
 8001e98:	08009498 	.word	0x08009498
 8001e9c:	080094c4 	.word	0x080094c4
 8001ea0:	080094f0 	.word	0x080094f0
 8001ea4:	0800951c 	.word	0x0800951c
 8001ea8:	08009548 	.word	0x08009548
 8001eac:	08009574 	.word	0x08009574
 8001eb0:	080095a0 	.word	0x080095a0
 8001eb4:	080095cc 	.word	0x080095cc
 8001eb8:	080095f8 	.word	0x080095f8
 8001ebc:	08009624 	.word	0x08009624
 8001ec0:	08009650 	.word	0x08009650
 8001ec4:	0800967c 	.word	0x0800967c
 8001ec8:	080096a8 	.word	0x080096a8
 8001ecc:	080096d4 	.word	0x080096d4
 8001ed0:	08009700 	.word	0x08009700
 8001ed4:	0800972c 	.word	0x0800972c
 8001ed8:	08009758 	.word	0x08009758
 8001edc:	08009784 	.word	0x08009784
 8001ee0:	080097b0 	.word	0x080097b0
 8001ee4:	080097dc 	.word	0x080097dc
 8001ee8:	08009808 	.word	0x08009808
 8001eec:	08009834 	.word	0x08009834
 8001ef0:	08009860 	.word	0x08009860
 8001ef4:	0800988c 	.word	0x0800988c
 8001ef8:	080098b8 	.word	0x080098b8
 8001efc:	080098e4 	.word	0x080098e4
 8001f00:	08009910 	.word	0x08009910
 8001f04:	0800993c 	.word	0x0800993c
 8001f08:	08009968 	.word	0x08009968
 8001f0c:	08009994 	.word	0x08009994
 8001f10:	080099c0 	.word	0x080099c0
 8001f14:	080099ec 	.word	0x080099ec
	...

08001f20 <rt_test_001_002_execute>:
static void rt_test_001_002_execute(void) {
 8001f20:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 8001f22:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <rt_test_001_002_execute+0x68>)
    test_println("--- Product:                            ChibiOS/RT");
 8001f24:	4819      	ldr	r0, [pc, #100]	; (8001f8c <rt_test_001_002_execute+0x6c>)
    test_println("");
 8001f26:	4c1a      	ldr	r4, [pc, #104]	; (8001f90 <rt_test_001_002_execute+0x70>)
  test_set_step(1);
 8001f28:	2501      	movs	r5, #1
 8001f2a:	601d      	str	r5, [r3, #0]
    test_println("--- Product:                            ChibiOS/RT");
 8001f2c:	f7fe ff68 	bl	8000e00 <test_println>
    test_print("--- Stable Flag:                        ");
 8001f30:	4818      	ldr	r0, [pc, #96]	; (8001f94 <rt_test_001_002_execute+0x74>)
 8001f32:	f7fe ff85 	bl	8000e40 <test_print>
 8001f36:	4628      	mov	r0, r5
 8001f38:	f7fe fe82 	bl	8000c40 <test_printn.part.0>
    test_println("");
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	f7fe ff5f 	bl	8000e00 <test_println>
    test_print("--- Version String:                     ");
 8001f42:	4815      	ldr	r0, [pc, #84]	; (8001f98 <rt_test_001_002_execute+0x78>)
 8001f44:	f7fe ff7c 	bl	8000e40 <test_print>
    test_println(CH_KERNEL_VERSION);
 8001f48:	4814      	ldr	r0, [pc, #80]	; (8001f9c <rt_test_001_002_execute+0x7c>)
 8001f4a:	f7fe ff59 	bl	8000e00 <test_println>
    test_print("--- Major Number:                       ");
 8001f4e:	4814      	ldr	r0, [pc, #80]	; (8001fa0 <rt_test_001_002_execute+0x80>)
 8001f50:	f7fe ff76 	bl	8000e40 <test_print>
 8001f54:	2006      	movs	r0, #6
 8001f56:	f7fe fe73 	bl	8000c40 <test_printn.part.0>
    test_println("");
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	f7fe ff50 	bl	8000e00 <test_println>
    test_print("--- Minor Number:                       ");
 8001f60:	4810      	ldr	r0, [pc, #64]	; (8001fa4 <rt_test_001_002_execute+0x84>)
 8001f62:	f7fe ff6d 	bl	8000e40 <test_print>
 8001f66:	4628      	mov	r0, r5
 8001f68:	f7fe fe6a 	bl	8000c40 <test_printn.part.0>
    test_println("");
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	f7fe ff47 	bl	8000e00 <test_println>
    test_print("--- Patch Number:                       ");
 8001f72:	480d      	ldr	r0, [pc, #52]	; (8001fa8 <rt_test_001_002_execute+0x88>)
 8001f74:	f7fe ff64 	bl	8000e40 <test_print>
 8001f78:	4628      	mov	r0, r5
 8001f7a:	f7fe fe61 	bl	8000c40 <test_printn.part.0>
    test_println("");
 8001f7e:	4620      	mov	r0, r4
}
 8001f80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 8001f84:	f7fe bf3c 	b.w	8000e00 <test_println>
 8001f88:	2000149c 	.word	0x2000149c
 8001f8c:	08009a18 	.word	0x08009a18
 8001f90:	08009aec 	.word	0x08009aec
 8001f94:	0800931c 	.word	0x0800931c
 8001f98:	08009348 	.word	0x08009348
 8001f9c:	08009a4c 	.word	0x08009a4c
 8001fa0:	0800937c 	.word	0x0800937c
 8001fa4:	080093a8 	.word	0x080093a8
 8001fa8:	080093d4 	.word	0x080093d4
 8001fac:	00000000 	.word	0x00000000

08001fb0 <rt_test_001_001_execute>:
  test_set_step(1);
 8001fb0:	4b1c      	ldr	r3, [pc, #112]	; (8002024 <rt_test_001_001_execute+0x74>)
    test_print("--- Architecture:                       ");
 8001fb2:	481d      	ldr	r0, [pc, #116]	; (8002028 <rt_test_001_001_execute+0x78>)
static void rt_test_001_001_execute(void) {
 8001fb4:	b510      	push	{r4, lr}
  test_set_step(1);
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]
    test_print("--- Architecture:                       ");
 8001fba:	f7fe ff41 	bl	8000e40 <test_print>
    test_println(PORT_ARCHITECTURE_NAME);
 8001fbe:	481b      	ldr	r0, [pc, #108]	; (800202c <rt_test_001_001_execute+0x7c>)
    test_println("");
 8001fc0:	4c1b      	ldr	r4, [pc, #108]	; (8002030 <rt_test_001_001_execute+0x80>)
    test_println(PORT_ARCHITECTURE_NAME);
 8001fc2:	f7fe ff1d 	bl	8000e00 <test_println>
    test_print("--- Core Variant:                       ");
 8001fc6:	481b      	ldr	r0, [pc, #108]	; (8002034 <rt_test_001_001_execute+0x84>)
 8001fc8:	f7fe ff3a 	bl	8000e40 <test_print>
    test_println(PORT_CORE_VARIANT_NAME);
 8001fcc:	481a      	ldr	r0, [pc, #104]	; (8002038 <rt_test_001_001_execute+0x88>)
 8001fce:	f7fe ff17 	bl	8000e00 <test_println>
    test_print("--- Compiler:                           ");
 8001fd2:	481a      	ldr	r0, [pc, #104]	; (800203c <rt_test_001_001_execute+0x8c>)
 8001fd4:	f7fe ff34 	bl	8000e40 <test_print>
    test_println(PORT_COMPILER_NAME);
 8001fd8:	4819      	ldr	r0, [pc, #100]	; (8002040 <rt_test_001_001_execute+0x90>)
 8001fda:	f7fe ff11 	bl	8000e00 <test_println>
    test_print("--- Port Info:                          ");
 8001fde:	4819      	ldr	r0, [pc, #100]	; (8002044 <rt_test_001_001_execute+0x94>)
 8001fe0:	f7fe ff2e 	bl	8000e40 <test_print>
    test_println(PORT_INFO);
 8001fe4:	4818      	ldr	r0, [pc, #96]	; (8002048 <rt_test_001_001_execute+0x98>)
 8001fe6:	f7fe ff0b 	bl	8000e00 <test_println>
    test_print("--- Natural alignment:                  ");
 8001fea:	4818      	ldr	r0, [pc, #96]	; (800204c <rt_test_001_001_execute+0x9c>)
 8001fec:	f7fe ff28 	bl	8000e40 <test_print>
 8001ff0:	2004      	movs	r0, #4
 8001ff2:	f7fe fe25 	bl	8000c40 <test_printn.part.0>
    test_println("");
 8001ff6:	4620      	mov	r0, r4
 8001ff8:	f7fe ff02 	bl	8000e00 <test_println>
    test_print("--- Stack alignment:                    ");
 8001ffc:	4814      	ldr	r0, [pc, #80]	; (8002050 <rt_test_001_001_execute+0xa0>)
 8001ffe:	f7fe ff1f 	bl	8000e40 <test_print>
 8002002:	2008      	movs	r0, #8
 8002004:	f7fe fe1c 	bl	8000c40 <test_printn.part.0>
    test_println("");
 8002008:	4620      	mov	r0, r4
 800200a:	f7fe fef9 	bl	8000e00 <test_println>
    test_print("--- Working area alignment:             ");
 800200e:	4811      	ldr	r0, [pc, #68]	; (8002054 <rt_test_001_001_execute+0xa4>)
 8002010:	f7fe ff16 	bl	8000e40 <test_print>
 8002014:	2008      	movs	r0, #8
 8002016:	f7fe fe13 	bl	8000c40 <test_printn.part.0>
    test_println("");
 800201a:	4620      	mov	r0, r4
}
 800201c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    test_println("");
 8002020:	f7fe beee 	b.w	8000e00 <test_println>
 8002024:	2000149c 	.word	0x2000149c
 8002028:	08009a54 	.word	0x08009a54
 800202c:	08009a80 	.word	0x08009a80
 8002030:	08009aec 	.word	0x08009aec
 8002034:	08009a8c 	.word	0x08009a8c
 8002038:	08009ab8 	.word	0x08009ab8
 800203c:	08009ac4 	.word	0x08009ac4
 8002040:	08009af0 	.word	0x08009af0
 8002044:	08009b30 	.word	0x08009b30
 8002048:	08009b5c 	.word	0x08009b5c
 800204c:	08009b74 	.word	0x08009b74
 8002050:	08009ba0 	.word	0x08009ba0
 8002054:	08009bcc 	.word	0x08009bcc
	...

08002060 <oslib_test_001_001_execute>:
 8002060:	f7ff bfa6 	b.w	8001fb0 <rt_test_001_001_execute>
	...

08002070 <dyn_find_object>:
    chPoolFree(mp, (void *)dep);
  }
}
#endif /* CH_FACTORY_REQUIRES_POOLS */

static dyn_element_t *dyn_find_object(const char *name, dyn_list_t *dlp) {
 8002070:	b570      	push	{r4, r5, r6, lr}
  dyn_element_t *p = dlp->next;
 8002072:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 8002074:	42a1      	cmp	r1, r4
 8002076:	d012      	beq.n	800209e <dyn_find_object+0x2e>
 8002078:	460d      	mov	r5, r1
 800207a:	4606      	mov	r6, r0
 800207c:	e002      	b.n	8002084 <dyn_find_object+0x14>
    p = p->next;
 800207e:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8002080:	42a5      	cmp	r5, r4
 8002082:	d00c      	beq.n	800209e <dyn_find_object+0x2e>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8002084:	2208      	movs	r2, #8
 8002086:	4631      	mov	r1, r6
 8002088:	18a0      	adds	r0, r4, r2
 800208a:	f7fe fa49 	bl	8000520 <strncmp>
 800208e:	2800      	cmp	r0, #0
 8002090:	d1f5      	bne.n	800207e <dyn_find_object+0xe>

  chDbgCheck(name != NULL);

  /* Checking if an object with this name has already been created.*/
  dep = dyn_list_find(name, dlp);
  if (dep != NULL) {
 8002092:	b114      	cbz	r4, 800209a <dyn_find_object+0x2a>
    /* Increasing references counter.*/
    dep->refs++;
 8002094:	6863      	ldr	r3, [r4, #4]
 8002096:	3301      	adds	r3, #1
 8002098:	6063      	str	r3, [r4, #4]
  }

  return dep;
}
 800209a:	4620      	mov	r0, r4
 800209c:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800209e:	2400      	movs	r4, #0
}
 80020a0:	4620      	mov	r0, r4
 80020a2:	bd70      	pop	{r4, r5, r6, pc}
	...

080020b0 <dyn_create_object_pool>:
                                             memory_pool_t *mp) {
 80020b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_element_t *p = dlp->next;
 80020b2:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 80020b4:	42a1      	cmp	r1, r4
                                             memory_pool_t *mp) {
 80020b6:	460d      	mov	r5, r1
 80020b8:	4606      	mov	r6, r0
 80020ba:	4617      	mov	r7, r2
  while (p != (dyn_element_t *)dlp) {
 80020bc:	d103      	bne.n	80020c6 <dyn_create_object_pool+0x16>
 80020be:	e00d      	b.n	80020dc <dyn_create_object_pool+0x2c>
    p = p->next;
 80020c0:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 80020c2:	42a5      	cmp	r5, r4
 80020c4:	d00a      	beq.n	80020dc <dyn_create_object_pool+0x2c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 80020c6:	2208      	movs	r2, #8
 80020c8:	4631      	mov	r1, r6
 80020ca:	18a0      	adds	r0, r4, r2
 80020cc:	f7fe fa28 	bl	8000520 <strncmp>
 80020d0:	2800      	cmp	r0, #0
 80020d2:	d1f5      	bne.n	80020c0 <dyn_create_object_pool+0x10>
  if (dep != NULL) {
 80020d4:	b114      	cbz	r4, 80020dc <dyn_create_object_pool+0x2c>
    return NULL;
 80020d6:	4604      	mov	r4, r0
}
 80020d8:	4620      	mov	r0, r4
 80020da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  dep = (dyn_element_t *)chPoolAlloc(mp);
 80020dc:	4638      	mov	r0, r7
 80020de:	f7fe ff6f 	bl	8000fc0 <chPoolAlloc>
  if (dep == NULL) {
 80020e2:	4604      	mov	r4, r0
 80020e4:	2800      	cmp	r0, #0
 80020e6:	d0f7      	beq.n	80020d8 <dyn_create_object_pool+0x28>
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 80020e8:	2208      	movs	r2, #8
 80020ea:	4631      	mov	r1, r6
 80020ec:	4410      	add	r0, r2
 80020ee:	f7fe fa69 	bl	80005c4 <strncpy>
  dep->next = dlp->next;
 80020f2:	682b      	ldr	r3, [r5, #0]
  dep->refs = (ucnt_t)1;
 80020f4:	2201      	movs	r2, #1
  dep->next = dlp->next;
 80020f6:	e9c4 3200 	strd	r3, r2, [r4]
}
 80020fa:	4620      	mov	r0, r4
  dlp->next = (dyn_element_t *)dep;
 80020fc:	602c      	str	r4, [r5, #0]
}
 80020fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002100 <chThdYield>:
void chThdYield(void) {
 8002100:	b538      	push	{r3, r4, r5, lr}
 8002102:	2320      	movs	r3, #32
 8002104:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.queue) >= currp->prio;
 8002108:	4a12      	ldr	r2, [pc, #72]	; (8002154 <chThdYield+0x54>)
 800210a:	6810      	ldr	r0, [r2, #0]
 800210c:	6991      	ldr	r1, [r2, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 800210e:	6883      	ldr	r3, [r0, #8]
  return firstprio(&ch.rlist.queue) >= currp->prio;
 8002110:	688c      	ldr	r4, [r1, #8]
  if (chSchCanYieldS()) {
 8002112:	42a3      	cmp	r3, r4
 8002114:	d203      	bcs.n	800211e <chThdYield+0x1e>
 8002116:	2300      	movs	r3, #0
 8002118:	f383 8811 	msr	BASEPRI, r3
}
 800211c:	bd38      	pop	{r3, r4, r5, pc}
  tqp->next             = tp->queue.next;
 800211e:	6803      	ldr	r3, [r0, #0]
 8002120:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8002122:	605a      	str	r2, [r3, #4]
void chSchDoRescheduleBehind(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8002124:	2501      	movs	r5, #1
  currp = queue_fifo_remove(&ch.rlist.queue);
 8002126:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 8002128:	2200      	movs	r2, #0
  currp->state = CH_STATE_CURRENT;
 800212a:	f880 5020 	strb.w	r5, [r0, #32]
  tp->state = CH_STATE_READY;
 800212e:	f881 2020 	strb.w	r2, [r1, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8002132:	e000      	b.n	8002136 <chThdYield+0x36>
 8002134:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	4294      	cmp	r4, r2
 800213a:	d9fb      	bls.n	8002134 <chThdYield+0x34>
  tp->queue.prev             = cp->queue.prev;
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 8002142:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 8002144:	6059      	str	r1, [r3, #4]

  /* Placing in ready list behind peers.*/
  otp = chSchReadyI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8002146:	f7fe f8bb 	bl	80002c0 <_port_switch>
 800214a:	2300      	movs	r3, #0
 800214c:	f383 8811 	msr	BASEPRI, r3
 8002150:	bd38      	pop	{r3, r4, r5, pc}
 8002152:	bf00      	nop
 8002154:	200009b0 	.word	0x200009b0
	...

08002160 <bmk_thread8>:
static THD_FUNCTION(bmk_thread8, p) {
 8002160:	b538      	push	{r3, r4, r5, lr}
 8002162:	4d09      	ldr	r5, [pc, #36]	; (8002188 <bmk_thread8+0x28>)
 8002164:	4604      	mov	r4, r0
    chThdYield();
 8002166:	f7ff ffcb 	bl	8002100 <chThdYield>
    chThdYield();
 800216a:	f7ff ffc9 	bl	8002100 <chThdYield>
    chThdYield();
 800216e:	f7ff ffc7 	bl	8002100 <chThdYield>
    chThdYield();
 8002172:	f7ff ffc5 	bl	8002100 <chThdYield>
    (*(uint32_t *)p) += 4;
 8002176:	6823      	ldr	r3, [r4, #0]
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8002178:	69aa      	ldr	r2, [r5, #24]
 800217a:	3304      	adds	r3, #4
 800217c:	6023      	str	r3, [r4, #0]
  } while(!chThdShouldTerminateX());
 800217e:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8002182:	075b      	lsls	r3, r3, #29
 8002184:	d5ef      	bpl.n	8002166 <bmk_thread8+0x6>
}
 8002186:	bd38      	pop	{r3, r4, r5, pc}
 8002188:	200009b0 	.word	0x200009b0
 800218c:	00000000 	.word	0x00000000

08002190 <chSchWakeupS>:
  thread_t *otp = currp;
 8002190:	4a15      	ldr	r2, [pc, #84]	; (80021e8 <chSchWakeupS+0x58>)
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8002192:	b470      	push	{r4, r5, r6}
  thread_t *otp = currp;
 8002194:	6996      	ldr	r6, [r2, #24]
  if (ntp->prio <= otp->prio) {
 8002196:	6885      	ldr	r5, [r0, #8]
 8002198:	68b4      	ldr	r4, [r6, #8]
  ntp->u.rdymsg = msg;
 800219a:	6241      	str	r1, [r0, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 800219c:	42a5      	cmp	r5, r4
 800219e:	d80e      	bhi.n	80021be <chSchWakeupS+0x2e>
  tp->state = CH_STATE_READY;
 80021a0:	2100      	movs	r1, #0
  cp = (thread_t *)&ch.rlist.queue;
 80021a2:	4613      	mov	r3, r2
  tp->state = CH_STATE_READY;
 80021a4:	f880 1020 	strb.w	r1, [r0, #32]
    cp = cp->queue.next;
 80021a8:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	4295      	cmp	r5, r2
 80021ae:	d9fb      	bls.n	80021a8 <chSchWakeupS+0x18>
  tp->queue.prev             = cp->queue.prev;
 80021b0:	685a      	ldr	r2, [r3, #4]
}
 80021b2:	bc70      	pop	{r4, r5, r6}
  tp->queue.prev             = cp->queue.prev;
 80021b4:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 80021b8:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80021ba:	6058      	str	r0, [r3, #4]
}
 80021bc:	4770      	bx	lr
  tp->state = CH_STATE_READY;
 80021be:	2300      	movs	r3, #0
 80021c0:	f886 3020 	strb.w	r3, [r6, #32]
  cp = (thread_t *)&ch.rlist.queue;
 80021c4:	4613      	mov	r3, r2
    cp = cp->queue.next;
 80021c6:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 80021c8:	6899      	ldr	r1, [r3, #8]
 80021ca:	428c      	cmp	r4, r1
 80021cc:	d3fb      	bcc.n	80021c6 <chSchWakeupS+0x36>
  tp->queue.prev             = cp->queue.prev;
 80021ce:	6859      	ldr	r1, [r3, #4]
 80021d0:	6071      	str	r1, [r6, #4]
    ntp->state = CH_STATE_CURRENT;
 80021d2:	2401      	movs	r4, #1
  tp->queue.next             = cp;
 80021d4:	6033      	str	r3, [r6, #0]
  tp->queue.prev->queue.next = tp;
 80021d6:	600e      	str	r6, [r1, #0]
  cp->queue.prev             = tp;
 80021d8:	605e      	str	r6, [r3, #4]
    chSysSwitch(ntp, otp);
 80021da:	4631      	mov	r1, r6
    ntp->state = CH_STATE_CURRENT;
 80021dc:	f880 4020 	strb.w	r4, [r0, #32]
}
 80021e0:	bc70      	pop	{r4, r5, r6}
    currp = ntp;
 80021e2:	6190      	str	r0, [r2, #24]
    chSysSwitch(ntp, otp);
 80021e4:	f7fe b86c 	b.w	80002c0 <_port_switch>
 80021e8:	200009b0 	.word	0x200009b0
 80021ec:	00000000 	.word	0x00000000

080021f0 <chThdCreateStatic.constprop.0>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 80021f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021f2:	4604      	mov	r4, r0
 80021f4:	2020      	movs	r0, #32
 80021f6:	f380 8811 	msr	BASEPRI, r0
  REG_INSERT(tp);
 80021fa:	4f1a      	ldr	r7, [pc, #104]	; (8002264 <chThdCreateStatic.constprop.0+0x74>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80021fc:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8002200:	f104 03dc 	add.w	r3, r4, #220	; 0xdc
 8002204:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
  tp->prio      = prio;
 8002208:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
  REG_INSERT(tp);
 800220c:	697a      	ldr	r2, [r7, #20]
  tp->realprio  = prio;
 800220e:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002212:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 8002216:	4d14      	ldr	r5, [pc, #80]	; (8002268 <chThdCreateStatic.constprop.0+0x78>)
  tp->name      = name;
 8002218:	4b14      	ldr	r3, [pc, #80]	; (800226c <chThdCreateStatic.constprop.0+0x7c>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800221a:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
  tp->refs      = (trefs_t)1;
 800221e:	2101      	movs	r1, #1
  tp = (thread_t *)((uint8_t *)wsp + size -
 8002220:	f504 7580 	add.w	r5, r4, #256	; 0x100
  tp->refs      = (trefs_t)1;
 8002224:	f884 1122 	strb.w	r1, [r4, #290]	; 0x122
  tp->name      = name;
 8002228:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
  tp->mtxlist   = NULL;
 800222c:	2600      	movs	r6, #0
  queue_init(&tp->msgqueue);
 800222e:	f504 7396 	add.w	r3, r4, #300	; 0x12c
  list_init(&tp->waiting);
 8002232:	f504 7194 	add.w	r1, r4, #296	; 0x128
  tp->state     = CH_STATE_WTSTART;
 8002236:	2002      	movs	r0, #2
 8002238:	f8a4 0120 	strh.w	r0, [r4, #288]	; 0x120
  tp->epending  = (eventmask_t)0;
 800223c:	e9c4 664d 	strd	r6, r6, [r4, #308]	; 0x134
  REG_INSERT(tp);
 8002240:	e9c4 7244 	strd	r7, r2, [r4, #272]	; 0x110
  tp->wabase = (stkalign_t *)wsp;
 8002244:	f8c4 411c 	str.w	r4, [r4, #284]	; 0x11c
  chSchWakeupS(tp, MSG_OK);
 8002248:	4628      	mov	r0, r5
  REG_INSERT(tp);
 800224a:	6115      	str	r5, [r2, #16]
  tqp->next = (thread_t *)tqp;
 800224c:	e9c4 134a 	strd	r1, r3, [r4, #296]	; 0x128
  tqp->prev = (thread_t *)tqp;
 8002250:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  chSchWakeupS(tp, MSG_OK);
 8002254:	4631      	mov	r1, r6
  REG_INSERT(tp);
 8002256:	617d      	str	r5, [r7, #20]
  chSchWakeupS(tp, MSG_OK);
 8002258:	f7ff ff9a 	bl	8002190 <chSchWakeupS>
 800225c:	f386 8811 	msr	BASEPRI, r6
}
 8002260:	4628      	mov	r0, r5
 8002262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002264:	200009b0 	.word	0x200009b0
 8002268:	080002d1 	.word	0x080002d1
 800226c:	08009bf8 	.word	0x08009bf8

08002270 <chCondSignal.constprop.0>:
void chCondSignal(condition_variable_t *cp) {
 8002270:	b508      	push	{r3, lr}
 8002272:	2320      	movs	r3, #32
 8002274:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <chCondSignal.constprop.0+0x24>)
 800227a:	6818      	ldr	r0, [r3, #0]
  if (queue_notempty(&cp->queue)) {
 800227c:	4298      	cmp	r0, r3
 800227e:	d005      	beq.n	800228c <chCondSignal.constprop.0+0x1c>
  tqp->next             = tp->queue.next;
 8002280:	6802      	ldr	r2, [r0, #0]
 8002282:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8002284:	6053      	str	r3, [r2, #4]
    chSchWakeupS(queue_fifo_remove(&cp->queue), MSG_OK);
 8002286:	2100      	movs	r1, #0
 8002288:	f7ff ff82 	bl	8002190 <chSchWakeupS>
 800228c:	2300      	movs	r3, #0
 800228e:	f383 8811 	msr	BASEPRI, r3
}
 8002292:	bd08      	pop	{r3, pc}
 8002294:	20000800 	.word	0x20000800
	...

080022a0 <chThdCreateFromMemoryPool.constprop.0>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 80022a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  thread_t *tp;
  void *wsp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 80022a4:	4f14      	ldr	r7, [pc, #80]	; (80022f8 <chThdCreateFromMemoryPool.constprop.0+0x58>)
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 80022a6:	b086      	sub	sp, #24
 80022a8:	4680      	mov	r8, r0
  wsp = chPoolAlloc(mp);
 80022aa:	4638      	mov	r0, r7
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 80022ac:	460e      	mov	r6, r1
 80022ae:	4615      	mov	r5, r2
  wsp = chPoolAlloc(mp);
 80022b0:	f7fe fe86 	bl	8000fc0 <chPoolAlloc>
  if (wsp == NULL) {
 80022b4:	4604      	mov	r4, r0
 80022b6:	b1d0      	cbz	r0, 80022ee <chThdCreateFromMemoryPool.constprop.0+0x4e>
  }

  thread_descriptor_t td = {
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 80022b8:	687b      	ldr	r3, [r7, #4]
  thread_descriptor_t td = {
 80022ba:	4a10      	ldr	r2, [pc, #64]	; (80022fc <chThdCreateFromMemoryPool.constprop.0+0x5c>)
 80022bc:	f8cd 8000 	str.w	r8, [sp]
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 80022c0:	4403      	add	r3, r0
  thread_descriptor_t td = {
 80022c2:	9302      	str	r3, [sp, #8]
 80022c4:	9001      	str	r0, [sp, #4]
 80022c6:	9603      	str	r6, [sp, #12]
 80022c8:	9505      	str	r5, [sp, #20]
 80022ca:	9204      	str	r2, [sp, #16]
 80022cc:	2320      	movs	r3, #32
 80022ce:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + mp->object_size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 80022d2:	4668      	mov	r0, sp
 80022d4:	f7fe ffec 	bl	80012b0 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_MPOOL;
 80022d8:	2302      	movs	r3, #2
 80022da:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tp->mpool = mp;
 80022de:	6407      	str	r7, [r0, #64]	; 0x40
  chSchWakeupS(tp, MSG_OK);
 80022e0:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(&td);
 80022e2:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 80022e4:	f7ff ff54 	bl	8002190 <chSchWakeupS>
 80022e8:	2300      	movs	r3, #0
 80022ea:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 80022ee:	4620      	mov	r0, r4
 80022f0:	b006      	add	sp, #24
 80022f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022f6:	bf00      	nop
 80022f8:	20000c40 	.word	0x20000c40
 80022fc:	08000df1 	.word	0x08000df1

08002300 <chSemSignal>:
void chSemSignal(semaphore_t *sp) {
 8002300:	b508      	push	{r3, lr}
 8002302:	2220      	movs	r2, #32
 8002304:	f382 8811 	msr	BASEPRI, r2
  if (++sp->cnt <= (cnt_t)0) {
 8002308:	6882      	ldr	r2, [r0, #8]
 800230a:	3201      	adds	r2, #1
 800230c:	2a00      	cmp	r2, #0
 800230e:	6082      	str	r2, [r0, #8]
 8002310:	dd03      	ble.n	800231a <chSemSignal+0x1a>
 8002312:	2300      	movs	r3, #0
 8002314:	f383 8811 	msr	BASEPRI, r3
}
 8002318:	bd08      	pop	{r3, pc}
 800231a:	4603      	mov	r3, r0
  thread_t *tp = tqp->next;
 800231c:	6800      	ldr	r0, [r0, #0]
  tqp->next             = tp->queue.next;
 800231e:	6802      	ldr	r2, [r0, #0]
 8002320:	601a      	str	r2, [r3, #0]
    chSchWakeupS(queue_fifo_remove(&sp->queue), MSG_OK);
 8002322:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8002324:	6053      	str	r3, [r2, #4]
 8002326:	f7ff ff33 	bl	8002190 <chSchWakeupS>
 800232a:	2300      	movs	r3, #0
 800232c:	f383 8811 	msr	BASEPRI, r3
}
 8002330:	bd08      	pop	{r3, pc}
 8002332:	bf00      	nop
	...

08002340 <chThdCreate>:
thread_t *chThdCreate(const thread_descriptor_t *tdp) {
 8002340:	b510      	push	{r4, lr}
 8002342:	2320      	movs	r3, #32
 8002344:	f383 8811 	msr	BASEPRI, r3
  tp = chThdCreateSuspendedI(tdp);
 8002348:	f7fe ffb2 	bl	80012b0 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 800234c:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(tdp);
 800234e:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 8002350:	f7ff ff1e 	bl	8002190 <chSchWakeupS>
 8002354:	2300      	movs	r3, #0
 8002356:	f383 8811 	msr	BASEPRI, r3
}
 800235a:	4620      	mov	r0, r4
 800235c:	bd10      	pop	{r4, pc}
 800235e:	bf00      	nop

08002360 <chSchGoSleepS>:
  thread_t *otp = currp;
 8002360:	4b08      	ldr	r3, [pc, #32]	; (8002384 <chSchGoSleepS+0x24>)
 8002362:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->next;
 8002364:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 8002366:	b410      	push	{r4}
  otp->state = newstate;
 8002368:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 800236c:	6810      	ldr	r0, [r2, #0]
 800236e:	6018      	str	r0, [r3, #0]
  currp->state = CH_STATE_CURRENT;
 8002370:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8002372:	6043      	str	r3, [r0, #4]
 8002374:	f882 4020 	strb.w	r4, [r2, #32]
}
 8002378:	bc10      	pop	{r4}
  currp = queue_fifo_remove(&ch.rlist.queue);
 800237a:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 800237c:	4610      	mov	r0, r2
 800237e:	f7fd bf9f 	b.w	80002c0 <_port_switch>
 8002382:	bf00      	nop
 8002384:	200009b0 	.word	0x200009b0
	...

08002390 <chEvtWaitOne.constprop.0>:
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
  thread_t *ctp = currp;
 8002390:	4a0c      	ldr	r2, [pc, #48]	; (80023c4 <chEvtWaitOne.constprop.0+0x34>)
eventmask_t chEvtWaitOne(eventmask_t events) {
 8002392:	b510      	push	{r4, lr}
 8002394:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8002396:	6994      	ldr	r4, [r2, #24]
 8002398:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 800239c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800239e:	b140      	cbz	r0, 80023b2 <chEvtWaitOne.constprop.0+0x22>
    ctp->u.ewmask = events;
    chSchGoSleepS(CH_STATE_WTOREVT);
    m = ctp->epending & events;
  }
  m ^= m & (m - (eventmask_t)1);
 80023a0:	4243      	negs	r3, r0
  ctp->epending &= ~m;
 80023a2:	ea20 0203 	bic.w	r2, r0, r3
 80023a6:	6362      	str	r2, [r4, #52]	; 0x34
  m ^= m & (m - (eventmask_t)1);
 80023a8:	4018      	ands	r0, r3
 80023aa:	2300      	movs	r3, #0
 80023ac:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 80023b0:	bd10      	pop	{r4, pc}
    ctp->u.ewmask = events;
 80023b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    chSchGoSleepS(CH_STATE_WTOREVT);
 80023b6:	200a      	movs	r0, #10
    ctp->u.ewmask = events;
 80023b8:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 80023ba:	f7ff ffd1 	bl	8002360 <chSchGoSleepS>
    m = ctp->epending & events;
 80023be:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80023c0:	e7ee      	b.n	80023a0 <chEvtWaitOne.constprop.0+0x10>
 80023c2:	bf00      	nop
 80023c4:	200009b0 	.word	0x200009b0
	...

080023d0 <chEvtWaitAny.constprop.0>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
 80023d0:	4a0c      	ldr	r2, [pc, #48]	; (8002404 <chEvtWaitAny.constprop.0+0x34>)
eventmask_t chEvtWaitAny(eventmask_t events) {
 80023d2:	b510      	push	{r4, lr}
 80023d4:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 80023d6:	6994      	ldr	r4, [r2, #24]
 80023d8:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 80023dc:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 80023de:	b120      	cbz	r0, 80023ea <chEvtWaitAny.constprop.0+0x1a>
    ctp->u.ewmask = events;
    chSchGoSleepS(CH_STATE_WTOREVT);
    m = ctp->epending & events;
  }
  ctp->epending &= ~m;
 80023e0:	2300      	movs	r3, #0
 80023e2:	6363      	str	r3, [r4, #52]	; 0x34
 80023e4:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 80023e8:	bd10      	pop	{r4, pc}
    ctp->u.ewmask = events;
 80023ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023ee:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 80023f0:	200a      	movs	r0, #10
 80023f2:	f7ff ffb5 	bl	8002360 <chSchGoSleepS>
  ctp->epending &= ~m;
 80023f6:	2300      	movs	r3, #0
    m = ctp->epending & events;
 80023f8:	6b60      	ldr	r0, [r4, #52]	; 0x34
  ctp->epending &= ~m;
 80023fa:	6363      	str	r3, [r4, #52]	; 0x34
 80023fc:	f383 8811 	msr	BASEPRI, r3
}
 8002400:	bd10      	pop	{r4, pc}
 8002402:	bf00      	nop
 8002404:	200009b0 	.word	0x200009b0
	...

08002410 <chEvtWaitAll.constprop.0>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
  thread_t *ctp = currp;
 8002410:	4a0c      	ldr	r2, [pc, #48]	; (8002444 <chEvtWaitAll.constprop.0+0x34>)
eventmask_t chEvtWaitAll(eventmask_t events) {
 8002412:	b510      	push	{r4, lr}
 8002414:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8002416:	6994      	ldr	r4, [r2, #24]
 8002418:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if ((ctp->epending & events) != events) {
 800241c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800241e:	f003 0205 	and.w	r2, r3, #5
 8002422:	2a05      	cmp	r2, #5
 8002424:	d005      	beq.n	8002432 <chEvtWaitAll.constprop.0+0x22>
    ctp->u.ewmask = events;
 8002426:	2305      	movs	r3, #5
 8002428:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTANDEVT);
 800242a:	200b      	movs	r0, #11
 800242c:	f7ff ff98 	bl	8002360 <chSchGoSleepS>
 8002430:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  ctp->epending &= ~events;
 8002432:	f023 0305 	bic.w	r3, r3, #5
 8002436:	6363      	str	r3, [r4, #52]	; 0x34
 8002438:	2300      	movs	r3, #0
 800243a:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return events;
}
 800243e:	2005      	movs	r0, #5
 8002440:	bd10      	pop	{r4, pc}
 8002442:	bf00      	nop
 8002444:	200009b0 	.word	0x200009b0
	...

08002450 <bmk_thread4>:
  return ch.rlist.current;
 8002450:	4a07      	ldr	r2, [pc, #28]	; (8002470 <bmk_thread4+0x20>)
static THD_FUNCTION(bmk_thread4, p) {
 8002452:	b510      	push	{r4, lr}
 8002454:	2320      	movs	r3, #32
 8002456:	6994      	ldr	r4, [r2, #24]
 8002458:	f383 8811 	msr	BASEPRI, r3
    chSchGoSleepS(CH_STATE_SUSPENDED);
 800245c:	2003      	movs	r0, #3
 800245e:	f7ff ff7f 	bl	8002360 <chSchGoSleepS>
  } while (msg == MSG_OK);
 8002462:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0f9      	beq.n	800245c <bmk_thread4+0xc>
 8002468:	2300      	movs	r3, #0
 800246a:	f383 8811 	msr	BASEPRI, r3
}
 800246e:	bd10      	pop	{r4, pc}
 8002470:	200009b0 	.word	0x200009b0
	...

08002480 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002480:	b530      	push	{r4, r5, lr}
  if (TIME_INFINITE != timeout) {
 8002482:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002484:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 8002486:	d012      	beq.n	80024ae <chSchGoSleepTimeoutS+0x2e>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8002488:	4d0c      	ldr	r5, [pc, #48]	; (80024bc <chSchGoSleepTimeoutS+0x3c>)
 800248a:	4a0d      	ldr	r2, [pc, #52]	; (80024c0 <chSchGoSleepTimeoutS+0x40>)
 800248c:	69ab      	ldr	r3, [r5, #24]
 800248e:	4604      	mov	r4, r0
 8002490:	a801      	add	r0, sp, #4
 8002492:	f7ff f935 	bl	8001700 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8002496:	4620      	mov	r0, r4
 8002498:	f7ff ff62 	bl	8002360 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800249c:	9b04      	ldr	r3, [sp, #16]
 800249e:	b113      	cbz	r3, 80024a6 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 80024a0:	a801      	add	r0, sp, #4
 80024a2:	f7ff f8ed 	bl	8001680 <chVTDoResetI>
  return currp->u.rdymsg;
 80024a6:	69ab      	ldr	r3, [r5, #24]
}
 80024a8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80024aa:	b007      	add	sp, #28
 80024ac:	bd30      	pop	{r4, r5, pc}
    chSchGoSleepS(newstate);
 80024ae:	4d03      	ldr	r5, [pc, #12]	; (80024bc <chSchGoSleepTimeoutS+0x3c>)
 80024b0:	f7ff ff56 	bl	8002360 <chSchGoSleepS>
  return currp->u.rdymsg;
 80024b4:	69ab      	ldr	r3, [r5, #24]
}
 80024b6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80024b8:	b007      	add	sp, #28
 80024ba:	bd30      	pop	{r4, r5, pc}
 80024bc:	200009b0 	.word	0x200009b0
 80024c0:	08001331 	.word	0x08001331
	...

080024d0 <chSemWaitTimeout.constprop.0>:
 80024d0:	2320      	movs	r3, #32
 80024d2:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 80024d6:	4b10      	ldr	r3, [pc, #64]	; (8002518 <chSemWaitTimeout.constprop.0+0x48>)
 80024d8:	6899      	ldr	r1, [r3, #8]
 80024da:	1e4a      	subs	r2, r1, #1
 80024dc:	2a00      	cmp	r2, #0
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	db04      	blt.n	80024ec <chSemWaitTimeout.constprop.0+0x1c>
  return MSG_OK;
 80024e2:	2000      	movs	r0, #0
 80024e4:	2300      	movs	r3, #0
 80024e6:	f383 8811 	msr	BASEPRI, r3
}
 80024ea:	4770      	bx	lr
    if (TIME_IMMEDIATE == timeout) {
 80024ec:	b180      	cbz	r0, 8002510 <chSemWaitTimeout.constprop.0+0x40>
    currp->u.wtsemp = sp;
 80024ee:	4a0b      	ldr	r2, [pc, #44]	; (800251c <chSemWaitTimeout.constprop.0+0x4c>)
msg_t chSemWaitTimeout(semaphore_t *sp, sysinterval_t timeout) {
 80024f0:	b510      	push	{r4, lr}
    currp->u.wtsemp = sp;
 80024f2:	6992      	ldr	r2, [r2, #24]
  tp->queue.prev             = tqp->prev;
 80024f4:	685c      	ldr	r4, [r3, #4]
 80024f6:	6253      	str	r3, [r2, #36]	; 0x24
 80024f8:	e9c2 3400 	strd	r3, r4, [r2]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 80024fc:	4601      	mov	r1, r0
  tp->queue.prev->queue.next = tp;
 80024fe:	6022      	str	r2, [r4, #0]
 8002500:	2005      	movs	r0, #5
  tqp->prev                  = tp;
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	f7ff ffbc 	bl	8002480 <chSchGoSleepTimeoutS>
 8002508:	2300      	movs	r3, #0
 800250a:	f383 8811 	msr	BASEPRI, r3
}
 800250e:	bd10      	pop	{r4, pc}
      sp->cnt++;
 8002510:	6099      	str	r1, [r3, #8]
      return MSG_TIMEOUT;
 8002512:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002516:	e7e5      	b.n	80024e4 <chSemWaitTimeout.constprop.0+0x14>
 8002518:	20000d70 	.word	0x20000d70
 800251c:	200009b0 	.word	0x200009b0

08002520 <rt_test_009_006_execute>:
static void rt_test_009_006_execute(void) {
 8002520:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8002522:	4d58      	ldr	r5, [pc, #352]	; (8002684 <rt_test_009_006_execute+0x164>)
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 8002524:	4c58      	ldr	r4, [pc, #352]	; (8002688 <rt_test_009_006_execute+0x168>)
 8002526:	2001      	movs	r0, #1
 8002528:	69a2      	ldr	r2, [r4, #24]
 800252a:	6028      	str	r0, [r5, #0]
 800252c:	2320      	movs	r3, #32
 800252e:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8002532:	6b53      	ldr	r3, [r2, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8002534:	b933      	cbnz	r3, 8002544 <rt_test_009_006_execute+0x24>
 8002536:	f383 8811 	msr	BASEPRI, r3
    test_assert(m == 0, "spurious event");
 800253a:	4954      	ldr	r1, [pc, #336]	; (800268c <rt_test_009_006_execute+0x16c>)
 800253c:	f7fe fb18 	bl	8000b70 <_test_assert>
 8002540:	b180      	cbz	r0, 8002564 <rt_test_009_006_execute+0x44>
}
 8002542:	bd70      	pop	{r4, r5, r6, pc}
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
  }
  m ^= m & (m - (eventmask_t)1);
 8002544:	4258      	negs	r0, r3
  ctp->epending &= ~m;
 8002546:	ea23 0100 	bic.w	r1, r3, r0
 800254a:	6351      	str	r1, [r2, #52]	; 0x34
  m ^= m & (m - (eventmask_t)1);
 800254c:	4018      	ands	r0, r3
 800254e:	2300      	movs	r3, #0
 8002550:	f383 8811 	msr	BASEPRI, r3
 8002554:	fab0 f080 	clz	r0, r0
    test_assert(m == 0, "spurious event");
 8002558:	494c      	ldr	r1, [pc, #304]	; (800268c <rt_test_009_006_execute+0x16c>)
 800255a:	0940      	lsrs	r0, r0, #5
 800255c:	f7fe fb08 	bl	8000b70 <_test_assert>
 8002560:	2800      	cmp	r0, #0
 8002562:	d1ee      	bne.n	8002542 <rt_test_009_006_execute+0x22>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 8002564:	69a3      	ldr	r3, [r4, #24]
 8002566:	2220      	movs	r2, #32
 8002568:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
  if (m == (eventmask_t)0) {
 800256c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800256e:	2a00      	cmp	r2, #0
 8002570:	d167      	bne.n	8002642 <rt_test_009_006_execute+0x122>
 8002572:	f380 8811 	msr	BASEPRI, r0
 8002576:	2001      	movs	r0, #1
    test_assert(m == 0, "spurious event");
 8002578:	4944      	ldr	r1, [pc, #272]	; (800268c <rt_test_009_006_execute+0x16c>)
 800257a:	f7fe faf9 	bl	8000b70 <_test_assert>
 800257e:	2800      	cmp	r0, #0
 8002580:	d1df      	bne.n	8002542 <rt_test_009_006_execute+0x22>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 8002582:	69a3      	ldr	r3, [r4, #24]
 8002584:	2220      	movs	r2, #32
 8002586:	f382 8811 	msr	BASEPRI, r2

  chSysLock();
  if ((ctp->epending & events) != events) {
 800258a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800258c:	3201      	adds	r2, #1
 800258e:	d05c      	beq.n	800264a <rt_test_009_006_execute+0x12a>
 8002590:	f380 8811 	msr	BASEPRI, r0
 8002594:	2001      	movs	r0, #1
    test_assert(m == 0, "spurious event");
 8002596:	493d      	ldr	r1, [pc, #244]	; (800268c <rt_test_009_006_execute+0x16c>)
 8002598:	f7fe faea 	bl	8000b70 <_test_assert>
 800259c:	2800      	cmp	r0, #0
 800259e:	d1d0      	bne.n	8002542 <rt_test_009_006_execute+0x22>
  test_set_step(2);
 80025a0:	2302      	movs	r3, #2
 80025a2:	602b      	str	r3, [r5, #0]
  thread_t *ctp = currp;
 80025a4:	69a6      	ldr	r6, [r4, #24]
 80025a6:	2320      	movs	r3, #32
 80025a8:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
 80025ac:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 80025ae:	b955      	cbnz	r5, 80025c6 <rt_test_009_006_execute+0xa6>
    ctp->u.ewmask = events;
 80025b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025b4:	6273      	str	r3, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 80025b6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80025ba:	200a      	movs	r0, #10
 80025bc:	f7ff ff60 	bl	8002480 <chSchGoSleepTimeoutS>
 80025c0:	2800      	cmp	r0, #0
 80025c2:	db52      	blt.n	800266a <rt_test_009_006_execute+0x14a>
    m = ctp->epending & events;
 80025c4:	6b75      	ldr	r5, [r6, #52]	; 0x34
  m ^= m & (m - (eventmask_t)1);
 80025c6:	4268      	negs	r0, r5
  ctp->epending &= ~m;
 80025c8:	ea25 0300 	bic.w	r3, r5, r0
 80025cc:	6373      	str	r3, [r6, #52]	; 0x34
  m ^= m & (m - (eventmask_t)1);
 80025ce:	4028      	ands	r0, r5
 80025d0:	2300      	movs	r3, #0
 80025d2:	f383 8811 	msr	BASEPRI, r3
 80025d6:	fab0 f080 	clz	r0, r0
 80025da:	0940      	lsrs	r0, r0, #5
    test_assert(m == 0, "spurious event");
 80025dc:	492b      	ldr	r1, [pc, #172]	; (800268c <rt_test_009_006_execute+0x16c>)
 80025de:	f7fe fac7 	bl	8000b70 <_test_assert>
 80025e2:	2800      	cmp	r0, #0
 80025e4:	d1ad      	bne.n	8002542 <rt_test_009_006_execute+0x22>
  thread_t *ctp = currp;
 80025e6:	69a6      	ldr	r6, [r4, #24]
 80025e8:	2320      	movs	r3, #32
 80025ea:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
 80025ee:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 80025f0:	b37d      	cbz	r5, 8002652 <rt_test_009_006_execute+0x132>
  ctp->epending &= ~m;
 80025f2:	2300      	movs	r3, #0
 80025f4:	6373      	str	r3, [r6, #52]	; 0x34
 80025f6:	f383 8811 	msr	BASEPRI, r3
 80025fa:	fab5 f085 	clz	r0, r5
 80025fe:	0940      	lsrs	r0, r0, #5
    test_assert(m == 0, "spurious event");
 8002600:	4922      	ldr	r1, [pc, #136]	; (800268c <rt_test_009_006_execute+0x16c>)
 8002602:	f7fe fab5 	bl	8000b70 <_test_assert>
 8002606:	4605      	mov	r5, r0
 8002608:	2800      	cmp	r0, #0
 800260a:	d19a      	bne.n	8002542 <rt_test_009_006_execute+0x22>
  thread_t *ctp = currp;
 800260c:	69a4      	ldr	r4, [r4, #24]
 800260e:	2320      	movs	r3, #32
 8002610:	f383 8811 	msr	BASEPRI, r3
  if ((ctp->epending & events) != events) {
 8002614:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002616:	3301      	adds	r3, #1
 8002618:	d009      	beq.n	800262e <rt_test_009_006_execute+0x10e>
    if (TIME_IMMEDIATE == timeout) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
 800261a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800261e:	6263      	str	r3, [r4, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 8002620:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002624:	200b      	movs	r0, #11
 8002626:	f7ff ff2b 	bl	8002480 <chSchGoSleepTimeoutS>
 800262a:	2800      	cmp	r0, #0
 800262c:	db25      	blt.n	800267a <rt_test_009_006_execute+0x15a>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->epending &= ~events;
 800262e:	2300      	movs	r3, #0
 8002630:	6363      	str	r3, [r4, #52]	; 0x34
 8002632:	f383 8811 	msr	BASEPRI, r3
    test_assert(m == 0, "spurious event");
 8002636:	4628      	mov	r0, r5
 8002638:	4914      	ldr	r1, [pc, #80]	; (800268c <rt_test_009_006_execute+0x16c>)
}
 800263a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(m == 0, "spurious event");
 800263e:	f7fe ba97 	b.w	8000b70 <_test_assert>
  ctp->epending &= ~m;
 8002642:	6358      	str	r0, [r3, #52]	; 0x34
 8002644:	f380 8811 	msr	BASEPRI, r0
 8002648:	e796      	b.n	8002578 <rt_test_009_006_execute+0x58>
  ctp->epending &= ~events;
 800264a:	6358      	str	r0, [r3, #52]	; 0x34
 800264c:	f380 8811 	msr	BASEPRI, r0
 8002650:	e7a1      	b.n	8002596 <rt_test_009_006_execute+0x76>
    ctp->u.ewmask = events;
 8002652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002656:	6273      	str	r3, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 8002658:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800265c:	200a      	movs	r0, #10
 800265e:	f7ff ff0f 	bl	8002480 <chSchGoSleepTimeoutS>
 8002662:	2800      	cmp	r0, #0
 8002664:	db05      	blt.n	8002672 <rt_test_009_006_execute+0x152>
    m = ctp->epending & events;
 8002666:	6b75      	ldr	r5, [r6, #52]	; 0x34
 8002668:	e7c3      	b.n	80025f2 <rt_test_009_006_execute+0xd2>
 800266a:	f385 8811 	msr	BASEPRI, r5
 800266e:	2001      	movs	r0, #1
 8002670:	e7b4      	b.n	80025dc <rt_test_009_006_execute+0xbc>
 8002672:	f385 8811 	msr	BASEPRI, r5
 8002676:	2001      	movs	r0, #1
 8002678:	e7c2      	b.n	8002600 <rt_test_009_006_execute+0xe0>
 800267a:	f385 8811 	msr	BASEPRI, r5
 800267e:	2501      	movs	r5, #1
 8002680:	e7d9      	b.n	8002636 <rt_test_009_006_execute+0x116>
 8002682:	bf00      	nop
 8002684:	2000149c 	.word	0x2000149c
 8002688:	200009b0 	.word	0x200009b0
 800268c:	08009c00 	.word	0x08009c00

08002690 <chGuardedPoolAllocTimeout>:
 * @retval NULL         if the operation timed out.
 *
 * @api
 */
void *chGuardedPoolAllocTimeout(guarded_memory_pool_t *gmp,
                                sysinterval_t timeout) {
 8002690:	b510      	push	{r4, lr}
 8002692:	2320      	movs	r3, #32
 8002694:	4604      	mov	r4, r0
 8002696:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 800269a:	6882      	ldr	r2, [r0, #8]
 800269c:	1e53      	subs	r3, r2, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	6083      	str	r3, [r0, #8]
 80026a2:	db07      	blt.n	80026b4 <chGuardedPoolAllocTimeout+0x24>
  objp = mp->next;
 80026a4:	68e0      	ldr	r0, [r4, #12]
  if (objp != NULL) {
 80026a6:	b1c8      	cbz	r0, 80026dc <chGuardedPoolAllocTimeout+0x4c>
    mp->next = mp->next->next;
 80026a8:	6803      	ldr	r3, [r0, #0]
 80026aa:	60e3      	str	r3, [r4, #12]
 80026ac:	2300      	movs	r3, #0
 80026ae:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chGuardedPoolAllocTimeoutS(gmp, timeout);
  chSysUnlock();

  return p;
}
 80026b2:	bd10      	pop	{r4, pc}
    if (TIME_IMMEDIATE == timeout) {
 80026b4:	4608      	mov	r0, r1
 80026b6:	b1d9      	cbz	r1, 80026f0 <chGuardedPoolAllocTimeout+0x60>
    currp->u.wtsemp = sp;
 80026b8:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <chGuardedPoolAllocTimeout+0x64>)
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	625c      	str	r4, [r3, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
 80026be:	6862      	ldr	r2, [r4, #4]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 80026c0:	2005      	movs	r0, #5
 80026c2:	e9c3 4200 	strd	r4, r2, [r3]
  tp->queue.prev->queue.next = tp;
 80026c6:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 80026c8:	6063      	str	r3, [r4, #4]
 80026ca:	f7ff fed9 	bl	8002480 <chSchGoSleepTimeoutS>
  if (msg != MSG_OK) {
 80026ce:	2800      	cmp	r0, #0
 80026d0:	d0e8      	beq.n	80026a4 <chGuardedPoolAllocTimeout+0x14>
    return NULL;
 80026d2:	2000      	movs	r0, #0
 80026d4:	2300      	movs	r3, #0
 80026d6:	f383 8811 	msr	BASEPRI, r3
}
 80026da:	bd10      	pop	{r4, pc}
  else if (mp->provider != NULL) {
 80026dc:	69a3      	ldr	r3, [r4, #24]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0f7      	beq.n	80026d2 <chGuardedPoolAllocTimeout+0x42>
    objp = mp->provider(mp->object_size, mp->align);
 80026e2:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 80026e6:	4798      	blx	r3
 80026e8:	2300      	movs	r3, #0
 80026ea:	f383 8811 	msr	BASEPRI, r3
}
 80026ee:	bd10      	pop	{r4, pc}
      sp->cnt++;
 80026f0:	60a2      	str	r2, [r4, #8]
  if (msg != MSG_OK) {
 80026f2:	e7db      	b.n	80026ac <chGuardedPoolAllocTimeout+0x1c>
 80026f4:	200009b0 	.word	0x200009b0
	...

08002700 <oslib_test_007_003_execute>:

static void oslib_test_007_003_execute(void) {
 8002700:	b508      	push	{r3, lr}

  /* [7.3.1] Trying to allocate with 100mS timeout, must fail because
     the pool is empty.*/
  test_set_step(1);
 8002702:	4b08      	ldr	r3, [pc, #32]	; (8002724 <oslib_test_007_003_execute+0x24>)
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 8002704:	4808      	ldr	r0, [pc, #32]	; (8002728 <oslib_test_007_003_execute+0x28>)
  test_set_step(1);
 8002706:	2201      	movs	r2, #1
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 8002708:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  test_set_step(1);
 800270c:	601a      	str	r2, [r3, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 800270e:	f7ff ffbf 	bl	8002690 <chGuardedPoolAllocTimeout>
 8002712:	fab0 f080 	clz	r0, r0
  }
  test_end_step(1);
}
 8002716:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 800271a:	4904      	ldr	r1, [pc, #16]	; (800272c <oslib_test_007_003_execute+0x2c>)
 800271c:	0940      	lsrs	r0, r0, #5
 800271e:	f7fe ba27 	b.w	8000b70 <_test_assert>
 8002722:	bf00      	nop
 8002724:	2000149c 	.word	0x2000149c
 8002728:	20000810 	.word	0x20000810
 800272c:	08008f70 	.word	0x08008f70

08002730 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 8002730:	b161      	cbz	r1, 800274c <chThdEnqueueTimeoutS+0x1c>
  queue_insert(currp, tqp);
 8002732:	4a08      	ldr	r2, [pc, #32]	; (8002754 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8002734:	b410      	push	{r4}
  queue_insert(currp, tqp);
 8002736:	6992      	ldr	r2, [r2, #24]
  tp->queue.prev             = tqp->prev;
 8002738:	6844      	ldr	r4, [r0, #4]
 800273a:	4603      	mov	r3, r0
 800273c:	e9c2 3400 	strd	r3, r4, [r2]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002740:	2004      	movs	r0, #4
  tp->queue.prev->queue.next = tp;
 8002742:	6022      	str	r2, [r4, #0]
}
 8002744:	bc10      	pop	{r4}
  tqp->prev                  = tp;
 8002746:	605a      	str	r2, [r3, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002748:	f7ff be9a 	b.w	8002480 <chSchGoSleepTimeoutS>
}
 800274c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	200009b0 	.word	0x200009b0
	...

08002760 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8002760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002764:	b085      	sub	sp, #20
 8002766:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = oqp->q_notify;
 800276a:	69c7      	ldr	r7, [r0, #28]
 800276c:	f04f 0920 	mov.w	r9, #32
 8002770:	f389 8811 	msr	BASEPRI, r9

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8002774:	b3a2      	cbz	r2, 80027e0 <oqWriteTimeout+0x80>
 8002776:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800277a:	4604      	mov	r4, r0
 800277c:	460e      	mov	r6, r1
 800277e:	f04f 0a00 	mov.w	sl, #0
  if (n > oqGetEmptyI(oqp)) {
 8002782:	68a2      	ldr	r2, [r4, #8]
 8002784:	4593      	cmp	fp, r2
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8002786:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    n = oqGetEmptyI(oqp);
 800278a:	bf8c      	ite	hi
 800278c:	68a5      	ldrhi	r5, [r4, #8]
  if (n > oqGetEmptyI(oqp)) {
 800278e:	465d      	movls	r5, fp
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8002790:	eba2 0800 	sub.w	r8, r2, r0
  if (n < s1) {
 8002794:	45a8      	cmp	r8, r5
 8002796:	d844      	bhi.n	8002822 <oqWriteTimeout+0xc2>
  else if (n > s1) {
 8002798:	d229      	bcs.n	80027ee <oqWriteTimeout+0x8e>
    s2 = n - s1;
 800279a:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 800279e:	4642      	mov	r2, r8
 80027a0:	4631      	mov	r1, r6
    s2 = n - s1;
 80027a2:	9301      	str	r3, [sp, #4]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 80027a4:	f7fd fdd2 	bl	800034c <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 80027a8:	eb06 0108 	add.w	r1, r6, r8
 80027ac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80027b0:	68e0      	ldr	r0, [r4, #12]
 80027b2:	4642      	mov	r2, r8
 80027b4:	f7fd fdca 	bl	800034c <memcpy>
  oqp->q_counter -= n;
 80027b8:	68a2      	ldr	r2, [r4, #8]
    oqp->q_wrptr = oqp->q_buffer + s2;
 80027ba:	68e1      	ldr	r1, [r4, #12]
 80027bc:	4643      	mov	r3, r8
 80027be:	18cb      	adds	r3, r1, r3
  oqp->q_counter -= n;
 80027c0:	1b52      	subs	r2, r2, r5
    oqp->q_wrptr = oqp->q_buffer + s2;
 80027c2:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
 80027c4:	60a2      	str	r2, [r4, #8]
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 80027c6:	b10f      	cbz	r7, 80027cc <oqWriteTimeout+0x6c>
        nfy(oqp);
 80027c8:	4620      	mov	r0, r4
 80027ca:	47b8      	blx	r7
 80027cc:	f38a 8811 	msr	BASEPRI, sl
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 80027d0:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 80027d4:	442e      	add	r6, r5
 80027d6:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 80027da:	f1bb 0f00 	cmp.w	fp, #0
 80027de:	d1d0      	bne.n	8002782 <oqWriteTimeout+0x22>
  if (n > oqGetEmptyI(oqp)) {
 80027e0:	9803      	ldr	r0, [sp, #12]
 80027e2:	2300      	movs	r3, #0
 80027e4:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 80027e8:	b005      	add	sp, #20
 80027ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80027ee:	462a      	mov	r2, r5
 80027f0:	4631      	mov	r1, r6
 80027f2:	f7fd fdab 	bl	800034c <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 80027f6:	68e2      	ldr	r2, [r4, #12]
 80027f8:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 80027fa:	68a2      	ldr	r2, [r4, #8]
 80027fc:	1b52      	subs	r2, r2, r5
 80027fe:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8002800:	2d00      	cmp	r5, #0
 8002802:	d1e0      	bne.n	80027c6 <oqWriteTimeout+0x66>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
 8002804:	9902      	ldr	r1, [sp, #8]
 8002806:	4620      	mov	r0, r4
 8002808:	f7ff ff92 	bl	8002730 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 800280c:	2800      	cmp	r0, #0
 800280e:	d0b8      	beq.n	8002782 <oqWriteTimeout+0x22>
 8002810:	9b03      	ldr	r3, [sp, #12]
 8002812:	eba3 000b 	sub.w	r0, r3, fp
 8002816:	2300      	movs	r3, #0
 8002818:	f383 8811 	msr	BASEPRI, r3
}
 800281c:	b005      	add	sp, #20
 800281e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8002822:	462a      	mov	r2, r5
 8002824:	4631      	mov	r1, r6
 8002826:	f7fd fd91 	bl	800034c <memcpy>
    oqp->q_wrptr += n;
 800282a:	6962      	ldr	r2, [r4, #20]
 800282c:	442a      	add	r2, r5
 800282e:	6162      	str	r2, [r4, #20]
 8002830:	e7e3      	b.n	80027fa <oqWriteTimeout+0x9a>
 8002832:	bf00      	nop
	...

08002840 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8002840:	3030      	adds	r0, #48	; 0x30
 8002842:	f7ff bf8d 	b.w	8002760 <oqWriteTimeout>
 8002846:	bf00      	nop
	...

08002850 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8002850:	3030      	adds	r0, #48	; 0x30
 8002852:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002856:	f7ff bf83 	b.w	8002760 <oqWriteTimeout>
 800285a:	bf00      	nop
 800285c:	0000      	movs	r0, r0
	...

08002860 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8002860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002862:	4604      	mov	r4, r0
 8002864:	460f      	mov	r7, r1
 8002866:	4616      	mov	r6, r2
 8002868:	2320      	movs	r3, #32
 800286a:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 800286e:	e003      	b.n	8002878 <oqPutTimeout+0x18>
 8002870:	f7ff ff5e 	bl	8002730 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8002874:	2800      	cmp	r0, #0
 8002876:	db18      	blt.n	80028aa <oqPutTimeout+0x4a>
  while (oqIsFullI(oqp)) {
 8002878:	68a5      	ldr	r5, [r4, #8]
 800287a:	4631      	mov	r1, r6
 800287c:	4620      	mov	r0, r4
 800287e:	2d00      	cmp	r5, #0
 8002880:	d0f6      	beq.n	8002870 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
 8002882:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8002884:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8002886:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8002888:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800288a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 800288c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800288e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8002890:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8002894:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8002896:	bf24      	itt	cs
 8002898:	68e3      	ldrcs	r3, [r4, #12]
 800289a:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 800289c:	69e3      	ldr	r3, [r4, #28]
 800289e:	b103      	cbz	r3, 80028a2 <oqPutTimeout+0x42>
    oqp->q_notify(oqp);
 80028a0:	4798      	blx	r3
 80028a2:	2000      	movs	r0, #0
 80028a4:	f380 8811 	msr	BASEPRI, r0
}
 80028a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028aa:	f385 8811 	msr	BASEPRI, r5
 80028ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080028b0 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 80028b0:	3030      	adds	r0, #48	; 0x30
 80028b2:	f7ff bfd5 	b.w	8002860 <oqPutTimeout>
 80028b6:	bf00      	nop
	...

080028c0 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 80028c0:	3030      	adds	r0, #48	; 0x30
 80028c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028c6:	f7ff bfcb 	b.w	8002860 <oqPutTimeout>
 80028ca:	bf00      	nop
 80028cc:	0000      	movs	r0, r0
	...

080028d0 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 80028d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028d4:	b085      	sub	sp, #20
 80028d6:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = iqp->q_notify;
 80028da:	69c7      	ldr	r7, [r0, #28]
 80028dc:	f04f 0920 	mov.w	r9, #32
 80028e0:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 80028e4:	2a00      	cmp	r2, #0
 80028e6:	d034      	beq.n	8002952 <iqReadTimeout+0x82>
 80028e8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80028ec:	4604      	mov	r4, r0
 80028ee:	460e      	mov	r6, r1
 80028f0:	f04f 0a00 	mov.w	sl, #0
  if (n > iqGetFullI(iqp)) {
 80028f4:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80028f6:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 80028f8:	4593      	cmp	fp, r2
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80028fa:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 80028fc:	bf8c      	ite	hi
 80028fe:	68a5      	ldrhi	r5, [r4, #8]
  if (n > iqGetFullI(iqp)) {
 8002900:	465d      	movls	r5, fp
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8002902:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
 8002906:	45a8      	cmp	r8, r5
 8002908:	d844      	bhi.n	8002994 <iqReadTimeout+0xc4>
  else if (n > s1) {
 800290a:	d229      	bcs.n	8002960 <iqReadTimeout+0x90>
    s2 = n - s1;
 800290c:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8002910:	4642      	mov	r2, r8
 8002912:	4630      	mov	r0, r6
    s2 = n - s1;
 8002914:	9301      	str	r3, [sp, #4]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8002916:	f7fd fd19 	bl	800034c <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 800291a:	eb06 0008 	add.w	r0, r6, r8
 800291e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8002922:	68e1      	ldr	r1, [r4, #12]
 8002924:	4642      	mov	r2, r8
 8002926:	f7fd fd11 	bl	800034c <memcpy>
  iqp->q_counter -= n;
 800292a:	68a2      	ldr	r2, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer + s2;
 800292c:	68e1      	ldr	r1, [r4, #12]
 800292e:	4643      	mov	r3, r8
 8002930:	18cb      	adds	r3, r1, r3
  iqp->q_counter -= n;
 8002932:	1b52      	subs	r2, r2, r5
    iqp->q_rdptr = iqp->q_buffer + s2;
 8002934:	61a3      	str	r3, [r4, #24]
  iqp->q_counter -= n;
 8002936:	60a2      	str	r2, [r4, #8]
      if (nfy != NULL) {
 8002938:	b10f      	cbz	r7, 800293e <iqReadTimeout+0x6e>
        nfy(iqp);
 800293a:	4620      	mov	r0, r4
 800293c:	47b8      	blx	r7
 800293e:	f38a 8811 	msr	BASEPRI, sl
      n  -= done;
 8002942:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 8002946:	442e      	add	r6, r5
 8002948:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 800294c:	f1bb 0f00 	cmp.w	fp, #0
 8002950:	d1d0      	bne.n	80028f4 <iqReadTimeout+0x24>
  if (n > iqGetFullI(iqp)) {
 8002952:	9803      	ldr	r0, [sp, #12]
 8002954:	2300      	movs	r3, #0
 8002956:	f383 8811 	msr	BASEPRI, r3
}
 800295a:	b005      	add	sp, #20
 800295c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8002960:	462a      	mov	r2, r5
 8002962:	4630      	mov	r0, r6
 8002964:	f7fd fcf2 	bl	800034c <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8002968:	68e2      	ldr	r2, [r4, #12]
 800296a:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 800296c:	68a2      	ldr	r2, [r4, #8]
 800296e:	1b52      	subs	r2, r2, r5
 8002970:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8002972:	2d00      	cmp	r5, #0
 8002974:	d1e0      	bne.n	8002938 <iqReadTimeout+0x68>
 8002976:	9902      	ldr	r1, [sp, #8]
 8002978:	4620      	mov	r0, r4
 800297a:	f7ff fed9 	bl	8002730 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 800297e:	2800      	cmp	r0, #0
 8002980:	d0b8      	beq.n	80028f4 <iqReadTimeout+0x24>
 8002982:	9b03      	ldr	r3, [sp, #12]
 8002984:	eba3 000b 	sub.w	r0, r3, fp
 8002988:	2300      	movs	r3, #0
 800298a:	f383 8811 	msr	BASEPRI, r3
}
 800298e:	b005      	add	sp, #20
 8002990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8002994:	462a      	mov	r2, r5
 8002996:	4630      	mov	r0, r6
 8002998:	f7fd fcd8 	bl	800034c <memcpy>
    iqp->q_rdptr += n;
 800299c:	69a2      	ldr	r2, [r4, #24]
 800299e:	442a      	add	r2, r5
 80029a0:	61a2      	str	r2, [r4, #24]
 80029a2:	e7e3      	b.n	800296c <iqReadTimeout+0x9c>
	...

080029b0 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 80029b0:	300c      	adds	r0, #12
 80029b2:	f7ff bf8d 	b.w	80028d0 <iqReadTimeout>
 80029b6:	bf00      	nop
	...

080029c0 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 80029c0:	300c      	adds	r0, #12
 80029c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029c6:	f7ff bf83 	b.w	80028d0 <iqReadTimeout>
 80029ca:	bf00      	nop
 80029cc:	0000      	movs	r0, r0
	...

080029d0 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 80029d0:	b570      	push	{r4, r5, r6, lr}
 80029d2:	2320      	movs	r3, #32
 80029d4:	4605      	mov	r5, r0
 80029d6:	460e      	mov	r6, r1
 80029d8:	f383 8811 	msr	BASEPRI, r3
 80029dc:	e003      	b.n	80029e6 <iqGetTimeout+0x16>
 80029de:	f7ff fea7 	bl	8002730 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 80029e2:	2800      	cmp	r0, #0
 80029e4:	db1a      	blt.n	8002a1c <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 80029e6:	68ac      	ldr	r4, [r5, #8]
 80029e8:	4631      	mov	r1, r6
 80029ea:	4628      	mov	r0, r5
 80029ec:	2c00      	cmp	r4, #0
 80029ee:	d0f6      	beq.n	80029de <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
 80029f0:	69a9      	ldr	r1, [r5, #24]
  iqp->q_counter--;
 80029f2:	68ab      	ldr	r3, [r5, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 80029f4:	6928      	ldr	r0, [r5, #16]
  b = *iqp->q_rdptr++;
 80029f6:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 80029f8:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 80029fa:	4282      	cmp	r2, r0
  iqp->q_counter--;
 80029fc:	60ab      	str	r3, [r5, #8]
  b = *iqp->q_rdptr++;
 80029fe:	61aa      	str	r2, [r5, #24]
    iqp->q_rdptr = iqp->q_buffer;
 8002a00:	bf28      	it	cs
 8002a02:	68eb      	ldrcs	r3, [r5, #12]
  b = *iqp->q_rdptr++;
 8002a04:	780c      	ldrb	r4, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8002a06:	bf28      	it	cs
 8002a08:	61ab      	strcs	r3, [r5, #24]
  if (iqp->q_notify != NULL) {
 8002a0a:	69eb      	ldr	r3, [r5, #28]
 8002a0c:	b10b      	cbz	r3, 8002a12 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 8002a0e:	4628      	mov	r0, r5
 8002a10:	4798      	blx	r3
 8002a12:	2300      	movs	r3, #0
 8002a14:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8002a18:	4620      	mov	r0, r4
}
 8002a1a:	bd70      	pop	{r4, r5, r6, pc}
 8002a1c:	f384 8811 	msr	BASEPRI, r4
 8002a20:	bd70      	pop	{r4, r5, r6, pc}
 8002a22:	bf00      	nop
	...

08002a30 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8002a30:	300c      	adds	r0, #12
 8002a32:	f7ff bfcd 	b.w	80029d0 <iqGetTimeout>
 8002a36:	bf00      	nop
	...

08002a40 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8002a40:	300c      	adds	r0, #12
 8002a42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a46:	f7ff bfc3 	b.w	80029d0 <iqGetTimeout>
 8002a4a:	bf00      	nop
 8002a4c:	0000      	movs	r0, r0
	...

08002a50 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 8002a50:	b508      	push	{r3, lr}
 8002a52:	4601      	mov	r1, r0
 8002a54:	2320      	movs	r3, #32
 8002a56:	f383 8811 	msr	BASEPRI, r3
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8002a5a:	2008      	movs	r0, #8
 8002a5c:	f7ff fd10 	bl	8002480 <chSchGoSleepTimeoutS>
 8002a60:	2300      	movs	r3, #0
 8002a62:	f383 8811 	msr	BASEPRI, r3
}
 8002a66:	bd08      	pop	{r3, pc}
	...

08002a70 <test_execute.constprop.0>:
 * @retval false        if no errors occurred.
 * @retval true         if one or more tests failed.
 *
 * @api
 */
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
 8002a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a74:	4680      	mov	r8, r0
  int tseq, tcase;

  test_chp = stream;
 8002a76:	f8df b32c 	ldr.w	fp, [pc, #812]	; 8002da4 <test_execute.constprop.0+0x334>
 8002a7a:	4ba9      	ldr	r3, [pc, #676]	; (8002d20 <test_execute.constprop.0+0x2b0>)
  test_println("");
 8002a7c:	48a9      	ldr	r0, [pc, #676]	; (8002d24 <test_execute.constprop.0+0x2b4>)
  test_chp = stream;
 8002a7e:	f8cb 3000 	str.w	r3, [fp]
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
 8002a82:	b083      	sub	sp, #12
  test_println("");
 8002a84:	f7fe f9bc 	bl	8000e00 <test_println>
  if (tsp->name != NULL) {
 8002a88:	f8d8 3000 	ldr.w	r3, [r8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 81fb 	beq.w	8002e88 <test_execute.constprop.0+0x418>
 8002a92:	4ca5      	ldr	r4, [pc, #660]	; (8002d28 <test_execute.constprop.0+0x2b8>)
  while (*msgp)
 8002a94:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8002a96:	f8db 0000 	ldr.w	r0, [fp]
 8002a9a:	6803      	ldr	r3, [r0, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	4798      	blx	r3
  while (*msgp)
 8002aa0:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002aa4:	2900      	cmp	r1, #0
 8002aa6:	d1f6      	bne.n	8002a96 <test_execute.constprop.0+0x26>
    test_print("*** ");
    test_println(tsp->name);
 8002aa8:	f8d8 0000 	ldr.w	r0, [r8]
 8002aac:	f7fe f9a8 	bl	8000e00 <test_println>
  }
  else {
    test_println("*** Test Suite");
  }
  test_println("***");
 8002ab0:	489e      	ldr	r0, [pc, #632]	; (8002d2c <test_execute.constprop.0+0x2bc>)
 8002ab2:	4c9f      	ldr	r4, [pc, #636]	; (8002d30 <test_execute.constprop.0+0x2c0>)
 8002ab4:	f7fe f9a4 	bl	8000e00 <test_println>
  while (*msgp)
 8002ab8:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8002aba:	f8db 0000 	ldr.w	r0, [fp]
 8002abe:	6803      	ldr	r3, [r0, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	4798      	blx	r3
  while (*msgp)
 8002ac4:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002ac8:	2900      	cmp	r1, #0
 8002aca:	d1f6      	bne.n	8002aba <test_execute.constprop.0+0x4a>
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
 8002acc:	4899      	ldr	r0, [pc, #612]	; (8002d34 <test_execute.constprop.0+0x2c4>)
 8002ace:	4c9a      	ldr	r4, [pc, #616]	; (8002d38 <test_execute.constprop.0+0x2c8>)
 8002ad0:	f7fe f996 	bl	8000e00 <test_println>
  while (*msgp)
 8002ad4:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8002ad6:	f8db 0000 	ldr.w	r0, [fp]
 8002ada:	6803      	ldr	r3, [r0, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	4798      	blx	r3
  while (*msgp)
 8002ae0:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002ae4:	2900      	cmp	r1, #0
 8002ae6:	d1f6      	bne.n	8002ad6 <test_execute.constprop.0+0x66>
#if defined(PLATFORM_NAME)
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
 8002ae8:	4894      	ldr	r0, [pc, #592]	; (8002d3c <test_execute.constprop.0+0x2cc>)
 8002aea:	4c95      	ldr	r4, [pc, #596]	; (8002d40 <test_execute.constprop.0+0x2d0>)
 8002aec:	f7fe f988 	bl	8000e00 <test_println>
  while (*msgp)
 8002af0:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8002af2:	f8db 0000 	ldr.w	r0, [fp]
 8002af6:	6803      	ldr	r3, [r0, #0]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	4798      	blx	r3
  while (*msgp)
 8002afc:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002b00:	2900      	cmp	r1, #0
 8002b02:	d1f6      	bne.n	8002af2 <test_execute.constprop.0+0x82>
#endif
#if defined(BOARD_NAME)
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 8002b04:	488f      	ldr	r0, [pc, #572]	; (8002d44 <test_execute.constprop.0+0x2d4>)
  {
    extern uint8_t __text_base__,   __text_end__,
                   __rodata_base__, __rodata_end__,
                   __data_base__,   __data_end__,
                   __bss_base__,    __bss_end__;
    test_println("***");
 8002b06:	4c90      	ldr	r4, [pc, #576]	; (8002d48 <test_execute.constprop.0+0x2d8>)
  test_println(BOARD_NAME);
 8002b08:	f7fe f97a 	bl	8000e00 <test_println>
    test_println("***");
 8002b0c:	4887      	ldr	r0, [pc, #540]	; (8002d2c <test_execute.constprop.0+0x2bc>)
 8002b0e:	f7fe f977 	bl	8000e00 <test_println>
  while (*msgp)
 8002b12:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8002b14:	f8db 0000 	ldr.w	r0, [fp]
 8002b18:	6803      	ldr	r3, [r0, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4798      	blx	r3
  while (*msgp)
 8002b1e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002b22:	2900      	cmp	r1, #0
 8002b24:	d1f6      	bne.n	8002b14 <test_execute.constprop.0+0xa4>
    test_print("*** Text size:    ");
    test_printn((uint32_t)(&__text_end__ - &__text_base__));
 8002b26:	4b89      	ldr	r3, [pc, #548]	; (8002d4c <test_execute.constprop.0+0x2dc>)
 8002b28:	4889      	ldr	r0, [pc, #548]	; (8002d50 <test_execute.constprop.0+0x2e0>)
    test_println(" bytes");
 8002b2a:	4c8a      	ldr	r4, [pc, #552]	; (8002d54 <test_execute.constprop.0+0x2e4>)
    test_printn((uint32_t)(&__text_end__ - &__text_base__));
 8002b2c:	1ac0      	subs	r0, r0, r3
 8002b2e:	f7fe f8b7 	bl	8000ca0 <test_printn>
    test_println(" bytes");
 8002b32:	4889      	ldr	r0, [pc, #548]	; (8002d58 <test_execute.constprop.0+0x2e8>)
 8002b34:	f7fe f964 	bl	8000e00 <test_println>
  while (*msgp)
 8002b38:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8002b3a:	f8db 0000 	ldr.w	r0, [fp]
 8002b3e:	6803      	ldr	r3, [r0, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	4798      	blx	r3
  while (*msgp)
 8002b44:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002b48:	2900      	cmp	r1, #0
 8002b4a:	d1f6      	bne.n	8002b3a <test_execute.constprop.0+0xca>
    test_print("*** RO data size: ");
    test_printn((uint32_t)(&__rodata_end__ - &__rodata_base__));
 8002b4c:	4b83      	ldr	r3, [pc, #524]	; (8002d5c <test_execute.constprop.0+0x2ec>)
 8002b4e:	4884      	ldr	r0, [pc, #528]	; (8002d60 <test_execute.constprop.0+0x2f0>)
    test_println(" bytes");
 8002b50:	4c84      	ldr	r4, [pc, #528]	; (8002d64 <test_execute.constprop.0+0x2f4>)
    test_printn((uint32_t)(&__rodata_end__ - &__rodata_base__));
 8002b52:	1ac0      	subs	r0, r0, r3
 8002b54:	f7fe f8a4 	bl	8000ca0 <test_printn>
    test_println(" bytes");
 8002b58:	487f      	ldr	r0, [pc, #508]	; (8002d58 <test_execute.constprop.0+0x2e8>)
 8002b5a:	f7fe f951 	bl	8000e00 <test_println>
  while (*msgp)
 8002b5e:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8002b60:	f8db 0000 	ldr.w	r0, [fp]
 8002b64:	6803      	ldr	r3, [r0, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	4798      	blx	r3
  while (*msgp)
 8002b6a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002b6e:	2900      	cmp	r1, #0
 8002b70:	d1f6      	bne.n	8002b60 <test_execute.constprop.0+0xf0>
    test_print("*** Data size:    ");
    test_printn((uint32_t)(&__data_end__ - &__data_base__));
 8002b72:	4b7d      	ldr	r3, [pc, #500]	; (8002d68 <test_execute.constprop.0+0x2f8>)
 8002b74:	487d      	ldr	r0, [pc, #500]	; (8002d6c <test_execute.constprop.0+0x2fc>)
    test_println(" bytes");
 8002b76:	4c7e      	ldr	r4, [pc, #504]	; (8002d70 <test_execute.constprop.0+0x300>)
    test_printn((uint32_t)(&__data_end__ - &__data_base__));
 8002b78:	1ac0      	subs	r0, r0, r3
 8002b7a:	f7fe f891 	bl	8000ca0 <test_printn>
    test_println(" bytes");
 8002b7e:	4876      	ldr	r0, [pc, #472]	; (8002d58 <test_execute.constprop.0+0x2e8>)
 8002b80:	f7fe f93e 	bl	8000e00 <test_println>
  while (*msgp)
 8002b84:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8002b86:	f8db 0000 	ldr.w	r0, [fp]
 8002b8a:	6803      	ldr	r3, [r0, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	4798      	blx	r3
  while (*msgp)
 8002b90:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002b94:	2900      	cmp	r1, #0
 8002b96:	d1f6      	bne.n	8002b86 <test_execute.constprop.0+0x116>
    test_print("*** BSS size:     ");
    test_printn((uint32_t)(&__bss_end__ - &__bss_base__));
 8002b98:	4b76      	ldr	r3, [pc, #472]	; (8002d74 <test_execute.constprop.0+0x304>)
 8002b9a:	4877      	ldr	r0, [pc, #476]	; (8002d78 <test_execute.constprop.0+0x308>)
 8002b9c:	9101      	str	r1, [sp, #4]
 8002b9e:	1ac0      	subs	r0, r0, r3
 8002ba0:	f7fe f87e 	bl	8000ca0 <test_printn>
    test_println(" bytes");
 8002ba4:	486c      	ldr	r0, [pc, #432]	; (8002d58 <test_execute.constprop.0+0x2e8>)
 8002ba6:	f7fe f92b 	bl	8000e00 <test_println>
  }
#endif
#if defined(TEST_REPORT_HOOK_HEADER)
  TEST_REPORT_HOOK_HEADER
#endif
  test_println("");
 8002baa:	485e      	ldr	r0, [pc, #376]	; (8002d24 <test_execute.constprop.0+0x2b4>)
 8002bac:	f7fe f928 	bl	8000e00 <test_println>

  test_global_fail = false;
  tseq = 0;
  while (tsp->sequences[tseq] != NULL) {
 8002bb0:	f8d8 3004 	ldr.w	r3, [r8, #4]
  test_global_fail = false;
 8002bb4:	4a71      	ldr	r2, [pc, #452]	; (8002d7c <test_execute.constprop.0+0x30c>)
  while (tsp->sequences[tseq] != NULL) {
 8002bb6:	681b      	ldr	r3, [r3, #0]
  test_global_fail = false;
 8002bb8:	9901      	ldr	r1, [sp, #4]
 8002bba:	7011      	strb	r1, [r2, #0]
  while (tsp->sequences[tseq] != NULL) {
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 80fa 	beq.w	8002db6 <test_execute.constprop.0+0x346>
 8002bc2:	468a      	mov	sl, r1
  tseq = 0;
 8002bc4:	4689      	mov	r9, r1
 8002bc6:	244c      	movs	r4, #76	; 0x4c
    streamPut(test_chp, '=');
 8002bc8:	f8db 0000 	ldr.w	r0, [fp]
 8002bcc:	6803      	ldr	r3, [r0, #0]
 8002bce:	213d      	movs	r1, #61	; 0x3d
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	4798      	blx	r3
  for (i = 0; i < 76; i++)
 8002bd4:	3c01      	subs	r4, #1
 8002bd6:	d1f7      	bne.n	8002bc8 <test_execute.constprop.0+0x158>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8002bd8:	f8db 0000 	ldr.w	r0, [fp]
 8002bdc:	4968      	ldr	r1, [pc, #416]	; (8002d80 <test_execute.constprop.0+0x310>)
 8002bde:	6803      	ldr	r3, [r0, #0]
 8002be0:	4c68      	ldr	r4, [pc, #416]	; (8002d84 <test_execute.constprop.0+0x314>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2202      	movs	r2, #2
 8002be6:	4798      	blx	r3
  while (*msgp)
 8002be8:	213d      	movs	r1, #61	; 0x3d
    streamPut(test_chp, *msgp++);
 8002bea:	f8db 0000 	ldr.w	r0, [fp]
 8002bee:	6803      	ldr	r3, [r0, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	4798      	blx	r3
  while (*msgp)
 8002bf4:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002bf8:	2900      	cmp	r1, #0
 8002bfa:	d1f6      	bne.n	8002bea <test_execute.constprop.0+0x17a>
#if TEST_CFG_SHOW_SEQUENCES == TRUE
    print_fat_line();
    test_print("=== Test Sequence ");
    test_printn(tseq + 1);
 8002bfc:	f109 0901 	add.w	r9, r9, #1
 8002c00:	4648      	mov	r0, r9
 8002c02:	4c61      	ldr	r4, [pc, #388]	; (8002d88 <test_execute.constprop.0+0x318>)
 8002c04:	f7fe f84c 	bl	8000ca0 <test_printn>
  while (*msgp)
 8002c08:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 8002c0a:	f8db 0000 	ldr.w	r0, [fp]
 8002c0e:	6803      	ldr	r3, [r0, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	4798      	blx	r3
  while (*msgp)
 8002c14:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002c18:	2900      	cmp	r1, #0
 8002c1a:	d1f6      	bne.n	8002c0a <test_execute.constprop.0+0x19a>
    test_print(" (");
    test_print(tsp->sequences[tseq]->name);
 8002c1c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002c20:	f853 300a 	ldr.w	r3, [r3, sl]
 8002c24:	681c      	ldr	r4, [r3, #0]
  while (*msgp)
 8002c26:	7821      	ldrb	r1, [r4, #0]
 8002c28:	b141      	cbz	r1, 8002c3c <test_execute.constprop.0+0x1cc>
    streamPut(test_chp, *msgp++);
 8002c2a:	f8db 0000 	ldr.w	r0, [fp]
 8002c2e:	6803      	ldr	r3, [r0, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	4798      	blx	r3
  while (*msgp)
 8002c34:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002c38:	2900      	cmp	r1, #0
 8002c3a:	d1f6      	bne.n	8002c2a <test_execute.constprop.0+0x1ba>
    test_println(")");
 8002c3c:	4853      	ldr	r0, [pc, #332]	; (8002d8c <test_execute.constprop.0+0x31c>)
 8002c3e:	f7fe f8df 	bl	8000e00 <test_println>
#endif
    tcase = 0;
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
 8002c42:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8002c46:	f852 300a 	ldr.w	r3, [r2, sl]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 80aa 	beq.w	8002da8 <test_execute.constprop.0+0x338>
 8002c54:	4d4e      	ldr	r5, [pc, #312]	; (8002d90 <test_execute.constprop.0+0x320>)
    tcase = 0;
 8002c56:	2600      	movs	r6, #0
      print_line();
 8002c58:	4f4e      	ldr	r7, [pc, #312]	; (8002d94 <test_execute.constprop.0+0x324>)
 8002c5a:	f7fe f959 	bl	8000f10 <print_line>
 8002c5e:	00b4      	lsls	r4, r6, #2
  while (*msgp)
 8002c60:	212d      	movs	r1, #45	; 0x2d
    streamPut(test_chp, *msgp++);
 8002c62:	f8db 0000 	ldr.w	r0, [fp]
 8002c66:	6803      	ldr	r3, [r0, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	4798      	blx	r3
  while (*msgp)
 8002c6c:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8002c70:	2900      	cmp	r1, #0
 8002c72:	d1f6      	bne.n	8002c62 <test_execute.constprop.0+0x1f2>
      test_print("--- Test Case ");
      test_printn(tseq + 1);
 8002c74:	4648      	mov	r0, r9
 8002c76:	f7fe f813 	bl	8000ca0 <test_printn>
    streamPut(test_chp, *msgp++);
 8002c7a:	f8db 0000 	ldr.w	r0, [fp]
      test_print(".");
      test_printn(tcase + 1);
 8002c7e:	4f42      	ldr	r7, [pc, #264]	; (8002d88 <test_execute.constprop.0+0x318>)
    streamPut(test_chp, *msgp++);
 8002c80:	6803      	ldr	r3, [r0, #0]
 8002c82:	212e      	movs	r1, #46	; 0x2e
 8002c84:	68db      	ldr	r3, [r3, #12]
      test_printn(tcase + 1);
 8002c86:	3601      	adds	r6, #1
    streamPut(test_chp, *msgp++);
 8002c88:	4798      	blx	r3
      test_printn(tcase + 1);
 8002c8a:	4630      	mov	r0, r6
 8002c8c:	f7fe f808 	bl	8000ca0 <test_printn>
  while (*msgp)
 8002c90:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 8002c92:	f8db 0000 	ldr.w	r0, [fp]
 8002c96:	6803      	ldr	r3, [r0, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	4798      	blx	r3
  while (*msgp)
 8002c9c:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8002ca0:	2900      	cmp	r1, #0
 8002ca2:	d1f6      	bne.n	8002c92 <test_execute.constprop.0+0x222>
      test_print(" (");
      test_print(tsp->sequences[tseq]->cases[tcase]->name);
 8002ca4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002ca8:	f853 300a 	ldr.w	r3, [r3, sl]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	591b      	ldr	r3, [r3, r4]
 8002cb0:	681f      	ldr	r7, [r3, #0]
  while (*msgp)
 8002cb2:	7839      	ldrb	r1, [r7, #0]
 8002cb4:	b141      	cbz	r1, 8002cc8 <test_execute.constprop.0+0x258>
    streamPut(test_chp, *msgp++);
 8002cb6:	f8db 0000 	ldr.w	r0, [fp]
 8002cba:	6803      	ldr	r3, [r0, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	4798      	blx	r3
  while (*msgp)
 8002cc0:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8002cc4:	2900      	cmp	r1, #0
 8002cc6:	d1f6      	bne.n	8002cb6 <test_execute.constprop.0+0x246>
      test_println(")");
 8002cc8:	4830      	ldr	r0, [pc, #192]	; (8002d8c <test_execute.constprop.0+0x31c>)
 8002cca:	f7fe f899 	bl	8000e00 <test_println>
  chThdSleep(delay);
 8002cce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002cd2:	f7ff febd 	bl	8002a50 <chThdSleep>
#if TEST_CFG_DELAY_BETWEEN_TESTS > 0
      osalThreadSleepMilliseconds(TEST_CFG_DELAY_BETWEEN_TESTS);
#endif
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 8002cd6:	f8d8 3004 	ldr.w	r3, [r8, #4]
  test_tokp = test_tokens_buffer;
 8002cda:	4a2f      	ldr	r2, [pc, #188]	; (8002d98 <test_execute.constprop.0+0x328>)
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 8002cdc:	f853 300a 	ldr.w	r3, [r3, sl]
  test_local_fail = false;
 8002ce0:	492e      	ldr	r1, [pc, #184]	; (8002d9c <test_execute.constprop.0+0x32c>)
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 8002ce2:	685b      	ldr	r3, [r3, #4]
  test_tokp = test_tokens_buffer;
 8002ce4:	602a      	str	r2, [r5, #0]
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 8002ce6:	591f      	ldr	r7, [r3, r4]
  if (tcp->setup != NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
  test_local_fail = false;
 8002cea:	2200      	movs	r2, #0
 8002cec:	700a      	strb	r2, [r1, #0]
  if (tcp->setup != NULL)
 8002cee:	b103      	cbz	r3, 8002cf2 <test_execute.constprop.0+0x282>
    tcp->setup();
 8002cf0:	4798      	blx	r3
  tcp->execute();
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	4798      	blx	r3
  if (tcp->teardown != NULL)
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	b103      	cbz	r3, 8002cfc <test_execute.constprop.0+0x28c>
    tcp->teardown();
 8002cfa:	4798      	blx	r3
      if (test_local_fail) {
 8002cfc:	4b27      	ldr	r3, [pc, #156]	; (8002d9c <test_execute.constprop.0+0x32c>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d174      	bne.n	8002dee <test_execute.constprop.0+0x37e>
        test_print("] \"");
        test_print(test_failure_message);
        test_println("\")");
      }
      else {
        test_println("--- Result: SUCCESS");
 8002d04:	4826      	ldr	r0, [pc, #152]	; (8002da0 <test_execute.constprop.0+0x330>)
 8002d06:	f7fe f87b 	bl	8000e00 <test_println>
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
 8002d0a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8002d0e:	f852 300a 	ldr.w	r3, [r2, sl]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	441c      	add	r4, r3
 8002d16:	6863      	ldr	r3, [r4, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d19d      	bne.n	8002c58 <test_execute.constprop.0+0x1e8>
 8002d1c:	e044      	b.n	8002da8 <test_execute.constprop.0+0x338>
 8002d1e:	bf00      	nop
 8002d20:	200008e0 	.word	0x200008e0
 8002d24:	08009aec 	.word	0x08009aec
 8002d28:	08009c10 	.word	0x08009c10
 8002d2c:	08009d0c 	.word	0x08009d0c
 8002d30:	08009c18 	.word	0x08009c18
 8002d34:	08009d10 	.word	0x08009d10
 8002d38:	08009c2c 	.word	0x08009c2c
 8002d3c:	08009d28 	.word	0x08009d28
 8002d40:	08009c40 	.word	0x08009c40
 8002d44:	08009d54 	.word	0x08009d54
 8002d48:	08009c54 	.word	0x08009c54
 8002d4c:	080001e0 	.word	0x080001e0
 8002d50:	08008f34 	.word	0x08008f34
 8002d54:	08009c68 	.word	0x08009c68
 8002d58:	08009410 	.word	0x08009410
 8002d5c:	08008f34 	.word	0x08008f34
 8002d60:	0800b5b0 	.word	0x0800b5b0
 8002d64:	08009c7c 	.word	0x08009c7c
 8002d68:	20000800 	.word	0x20000800
 8002d6c:	200008dc 	.word	0x200008dc
 8002d70:	08009c90 	.word	0x08009c90
 8002d74:	200008e0 	.word	0x200008e0
 8002d78:	20001b98 	.word	0x20001b98
 8002d7c:	200013f8 	.word	0x200013f8
 8002d80:	08008f48 	.word	0x08008f48
 8002d84:	08009ca4 	.word	0x08009ca4
 8002d88:	08009cb8 	.word	0x08009cb8
 8002d8c:	08009d80 	.word	0x08009d80
 8002d90:	200014b0 	.word	0x200014b0
 8002d94:	08009cbc 	.word	0x08009cbc
 8002d98:	200014a0 	.word	0x200014a0
 8002d9c:	20001498 	.word	0x20001498
 8002da0:	08009d88 	.word	0x08009d88
 8002da4:	200013f0 	.word	0x200013f0
  while (tsp->sequences[tseq] != NULL) {
 8002da8:	f10a 0a04 	add.w	sl, sl, #4
 8002dac:	f852 300a 	ldr.w	r3, [r2, sl]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f47f af08 	bne.w	8002bc6 <test_execute.constprop.0+0x156>
      }
      tcase++;
    }
    tseq++;
  }
  print_line();
 8002db6:	f7fe f8ab 	bl	8000f10 <print_line>
  test_println("");
 8002dba:	4c35      	ldr	r4, [pc, #212]	; (8002e90 <test_execute.constprop.0+0x420>)
 8002dbc:	4835      	ldr	r0, [pc, #212]	; (8002e94 <test_execute.constprop.0+0x424>)
 8002dbe:	f7fe f81f 	bl	8000e00 <test_println>
  while (*msgp)
 8002dc2:	2146      	movs	r1, #70	; 0x46
    streamPut(test_chp, *msgp++);
 8002dc4:	f8db 0000 	ldr.w	r0, [fp]
 8002dc8:	6803      	ldr	r3, [r0, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	4798      	blx	r3
  while (*msgp)
 8002dce:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002dd2:	2900      	cmp	r1, #0
 8002dd4:	d1f6      	bne.n	8002dc4 <test_execute.constprop.0+0x354>
  test_print("Final result: ");
  if (test_global_fail)
 8002dd6:	4b30      	ldr	r3, [pc, #192]	; (8002e98 <test_execute.constprop.0+0x428>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d04c      	beq.n	8002e78 <test_execute.constprop.0+0x408>
    test_println("FAILURE");
 8002dde:	482f      	ldr	r0, [pc, #188]	; (8002e9c <test_execute.constprop.0+0x42c>)
 8002de0:	f7fe f80e 	bl	8000e00 <test_println>
#if defined(TEST_REPORT_HOOK_END)
  TEST_REPORT_HOOK_END
#endif

  return (msg_t)test_global_fail;
}
 8002de4:	4b2c      	ldr	r3, [pc, #176]	; (8002e98 <test_execute.constprop.0+0x428>)
 8002de6:	7818      	ldrb	r0, [r3, #0]
 8002de8:	b003      	add	sp, #12
 8002dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (test_local_fail) {
 8002dee:	4f2c      	ldr	r7, [pc, #176]	; (8002ea0 <test_execute.constprop.0+0x430>)
  while (*msgp)
 8002df0:	212d      	movs	r1, #45	; 0x2d
    streamPut(test_chp, *msgp++);
 8002df2:	f8db 0000 	ldr.w	r0, [fp]
 8002df6:	6803      	ldr	r3, [r0, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	4798      	blx	r3
  while (*msgp)
 8002dfc:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8002e00:	2900      	cmp	r1, #0
 8002e02:	d1f6      	bne.n	8002df2 <test_execute.constprop.0+0x382>
        test_printn(test_step);
 8002e04:	4b27      	ldr	r3, [pc, #156]	; (8002ea4 <test_execute.constprop.0+0x434>)
 8002e06:	4f28      	ldr	r7, [pc, #160]	; (8002ea8 <test_execute.constprop.0+0x438>)
 8002e08:	6818      	ldr	r0, [r3, #0]
 8002e0a:	f7fd ff49 	bl	8000ca0 <test_printn>
  while (*msgp)
 8002e0e:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 8002e10:	f8db 0000 	ldr.w	r0, [fp]
 8002e14:	6803      	ldr	r3, [r0, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	4798      	blx	r3
  while (*msgp)
 8002e1a:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8002e1e:	2900      	cmp	r1, #0
 8002e20:	d1f6      	bne.n	8002e10 <test_execute.constprop.0+0x3a0>
  while (cp < test_tokp)
 8002e22:	682b      	ldr	r3, [r5, #0]
 8002e24:	4a21      	ldr	r2, [pc, #132]	; (8002eac <test_execute.constprop.0+0x43c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d90a      	bls.n	8002e40 <test_execute.constprop.0+0x3d0>
  char *cp = test_tokens_buffer;
 8002e2a:	4f20      	ldr	r7, [pc, #128]	; (8002eac <test_execute.constprop.0+0x43c>)
    streamPut(test_chp, *cp++);
 8002e2c:	f8db 0000 	ldr.w	r0, [fp]
 8002e30:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002e34:	6803      	ldr	r3, [r0, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	4798      	blx	r3
  while (cp < test_tokp)
 8002e3a:	682b      	ldr	r3, [r5, #0]
 8002e3c:	429f      	cmp	r7, r3
 8002e3e:	d3f5      	bcc.n	8002e2c <test_execute.constprop.0+0x3bc>
  while (*msgp)
 8002e40:	4f1b      	ldr	r7, [pc, #108]	; (8002eb0 <test_execute.constprop.0+0x440>)
 8002e42:	215d      	movs	r1, #93	; 0x5d
    streamPut(test_chp, *msgp++);
 8002e44:	f8db 0000 	ldr.w	r0, [fp]
 8002e48:	6803      	ldr	r3, [r0, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	4798      	blx	r3
  while (*msgp)
 8002e4e:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8002e52:	2900      	cmp	r1, #0
 8002e54:	d1f6      	bne.n	8002e44 <test_execute.constprop.0+0x3d4>
        test_print(test_failure_message);
 8002e56:	4b17      	ldr	r3, [pc, #92]	; (8002eb4 <test_execute.constprop.0+0x444>)
 8002e58:	681f      	ldr	r7, [r3, #0]
  while (*msgp)
 8002e5a:	7839      	ldrb	r1, [r7, #0]
 8002e5c:	b141      	cbz	r1, 8002e70 <test_execute.constprop.0+0x400>
    streamPut(test_chp, *msgp++);
 8002e5e:	f8db 0000 	ldr.w	r0, [fp]
 8002e62:	6803      	ldr	r3, [r0, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	4798      	blx	r3
  while (*msgp)
 8002e68:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8002e6c:	2900      	cmp	r1, #0
 8002e6e:	d1f6      	bne.n	8002e5e <test_execute.constprop.0+0x3ee>
        test_println("\")");
 8002e70:	4811      	ldr	r0, [pc, #68]	; (8002eb8 <test_execute.constprop.0+0x448>)
 8002e72:	f7fd ffc5 	bl	8000e00 <test_println>
 8002e76:	e748      	b.n	8002d0a <test_execute.constprop.0+0x29a>
    test_println("SUCCESS");
 8002e78:	4810      	ldr	r0, [pc, #64]	; (8002ebc <test_execute.constprop.0+0x44c>)
 8002e7a:	f7fd ffc1 	bl	8000e00 <test_println>
}
 8002e7e:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <test_execute.constprop.0+0x428>)
 8002e80:	7818      	ldrb	r0, [r3, #0]
 8002e82:	b003      	add	sp, #12
 8002e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    test_println("*** Test Suite");
 8002e88:	480d      	ldr	r0, [pc, #52]	; (8002ec0 <test_execute.constprop.0+0x450>)
 8002e8a:	f7fd ffb9 	bl	8000e00 <test_println>
 8002e8e:	e60f      	b.n	8002ab0 <test_execute.constprop.0+0x40>
 8002e90:	08009cec 	.word	0x08009cec
 8002e94:	08009aec 	.word	0x08009aec
 8002e98:	200013f8 	.word	0x200013f8
 8002e9c:	08009d9c 	.word	0x08009d9c
 8002ea0:	08009ccc 	.word	0x08009ccc
 8002ea4:	2000149c 	.word	0x2000149c
 8002ea8:	08009ce4 	.word	0x08009ce4
 8002eac:	200014a0 	.word	0x200014a0
 8002eb0:	08009ce8 	.word	0x08009ce8
 8002eb4:	200013f4 	.word	0x200013f4
 8002eb8:	08009d84 	.word	0x08009d84
 8002ebc:	08009d94 	.word	0x08009d94
 8002ec0:	08009cfc 	.word	0x08009cfc
	...

08002ed0 <Thread1.lto_priv.2>:
 * Green LED blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);


static THD_FUNCTION(Thread1, arg) {
 8002ed0:	b508      	push	{r3, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8002ed2:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <Thread1.lto_priv.2+0x28>)
 8002ed4:	4a09      	ldr	r2, [pc, #36]	; (8002efc <Thread1.lto_priv.2+0x2c>)
 8002ed6:	699b      	ldr	r3, [r3, #24]

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    palClearPad(GPIOA, GPIOA_LED_GREEN);
 8002ed8:	4c09      	ldr	r4, [pc, #36]	; (8002f00 <Thread1.lto_priv.2+0x30>)
 8002eda:	619a      	str	r2, [r3, #24]
 8002edc:	2520      	movs	r5, #32
 8002ede:	462e      	mov	r6, r5
 8002ee0:	8366      	strh	r6, [r4, #26]
    chThdSleepMilliseconds(freqdef);
 8002ee2:	f242 7010 	movw	r0, #10000	; 0x2710
 8002ee6:	f7ff fdb3 	bl	8002a50 <chThdSleep>
    palSetPad(GPIOA, GPIOA_LED_GREEN);
 8002eea:	8325      	strh	r5, [r4, #24]
    chThdSleepMilliseconds(freqdef);
 8002eec:	f242 7010 	movw	r0, #10000	; 0x2710
 8002ef0:	f7ff fdae 	bl	8002a50 <chThdSleep>
  while (true) {
 8002ef4:	e7f4      	b.n	8002ee0 <Thread1.lto_priv.2+0x10>
 8002ef6:	bf00      	nop
 8002ef8:	200009b0 	.word	0x200009b0
 8002efc:	08009da4 	.word	0x08009da4
 8002f00:	40020000 	.word	0x40020000
	...

08002f10 <job_slow>:

static jobs_queue_t jq;
static job_descriptor_t jobs[JOBS_QUEUE_SIZE];
static msg_t msg_queue[JOBS_QUEUE_SIZE];

static void job_slow(void *arg) {
 8002f10:	b508      	push	{r3, lr}

  test_emit_token((int)arg);
 8002f12:	b2c0      	uxtb	r0, r0
 8002f14:	f7fd fed4 	bl	8000cc0 <test_emit_token>
  chThdSleepMilliseconds(10);
}
 8002f18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  chThdSleepMilliseconds(10);
 8002f1c:	2064      	movs	r0, #100	; 0x64
 8002f1e:	f7ff bd97 	b.w	8002a50 <chThdSleep>
 8002f22:	bf00      	nop
	...

08002f30 <rt_test_004_001_execute>:
 * - [4.1.5] Function chThdSleepUntil() is tested with a timeline of
 *   "now" + 100 ticks.
 * .
 */

static void rt_test_004_001_execute(void) {
 8002f30:	b570      	push	{r4, r5, r6, lr}
  systime_t time;

  /* [4.1.1] The current system time is read then a sleep is performed
     for 100 system ticks and on exit the system time is verified
     again.*/
  test_set_step(1);
 8002f32:	4e2c      	ldr	r6, [pc, #176]	; (8002fe4 <rt_test_004_001_execute+0xb4>)
 8002f34:	2301      	movs	r3, #1
  return (systime_t)STM32_ST_TIM->CNT;
 8002f36:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8002f3a:	6033      	str	r3, [r6, #0]
 8002f3c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
  {
    time = chVTGetSystemTimeX();
    chThdSleep(100);
 8002f3e:	2064      	movs	r0, #100	; 0x64
 8002f40:	f7ff fd86 	bl	8002a50 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, 100),
 8002f44:	f104 0167 	add.w	r1, r4, #103	; 0x67
 8002f48:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8002f4c:	f7fd fba8 	bl	80006a0 <_test_assert_time_window.constprop.0>
 8002f50:	b100      	cbz	r0, 8002f54 <rt_test_004_001_execute+0x24>
    test_assert_time_window(chTimeAddX(time, 100),
                            chTimeAddX(time, 100 + CH_CFG_ST_TIMEDELTA + 1),
                            "out of time window");
  }
  test_end_step(5);
}
 8002f52:	bd70      	pop	{r4, r5, r6, pc}
  test_set_step(2);
 8002f54:	2302      	movs	r3, #2
 8002f56:	6033      	str	r3, [r6, #0]
 8002f58:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepMicroseconds(100000);
 8002f5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f5e:	f7ff fd77 	bl	8002a50 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_US2I(100000)),
 8002f62:	f204 31eb 	addw	r1, r4, #1003	; 0x3eb
 8002f66:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 8002f6a:	f7fd fb99 	bl	80006a0 <_test_assert_time_window.constprop.0>
 8002f6e:	2800      	cmp	r0, #0
 8002f70:	d1ef      	bne.n	8002f52 <rt_test_004_001_execute+0x22>
  test_set_step(3);
 8002f72:	2303      	movs	r3, #3
 8002f74:	6033      	str	r3, [r6, #0]
 8002f76:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepMilliseconds(100);
 8002f78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f7c:	f7ff fd68 	bl	8002a50 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_MS2I(100)),
 8002f80:	f204 31eb 	addw	r1, r4, #1003	; 0x3eb
 8002f84:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 8002f88:	f7fd fb8a 	bl	80006a0 <_test_assert_time_window.constprop.0>
 8002f8c:	2800      	cmp	r0, #0
 8002f8e:	d1e0      	bne.n	8002f52 <rt_test_004_001_execute+0x22>
  test_set_step(4);
 8002f90:	2304      	movs	r3, #4
 8002f92:	6033      	str	r3, [r6, #0]
 8002f94:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepSeconds(1);
 8002f96:	f242 7010 	movw	r0, #10000	; 0x2710
 8002f9a:	f7ff fd59 	bl	8002a50 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_S2I(1)),
 8002f9e:	f504 511c 	add.w	r1, r4, #9984	; 0x2700
 8002fa2:	4608      	mov	r0, r1
 8002fa4:	3010      	adds	r0, #16
 8002fa6:	3113      	adds	r1, #19
 8002fa8:	f7fd fb7a 	bl	80006a0 <_test_assert_time_window.constprop.0>
 8002fac:	2800      	cmp	r0, #0
 8002fae:	d1d0      	bne.n	8002f52 <rt_test_004_001_execute+0x22>
  test_set_step(5);
 8002fb0:	2305      	movs	r3, #5
 8002fb2:	6033      	str	r3, [r6, #0]
 8002fb4:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8002fb6:	2320      	movs	r3, #32
 8002fb8:	f106 0464 	add.w	r4, r6, #100	; 0x64
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	6a69      	ldr	r1, [r5, #36]	; 0x24
  if (interval > (sysinterval_t)0) {
 8002fc2:	1a61      	subs	r1, r4, r1
 8002fc4:	d109      	bne.n	8002fda <rt_test_004_001_execute+0xaa>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	f383 8811 	msr	BASEPRI, r3
    test_assert_time_window(chTimeAddX(time, 100),
 8002fcc:	f106 0167 	add.w	r1, r6, #103	; 0x67
 8002fd0:	4620      	mov	r0, r4
}
 8002fd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_time_window(chTimeAddX(time, 100),
 8002fd6:	f7fd bb63 	b.w	80006a0 <_test_assert_time_window.constprop.0>
 8002fda:	2008      	movs	r0, #8
 8002fdc:	f7ff fa50 	bl	8002480 <chSchGoSleepTimeoutS>
 8002fe0:	e7f1      	b.n	8002fc6 <rt_test_004_001_execute+0x96>
 8002fe2:	bf00      	nop
 8002fe4:	2000149c 	.word	0x2000149c
	...

08002ff0 <test_wait_tick>:
}

/*
 * Delays execution until next system time tick.
 */
systime_t test_wait_tick(void) {
 8002ff0:	b508      	push	{r3, lr}

  chThdSleep(1);
 8002ff2:	2001      	movs	r0, #1
 8002ff4:	f7ff fd2c 	bl	8002a50 <chThdSleep>
 8002ff8:	2320      	movs	r3, #32
 8002ffa:	f383 8811 	msr	BASEPRI, r3
 8002ffe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003002:	2300      	movs	r3, #0
 8003004:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8003006:	f383 8811 	msr	BASEPRI, r3
  return chVTGetSystemTime();
}
 800300a:	bd08      	pop	{r3, pc}
 800300c:	0000      	movs	r0, r0
	...

08003010 <rt_test_011_009_execute>:
static void rt_test_011_009_execute(void) {
 8003010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_set_step(1);
 8003014:	f8df b090 	ldr.w	fp, [pc, #144]	; 80030a8 <rt_test_011_009_execute+0x98>
      chVTDoSetI(&vt1, 1, tmo, NULL);
 8003018:	4f1e      	ldr	r7, [pc, #120]	; (8003094 <rt_test_011_009_execute+0x84>)
 800301a:	4e1f      	ldr	r6, [pc, #124]	; (8003098 <rt_test_011_009_execute+0x88>)
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 800301c:	4d1f      	ldr	r5, [pc, #124]	; (800309c <rt_test_011_009_execute+0x8c>)
  test_set_step(1);
 800301e:	2301      	movs	r3, #1
 8003020:	f8cb 3000 	str.w	r3, [fp]
    start = test_wait_tick();
 8003024:	f7ff ffe4 	bl	8002ff0 <test_wait_tick>
    n = 0;
 8003028:	2400      	movs	r4, #0
    start = test_wait_tick();
 800302a:	4680      	mov	r8, r0
      chVTDoSetI(&vt1, 1, tmo, NULL);
 800302c:	46a2      	mov	sl, r4
 800302e:	f04f 0920 	mov.w	r9, #32
 8003032:	f389 8811 	msr	BASEPRI, r9
 8003036:	2300      	movs	r3, #0
 8003038:	463a      	mov	r2, r7
 800303a:	4630      	mov	r0, r6
 800303c:	2101      	movs	r1, #1
 800303e:	f7fe fb5f 	bl	8001700 <chVTDoSetI>
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 8003042:	463a      	mov	r2, r7
 8003044:	2300      	movs	r3, #0
 8003046:	f242 7110 	movw	r1, #10000	; 0x2710
 800304a:	4628      	mov	r0, r5
 800304c:	f7fe fb58 	bl	8001700 <chVTDoSetI>
      chVTDoResetI(&vt1);
 8003050:	4630      	mov	r0, r6
 8003052:	f7fe fb15 	bl	8001680 <chVTDoResetI>
      chVTDoResetI(&vt2);
 8003056:	4628      	mov	r0, r5
 8003058:	f7fe fb12 	bl	8001680 <chVTDoResetI>
 800305c:	f38a 8811 	msr	BASEPRI, sl
 8003060:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8003064:	f242 720f 	movw	r2, #9999	; 0x270f
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 800306a:	eba3 0308 	sub.w	r3, r3, r8
 800306e:	4293      	cmp	r3, r2
      n++;
 8003070:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8003074:	d9dd      	bls.n	8003032 <rt_test_011_009_execute+0x22>
  test_set_step(2);
 8003076:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8003078:	4809      	ldr	r0, [pc, #36]	; (80030a0 <rt_test_011_009_execute+0x90>)
  test_set_step(2);
 800307a:	f8cb 3000 	str.w	r3, [fp]
    test_print("--- Score : ");
 800307e:	f7fd fedf 	bl	8000e40 <test_print>
    test_printn(n * 2);
 8003082:	0060      	lsls	r0, r4, #1
 8003084:	f7fd fe0c 	bl	8000ca0 <test_printn>
}
 8003088:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_println(" timers/S");
 800308c:	4805      	ldr	r0, [pc, #20]	; (80030a4 <rt_test_011_009_execute+0x94>)
 800308e:	f7fd beb7 	b.w	8000e00 <test_println>
 8003092:	bf00      	nop
 8003094:	08000981 	.word	0x08000981
 8003098:	200014cc 	.word	0x200014cc
 800309c:	200014e0 	.word	0x200014e0
 80030a0:	08009dac 	.word	0x08009dac
 80030a4:	08009dbc 	.word	0x08009dbc
 80030a8:	2000149c 	.word	0x2000149c
 80030ac:	00000000 	.word	0x00000000

080030b0 <chMsgWaitS>:
 *
 * @return              A pointer to the thread carrying the message.
 *
 * @sclass
 */
thread_t *chMsgWaitS(void) {
 80030b0:	b510      	push	{r4, lr}
  thread_t *tp;

  chDbgCheckClassS();

  if (!chMsgIsPendingI(currp)) {
 80030b2:	4c0b      	ldr	r4, [pc, #44]	; (80030e0 <chMsgWaitS+0x30>)
 80030b4:	69a2      	ldr	r2, [r4, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->msgqueue.next != (thread_t *)&tp->msgqueue);
 80030b6:	4613      	mov	r3, r2
 80030b8:	f853 0f2c 	ldr.w	r0, [r3, #44]!
 80030bc:	4298      	cmp	r0, r3
 80030be:	d006      	beq.n	80030ce <chMsgWaitS+0x1e>
  tqp->next             = tp->queue.next;
 80030c0:	6801      	ldr	r1, [r0, #0]
 80030c2:	62d1      	str	r1, [r2, #44]	; 0x2c
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = queue_fifo_remove(&currp->msgqueue);
  tp->state = CH_STATE_SNDMSG;
 80030c4:	220d      	movs	r2, #13
  tqp->next->queue.prev = (thread_t *)tqp;
 80030c6:	604b      	str	r3, [r1, #4]
 80030c8:	f880 2020 	strb.w	r2, [r0, #32]

  return tp;
}
 80030cc:	bd10      	pop	{r4, pc}
    chSchGoSleepS(CH_STATE_WTMSG);
 80030ce:	200e      	movs	r0, #14
 80030d0:	f7ff f946 	bl	8002360 <chSchGoSleepS>
 80030d4:	69a2      	ldr	r2, [r4, #24]
 80030d6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80030d8:	f102 032c 	add.w	r3, r2, #44	; 0x2c
 80030dc:	e7f0      	b.n	80030c0 <chMsgWaitS+0x10>
 80030de:	bf00      	nop
 80030e0:	200009b0 	.word	0x200009b0
	...

080030f0 <bmk_thread1>:
static THD_FUNCTION(bmk_thread1, p) {
 80030f0:	b570      	push	{r4, r5, r6, lr}
 80030f2:	2620      	movs	r6, #32
 80030f4:	2500      	movs	r5, #0
 80030f6:	f386 8811 	msr	BASEPRI, r6
  tp = chMsgWaitS();
 80030fa:	f7ff ffd9 	bl	80030b0 <chMsgWaitS>
 80030fe:	f385 8811 	msr	BASEPRI, r5
    msg = chMsgGet(tp);
 8003102:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003104:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8003108:	4621      	mov	r1, r4
 800310a:	f7ff f841 	bl	8002190 <chSchWakeupS>
 800310e:	f385 8811 	msr	BASEPRI, r5
  } while (msg);
 8003112:	2c00      	cmp	r4, #0
 8003114:	d1ef      	bne.n	80030f6 <bmk_thread1+0x6>
}
 8003116:	bd70      	pop	{r4, r5, r6, pc}
	...

08003120 <chMsgSend>:
  thread_t *ctp = currp;
 8003120:	4b0e      	ldr	r3, [pc, #56]	; (800315c <chMsgSend+0x3c>)
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 8003122:	b510      	push	{r4, lr}
 8003124:	2220      	movs	r2, #32
  thread_t *ctp = currp;
 8003126:	699c      	ldr	r4, [r3, #24]
 8003128:	f382 8811 	msr	BASEPRI, r2
  ctp->u.sentmsg = msg;
 800312c:	6261      	str	r1, [r4, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
 800312e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003130:	6062      	str	r2, [r4, #4]
  msg_insert(ctp, &tp->msgqueue);
 8003132:	f100 012c 	add.w	r1, r0, #44	; 0x2c
  tp->queue.next             = (thread_t *)tqp;
 8003136:	6021      	str	r1, [r4, #0]
  tp->queue.prev->queue.next = tp;
 8003138:	6014      	str	r4, [r2, #0]
  if (tp->state == CH_STATE_WTMSG) {
 800313a:	f890 2020 	ldrb.w	r2, [r0, #32]
  tqp->prev                  = tp;
 800313e:	6304      	str	r4, [r0, #48]	; 0x30
 8003140:	2a0e      	cmp	r2, #14
 8003142:	d007      	beq.n	8003154 <chMsgSend+0x34>
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 8003144:	200c      	movs	r0, #12
 8003146:	f7ff f90b 	bl	8002360 <chSchGoSleepS>
  msg = ctp->u.rdymsg;
 800314a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800314c:	2300      	movs	r3, #0
 800314e:	f383 8811 	msr	BASEPRI, r3
}
 8003152:	bd10      	pop	{r4, pc}
    (void) chSchReadyI(tp);
 8003154:	f7fe f924 	bl	80013a0 <chSchReadyI>
 8003158:	e7f4      	b.n	8003144 <chMsgSend+0x24>
 800315a:	bf00      	nop
 800315c:	200009b0 	.word	0x200009b0

08003160 <msg_loop_test>:
NOINLINE static unsigned int msg_loop_test(thread_t *tp) {
 8003160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003164:	4605      	mov	r5, r0
  start = test_wait_tick();
 8003166:	f7ff ff43 	bl	8002ff0 <test_wait_tick>
  uint32_t n = 0;
 800316a:	2400      	movs	r4, #0
  start = test_wait_tick();
 800316c:	4606      	mov	r6, r0
 800316e:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
  } while (chVTIsSystemTimeWithinX(start, end));
 8003172:	f242 770f 	movw	r7, #9999	; 0x270f
    (void)chMsgSend(tp, 1);
 8003176:	2101      	movs	r1, #1
 8003178:	4628      	mov	r0, r5
 800317a:	f7ff ffd1 	bl	8003120 <chMsgSend>
 800317e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8003182:	1b9b      	subs	r3, r3, r6
  } while (chVTIsSystemTimeWithinX(start, end));
 8003184:	42bb      	cmp	r3, r7
    n++;
 8003186:	f104 0401 	add.w	r4, r4, #1
  } while (chVTIsSystemTimeWithinX(start, end));
 800318a:	d9f4      	bls.n	8003176 <msg_loop_test+0x16>
  (void)chMsgSend(tp, 0);
 800318c:	4628      	mov	r0, r5
 800318e:	2100      	movs	r1, #0
 8003190:	f7ff ffc6 	bl	8003120 <chMsgSend>
}
 8003194:	4620      	mov	r0, r4
 8003196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800319a:	bf00      	nop
 800319c:	0000      	movs	r0, r0
	...

080031a0 <msg_thread1>:

/****************************************************************************
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(msg_thread1, p) {
 80031a0:	b510      	push	{r4, lr}

  chMsgSend(p, 'A');
 80031a2:	2141      	movs	r1, #65	; 0x41
static THD_FUNCTION(msg_thread1, p) {
 80031a4:	4604      	mov	r4, r0
  chMsgSend(p, 'A');
 80031a6:	f7ff ffbb 	bl	8003120 <chMsgSend>
  chMsgSend(p, 'B');
 80031aa:	4620      	mov	r0, r4
 80031ac:	2142      	movs	r1, #66	; 0x42
 80031ae:	f7ff ffb7 	bl	8003120 <chMsgSend>
  chMsgSend(p, 'C');
 80031b2:	4620      	mov	r0, r4
 80031b4:	2143      	movs	r1, #67	; 0x43
 80031b6:	f7ff ffb3 	bl	8003120 <chMsgSend>
  chMsgSend(p, 'D');
 80031ba:	4620      	mov	r0, r4
 80031bc:	2144      	movs	r1, #68	; 0x44
}
 80031be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMsgSend(p, 'D');
 80031c2:	f7ff bfad 	b.w	8003120 <chMsgSend>
 80031c6:	bf00      	nop
	...

080031d0 <chDelegateCallVeneer>:
 * @param[in] veneer    pointer to the veneer function to be called
 * @param[in] ...       variable number of parameters
 * @return              The function return value casted to msg_t. It is
 *                      garbage for functions returning @p void.
 */
msg_t chDelegateCallVeneer(thread_t *tp, delegate_veneer_t veneer, ...) {
 80031d0:	b40e      	push	{r1, r2, r3}
 80031d2:	b510      	push	{r4, lr}
 80031d4:	b085      	sub	sp, #20
 80031d6:	ab07      	add	r3, sp, #28

  va_start(args, veneer);

  /* Preparing the call message.*/
  cm.veneer = veneer;
  cm.argsp  = &args;
 80031d8:	aa01      	add	r2, sp, #4
msg_t chDelegateCallVeneer(thread_t *tp, delegate_veneer_t veneer, ...) {
 80031da:	f853 4b04 	ldr.w	r4, [r3], #4
  va_start(args, veneer);
 80031de:	9301      	str	r3, [sp, #4]
  (void)cm; /* Suppresses a lint warning.*/

  /* Sending the message to the dispatcher thread, the return value is
     contained in the returned message.*/
  msg = chMsgSend(tp, (msg_t)&cm);
 80031e0:	a902      	add	r1, sp, #8
  cm.argsp  = &args;
 80031e2:	e9cd 4202 	strd	r4, r2, [sp, #8]
  msg = chMsgSend(tp, (msg_t)&cm);
 80031e6:	f7ff ff9b 	bl	8003120 <chMsgSend>

  va_end(args);

  return msg;
}
 80031ea:	b005      	add	sp, #20
 80031ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031f0:	b003      	add	sp, #12
 80031f2:	4770      	bx	lr
	...

08003200 <chMtxLockS>:
void chMtxLockS(mutex_t *mp) {
 8003200:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8003202:	4b2e      	ldr	r3, [pc, #184]	; (80032bc <chMtxLockS+0xbc>)
void chMtxLockS(mutex_t *mp) {
 8003204:	4604      	mov	r4, r0
  if (mp->owner != NULL) {
 8003206:	6880      	ldr	r0, [r0, #8]
  thread_t *ctp = currp;
 8003208:	699d      	ldr	r5, [r3, #24]
  if (mp->owner != NULL) {
 800320a:	b330      	cbz	r0, 800325a <chMtxLockS+0x5a>
      while (tp->prio < ctp->prio) {
 800320c:	68aa      	ldr	r2, [r5, #8]
 800320e:	6883      	ldr	r3, [r0, #8]
 8003210:	4293      	cmp	r3, r2
 8003212:	d207      	bcs.n	8003224 <chMtxLockS+0x24>
        switch (tp->state) {
 8003214:	f890 3020 	ldrb.w	r3, [r0, #32]
        tp->prio = ctp->prio;
 8003218:	6082      	str	r2, [r0, #8]
        switch (tp->state) {
 800321a:	2b06      	cmp	r3, #6
 800321c:	d035      	beq.n	800328a <chMtxLockS+0x8a>
 800321e:	2b07      	cmp	r3, #7
 8003220:	d020      	beq.n	8003264 <chMtxLockS+0x64>
 8003222:	b19b      	cbz	r3, 800324c <chMtxLockS+0x4c>
  thread_t *cp = (thread_t *)tqp;
 8003224:	4623      	mov	r3, r4
 8003226:	e003      	b.n	8003230 <chMtxLockS+0x30>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8003228:	6899      	ldr	r1, [r3, #8]
 800322a:	68aa      	ldr	r2, [r5, #8]
 800322c:	4291      	cmp	r1, r2
 800322e:	d302      	bcc.n	8003236 <chMtxLockS+0x36>
    cp = cp->queue.next;
 8003230:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8003232:	429c      	cmp	r4, r3
 8003234:	d1f8      	bne.n	8003228 <chMtxLockS+0x28>
  tp->queue.prev             = cp->queue.prev;
 8003236:	685a      	ldr	r2, [r3, #4]
      chSchGoSleepS(CH_STATE_WTMTX);
 8003238:	2006      	movs	r0, #6
 800323a:	e9c5 3200 	strd	r3, r2, [r5]
  tp->queue.prev->queue.next = tp;
 800323e:	6015      	str	r5, [r2, #0]
  cp->queue.prev             = tp;
 8003240:	605d      	str	r5, [r3, #4]
      ctp->u.wtmtxp = mp;
 8003242:	626c      	str	r4, [r5, #36]	; 0x24
}
 8003244:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      chSchGoSleepS(CH_STATE_WTMTX);
 8003248:	f7ff b88a 	b.w	8002360 <chSchGoSleepS>
  tp->queue.prev->queue.next = tp->queue.next;
 800324c:	e9d0 3200 	ldrd	r3, r2, [r0]
 8003250:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8003252:	605a      	str	r2, [r3, #4]
          (void) chSchReadyI(queue_dequeue(tp));
 8003254:	f7fe f8a4 	bl	80013a0 <chSchReadyI>
          break;
 8003258:	e7e4      	b.n	8003224 <chMtxLockS+0x24>
    mp->next = ctp->mtxlist;
 800325a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800325c:	e9c4 5302 	strd	r5, r3, [r4, #8]
    ctp->mtxlist = mp;
 8003260:	63ac      	str	r4, [r5, #56]	; 0x38
}
 8003262:	bd70      	pop	{r4, r5, r6, pc}
  tp->queue.prev->queue.next = tp->queue.next;
 8003264:	e9d0 3100 	ldrd	r3, r1, [r0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8003268:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800326a:	600b      	str	r3, [r1, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 800326c:	6059      	str	r1, [r3, #4]
  thread_t *cp = (thread_t *)tqp;
 800326e:	4633      	mov	r3, r6
 8003270:	e002      	b.n	8003278 <chMtxLockS+0x78>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8003272:	6899      	ldr	r1, [r3, #8]
 8003274:	428a      	cmp	r2, r1
 8003276:	d802      	bhi.n	800327e <chMtxLockS+0x7e>
    cp = cp->queue.next;
 8003278:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800327a:	429e      	cmp	r6, r3
 800327c:	d1f9      	bne.n	8003272 <chMtxLockS+0x72>
  tp->queue.prev             = cp->queue.prev;
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8003284:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8003286:	6058      	str	r0, [r3, #4]
 8003288:	e7cc      	b.n	8003224 <chMtxLockS+0x24>
  tp->queue.prev->queue.next = tp->queue.next;
 800328a:	e9d0 3100 	ldrd	r3, r1, [r0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 800328e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003290:	600b      	str	r3, [r1, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8003292:	6059      	str	r1, [r3, #4]
  thread_t *cp = (thread_t *)tqp;
 8003294:	4633      	mov	r3, r6
 8003296:	e002      	b.n	800329e <chMtxLockS+0x9e>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8003298:	6899      	ldr	r1, [r3, #8]
 800329a:	428a      	cmp	r2, r1
 800329c:	d802      	bhi.n	80032a4 <chMtxLockS+0xa4>
    cp = cp->queue.next;
 800329e:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80032a0:	429e      	cmp	r6, r3
 80032a2:	d1f9      	bne.n	8003298 <chMtxLockS+0x98>
  tp->queue.prev             = cp->queue.prev;
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 80032aa:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80032ac:	6058      	str	r0, [r3, #4]
          tp = tp->u.wtmtxp->owner;
 80032ae:	68b0      	ldr	r0, [r6, #8]
      while (tp->prio < ctp->prio) {
 80032b0:	68aa      	ldr	r2, [r5, #8]
 80032b2:	6883      	ldr	r3, [r0, #8]
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d3ad      	bcc.n	8003214 <chMtxLockS+0x14>
 80032b8:	e7b4      	b.n	8003224 <chMtxLockS+0x24>
 80032ba:	bf00      	nop
 80032bc:	200009b0 	.word	0x200009b0

080032c0 <chMtxLock>:
void chMtxLock(mutex_t *mp) {
 80032c0:	b508      	push	{r3, lr}
 80032c2:	2320      	movs	r3, #32
 80032c4:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
 80032c8:	f7ff ff9a 	bl	8003200 <chMtxLockS>
 80032cc:	2300      	movs	r3, #0
 80032ce:	f383 8811 	msr	BASEPRI, r3
}
 80032d2:	bd08      	pop	{r3, pc}
	...

080032e0 <chSemWaitS.part.0>:
msg_t chSemWaitS(semaphore_t *sp) {
 80032e0:	b510      	push	{r4, lr}
    currp->u.wtsemp = sp;
 80032e2:	4c07      	ldr	r4, [pc, #28]	; (8003300 <chSemWaitS.part.0+0x20>)
 80032e4:	69a2      	ldr	r2, [r4, #24]
 80032e6:	6250      	str	r0, [r2, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
 80032e8:	6841      	ldr	r1, [r0, #4]
msg_t chSemWaitS(semaphore_t *sp) {
 80032ea:	4603      	mov	r3, r0
 80032ec:	e9c2 0100 	strd	r0, r1, [r2]
  tp->queue.prev->queue.next = tp;
 80032f0:	600a      	str	r2, [r1, #0]
    chSchGoSleepS(CH_STATE_WTSEM);
 80032f2:	2005      	movs	r0, #5
  tqp->prev                  = tp;
 80032f4:	605a      	str	r2, [r3, #4]
 80032f6:	f7ff f833 	bl	8002360 <chSchGoSleepS>
    return currp->u.rdymsg;
 80032fa:	69a3      	ldr	r3, [r4, #24]
}
 80032fc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80032fe:	bd10      	pop	{r4, pc}
 8003300:	200009b0 	.word	0x200009b0
	...

08003310 <chCacheGetObject.constprop.0>:
oc_object_t *chCacheGetObject(objects_cache_t *ocp,
 8003310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003314:	2320      	movs	r3, #32
 8003316:	b082      	sub	sp, #8
 8003318:	4604      	mov	r4, r0
 800331a:	f383 8811 	msr	BASEPRI, r3
  objp = hash_get_s(ocp, group, key);
 800331e:	4d3a      	ldr	r5, [pc, #232]	; (8003408 <chCacheGetObject.constprop.0+0xf8>)
  hhp  = &ocp->hashp[OC_HASH_FUNCTION(ocp, group, key)];
 8003320:	e9d5 3100 	ldrd	r3, r1, [r5]
 8003324:	3b01      	subs	r3, #1
 8003326:	4003      	ands	r3, r0
 8003328:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
  objp = hhp->hash_next;
 800332c:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
  while (objp != (oc_object_t *)hhp) {
 8003330:	428a      	cmp	r2, r1
 8003332:	d103      	bne.n	800333c <chCacheGetObject.constprop.0+0x2c>
 8003334:	e01c      	b.n	8003370 <chCacheGetObject.constprop.0+0x60>
    objp = objp->hash_next;
 8003336:	6809      	ldr	r1, [r1, #0]
  while (objp != (oc_object_t *)hhp) {
 8003338:	428a      	cmp	r2, r1
 800333a:	d019      	beq.n	8003370 <chCacheGetObject.constprop.0+0x60>
    if ((objp->obj_key == key) && (objp->obj_group == group)) {
 800333c:	694b      	ldr	r3, [r1, #20]
 800333e:	429c      	cmp	r4, r3
 8003340:	d1f9      	bne.n	8003336 <chCacheGetObject.constprop.0+0x26>
 8003342:	690b      	ldr	r3, [r1, #16]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1f6      	bne.n	8003336 <chCacheGetObject.constprop.0+0x26>
    if (chSemGetCounterI(&objp->obj_sem) > (cnt_t)0) {
 8003348:	6a0b      	ldr	r3, [r1, #32]
 800334a:	2b00      	cmp	r3, #0
 800334c:	dd39      	ble.n	80033c2 <chCacheGetObject.constprop.0+0xb2>
      objp->obj_flags &= ~OC_FLAG_INLRU;
 800334e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
      LRU_REMOVE(objp);
 8003350:	e9d1 0402 	ldrd	r0, r4, [r1, #8]
  sp->cnt--;
 8003354:	3b01      	subs	r3, #1
      objp->obj_flags &= ~OC_FLAG_INLRU;
 8003356:	f022 0201 	bic.w	r2, r2, #1
      LRU_REMOVE(objp);
 800335a:	60a0      	str	r0, [r4, #8]
 800335c:	60c4      	str	r4, [r0, #12]
      objp->obj_flags &= ~OC_FLAG_INLRU;
 800335e:	e9c1 3208 	strd	r3, r2, [r1, #32]
 8003362:	2300      	movs	r3, #0
 8003364:	f383 8811 	msr	BASEPRI, r3
}
 8003368:	4608      	mov	r0, r1
 800336a:	b002      	add	sp, #8
 800336c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003370:	4f26      	ldr	r7, [pc, #152]	; (800340c <chCacheGetObject.constprop.0+0xfc>)
 8003372:	2600      	movs	r6, #0
    (void) ocp->writef(ocp, objp, true);
 8003374:	f1a7 0830 	sub.w	r8, r7, #48	; 0x30
 8003378:	e01a      	b.n	80033b0 <chCacheGetObject.constprop.0+0xa0>
    objp = ocp->lru.lru_prev;
 800337a:	6a29      	ldr	r1, [r5, #32]
    LRU_REMOVE(objp);
 800337c:	e9d1 0c02 	ldrd	r0, ip, [r1, #8]
    objp->obj_flags &= ~OC_FLAG_INLRU;
 8003380:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8003382:	6a0b      	ldr	r3, [r1, #32]
    LRU_REMOVE(objp);
 8003384:	f8cc 0008 	str.w	r0, [ip, #8]
 8003388:	3b01      	subs	r3, #1
 800338a:	f8c0 c00c 	str.w	ip, [r0, #12]
    objp->obj_flags &= ~OC_FLAG_INLRU;
 800338e:	f022 0001 	bic.w	r0, r2, #1
 8003392:	e9c1 3008 	strd	r3, r0, [r1, #32]
    if ((objp->obj_flags & OC_FLAG_LAZYWRITE) == 0U) {
 8003396:	06d0      	lsls	r0, r2, #27
 8003398:	d51c      	bpl.n	80033d4 <chCacheGetObject.constprop.0+0xc4>
 800339a:	f386 8811 	msr	BASEPRI, r6
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_FORGET;
 800339e:	2322      	movs	r3, #34	; 0x22
 80033a0:	624b      	str	r3, [r1, #36]	; 0x24
    (void) ocp->writef(ocp, objp, true);
 80033a2:	4640      	mov	r0, r8
 80033a4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80033a6:	2201      	movs	r2, #1
 80033a8:	4798      	blx	r3
 80033aa:	2320      	movs	r3, #32
 80033ac:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 80033b0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80033b2:	3b01      	subs	r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	63ab      	str	r3, [r5, #56]	; 0x38
 80033b8:	dadf      	bge.n	800337a <chCacheGetObject.constprop.0+0x6a>
 80033ba:	4638      	mov	r0, r7
 80033bc:	f7ff ff90 	bl	80032e0 <chSemWaitS.part.0>
 80033c0:	e7db      	b.n	800337a <chCacheGetObject.constprop.0+0x6a>
 80033c2:	3b01      	subs	r3, #1
 80033c4:	620b      	str	r3, [r1, #32]
 80033c6:	f101 0018 	add.w	r0, r1, #24
 80033ca:	9101      	str	r1, [sp, #4]
 80033cc:	f7ff ff88 	bl	80032e0 <chSemWaitS.part.0>
 80033d0:	9901      	ldr	r1, [sp, #4]
 80033d2:	e7c6      	b.n	8003362 <chCacheGetObject.constprop.0+0x52>
      if ((objp->obj_flags & OC_FLAG_INHASH) != 0U) {
 80033d4:	0793      	lsls	r3, r2, #30
 80033d6:	d504      	bpl.n	80033e2 <chCacheGetObject.constprop.0+0xd2>
        HASH_REMOVE(objp);
 80033d8:	e9d1 2300 	ldrd	r2, r3, [r1]
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	680a      	ldr	r2, [r1, #0]
 80033e0:	6053      	str	r3, [r2, #4]
    HASH_INSERT(ocp, objp, group, key);
 80033e2:	e9d5 3200 	ldrd	r3, r2, [r5]
 80033e6:	3b01      	subs	r3, #1
    objp->obj_key   = key;
 80033e8:	614c      	str	r4, [r1, #20]
    HASH_INSERT(ocp, objp, group, key);
 80033ea:	401c      	ands	r4, r3
 80033ec:	eb02 00c4 	add.w	r0, r2, r4, lsl #3
 80033f0:	f852 3034 	ldr.w	r3, [r2, r4, lsl #3]
 80033f4:	6048      	str	r0, [r1, #4]
    objp->obj_group = group;
 80033f6:	2500      	movs	r5, #0
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_NOTSYNC;
 80033f8:	200a      	movs	r0, #10
    HASH_INSERT(ocp, objp, group, key);
 80033fa:	600b      	str	r3, [r1, #0]
    objp->obj_group = group;
 80033fc:	610d      	str	r5, [r1, #16]
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_NOTSYNC;
 80033fe:	6248      	str	r0, [r1, #36]	; 0x24
    HASH_INSERT(ocp, objp, group, key);
 8003400:	6059      	str	r1, [r3, #4]
 8003402:	f842 1034 	str.w	r1, [r2, r4, lsl #3]
 8003406:	e7ac      	b.n	8003362 <chCacheGetObject.constprop.0+0x52>
 8003408:	2000096c 	.word	0x2000096c
 800340c:	2000099c 	.word	0x2000099c

08003410 <chSemWait>:
msg_t chSemWait(semaphore_t *sp) {
 8003410:	b508      	push	{r3, lr}
 8003412:	2320      	movs	r3, #32
 8003414:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8003418:	6883      	ldr	r3, [r0, #8]
 800341a:	3b01      	subs	r3, #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	6083      	str	r3, [r0, #8]
 8003420:	db04      	blt.n	800342c <chSemWait+0x1c>
  return MSG_OK;
 8003422:	2000      	movs	r0, #0
 8003424:	2300      	movs	r3, #0
 8003426:	f383 8811 	msr	BASEPRI, r3
}
 800342a:	bd08      	pop	{r3, pc}
 800342c:	f7ff ff58 	bl	80032e0 <chSemWaitS.part.0>
 8003430:	2300      	movs	r3, #0
 8003432:	f383 8811 	msr	BASEPRI, r3
 8003436:	bd08      	pop	{r3, pc}
	...

08003440 <rt_test_011_010_execute>:
static void rt_test_011_010_execute(void) {
 8003440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 8003444:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80034c8 <rt_test_011_010_execute+0x88>
      chSemWait(&sem1);
 8003448:	4c1c      	ldr	r4, [pc, #112]	; (80034bc <rt_test_011_010_execute+0x7c>)
  test_set_step(1);
 800344a:	2301      	movs	r3, #1
 800344c:	f8c8 3000 	str.w	r3, [r8]
    start = test_wait_tick();
 8003450:	f7ff fdce 	bl	8002ff0 <test_wait_tick>
    n = 0;
 8003454:	2500      	movs	r5, #0
    start = test_wait_tick();
 8003456:	4606      	mov	r6, r0
 8003458:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 800345c:	f242 770f 	movw	r7, #9999	; 0x270f
      chSemWait(&sem1);
 8003460:	4620      	mov	r0, r4
 8003462:	f7ff ffd5 	bl	8003410 <chSemWait>
      chSemSignal(&sem1);
 8003466:	4620      	mov	r0, r4
 8003468:	f7fe ff4a 	bl	8002300 <chSemSignal>
      chSemWait(&sem1);
 800346c:	4620      	mov	r0, r4
 800346e:	f7ff ffcf 	bl	8003410 <chSemWait>
      chSemSignal(&sem1);
 8003472:	4620      	mov	r0, r4
 8003474:	f7fe ff44 	bl	8002300 <chSemSignal>
      chSemWait(&sem1);
 8003478:	4620      	mov	r0, r4
 800347a:	f7ff ffc9 	bl	8003410 <chSemWait>
      chSemSignal(&sem1);
 800347e:	4620      	mov	r0, r4
 8003480:	f7fe ff3e 	bl	8002300 <chSemSignal>
      chSemWait(&sem1);
 8003484:	4620      	mov	r0, r4
 8003486:	f7ff ffc3 	bl	8003410 <chSemWait>
      chSemSignal(&sem1);
 800348a:	4620      	mov	r0, r4
 800348c:	f7fe ff38 	bl	8002300 <chSemSignal>
 8003490:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8003494:	1b9b      	subs	r3, r3, r6
    } while (chVTIsSystemTimeWithinX(start, end));
 8003496:	42bb      	cmp	r3, r7
      n++;
 8003498:	f105 0501 	add.w	r5, r5, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 800349c:	d9e0      	bls.n	8003460 <rt_test_011_010_execute+0x20>
  test_set_step(2);
 800349e:	2302      	movs	r3, #2
    test_print("--- Score : ");
 80034a0:	4807      	ldr	r0, [pc, #28]	; (80034c0 <rt_test_011_010_execute+0x80>)
  test_set_step(2);
 80034a2:	f8c8 3000 	str.w	r3, [r8]
    test_print("--- Score : ");
 80034a6:	f7fd fccb 	bl	8000e40 <test_print>
    test_printn(n * 4);
 80034aa:	00a8      	lsls	r0, r5, #2
 80034ac:	f7fd fbf8 	bl	8000ca0 <test_printn>
}
 80034b0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" wait+signal/S");
 80034b4:	4803      	ldr	r0, [pc, #12]	; (80034c4 <rt_test_011_010_execute+0x84>)
 80034b6:	f7fd bca3 	b.w	8000e00 <test_println>
 80034ba:	bf00      	nop
 80034bc:	20000d7c 	.word	0x20000d7c
 80034c0:	08009dac 	.word	0x08009dac
 80034c4:	08009dc8 	.word	0x08009dc8
 80034c8:	2000149c 	.word	0x2000149c
 80034cc:	00000000 	.word	0x00000000

080034d0 <bmk_thread7>:
static THD_FUNCTION(bmk_thread7, p) {
 80034d0:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 80034d2:	4c08      	ldr	r4, [pc, #32]	; (80034f4 <bmk_thread7+0x24>)
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 80034d4:	69a3      	ldr	r3, [r4, #24]
  while (!chThdShouldTerminateX())
 80034d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034da:	075a      	lsls	r2, r3, #29
 80034dc:	d408      	bmi.n	80034f0 <bmk_thread7+0x20>
    chSemWait(&sem1);
 80034de:	4d06      	ldr	r5, [pc, #24]	; (80034f8 <bmk_thread7+0x28>)
 80034e0:	4628      	mov	r0, r5
 80034e2:	f7ff ff95 	bl	8003410 <chSemWait>
 80034e6:	69a3      	ldr	r3, [r4, #24]
  while (!chThdShouldTerminateX())
 80034e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034ec:	075b      	lsls	r3, r3, #29
 80034ee:	d5f7      	bpl.n	80034e0 <bmk_thread7+0x10>
}
 80034f0:	bd38      	pop	{r3, r4, r5, pc}
 80034f2:	bf00      	nop
 80034f4:	200009b0 	.word	0x200009b0
 80034f8:	20000d7c 	.word	0x20000d7c
 80034fc:	00000000 	.word	0x00000000

08003500 <thread3>:
static THD_FUNCTION(thread3, p) {
 8003500:	b510      	push	{r4, lr}
  chSemWait(&sem1);
 8003502:	4c04      	ldr	r4, [pc, #16]	; (8003514 <thread3+0x14>)
 8003504:	4620      	mov	r0, r4
 8003506:	f7ff ff83 	bl	8003410 <chSemWait>
  chSemSignal(&sem1);
 800350a:	4620      	mov	r0, r4
}
 800350c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chSemSignal(&sem1);
 8003510:	f7fe bef6 	b.w	8002300 <chSemSignal>
 8003514:	20000d70 	.word	0x20000d70
	...

08003520 <thread1.lto_priv.1>:
static THD_FUNCTION(thread1, p) {
 8003520:	b510      	push	{r4, lr}
 8003522:	4604      	mov	r4, r0
  chSemWait(&sem1);
 8003524:	4803      	ldr	r0, [pc, #12]	; (8003534 <thread1.lto_priv.1+0x14>)
 8003526:	f7ff ff73 	bl	8003410 <chSemWait>
  test_emit_token(*(char *)p);
 800352a:	7820      	ldrb	r0, [r4, #0]
}
 800352c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_emit_token(*(char *)p);
 8003530:	f7fd bbc6 	b.w	8000cc0 <test_emit_token>
 8003534:	20000d70 	.word	0x20000d70
	...

08003540 <main>:

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8003540:	4bb4      	ldr	r3, [pc, #720]	; (8003814 <main+0x2d4>)
  PWR->CR |= PWR_CR_DBP;
 8003542:	48b5      	ldr	r0, [pc, #724]	; (8003818 <main+0x2d8>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8003544:	691a      	ldr	r2, [r3, #16]
 8003546:	f062 02ff 	orn	r2, r2, #255	; 0xff
}

/*
 * Application entry point.
 */
int main(void) {
 800354a:	b580      	push	{r7, lr}
 800354c:	611a      	str	r2, [r3, #16]
 800354e:	691a      	ldr	r2, [r3, #16]
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	611a      	str	r2, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 8003554:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8003558:	691a      	ldr	r2, [r3, #16]
  rccResetAHB2(~0);
 800355a:	695a      	ldr	r2, [r3, #20]
 800355c:	615c      	str	r4, [r3, #20]
 800355e:	2200      	movs	r2, #0
 8003560:	6959      	ldr	r1, [r3, #20]
 8003562:	615a      	str	r2, [r3, #20]
 8003564:	6959      	ldr	r1, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8003566:	6a19      	ldr	r1, [r3, #32]
 8003568:	f061 5180 	orn	r1, r1, #268435456	; 0x10000000
 800356c:	6219      	str	r1, [r3, #32]
 800356e:	6a19      	ldr	r1, [r3, #32]
 8003570:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8003574:	6219      	str	r1, [r3, #32]
 8003576:	6a19      	ldr	r1, [r3, #32]
  rccResetAPB2(~0);
 8003578:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800357a:	625c      	str	r4, [r3, #36]	; 0x24
 800357c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800357e:	625a      	str	r2, [r3, #36]	; 0x24
 8003580:	6a59      	ldr	r1, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 8003582:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003584:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003588:	6419      	str	r1, [r3, #64]	; 0x40
 800358a:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800358c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003590:	6619      	str	r1, [r3, #96]	; 0x60
 8003592:	6e19      	ldr	r1, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 8003594:	6801      	ldr	r1, [r0, #0]
 8003596:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800359a:	6001      	str	r1, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 800359c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800359e:	f401 7140 	and.w	r1, r1, #768	; 0x300
 80035a2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80035a6:	b086      	sub	sp, #24
 80035a8:	d003      	beq.n	80035b2 <main+0x72>
    RCC->BDCR = RCC_BDCR_BDRST;
 80035aa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80035ae:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 80035b0:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 80035b2:	4c99      	ldr	r4, [pc, #612]	; (8003818 <main+0x2d8>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80035b4:	4a99      	ldr	r2, [pc, #612]	; (800381c <main+0x2dc>)
 80035b6:	6861      	ldr	r1, [r4, #4]
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 80035b8:	4d99      	ldr	r5, [pc, #612]	; (8003820 <main+0x2e0>)
 80035ba:	4f9a      	ldr	r7, [pc, #616]	; (8003824 <main+0x2e4>)

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80035bc:	4895      	ldr	r0, [pc, #596]	; (8003814 <main+0x2d4>)
 80035be:	2360      	movs	r3, #96	; 0x60
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80035c0:	2640      	movs	r6, #64	; 0x40
 80035c2:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80035c6:	6061      	str	r1, [r4, #4]
 80035c8:	f04f 0c80 	mov.w	ip, #128	; 0x80
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80035cc:	f882 3306 	strb.w	r3, [r2, #774]	; 0x306
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80035d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035d4:	f8c2 6180 	str.w	r6, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80035d8:	6016      	str	r6, [r2, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80035da:	f44f 7600 	mov.w	r6, #512	; 0x200
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80035de:	f882 3307 	strb.w	r3, [r2, #775]	; 0x307
 80035e2:	462c      	mov	r4, r5
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80035e4:	f8c2 c180 	str.w	ip, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80035e8:	f8c2 c000 	str.w	ip, [r2]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80035ec:	f882 3308 	strb.w	r3, [r2, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80035f0:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80035f4:	6011      	str	r1, [r2, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80035f6:	f882 3309 	strb.w	r3, [r2, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80035fa:	f8c2 6180 	str.w	r6, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80035fe:	6016      	str	r6, [r2, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003600:	f44f 6680 	mov.w	r6, #1024	; 0x400
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003604:	f882 330a 	strb.w	r3, [r2, #778]	; 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003608:	f8c2 6180 	str.w	r6, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800360c:	6016      	str	r6, [r2, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800360e:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003612:	f882 3317 	strb.w	r3, [r2, #791]	; 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003616:	f8c2 6180 	str.w	r6, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800361a:	6016      	str	r6, [r2, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800361c:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003620:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003624:	6051      	str	r1, [r2, #4]
 8003626:	f844 7b04 	str.w	r7, [r4], #4
  esp->next = (event_listener_t *)esp;
 800362a:	606c      	str	r4, [r5, #4]
  iqp->q_buffer  = bp;
 800362c:	f105 0454 	add.w	r4, r5, #84	; 0x54
  iqp->q_counter = 0;
 8003630:	2100      	movs	r1, #0
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8003632:	f04f 0e01 	mov.w	lr, #1
  iqp->q_top     = bp + size;
 8003636:	f105 0364 	add.w	r3, r5, #100	; 0x64
  iqp->q_wrptr   = bp;
 800363a:	e9c5 4408 	strd	r4, r4, [r5, #32]
  tqp->next = (thread_t *)tqp;
 800363e:	f105 060c 	add.w	r6, r5, #12
  iqp->q_buffer  = bp;
 8003642:	61ac      	str	r4, [r5, #24]
  oqp->q_counter = size;
 8003644:	2410      	movs	r4, #16
  tqp->prev = (thread_t *)tqp;
 8003646:	e9c5 6603 	strd	r6, r6, [r5, #12]
 800364a:	f885 e008 	strb.w	lr, [r5, #8]
  iqp->q_counter = 0;
 800364e:	6169      	str	r1, [r5, #20]
  iqp->q_top     = bp + size;
 8003650:	61eb      	str	r3, [r5, #28]
  oqp->q_counter = size;
 8003652:	63ac      	str	r4, [r5, #56]	; 0x38
 8003654:	6c04      	ldr	r4, [r0, #64]	; 0x40
  oqp->q_buffer  = bp;
 8003656:	63eb      	str	r3, [r5, #60]	; 0x3c
 8003658:	ea44 040e 	orr.w	r4, r4, lr
 800365c:	6404      	str	r4, [r0, #64]	; 0x40
 800365e:	6e04      	ldr	r4, [r0, #96]	; 0x60

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8003660:	4f71      	ldr	r7, [pc, #452]	; (8003828 <main+0x2e8>)
  oqp->q_rdptr   = bp;
 8003662:	64ab      	str	r3, [r5, #72]	; 0x48
  ST_ENABLE_CLOCK();
 8003664:	ea44 040e 	orr.w	r4, r4, lr
 8003668:	6604      	str	r4, [r0, #96]	; 0x60
 800366a:	6e00      	ldr	r0, [r0, #96]	; 0x60
  ST_ENABLE_STOP();
 800366c:	68b8      	ldr	r0, [r7, #8]
  oqp->q_wrptr   = bp;
 800366e:	646b      	str	r3, [r5, #68]	; 0x44
 8003670:	ea40 000e 	orr.w	r0, r0, lr
  iqp->q_notify  = infy;
 8003674:	62a9      	str	r1, [r5, #40]	; 0x28
  iqp->q_link    = link;
 8003676:	62ed      	str	r5, [r5, #44]	; 0x2c
  oqp->q_link    = link;
 8003678:	652d      	str	r5, [r5, #80]	; 0x50
 800367a:	60b8      	str	r0, [r7, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800367c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  tqp->next = (thread_t *)tqp;
 8003680:	4c6a      	ldr	r4, [pc, #424]	; (800382c <main+0x2ec>)
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8003682:	4e6b      	ldr	r6, [pc, #428]	; (8003830 <main+0x2f0>)
 8003684:	4b6b      	ldr	r3, [pc, #428]	; (8003834 <main+0x2f4>)
 8003686:	f242 3727 	movw	r7, #8999	; 0x2327
 800368a:	6287      	str	r7, [r0, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800368c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003690:	62c7      	str	r7, [r0, #44]	; 0x2c
  tqp->prev = (thread_t *)tqp;
 8003692:	6064      	str	r4, [r4, #4]
  STM32_ST_TIM->CCMR1  = 0;
 8003694:	6181      	str	r1, [r0, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8003696:	6341      	str	r1, [r0, #52]	; 0x34
  STM32_ST_TIM->CCR[2] = 0;
#endif
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
 8003698:	60c1      	str	r1, [r0, #12]
  STM32_ST_TIM->CR2    = 0;
 800369a:	6041      	str	r1, [r0, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800369c:	f8c0 e014 	str.w	lr, [r0, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 80036a0:	f8c0 e000 	str.w	lr, [r0]
  oqp->q_top     = bp + size;
 80036a4:	f105 0074 	add.w	r0, r5, #116	; 0x74
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80036a8:	f882 c31c 	strb.w	ip, [r2, #796]	; 0x31c
 80036ac:	6428      	str	r0, [r5, #64]	; 0x40
  oqp->q_notify  = onfy;
 80036ae:	4862      	ldr	r0, [pc, #392]	; (8003838 <main+0x2f8>)
 80036b0:	64e8      	str	r0, [r5, #76]	; 0x4c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80036b2:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 80036b6:	4861      	ldr	r0, [pc, #388]	; (800383c <main+0x2fc>)
 80036b8:	6768      	str	r0, [r5, #116]	; 0x74
 80036ba:	f8c2 c180 	str.w	ip, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80036be:	f8c2 c000 	str.w	ip, [r2]
  tqp->next = (thread_t *)tqp;
 80036c2:	f105 0230 	add.w	r2, r5, #48	; 0x30
  tqp->prev = (thread_t *)tqp;
 80036c6:	e9c5 220c 	strd	r2, r2, [r5, #48]	; 0x30
 80036ca:	4a5d      	ldr	r2, [pc, #372]	; (8003840 <main+0x300>)
  tqp->next = (thread_t *)tqp;
 80036cc:	6024      	str	r4, [r4, #0]
  ch.rlist.prio = NOPRIO;
 80036ce:	60a1      	str	r1, [r4, #8]
 80036d0:	6032      	str	r2, [r6, #0]
 80036d2:	f106 020c 	add.w	r2, r6, #12
  tqp->prev = (thread_t *)tqp;
 80036d6:	e9c6 2203 	strd	r2, r2, [r6, #12]
  dlp->next = (dyn_element_t *)dlp;
 80036da:	f103 0210 	add.w	r2, r3, #16
 80036de:	611a      	str	r2, [r3, #16]
  H_PAGES(&default_heap.header) = 0;
 80036e0:	e9c6 1101 	strd	r1, r1, [r6, #4]
 80036e4:	f103 0224 	add.w	r2, r3, #36	; 0x24
  mp->owner = NULL;
 80036e8:	6171      	str	r1, [r6, #20]
  mp->object_size = size;
 80036ea:	2614      	movs	r6, #20
 80036ec:	619e      	str	r6, [r3, #24]
 80036ee:	625a      	str	r2, [r3, #36]	; 0x24
 80036f0:	f103 0628 	add.w	r6, r3, #40	; 0x28
 80036f4:	221c      	movs	r2, #28
 80036f6:	629e      	str	r6, [r3, #40]	; 0x28
 80036f8:	631a      	str	r2, [r3, #48]	; 0x30
 80036fa:	f103 063c 	add.w	r6, r3, #60	; 0x3c
 80036fe:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8003702:	63de      	str	r6, [r3, #60]	; 0x3c
 8003704:	641a      	str	r2, [r3, #64]	; 0x40
 8003706:	f103 0644 	add.w	r6, r3, #68	; 0x44
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 800370a:	f104 021c 	add.w	r2, r4, #28
 800370e:	645e      	str	r6, [r3, #68]	; 0x44
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8003710:	e9c4 2207 	strd	r2, r2, [r4, #28]
  mp->align = align;
 8003714:	2604      	movs	r6, #4
  mp->provider = provider;
 8003716:	4a4b      	ldr	r2, [pc, #300]	; (8003844 <main+0x304>)
 8003718:	621a      	str	r2, [r3, #32]
 800371a:	639a      	str	r2, [r3, #56]	; 0x38
 800371c:	e9c3 3300 	strd	r3, r3, [r3]
  ch_memcore.basemem = __heap_base__;
 8003720:	4a49      	ldr	r2, [pc, #292]	; (8003848 <main+0x308>)
 8003722:	6099      	str	r1, [r3, #8]
  mp->next = NULL;
 8003724:	6159      	str	r1, [r3, #20]
 8003726:	62d9      	str	r1, [r3, #44]	; 0x2c
  mp->align = align;
 8003728:	61de      	str	r6, [r3, #28]
 800372a:	635e      	str	r6, [r3, #52]	; 0x34
 800372c:	4847      	ldr	r0, [pc, #284]	; (800384c <main+0x30c>)
  ch_memcore.topmem  = __heap_end__;
 800372e:	4b48      	ldr	r3, [pc, #288]	; (8003850 <main+0x310>)
  ch.tm.offset = (rtcnt_t)0;
 8003730:	6761      	str	r1, [r4, #116]	; 0x74
 8003732:	e9c0 2300 	strd	r2, r3, [r0]
  tmp->cumulative = (rttime_t)0;
 8003736:	2200      	movs	r2, #0
 8003738:	2300      	movs	r3, #0
  ch.rlist.older = (thread_t *)&ch.rlist;
 800373a:	e9c4 4404 	strd	r4, r4, [r4, #16]
  ch.vtlist.lasttime = (systime_t)0;
 800373e:	e9c4 7109 	strd	r7, r1, [r4, #36]	; 0x24
  tmp->best       = (rtcnt_t)-1;
 8003742:	9700      	str	r7, [sp, #0]
  tmp->cumulative = (rttime_t)0;
 8003744:	e9cd 2304 	strd	r2, r3, [sp, #16]
  tmp->last       = (rtcnt_t)0;
 8003748:	e9cd 1101 	strd	r1, r1, [sp, #4]
  tmp->n          = (ucnt_t)0;
 800374c:	9103      	str	r1, [sp, #12]
    chTMStartMeasurementX(&tm);
 800374e:	4668      	mov	r0, sp
 8003750:	f7fd fda6 	bl	80012a0 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 8003754:	4668      	mov	r0, sp
 8003756:	f7fd fd7b 	bl	8001250 <chTMStopMeasurementX>
  } while (i > 0U);
 800375a:	3e01      	subs	r6, #1
 800375c:	d1f7      	bne.n	800374e <main+0x20e>
  ch.tm.offset = tm.best;
 800375e:	9900      	ldr	r1, [sp, #0]
  REG_INSERT(tp);
 8003760:	6962      	ldr	r2, [r4, #20]
 8003762:	4b3c      	ldr	r3, [pc, #240]	; (8003854 <main+0x314>)
 8003764:	6761      	str	r1, [r4, #116]	; 0x74
  tp->prio      = prio;
 8003766:	2180      	movs	r1, #128	; 0x80
 8003768:	63a1      	str	r1, [r4, #56]	; 0x38
  tp->realprio  = prio;
 800376a:	66e1      	str	r1, [r4, #108]	; 0x6c
  tp->name      = name;
 800376c:	483a      	ldr	r0, [pc, #232]	; (8003858 <main+0x318>)
 800376e:	64a0      	str	r0, [r4, #72]	; 0x48
  tp->refs      = (trefs_t)1;
 8003770:	2101      	movs	r1, #1
  REG_INSERT(tp);
 8003772:	e9c4 4210 	strd	r4, r2, [r4, #64]	; 0x40
  tp->epending  = (eventmask_t)0;
 8003776:	e9c4 6619 	strd	r6, r6, [r4, #100]	; 0x64
  tp->flags     = CH_FLAG_MODE_STATIC;
 800377a:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
  tp->refs      = (trefs_t)1;
 800377e:	f884 1052 	strb.w	r1, [r4, #82]	; 0x52
  tlp->next = (thread_t *)tlp;
 8003782:	f103 0028 	add.w	r0, r3, #40	; 0x28
  REG_INSERT(tp);
 8003786:	6113      	str	r3, [r2, #16]
  tqp->next = (thread_t *)tqp;
 8003788:	f103 022c 	add.w	r2, r3, #44	; 0x2c
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 800378c:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8003790:	e9c4 0216 	strd	r0, r2, [r4, #88]	; 0x58
  currp->state = CH_STATE_CURRENT;
 8003794:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
  currp->wabase = NULL;
 8003798:	64e6      	str	r6, [r4, #76]	; 0x4c
  tqp->prev = (thread_t *)tqp;
 800379a:	6622      	str	r2, [r4, #96]	; 0x60
 800379c:	2420      	movs	r4, #32
 800379e:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
 80037a2:	b662      	cpsie	i
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037a4:	4b2d      	ldr	r3, [pc, #180]	; (800385c <main+0x31c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80037a6:	4a2e      	ldr	r2, [pc, #184]	; (8003860 <main+0x320>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037a8:	68d9      	ldr	r1, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037aa:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
 80037ae:	4001      	ands	r1, r0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80037b0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
  reg_value  =  (reg_value                                   |
 80037b4:	430a      	orrs	r2, r1
 80037b6:	f6a0 300f 	subw	r0, r0, #2831	; 0xb0f
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80037ba:	60da      	str	r2, [r3, #12]
 80037bc:	68c2      	ldr	r2, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80037be:	4929      	ldr	r1, [pc, #164]	; (8003864 <main+0x324>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80037c0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80037c4:	60c2      	str	r2, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80037c6:	680a      	ldr	r2, [r1, #0]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c8:	2010      	movs	r0, #16
 80037ca:	f042 0201 	orr.w	r2, r2, #1
 80037ce:	600a      	str	r2, [r1, #0]
 80037d0:	77d8      	strb	r0, [r3, #31]
 80037d2:	f883 4022 	strb.w	r4, [r3, #34]	; 0x22
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80037d6:	f386 8811 	msr	BASEPRI, r6
  __ASM volatile ("cpsie i" : : : "memory");
 80037da:	b662      	cpsie	i
    (void) chThdCreate(&idle_descriptor);
 80037dc:	4822      	ldr	r0, [pc, #136]	; (8003868 <main+0x328>)
 80037de:	f7fe fdaf 	bl	8002340 <chThdCreate>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80037e2:	f384 8811 	msr	BASEPRI, r4
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 80037e6:	7a2b      	ldrb	r3, [r5, #8]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d13f      	bne.n	800386c <main+0x32c>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(true);
 80037ec:	4b09      	ldr	r3, [pc, #36]	; (8003814 <main+0x2d4>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80037ee:	4a0b      	ldr	r2, [pc, #44]	; (800381c <main+0x2dc>)
 80037f0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80037f2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80037f6:	6419      	str	r1, [r3, #64]	; 0x40
 80037f8:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80037fa:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80037fe:	6619      	str	r1, [r3, #96]	; 0x60
 8003800:	20c0      	movs	r0, #192	; 0xc0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003802:	2140      	movs	r1, #64	; 0x40
 8003804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003806:	f882 0326 	strb.w	r0, [r2, #806]	; 0x326
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800380a:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800380e:	6051      	str	r1, [r2, #4]
 8003810:	e02c      	b.n	800386c <main+0x32c>
 8003812:	bf00      	nop
 8003814:	40023800 	.word	0x40023800
 8003818:	40007000 	.word	0x40007000
 800381c:	e000e100 	.word	0xe000e100
 8003820:	200008e0 	.word	0x200008e0
 8003824:	0800b574 	.word	0x0800b574
 8003828:	e0042000 	.word	0xe0042000
 800382c:	200009b0 	.word	0x200009b0
 8003830:	20000b50 	.word	0x20000b50
 8003834:	20000a28 	.word	0x20000a28
 8003838:	08000721 	.word	0x08000721
 800383c:	40004400 	.word	0x40004400
 8003840:	080006e1 	.word	0x080006e1
 8003844:	08000f91 	.word	0x08000f91
 8003848:	20001b98 	.word	0x20001b98
 800384c:	20000b48 	.word	0x20000b48
 8003850:	20020000 	.word	0x20020000
 8003854:	200009e0 	.word	0x200009e0
 8003858:	0800ade8 	.word	0x0800ade8
 800385c:	e000ed00 	.word	0xe000ed00
 8003860:	05fa0300 	.word	0x05fa0300
 8003864:	e0001000 	.word	0xe0001000
 8003868:	0800ae0c 	.word	0x0800ae0c
  USART_TypeDef *u = sdp->usart;
 800386c:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 800386e:	4b1b      	ldr	r3, [pc, #108]	; (80038dc <main+0x39c>)
 8003870:	429a      	cmp	r2, r3
 8003872:	d030      	beq.n	80038d6 <main+0x396>
 8003874:	481a      	ldr	r0, [pc, #104]	; (80038e0 <main+0x3a0>)
    fck = STM32_PCLK2 / config->speed;
 8003876:	f240 4393 	movw	r3, #1171	; 0x493
 800387a:	f640 1127 	movw	r1, #2343	; 0x927
 800387e:	4282      	cmp	r2, r0
 8003880:	bf08      	it	eq
 8003882:	460b      	moveq	r3, r1
  u->BRR = fck;
 8003884:	6093      	str	r3, [r2, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8003886:	2440      	movs	r4, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8003888:	2001      	movs	r0, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800388a:	f242 112c 	movw	r1, #8492	; 0x212c
  u->SR = 0;
 800388e:	2300      	movs	r3, #0
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8003890:	6114      	str	r4, [r2, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8003892:	6150      	str	r0, [r2, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8003894:	60d1      	str	r1, [r2, #12]
    sdp->rxmask = 0xFF;
 8003896:	20ff      	movs	r0, #255	; 0xff
  u->SR = 0;
 8003898:	6013      	str	r3, [r2, #0]

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 800389a:	2102      	movs	r1, #2
  (void)u->SR;  /* SR reset step 1.*/
 800389c:	6814      	ldr	r4, [r2, #0]
  (void)u->DR;  /* SR reset step 2.*/
 800389e:	6852      	ldr	r2, [r2, #4]
    sdp->rxmask = 0xFF;
 80038a0:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
 80038a4:	7229      	strb	r1, [r5, #8]
 80038a6:	f383 8811 	msr	BASEPRI, r3
  sdStart(&SD2, NULL);

  /*
   * Creates the blinker thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 80038aa:	4a0e      	ldr	r2, [pc, #56]	; (80038e4 <main+0x3a4>)
 80038ac:	480e      	ldr	r0, [pc, #56]	; (80038e8 <main+0x3a8>)
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (true) {
    if (!palReadPad(GPIOC, GPIOC_BUTTON)) {
 80038ae:	4d0f      	ldr	r5, [pc, #60]	; (80038ec <main+0x3ac>)
      test_execute((BaseSequentialStream *)&SD2, &rt_test_suite);
 80038b0:	4c0f      	ldr	r4, [pc, #60]	; (80038f0 <main+0x3b0>)
      test_execute((BaseSequentialStream *)&SD2, &oslib_test_suite);
 80038b2:	4e10      	ldr	r6, [pc, #64]	; (80038f4 <main+0x3b4>)
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 80038b4:	2180      	movs	r1, #128	; 0x80
 80038b6:	f7fe fc9b 	bl	80021f0 <chThdCreateStatic.constprop.0>
    if (!palReadPad(GPIOC, GPIOC_BUTTON)) {
 80038ba:	692b      	ldr	r3, [r5, #16]
 80038bc:	049b      	lsls	r3, r3, #18
      test_execute((BaseSequentialStream *)&SD2, &rt_test_suite);
 80038be:	4620      	mov	r0, r4
    if (!palReadPad(GPIOC, GPIOC_BUTTON)) {
 80038c0:	d404      	bmi.n	80038cc <main+0x38c>
      test_execute((BaseSequentialStream *)&SD2, &rt_test_suite);
 80038c2:	f7ff f8d5 	bl	8002a70 <test_execute.constprop.0>
      test_execute((BaseSequentialStream *)&SD2, &oslib_test_suite);
 80038c6:	4630      	mov	r0, r6
 80038c8:	f7ff f8d2 	bl	8002a70 <test_execute.constprop.0>
    }
    chThdSleepMilliseconds(500);
 80038cc:	f241 3088 	movw	r0, #5000	; 0x1388
 80038d0:	f7ff f8be 	bl	8002a50 <chThdSleep>
  while (true) {
 80038d4:	e7f1      	b.n	80038ba <main+0x37a>
    fck = STM32_PCLK2 / config->speed;
 80038d6:	f640 1327 	movw	r3, #2343	; 0x927
 80038da:	e7d3      	b.n	8003884 <main+0x344>
 80038dc:	40011000 	.word	0x40011000
 80038e0:	40011400 	.word	0x40011400
 80038e4:	08002ed1 	.word	0x08002ed1
 80038e8:	20001a50 	.word	0x20001a50
 80038ec:	40020800 	.word	0x40020800
 80038f0:	0800b53c 	.word	0x0800b53c
 80038f4:	0800b048 	.word	0x0800b048
	...

08003900 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003900:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 8003904:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003906:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800390a:	2300      	movs	r3, #0
 800390c:	f383 8811 	msr	BASEPRI, r3
}
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
	...

08003920 <chThdExit>:
void chThdExit(msg_t msg) {
 8003920:	b538      	push	{r3, r4, r5, lr}
 8003922:	2220      	movs	r2, #32
 8003924:	4603      	mov	r3, r0
 8003926:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
 800392a:	4a0f      	ldr	r2, [pc, #60]	; (8003968 <chThdExit+0x48>)
 800392c:	6994      	ldr	r4, [r2, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 800392e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
 8003930:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 8003932:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8003936:	42a8      	cmp	r0, r5
 8003938:	d006      	beq.n	8003948 <chThdExit+0x28>
  tlp->next = tp->queue.next;
 800393a:	6803      	ldr	r3, [r0, #0]
 800393c:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 800393e:	f7fd fd2f 	bl	80013a0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 8003942:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 8003944:	42a8      	cmp	r0, r5
 8003946:	d1f8      	bne.n	800393a <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
 8003948:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800394c:	b93b      	cbnz	r3, 800395e <chThdExit+0x3e>
 800394e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8003952:	079b      	lsls	r3, r3, #30
 8003954:	d103      	bne.n	800395e <chThdExit+0x3e>
    REG_REMOVE(tp);
 8003956:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800395a:	6113      	str	r3, [r2, #16]
 800395c:	615a      	str	r2, [r3, #20]
}
 800395e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 8003962:	200f      	movs	r0, #15
 8003964:	f7fe bcfc 	b.w	8002360 <chSchGoSleepS>
 8003968:	200009b0 	.word	0x200009b0
 800396c:	00000000 	.word	0x00000000

08003970 <Thread1.lto_priv.1>:

static THD_WORKING_AREA(waThread1, 256);
static THD_FUNCTION(Thread1, arg) {
 8003970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  (void)arg;

  exit_flag = false;
 8003972:	4f10      	ldr	r7, [pc, #64]	; (80039b4 <Thread1.lto_priv.1+0x44>)
 8003974:	2500      	movs	r5, #0
 8003976:	703d      	strb	r5, [r7, #0]
 8003978:	2620      	movs	r6, #32
 800397a:	f386 8811 	msr	BASEPRI, r6
  tp = chMsgWaitS();
 800397e:	f7ff fb97 	bl	80030b0 <chMsgWaitS>
 8003982:	4604      	mov	r4, r0
 8003984:	f385 8811 	msr	BASEPRI, r5
  thread_t *tp;
  const call_message_t *cmp;
  msg_t ret;

  tp = chMsgWait();
  cmp = (const call_message_t *)chMsgGet(tp);
 8003988:	6a43      	ldr	r3, [r0, #36]	; 0x24
  ret = cmp->veneer(cmp->argsp);
 800398a:	e9d3 2000 	ldrd	r2, r0, [r3]
 800398e:	4790      	blx	r2
 8003990:	4601      	mov	r1, r0
 8003992:	f386 8811 	msr	BASEPRI, r6
  chSchWakeupS(tp, msg);
 8003996:	4620      	mov	r0, r4
 8003998:	f7fe fbfa 	bl	8002190 <chSchWakeupS>
 800399c:	f385 8811 	msr	BASEPRI, r5
  do {
    chDelegateDispatch();
  } while (!exit_flag);
 80039a0:	783b      	ldrb	r3, [r7, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0e9      	beq.n	800397a <Thread1.lto_priv.1+0xa>

  chThdExit(0x0FA5);
}
 80039a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  chThdExit(0x0FA5);
 80039aa:	f640 70a5 	movw	r0, #4005	; 0xfa5
 80039ae:	f7ff bfb7 	b.w	8003920 <chThdExit>
 80039b2:	bf00      	nop
 80039b4:	20000b6c 	.word	0x20000b6c
	...

080039c0 <bmk_thread3>:
  chThdExit((msg_t)p);
 80039c0:	f7ff bfae 	b.w	8003920 <chThdExit>
	...

080039d0 <chSchDoReschedule>:
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;
 80039d0:	4a0d      	ldr	r2, [pc, #52]	; (8003a08 <chSchDoReschedule+0x38>)
  thread_t *tp = tqp->next;
 80039d2:	6810      	ldr	r0, [r2, #0]
 80039d4:	6991      	ldr	r1, [r2, #24]
  tqp->next             = tp->queue.next;
 80039d6:	6803      	ldr	r3, [r0, #0]
void chSchDoRescheduleAhead(void) {
 80039d8:	b430      	push	{r4, r5}

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 80039da:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 80039dc:	605a      	str	r2, [r3, #4]
  tp->state = CH_STATE_READY;
 80039de:	2500      	movs	r5, #0
  currp->state = CH_STATE_CURRENT;
 80039e0:	f880 4020 	strb.w	r4, [r0, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 80039e4:	688c      	ldr	r4, [r1, #8]
  tqp->next             = tp->queue.next;
 80039e6:	6013      	str	r3, [r2, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 80039e8:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 80039ea:	f881 5020 	strb.w	r5, [r1, #32]
  cp = (thread_t *)&ch.rlist.queue;
 80039ee:	e000      	b.n	80039f2 <chSchDoReschedule+0x22>
 80039f0:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	4294      	cmp	r4, r2
 80039f6:	d3fb      	bcc.n	80039f0 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
 80039f8:	685a      	ldr	r2, [r3, #4]
  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
 80039fa:	bc30      	pop	{r4, r5}
  tp->queue.prev             = cp->queue.prev;
 80039fc:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 8003a00:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 8003a02:	6059      	str	r1, [r3, #4]
  chSysSwitch(currp, otp);
 8003a04:	f7fc bc5c 	b.w	80002c0 <_port_switch>
 8003a08:	200009b0 	.word	0x200009b0
 8003a0c:	00000000 	.word	0x00000000

08003a10 <chSchRescheduleS>:
  return firstprio(&ch.rlist.queue) > currp->prio;
 8003a10:	4b04      	ldr	r3, [pc, #16]	; (8003a24 <chSchRescheduleS+0x14>)
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	699b      	ldr	r3, [r3, #24]
  if (chSchIsRescRequiredI()) {
 8003a16:	6892      	ldr	r2, [r2, #8]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d800      	bhi.n	8003a20 <chSchRescheduleS+0x10>
}
 8003a1e:	4770      	bx	lr
    chSchDoRescheduleAhead();
 8003a20:	f7ff bfd6 	b.w	80039d0 <chSchDoReschedule>
 8003a24:	200009b0 	.word	0x200009b0
	...

08003a30 <chSemResetWithMessage.constprop.0>:
void chSemResetWithMessage(semaphore_t *sp, cnt_t n, msg_t msg) {
 8003a30:	b570      	push	{r4, r5, r6, lr}
 8003a32:	2320      	movs	r3, #32
 8003a34:	f383 8811 	msr	BASEPRI, r3
  cnt = sp->cnt;
 8003a38:	6885      	ldr	r5, [r0, #8]
  sp->cnt = n;
 8003a3a:	6081      	str	r1, [r0, #8]
  while (++cnt <= (cnt_t)0) {
 8003a3c:	3501      	adds	r5, #1
 8003a3e:	2d00      	cmp	r5, #0
 8003a40:	dc0c      	bgt.n	8003a5c <chSemResetWithMessage.constprop.0+0x2c>
 8003a42:	4604      	mov	r4, r0
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = msg;
 8003a44:	f06f 0601 	mvn.w	r6, #1
  thread_t *tp = tqp->prev;
 8003a48:	6860      	ldr	r0, [r4, #4]
  tqp->prev             = tp->queue.prev;
 8003a4a:	6843      	ldr	r3, [r0, #4]
 8003a4c:	6063      	str	r3, [r4, #4]
  tqp->prev->queue.next = (thread_t *)tqp;
 8003a4e:	601c      	str	r4, [r3, #0]
 8003a50:	f7fd fca6 	bl	80013a0 <chSchReadyI>
  while (++cnt <= (cnt_t)0) {
 8003a54:	3501      	adds	r5, #1
 8003a56:	2d01      	cmp	r5, #1
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = msg;
 8003a58:	6246      	str	r6, [r0, #36]	; 0x24
  while (++cnt <= (cnt_t)0) {
 8003a5a:	d1f5      	bne.n	8003a48 <chSemResetWithMessage.constprop.0+0x18>
  chSchRescheduleS();
 8003a5c:	f7ff ffd8 	bl	8003a10 <chSchRescheduleS>
 8003a60:	2300      	movs	r3, #0
 8003a62:	f383 8811 	msr	BASEPRI, r3
}
 8003a66:	bd70      	pop	{r4, r5, r6, pc}
	...

08003a70 <rt_test_006_001_execute>:
static void rt_test_006_001_execute(void) {
 8003a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    msg = chSemWait(&sem1);
 8003a74:	4c2a      	ldr	r4, [pc, #168]	; (8003b20 <rt_test_006_001_execute+0xb0>)
  test_set_step(1);
 8003a76:	4f2b      	ldr	r7, [pc, #172]	; (8003b24 <rt_test_006_001_execute+0xb4>)
 8003a78:	2301      	movs	r3, #1
    msg = chSemWait(&sem1);
 8003a7a:	4620      	mov	r0, r4
  test_set_step(1);
 8003a7c:	603b      	str	r3, [r7, #0]
    msg = chSemWait(&sem1);
 8003a7e:	f7ff fcc7 	bl	8003410 <chSemWait>
 8003a82:	2620      	movs	r6, #32
 8003a84:	4605      	mov	r5, r0
 8003a86:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chSemGetCounterI(&sem1) == 0, "wrong counter value");
 8003a8a:	68a0      	ldr	r0, [r4, #8]
 8003a8c:	4926      	ldr	r1, [pc, #152]	; (8003b28 <rt_test_006_001_execute+0xb8>)
 8003a8e:	fab0 f080 	clz	r0, r0
 8003a92:	0940      	lsrs	r0, r0, #5
 8003a94:	f7fd f86c 	bl	8000b70 <_test_assert>
 8003a98:	b120      	cbz	r0, 8003aa4 <rt_test_006_001_execute+0x34>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f383 8811 	msr	BASEPRI, r3
}
 8003aa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003aa4:	f380 8811 	msr	BASEPRI, r0
    test_assert(MSG_OK == msg, "wrong returned message");
 8003aa8:	fab5 f085 	clz	r0, r5
 8003aac:	491f      	ldr	r1, [pc, #124]	; (8003b2c <rt_test_006_001_execute+0xbc>)
 8003aae:	0940      	lsrs	r0, r0, #5
 8003ab0:	f7fd f85e 	bl	8000b70 <_test_assert>
 8003ab4:	4605      	mov	r5, r0
 8003ab6:	2800      	cmp	r0, #0
 8003ab8:	d1f2      	bne.n	8003aa0 <rt_test_006_001_execute+0x30>
  test_set_step(2);
 8003aba:	f04f 0902 	mov.w	r9, #2
    chSemSignal(&sem1);
 8003abe:	4620      	mov	r0, r4
  test_set_step(2);
 8003ac0:	f8c7 9000 	str.w	r9, [r7]
    chSemSignal(&sem1);
 8003ac4:	f7fe fc1c 	bl	8002300 <chSemSignal>
 8003ac8:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "wrong counter value");
 8003acc:	68a0      	ldr	r0, [r4, #8]
 8003ace:	4916      	ldr	r1, [pc, #88]	; (8003b28 <rt_test_006_001_execute+0xb8>)
 8003ad0:	f1a0 0001 	sub.w	r0, r0, #1
 8003ad4:	fab0 f080 	clz	r0, r0
 8003ad8:	0940      	lsrs	r0, r0, #5
 8003ada:	f7fd f849 	bl	8000b70 <_test_assert>
 8003ade:	4680      	mov	r8, r0
 8003ae0:	b118      	cbz	r0, 8003aea <rt_test_006_001_execute+0x7a>
 8003ae2:	f385 8811 	msr	BASEPRI, r5
}
 8003ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003aea:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 8003aee:	2303      	movs	r3, #3
  chSemResetWithMessage(sp, n, MSG_RESET);
 8003af0:	4649      	mov	r1, r9
 8003af2:	4620      	mov	r0, r4
 8003af4:	603b      	str	r3, [r7, #0]
 8003af6:	f7ff ff9b 	bl	8003a30 <chSemResetWithMessage.constprop.0>
 8003afa:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chSemGetCounterI(&sem1) == 2, "wrong counter value");
 8003afe:	68a0      	ldr	r0, [r4, #8]
 8003b00:	4909      	ldr	r1, [pc, #36]	; (8003b28 <rt_test_006_001_execute+0xb8>)
 8003b02:	f1a0 0002 	sub.w	r0, r0, #2
 8003b06:	fab0 f080 	clz	r0, r0
 8003b0a:	0940      	lsrs	r0, r0, #5
 8003b0c:	f7fd f830 	bl	8000b70 <_test_assert>
 8003b10:	b910      	cbnz	r0, 8003b18 <rt_test_006_001_execute+0xa8>
 8003b12:	f380 8811 	msr	BASEPRI, r0
  test_end_step(3);
 8003b16:	e7c3      	b.n	8003aa0 <rt_test_006_001_execute+0x30>
 8003b18:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chSemGetCounterI(&sem1) == 2, "wrong counter value");
 8003b1c:	e7c0      	b.n	8003aa0 <rt_test_006_001_execute+0x30>
 8003b1e:	bf00      	nop
 8003b20:	20000d70 	.word	0x20000d70
 8003b24:	2000149c 	.word	0x2000149c
 8003b28:	08009dd8 	.word	0x08009dd8
 8003b2c:	08009dec 	.word	0x08009dec

08003b30 <rt_test_006_001_teardown>:
 8003b30:	4801      	ldr	r0, [pc, #4]	; (8003b38 <rt_test_006_001_teardown+0x8>)
 8003b32:	2100      	movs	r1, #0
 8003b34:	f7ff bf7c 	b.w	8003a30 <chSemResetWithMessage.constprop.0>
 8003b38:	20000d70 	.word	0x20000d70
 8003b3c:	00000000 	.word	0x00000000

08003b40 <chSemSignalWait.constprop.0>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 8003b40:	b538      	push	{r3, r4, r5, lr}
 8003b42:	2320      	movs	r3, #32
 8003b44:	f383 8811 	msr	BASEPRI, r3
              ((sps->cnt < (cnt_t)0) && queue_notempty(&sps->queue)),
              "inconsistent semaphore");
  chDbgAssert(((spw->cnt >= (cnt_t)0) && queue_isempty(&spw->queue)) ||
              ((spw->cnt < (cnt_t)0) && queue_notempty(&spw->queue)),
              "inconsistent semaphore");
  if (++sps->cnt <= (cnt_t)0) {
 8003b48:	4c15      	ldr	r4, [pc, #84]	; (8003ba0 <chSemSignalWait.constprop.0+0x60>)
 8003b4a:	68a3      	ldr	r3, [r4, #8]
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	2a00      	cmp	r2, #0
 8003b50:	60a2      	str	r2, [r4, #8]
 8003b52:	dd19      	ble.n	8003b88 <chSemSignalWait.constprop.0+0x48>
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
  }
  if (--spw->cnt < (cnt_t)0) {
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	60a3      	str	r3, [r4, #8]
 8003b58:	db06      	blt.n	8003b68 <chSemSignalWait.constprop.0+0x28>
    ctp->u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->u.rdymsg;
  }
  else {
    chSchRescheduleS();
 8003b5a:	f7ff ff59 	bl	8003a10 <chSchRescheduleS>
    msg = MSG_OK;
 8003b5e:	2000      	movs	r0, #0
 8003b60:	2300      	movs	r3, #0
 8003b62:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return msg;
}
 8003b66:	bd38      	pop	{r3, r4, r5, pc}
    thread_t *ctp = currp;
 8003b68:	4a0e      	ldr	r2, [pc, #56]	; (8003ba4 <chSemSignalWait.constprop.0+0x64>)
  tp->queue.prev             = tqp->prev;
 8003b6a:	6863      	ldr	r3, [r4, #4]
 8003b6c:	6995      	ldr	r5, [r2, #24]
    chSchGoSleepS(CH_STATE_WTSEM);
 8003b6e:	2005      	movs	r0, #5
 8003b70:	e9c5 4300 	strd	r4, r3, [r5]
  tp->queue.prev->queue.next = tp;
 8003b74:	601d      	str	r5, [r3, #0]
    ctp->u.wtsemp = spw;
 8003b76:	626c      	str	r4, [r5, #36]	; 0x24
  tqp->prev                  = tp;
 8003b78:	6065      	str	r5, [r4, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
 8003b7a:	f7fe fbf1 	bl	8002360 <chSchGoSleepS>
    msg = ctp->u.rdymsg;
 8003b7e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003b80:	2300      	movs	r3, #0
 8003b82:	f383 8811 	msr	BASEPRI, r3
}
 8003b86:	bd38      	pop	{r3, r4, r5, pc}
  thread_t *tp = tqp->next;
 8003b88:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 8003b8a:	6803      	ldr	r3, [r0, #0]
 8003b8c:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8003b8e:	605c      	str	r4, [r3, #4]
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
 8003b90:	f7fd fc06 	bl	80013a0 <chSchReadyI>
 8003b94:	68a3      	ldr	r3, [r4, #8]
 8003b96:	2200      	movs	r2, #0
 8003b98:	6242      	str	r2, [r0, #36]	; 0x24
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	e7da      	b.n	8003b54 <chSemSignalWait.constprop.0+0x14>
 8003b9e:	bf00      	nop
 8003ba0:	20000d70 	.word	0x20000d70
 8003ba4:	200009b0 	.word	0x200009b0
	...

08003bb0 <rt_test_006_005_execute>:

static void rt_test_006_005_teardown(void) {
  test_wait_threads();
}

static void rt_test_006_005_execute(void) {
 8003bb0:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 8003bb2:	4b1e      	ldr	r3, [pc, #120]	; (8003c2c <rt_test_006_005_execute+0x7c>)

  /* [6.5.1] An higher priority thread is created that performs
     non-atomical wait and signal operations on a semaphore.*/
  test_set_step(1);
 8003bb4:	4d1e      	ldr	r5, [pc, #120]	; (8003c30 <rt_test_006_005_execute+0x80>)
  return chThdGetSelfX()->prio;
 8003bb6:	699b      	ldr	r3, [r3, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003bb8:	4a1e      	ldr	r2, [pc, #120]	; (8003c34 <rt_test_006_005_execute+0x84>)
 8003bba:	6899      	ldr	r1, [r3, #8]
 8003bbc:	481e      	ldr	r0, [pc, #120]	; (8003c38 <rt_test_006_005_execute+0x88>)
  return (bool)(tqp->next == (const thread_t *)tqp);
 8003bbe:	4c1f      	ldr	r4, [pc, #124]	; (8003c3c <rt_test_006_005_execute+0x8c>)
  test_set_step(1);
 8003bc0:	2301      	movs	r3, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003bc2:	3101      	adds	r1, #1
  test_set_step(1);
 8003bc4:	602b      	str	r3, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	f7fe fb12 	bl	80021f0 <chThdCreateStatic.constprop.0>
 8003bcc:	4a1c      	ldr	r2, [pc, #112]	; (8003c40 <rt_test_006_005_execute+0x90>)
  test_end_step(1);

  /* [6.5.2] The function chSemSignalWait() is invoked by specifying
     the same semaphore for the wait and signal phases. The counter
     value must be one on exit.*/
  test_set_step(2);
 8003bce:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003bd0:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8003bd2:	602b      	str	r3, [r5, #0]
  {
    chSemSignalWait(&sem1, &sem1);
 8003bd4:	f7ff ffb4 	bl	8003b40 <chSemSignalWait.constprop.0>
 8003bd8:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8003bda:	491a      	ldr	r1, [pc, #104]	; (8003c44 <rt_test_006_005_execute+0x94>)
 8003bdc:	1b00      	subs	r0, r0, r4
 8003bde:	fab0 f080 	clz	r0, r0
 8003be2:	0940      	lsrs	r0, r0, #5
 8003be4:	f7fc ffc4 	bl	8000b70 <_test_assert>
 8003be8:	b100      	cbz	r0, 8003bec <rt_test_006_005_execute+0x3c>
    chSemSignalWait(&sem1, &sem1);
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
    test_assert(sem1.cnt == 0, "counter not zero");
  }
  test_end_step(3);
}
 8003bea:	bd38      	pop	{r3, r4, r5, pc}
    test_assert(sem1.cnt == 0, "counter not zero");
 8003bec:	68a0      	ldr	r0, [r4, #8]
 8003bee:	4916      	ldr	r1, [pc, #88]	; (8003c48 <rt_test_006_005_execute+0x98>)
 8003bf0:	fab0 f080 	clz	r0, r0
 8003bf4:	0940      	lsrs	r0, r0, #5
 8003bf6:	f7fc ffbb 	bl	8000b70 <_test_assert>
 8003bfa:	2800      	cmp	r0, #0
 8003bfc:	d1f5      	bne.n	8003bea <rt_test_006_005_execute+0x3a>
  test_set_step(3);
 8003bfe:	2303      	movs	r3, #3
 8003c00:	602b      	str	r3, [r5, #0]
    chSemSignalWait(&sem1, &sem1);
 8003c02:	f7ff ff9d 	bl	8003b40 <chSemSignalWait.constprop.0>
 8003c06:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8003c08:	490e      	ldr	r1, [pc, #56]	; (8003c44 <rt_test_006_005_execute+0x94>)
 8003c0a:	1b00      	subs	r0, r0, r4
 8003c0c:	fab0 f080 	clz	r0, r0
 8003c10:	0940      	lsrs	r0, r0, #5
 8003c12:	f7fc ffad 	bl	8000b70 <_test_assert>
 8003c16:	2800      	cmp	r0, #0
 8003c18:	d1e7      	bne.n	8003bea <rt_test_006_005_execute+0x3a>
    test_assert(sem1.cnt == 0, "counter not zero");
 8003c1a:	68a0      	ldr	r0, [r4, #8]
 8003c1c:	490a      	ldr	r1, [pc, #40]	; (8003c48 <rt_test_006_005_execute+0x98>)
 8003c1e:	fab0 f080 	clz	r0, r0
}
 8003c22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_assert(sem1.cnt == 0, "counter not zero");
 8003c26:	0940      	lsrs	r0, r0, #5
 8003c28:	f7fc bfa2 	b.w	8000b70 <_test_assert>
 8003c2c:	200009b0 	.word	0x200009b0
 8003c30:	2000149c 	.word	0x2000149c
 8003c34:	08003501 	.word	0x08003501
 8003c38:	20000d88 	.word	0x20000d88
 8003c3c:	20000d70 	.word	0x20000d70
 8003c40:	200014b4 	.word	0x200014b4
 8003c44:	08009e04 	.word	0x08009e04
 8003c48:	08009e14 	.word	0x08009e14
 8003c4c:	00000000 	.word	0x00000000

08003c50 <chMBReset.constprop.0>:
void chMBReset(mailbox_t *mbp) {
 8003c50:	b538      	push	{r3, r4, r5, lr}
 8003c52:	2320      	movs	r3, #32
 8003c54:	f383 8811 	msr	BASEPRI, r3
  mbp->wrptr = mbp->buffer;
 8003c58:	4c0a      	ldr	r4, [pc, #40]	; (8003c84 <chMBReset.constprop.0+0x34>)
 8003c5a:	6823      	ldr	r3, [r4, #0]
  mbp->reset = true;
 8003c5c:	2201      	movs	r2, #1
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 8003c5e:	f104 0018 	add.w	r0, r4, #24
  mbp->cnt   = (size_t)0;
 8003c62:	2500      	movs	r5, #0
  mbp->rdptr = mbp->buffer;
 8003c64:	e9c4 3302 	strd	r3, r3, [r4, #8]
  mbp->reset = true;
 8003c68:	7522      	strb	r2, [r4, #20]
  mbp->cnt   = (size_t)0;
 8003c6a:	6125      	str	r5, [r4, #16]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 8003c6c:	f7fd fc38 	bl	80014e0 <chThdDequeueAllI.constprop.0>
  chThdDequeueAllI(&mbp->qr, MSG_RESET);
 8003c70:	f104 0020 	add.w	r0, r4, #32
 8003c74:	f7fd fc34 	bl	80014e0 <chThdDequeueAllI.constprop.0>
  chSchRescheduleS();
 8003c78:	f7ff feca 	bl	8003a10 <chSchRescheduleS>
 8003c7c:	f385 8811 	msr	BASEPRI, r5
}
 8003c80:	bd38      	pop	{r3, r4, r5, pc}
 8003c82:	bf00      	nop
 8003c84:	2000084c 	.word	0x2000084c
	...

08003c90 <oslib_test_002_003_teardown>:

static void oslib_test_002_003_teardown(void) {
  chMBReset(&mb1);
 8003c90:	f7ff bfde 	b.w	8003c50 <chMBReset.constprop.0>
	...

08003ca0 <oslib_test_002_002_teardown>:
 8003ca0:	f7ff bff6 	b.w	8003c90 <oslib_test_002_003_teardown>
	...

08003cb0 <oslib_test_002_001_teardown>:
 8003cb0:	f7ff bfee 	b.w	8003c90 <oslib_test_002_003_teardown>
	...

08003cc0 <chMBPostAheadTimeout.constprop.0>:
msg_t chMBPostAheadTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 8003cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cc4:	2320      	movs	r3, #32
 8003cc6:	4606      	mov	r6, r0
 8003cc8:	460d      	mov	r5, r1
 8003cca:	f383 8811 	msr	BASEPRI, r3
 8003cce:	4c17      	ldr	r4, [pc, #92]	; (8003d2c <chMBPostAheadTimeout.constprop.0+0x6c>)
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8003cd0:	f104 0818 	add.w	r8, r4, #24
 8003cd4:	e00a      	b.n	8003cec <chMBPostAheadTimeout.constprop.0+0x2c>
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8003cd6:	e9d4 2700 	ldrd	r2, r7, [r4]
 8003cda:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8003cdc:	eba7 0c02 	sub.w	ip, r7, r2
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8003ce0:	ebb3 0fac 	cmp.w	r3, ip, asr #2
 8003ce4:	d10e      	bne.n	8003d04 <chMBPostAheadTimeout.constprop.0+0x44>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8003ce6:	f7fe fd23 	bl	8002730 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 8003cea:	b930      	cbnz	r0, 8003cfa <chMBPostAheadTimeout.constprop.0+0x3a>
    if (mbp->reset) {
 8003cec:	7d23      	ldrb	r3, [r4, #20]
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8003cee:	4629      	mov	r1, r5
 8003cf0:	4640      	mov	r0, r8
    if (mbp->reset) {
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0ef      	beq.n	8003cd6 <chMBPostAheadTimeout.constprop.0+0x16>
      return MSG_RESET;
 8003cf6:	f06f 0001 	mvn.w	r0, #1
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	f383 8811 	msr	BASEPRI, r3
}
 8003d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (--mbp->rdptr < mbp->buffer) {
 8003d04:	68e1      	ldr	r1, [r4, #12]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8003d06:	480a      	ldr	r0, [pc, #40]	; (8003d30 <chMBPostAheadTimeout.constprop.0+0x70>)
      if (--mbp->rdptr < mbp->buffer) {
 8003d08:	3904      	subs	r1, #4
 8003d0a:	428a      	cmp	r2, r1
        mbp->rdptr = mbp->top - 1;
 8003d0c:	bf88      	it	hi
 8003d0e:	1f39      	subhi	r1, r7, #4
 8003d10:	60e1      	str	r1, [r4, #12]
      mbp->cnt++;
 8003d12:	3301      	adds	r3, #1
      *mbp->rdptr = msg;
 8003d14:	600e      	str	r6, [r1, #0]
      mbp->cnt++;
 8003d16:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8003d18:	f7fd fb5a 	bl	80013d0 <chThdDequeueNextI.constprop.0>
      chSchRescheduleS();
 8003d1c:	f7ff fe78 	bl	8003a10 <chSchRescheduleS>
      return MSG_OK;
 8003d20:	2000      	movs	r0, #0
 8003d22:	2300      	movs	r3, #0
 8003d24:	f383 8811 	msr	BASEPRI, r3
}
 8003d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d2c:	2000084c 	.word	0x2000084c
 8003d30:	2000086c 	.word	0x2000086c
	...

08003d40 <oslib_test_006_001_execute>:
 * - [6.1.5] Checking cached objects.
 * - [6.1.6] Checking non-cached objects.
 * .
 */

static void oslib_test_006_001_execute(void) {
 8003d40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tqp->next = (thread_t *)tqp;
 8003d44:	4ecc      	ldr	r6, [pc, #816]	; (8004078 <oslib_test_006_001_execute+0x338>)
  ocp->objvp            = objvp;
 8003d46:	49cd      	ldr	r1, [pc, #820]	; (800407c <oslib_test_006_001_execute+0x33c>)
 8003d48:	6131      	str	r1, [r6, #16]
  ocp->hashn            = hashn;
 8003d4a:	2108      	movs	r1, #8
 8003d4c:	6031      	str	r1, [r6, #0]
 8003d4e:	f106 0130 	add.w	r1, r6, #48	; 0x30
  sp->cnt = n;
 8003d52:	2001      	movs	r0, #1
  tqp->prev = (thread_t *)tqp;
 8003d54:	e9c6 110c 	strd	r1, r1, [r6, #48]	; 0x30
  ocp->lru.hash_next    = NULL;
 8003d58:	2100      	movs	r1, #0
  ocp->hashp            = hashp;
 8003d5a:	4ac9      	ldr	r2, [pc, #804]	; (8004080 <oslib_test_006_001_execute+0x340>)
 8003d5c:	62f0      	str	r0, [r6, #44]	; 0x2c
  ocp->lru.hash_prev    = NULL;
 8003d5e:	e9c6 1105 	strd	r1, r1, [r6, #20]
  tqp->next = (thread_t *)tqp;
 8003d62:	f106 0024 	add.w	r0, r6, #36	; 0x24
  ocp->writef           = writef;
 8003d66:	4bc7      	ldr	r3, [pc, #796]	; (8004084 <oslib_test_006_001_execute+0x344>)
  ocp->readf            = readf;
 8003d68:	4cc7      	ldr	r4, [pc, #796]	; (8004088 <oslib_test_006_001_execute+0x348>)
  ocp->writef           = writef;
 8003d6a:	6433      	str	r3, [r6, #64]	; 0x40
  tqp->prev = (thread_t *)tqp;
 8003d6c:	e9c6 0009 	strd	r0, r0, [r6, #36]	; 0x24
  ocp->lru.lru_prev     = (oc_object_t *)&ocp->lru;
 8003d70:	f106 0714 	add.w	r7, r6, #20
 8003d74:	2004      	movs	r0, #4
 8003d76:	4613      	mov	r3, r2
  ocp->hashp            = hashp;
 8003d78:	6072      	str	r2, [r6, #4]
  ocp->readf            = readf;
 8003d7a:	63f4      	str	r4, [r6, #60]	; 0x3c
  ocp->lru.lru_prev     = (oc_object_t *)&ocp->lru;
 8003d7c:	6237      	str	r7, [r6, #32]
 8003d7e:	3240      	adds	r2, #64	; 0x40
 8003d80:	63b0      	str	r0, [r6, #56]	; 0x38
  ocp->objn             = objn;
 8003d82:	60b0      	str	r0, [r6, #8]
    hashp->hash_prev = (oc_object_t *)hashp;
 8003d84:	e9c3 3300 	strd	r3, r3, [r3]
    hashp++;
 8003d88:	3308      	adds	r3, #8
  } while (hashp < &ocp->hashp[ocp->hashn]);
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d1fa      	bne.n	8003d84 <oslib_test_006_001_execute+0x44>
 8003d8e:	4bbb      	ldr	r3, [pc, #748]	; (800407c <oslib_test_006_001_execute+0x33c>)
 8003d90:	49be      	ldr	r1, [pc, #760]	; (800408c <oslib_test_006_001_execute+0x34c>)
 8003d92:	f103 0cf0 	add.w	ip, r3, #240	; 0xf0
 8003d96:	2501      	movs	r5, #1
    objp->obj_group = 0U;
 8003d98:	2200      	movs	r2, #0
 8003d9a:	e000      	b.n	8003d9e <oslib_test_006_001_execute+0x5e>
  } while (objn > (ucnt_t)0);
 8003d9c:	4603      	mov	r3, r0
    objvp = (void *)((uint8_t *)objvp + objsz);
 8003d9e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8003da2:	f103 0418 	add.w	r4, r3, #24
  } while (objn > (ucnt_t)0);
 8003da6:	4560      	cmp	r0, ip
    LRU_INSERT_HEAD(ocp, objp);
 8003da8:	e9c3 1702 	strd	r1, r7, [r3, #8]
 8003dac:	e9c3 4406 	strd	r4, r4, [r3, #24]
 8003db0:	621d      	str	r5, [r3, #32]
 8003db2:	60cb      	str	r3, [r1, #12]
    objp->obj_key   = 0U;
 8003db4:	e9c3 2204 	strd	r2, r2, [r3, #16]
    objp->dptr      = NULL;
 8003db8:	e9c3 5209 	strd	r5, r2, [r3, #36]	; 0x24
 8003dbc:	4619      	mov	r1, r3
  } while (objn > (ucnt_t)0);
 8003dbe:	d1ed      	bne.n	8003d9c <oslib_test_006_001_execute+0x5c>
 8003dc0:	4bb3      	ldr	r3, [pc, #716]	; (8004090 <oslib_test_006_001_execute+0x350>)
                      obj_write);
  }
  test_end_step(1);

  /* [6.1.2] Getting and releasing objects without initialization.*/
  test_set_step(2);
 8003dc2:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 80040b0 <oslib_test_006_001_execute+0x370>
 8003dc6:	61f3      	str	r3, [r6, #28]
    uint32_t i;

    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
      oc_object_t * objp = chCacheGetObject(&cache1, 0U, i);

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003dc8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800409c <oslib_test_006_001_execute+0x35c>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "should not be in sync");
 8003dcc:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 80040b4 <oslib_test_006_001_execute+0x374>
 */
static inline void chCacheReleaseObject(objects_cache_t *ocp,
                                        oc_object_t *objp) {

  chSysLock();
  chCacheReleaseObjectI(ocp, objp);
 8003dd0:	f8df a2a4 	ldr.w	sl, [pc, #676]	; 8004078 <oslib_test_006_001_execute+0x338>
  test_set_step(2);
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	f8cb 3000 	str.w	r3, [fp]
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 8003dda:	2700      	movs	r7, #0
      oc_object_t * objp = chCacheGetObject(&cache1, 0U, i);
 8003ddc:	4638      	mov	r0, r7
 8003dde:	f7ff fa97 	bl	8003310 <chCacheGetObject.constprop.0>
 8003de2:	4604      	mov	r4, r0
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003de4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003de6:	4649      	mov	r1, r9
 8003de8:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8003dec:	f7fc fec0 	bl	8000b70 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "should not be in sync");
 8003df0:	4641      	mov	r1, r8
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003df2:	2800      	cmp	r0, #0
 8003df4:	f040 813d 	bne.w	8004072 <oslib_test_006_001_execute+0x332>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "should not be in sync");
 8003df8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003dfa:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8003dfe:	f7fc feb7 	bl	8000b70 <_test_assert>
 8003e02:	2320      	movs	r3, #32
 8003e04:	4605      	mov	r5, r0
 8003e06:	2800      	cmp	r0, #0
 8003e08:	f040 8133 	bne.w	8004072 <oslib_test_006_001_execute+0x332>
 8003e0c:	f383 8811 	msr	BASEPRI, r3
 8003e10:	4621      	mov	r1, r4
 8003e12:	4650      	mov	r0, sl
 8003e14:	f7fd fbf4 	bl	8001600 <chCacheReleaseObjectI>
  chSchRescheduleS();
 8003e18:	f7ff fdfa 	bl	8003a10 <chSchRescheduleS>
 8003e1c:	f385 8811 	msr	BASEPRI, r5
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 8003e20:	3701      	adds	r7, #1
 8003e22:	2f08      	cmp	r7, #8
 8003e24:	d1da      	bne.n	8003ddc <oslib_test_006_001_execute+0x9c>

      chCacheReleaseObject(&cache1, objp);
    }

    test_assert_sequence("", "unexpected tokens");
 8003e26:	499b      	ldr	r1, [pc, #620]	; (8004094 <oslib_test_006_001_execute+0x354>)
 8003e28:	489b      	ldr	r0, [pc, #620]	; (8004098 <oslib_test_006_001_execute+0x358>)
 8003e2a:	f7fd f821 	bl	8000e70 <_test_assert_sequence>
 8003e2e:	4605      	mov	r5, r0
 8003e30:	2800      	cmp	r0, #0
 8003e32:	f040 811e 	bne.w	8004072 <oslib_test_006_001_execute+0x332>
  }
  test_end_step(2);

  /* [6.1.3] Getting and releasing objects with synchronous
     initialization.*/
  test_set_step(3);
 8003e36:	2303      	movs	r3, #3
    bool error;

    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003e38:	4f98      	ldr	r7, [pc, #608]	; (800409c <oslib_test_006_001_execute+0x35c>)
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8003e3a:	f8df 9270 	ldr.w	r9, [pc, #624]	; 80040ac <oslib_test_006_001_execute+0x36c>
  /* Marking it as OC_FLAG_NOTSYNC because the read operation is going
     to corrupt it in case of failure. It is responsibility of the read
     implementation to clear it if the operation succeeds.*/
  objp->obj_flags |= OC_FLAG_NOTSYNC;

  return ocp->readf(ocp, objp, async);
 8003e3e:	f8df 8238 	ldr.w	r8, [pc, #568]	; 8004078 <oslib_test_006_001_execute+0x338>
  test_set_step(3);
 8003e42:	f8cb 3000 	str.w	r3, [fp]
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 8003e46:	4628      	mov	r0, r5
 8003e48:	f7ff fa62 	bl	8003310 <chCacheGetObject.constprop.0>
 8003e4c:	4604      	mov	r4, r0
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003e4e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003e50:	4639      	mov	r1, r7
 8003e52:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8003e56:	f7fc fe8b 	bl	8000b70 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8003e5a:	4649      	mov	r1, r9
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003e5c:	2800      	cmp	r0, #0
 8003e5e:	f040 8108 	bne.w	8004072 <oslib_test_006_001_execute+0x332>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8003e62:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003e64:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8003e68:	f7fc fe82 	bl	8000b70 <_test_assert>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	4621      	mov	r1, r4
 8003e70:	4640      	mov	r0, r8
 8003e72:	2a00      	cmp	r2, #0
 8003e74:	f040 80fd 	bne.w	8004072 <oslib_test_006_001_execute+0x332>
  objp->obj_flags |= OC_FLAG_NOTSYNC;
 8003e78:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return ocp->readf(ocp, objp, async);
 8003e7a:	f8d6 a03c 	ldr.w	sl, [r6, #60]	; 0x3c
  objp->obj_flags |= OC_FLAG_NOTSYNC;
 8003e7e:	f043 0308 	orr.w	r3, r3, #8
 8003e82:	6263      	str	r3, [r4, #36]	; 0x24
  return ocp->readf(ocp, objp, async);
 8003e84:	47d0      	blx	sl

      error = chCacheReadObject(&cache1, objp, false);

      test_assert(error == false, "returned error");
 8003e86:	f080 0001 	eor.w	r0, r0, #1
 8003e8a:	4985      	ldr	r1, [pc, #532]	; (80040a0 <oslib_test_006_001_execute+0x360>)
 8003e8c:	b2c0      	uxtb	r0, r0
 8003e8e:	f7fc fe6f 	bl	8000b70 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003e92:	4639      	mov	r1, r7
      test_assert(error == false, "returned error");
 8003e94:	2800      	cmp	r0, #0
 8003e96:	f040 80ec 	bne.w	8004072 <oslib_test_006_001_execute+0x332>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003e9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003e9c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8003ea0:	f7fc fe66 	bl	8000b70 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 8003ea4:	497f      	ldr	r1, [pc, #508]	; (80040a4 <oslib_test_006_001_execute+0x364>)
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003ea6:	2800      	cmp	r0, #0
 8003ea8:	f040 80e3 	bne.w	8004072 <oslib_test_006_001_execute+0x332>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 8003eac:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003eae:	f080 0008 	eor.w	r0, r0, #8
 8003eb2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8003eb6:	f7fc fe5b 	bl	8000b70 <_test_assert>
 8003eba:	2320      	movs	r3, #32
 8003ebc:	4682      	mov	sl, r0
 8003ebe:	2800      	cmp	r0, #0
 8003ec0:	f040 80d7 	bne.w	8004072 <oslib_test_006_001_execute+0x332>
 8003ec4:	f383 8811 	msr	BASEPRI, r3
  chCacheReleaseObjectI(ocp, objp);
 8003ec8:	4621      	mov	r1, r4
 8003eca:	4640      	mov	r0, r8
 8003ecc:	f7fd fb98 	bl	8001600 <chCacheReleaseObjectI>
  chSchRescheduleS();
 8003ed0:	f7ff fd9e 	bl	8003a10 <chSchRescheduleS>
 8003ed4:	f38a 8811 	msr	BASEPRI, sl
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 8003ed8:	3501      	adds	r5, #1
 8003eda:	2d08      	cmp	r5, #8
 8003edc:	d1b3      	bne.n	8003e46 <oslib_test_006_001_execute+0x106>

      chCacheReleaseObject(&cache1, objp);
    }

    test_assert_sequence("abcdefgh", "unexpected tokens");
 8003ede:	496d      	ldr	r1, [pc, #436]	; (8004094 <oslib_test_006_001_execute+0x354>)
 8003ee0:	4871      	ldr	r0, [pc, #452]	; (80040a8 <oslib_test_006_001_execute+0x368>)
 8003ee2:	f7fc ffc5 	bl	8000e70 <_test_assert_sequence>
 8003ee6:	4605      	mov	r5, r0
 8003ee8:	2800      	cmp	r0, #0
 8003eea:	f040 80c2 	bne.w	8004072 <oslib_test_006_001_execute+0x332>
  }
  test_end_step(3);

  /* [6.1.4] Getting and releasing objects with asynchronous
     initialization.*/
  test_set_step(4);
 8003eee:	2304      	movs	r3, #4
    bool error;

    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003ef0:	4f6a      	ldr	r7, [pc, #424]	; (800409c <oslib_test_006_001_execute+0x35c>)
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8003ef2:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 80040ac <oslib_test_006_001_execute+0x36c>
 8003ef6:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8004078 <oslib_test_006_001_execute+0x338>
  test_set_step(4);
 8003efa:	f8cb 3000 	str.w	r3, [fp]
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 8003efe:	4628      	mov	r0, r5
 8003f00:	f7ff fa06 	bl	8003310 <chCacheGetObject.constprop.0>
 8003f04:	4604      	mov	r4, r0
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003f06:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003f08:	4639      	mov	r1, r7
 8003f0a:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8003f0e:	f7fc fe2f 	bl	8000b70 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8003f12:	4649      	mov	r1, r9
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003f14:	2800      	cmp	r0, #0
 8003f16:	f040 80ac 	bne.w	8004072 <oslib_test_006_001_execute+0x332>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8003f1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003f1c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8003f20:	f7fc fe26 	bl	8000b70 <_test_assert>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2201      	movs	r2, #1
 8003f28:	4621      	mov	r1, r4
 8003f2a:	4640      	mov	r0, r8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f040 80a0 	bne.w	8004072 <oslib_test_006_001_execute+0x332>
  objp->obj_flags |= OC_FLAG_NOTSYNC;
 8003f32:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return ocp->readf(ocp, objp, async);
 8003f34:	f8d6 a03c 	ldr.w	sl, [r6, #60]	; 0x3c
  objp->obj_flags |= OC_FLAG_NOTSYNC;
 8003f38:	f043 0308 	orr.w	r3, r3, #8
 8003f3c:	6263      	str	r3, [r4, #36]	; 0x24
  return ocp->readf(ocp, objp, async);
 8003f3e:	47d0      	blx	sl

      error = chCacheReadObject(&cache1, objp, true);

      test_assert(error == false, "returned error");
 8003f40:	f080 0001 	eor.w	r0, r0, #1
 8003f44:	4956      	ldr	r1, [pc, #344]	; (80040a0 <oslib_test_006_001_execute+0x360>)
 8003f46:	b2c0      	uxtb	r0, r0
 8003f48:	f7fc fe12 	bl	8000b70 <_test_assert>
 8003f4c:	4603      	mov	r3, r0

      objp = chCacheGetObject(&cache1, 0U, i);
 8003f4e:	4628      	mov	r0, r5
      test_assert(error == false, "returned error");
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f040 808e 	bne.w	8004072 <oslib_test_006_001_execute+0x332>
      objp = chCacheGetObject(&cache1, 0U, i);
 8003f56:	f7ff f9db 	bl	8003310 <chCacheGetObject.constprop.0>
 8003f5a:	4604      	mov	r4, r0

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003f5c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003f5e:	4639      	mov	r1, r7
 8003f60:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8003f64:	f7fc fe04 	bl	8000b70 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 8003f68:	494e      	ldr	r1, [pc, #312]	; (80040a4 <oslib_test_006_001_execute+0x364>)
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003f6a:	2800      	cmp	r0, #0
 8003f6c:	f040 8081 	bne.w	8004072 <oslib_test_006_001_execute+0x332>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 8003f70:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003f72:	f080 0008 	eor.w	r0, r0, #8
 8003f76:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8003f7a:	f7fc fdf9 	bl	8000b70 <_test_assert>
 8003f7e:	2320      	movs	r3, #32
 8003f80:	4682      	mov	sl, r0
 8003f82:	2800      	cmp	r0, #0
 8003f84:	d175      	bne.n	8004072 <oslib_test_006_001_execute+0x332>
 8003f86:	f383 8811 	msr	BASEPRI, r3
  chCacheReleaseObjectI(ocp, objp);
 8003f8a:	4621      	mov	r1, r4
 8003f8c:	4640      	mov	r0, r8
 8003f8e:	f7fd fb37 	bl	8001600 <chCacheReleaseObjectI>
  chSchRescheduleS();
 8003f92:	f7ff fd3d 	bl	8003a10 <chSchRescheduleS>
 8003f96:	f38a 8811 	msr	BASEPRI, sl
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 8003f9a:	3501      	adds	r5, #1
 8003f9c:	2d08      	cmp	r5, #8
 8003f9e:	d1ae      	bne.n	8003efe <oslib_test_006_001_execute+0x1be>

      chCacheReleaseObject(&cache1, objp);
    }

    test_assert_sequence("abcdefgh", "unexpected tokens");
 8003fa0:	493c      	ldr	r1, [pc, #240]	; (8004094 <oslib_test_006_001_execute+0x354>)
 8003fa2:	4841      	ldr	r0, [pc, #260]	; (80040a8 <oslib_test_006_001_execute+0x368>)
 8003fa4:	f7fc ff64 	bl	8000e70 <_test_assert_sequence>
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	d162      	bne.n	8004072 <oslib_test_006_001_execute+0x332>
  }
  test_end_step(4);

  /* [6.1.5] Checking cached objects.*/
  test_set_step(5);
 8003fac:	2305      	movs	r3, #5
    uint32_t i;

    for (i = NUM_OBJECTS; i < (NUM_OBJECTS * 2); i++) {
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003fae:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 800409c <oslib_test_006_001_execute+0x35c>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 8003fb2:	4f3c      	ldr	r7, [pc, #240]	; (80040a4 <oslib_test_006_001_execute+0x364>)
  chCacheReleaseObjectI(ocp, objp);
 8003fb4:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8004078 <oslib_test_006_001_execute+0x338>
  test_set_step(5);
 8003fb8:	f8cb 3000 	str.w	r3, [fp]
    for (i = NUM_OBJECTS; i < (NUM_OBJECTS * 2); i++) {
 8003fbc:	2604      	movs	r6, #4
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 8003fbe:	4630      	mov	r0, r6
 8003fc0:	f7ff f9a6 	bl	8003310 <chCacheGetObject.constprop.0>
 8003fc4:	4604      	mov	r4, r0
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003fc6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003fc8:	4641      	mov	r1, r8
 8003fca:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8003fce:	f7fc fdcf 	bl	8000b70 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 8003fd2:	4639      	mov	r1, r7
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8003fd4:	2800      	cmp	r0, #0
 8003fd6:	d14c      	bne.n	8004072 <oslib_test_006_001_execute+0x332>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 8003fd8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003fda:	f080 0008 	eor.w	r0, r0, #8
 8003fde:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8003fe2:	f7fc fdc5 	bl	8000b70 <_test_assert>
 8003fe6:	2320      	movs	r3, #32
 8003fe8:	4605      	mov	r5, r0
 8003fea:	2800      	cmp	r0, #0
 8003fec:	d141      	bne.n	8004072 <oslib_test_006_001_execute+0x332>
 8003fee:	f383 8811 	msr	BASEPRI, r3
 8003ff2:	4621      	mov	r1, r4
 8003ff4:	4648      	mov	r0, r9
 8003ff6:	f7fd fb03 	bl	8001600 <chCacheReleaseObjectI>
  chSchRescheduleS();
 8003ffa:	f7ff fd09 	bl	8003a10 <chSchRescheduleS>
 8003ffe:	f385 8811 	msr	BASEPRI, r5
    for (i = NUM_OBJECTS; i < (NUM_OBJECTS * 2); i++) {
 8004002:	3601      	adds	r6, #1
 8004004:	2e08      	cmp	r6, #8
 8004006:	d1da      	bne.n	8003fbe <oslib_test_006_001_execute+0x27e>

      chCacheReleaseObject(&cache1, objp);
    }

    test_assert_sequence("", "unexpected tokens");
 8004008:	4922      	ldr	r1, [pc, #136]	; (8004094 <oslib_test_006_001_execute+0x354>)
 800400a:	4823      	ldr	r0, [pc, #140]	; (8004098 <oslib_test_006_001_execute+0x358>)
 800400c:	f7fc ff30 	bl	8000e70 <_test_assert_sequence>
 8004010:	4604      	mov	r4, r0
 8004012:	bb70      	cbnz	r0, 8004072 <oslib_test_006_001_execute+0x332>
  }
  test_end_step(5);

  /* [6.1.6] Checking non-cached objects.*/
  test_set_step(6);
 8004014:	2306      	movs	r3, #6
    uint32_t i;

    for (i = 0; i < NUM_OBJECTS; i++) {
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8004016:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800409c <oslib_test_006_001_execute+0x35c>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 800401a:	4f24      	ldr	r7, [pc, #144]	; (80040ac <oslib_test_006_001_execute+0x36c>)
  chCacheReleaseObjectI(ocp, objp);
 800401c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8004078 <oslib_test_006_001_execute+0x338>
  test_set_step(6);
 8004020:	f8cb 3000 	str.w	r3, [fp]
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 8004024:	4620      	mov	r0, r4
 8004026:	f7ff f973 	bl	8003310 <chCacheGetObject.constprop.0>
 800402a:	4605      	mov	r5, r0
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800402c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800402e:	4641      	mov	r1, r8
 8004030:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8004034:	f7fc fd9c 	bl	8000b70 <_test_assert>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8004038:	4639      	mov	r1, r7
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800403a:	b9d0      	cbnz	r0, 8004072 <oslib_test_006_001_execute+0x332>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 800403c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800403e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8004042:	f7fc fd95 	bl	8000b70 <_test_assert>
 8004046:	2320      	movs	r3, #32
 8004048:	4606      	mov	r6, r0
 800404a:	b990      	cbnz	r0, 8004072 <oslib_test_006_001_execute+0x332>
 800404c:	f383 8811 	msr	BASEPRI, r3
 8004050:	4629      	mov	r1, r5
 8004052:	4648      	mov	r0, r9
 8004054:	f7fd fad4 	bl	8001600 <chCacheReleaseObjectI>
  chSchRescheduleS();
 8004058:	f7ff fcda 	bl	8003a10 <chSchRescheduleS>
 800405c:	f386 8811 	msr	BASEPRI, r6
    for (i = 0; i < NUM_OBJECTS; i++) {
 8004060:	3401      	adds	r4, #1
 8004062:	2c04      	cmp	r4, #4
 8004064:	d1de      	bne.n	8004024 <oslib_test_006_001_execute+0x2e4>
    }

    test_assert_sequence("", "unexpected tokens");
  }
  test_end_step(6);
}
 8004066:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_assert_sequence("", "unexpected tokens");
 800406a:	490a      	ldr	r1, [pc, #40]	; (8004094 <oslib_test_006_001_execute+0x354>)
 800406c:	480a      	ldr	r0, [pc, #40]	; (8004098 <oslib_test_006_001_execute+0x358>)
 800406e:	f7fc beff 	b.w	8000e70 <_test_assert_sequence>
}
 8004072:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004076:	bf00      	nop
 8004078:	2000096c 	.word	0x2000096c
 800407c:	20000c70 	.word	0x20000c70
 8004080:	20000b70 	.word	0x20000b70
 8004084:	08000cf1 	.word	0x08000cf1
 8004088:	080040c1 	.word	0x080040c1
 800408c:	20000980 	.word	0x20000980
 8004090:	20000d24 	.word	0x20000d24
 8004094:	08009e4c 	.word	0x08009e4c
 8004098:	08009aec 	.word	0x08009aec
 800409c:	08009e28 	.word	0x08009e28
 80040a0:	08009e60 	.word	0x08009e60
 80040a4:	08009e70 	.word	0x08009e70
 80040a8:	08009e7c 	.word	0x08009e7c
 80040ac:	08009e74 	.word	0x08009e74
 80040b0:	2000149c 	.word	0x2000149c
 80040b4:	08009e34 	.word	0x08009e34
	...

080040c0 <obj_read>:
  test_emit_token('a' + objp->obj_key);
 80040c0:	694b      	ldr	r3, [r1, #20]
                     bool async) {
 80040c2:	b570      	push	{r4, r5, r6, lr}
  test_emit_token('a' + objp->obj_key);
 80040c4:	3361      	adds	r3, #97	; 0x61
                     bool async) {
 80040c6:	460c      	mov	r4, r1
 80040c8:	4606      	mov	r6, r0
  test_emit_token('a' + objp->obj_key);
 80040ca:	b2d8      	uxtb	r0, r3
                     bool async) {
 80040cc:	4615      	mov	r5, r2
  test_emit_token('a' + objp->obj_key);
 80040ce:	f7fc fdf7 	bl	8000cc0 <test_emit_token>
  objp->obj_flags &= ~OC_FLAG_NOTSYNC;
 80040d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040d4:	f023 0308 	bic.w	r3, r3, #8
 80040d8:	6263      	str	r3, [r4, #36]	; 0x24
  if (async) {
 80040da:	b90d      	cbnz	r5, 80040e0 <obj_read+0x20>
}
 80040dc:	2000      	movs	r0, #0
 80040de:	bd70      	pop	{r4, r5, r6, pc}
 80040e0:	2320      	movs	r3, #32
 80040e2:	f383 8811 	msr	BASEPRI, r3
  chCacheReleaseObjectI(ocp, objp);
 80040e6:	4621      	mov	r1, r4
 80040e8:	4630      	mov	r0, r6
 80040ea:	f7fd fa89 	bl	8001600 <chCacheReleaseObjectI>
  chSchRescheduleS();
 80040ee:	f7ff fc8f 	bl	8003a10 <chSchRescheduleS>
 80040f2:	2300      	movs	r3, #0
 80040f4:	f383 8811 	msr	BASEPRI, r3
 80040f8:	2000      	movs	r0, #0
 80040fa:	bd70      	pop	{r4, r5, r6, pc}
 80040fc:	0000      	movs	r0, r0
	...

08004100 <evt_thread7>:
static THD_FUNCTION(evt_thread7, p) {
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	2520      	movs	r5, #32
 8004104:	f385 8811 	msr	BASEPRI, r5
  chEvtBroadcastFlagsI(esp, flags);
 8004108:	480b      	ldr	r0, [pc, #44]	; (8004138 <evt_thread7+0x38>)
 800410a:	2100      	movs	r1, #0
 800410c:	f7fd fa28 	bl	8001560 <chEvtBroadcastFlagsI>
 8004110:	2400      	movs	r4, #0
  chSchRescheduleS();
 8004112:	f7ff fc7d 	bl	8003a10 <chSchRescheduleS>
 8004116:	f384 8811 	msr	BASEPRI, r4
  chThdSleepMilliseconds(50);
 800411a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800411e:	f7fe fc97 	bl	8002a50 <chThdSleep>
 8004122:	f385 8811 	msr	BASEPRI, r5
  chEvtBroadcastFlagsI(esp, flags);
 8004126:	4805      	ldr	r0, [pc, #20]	; (800413c <evt_thread7+0x3c>)
 8004128:	4621      	mov	r1, r4
 800412a:	f7fd fa19 	bl	8001560 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 800412e:	f7ff fc6f 	bl	8003a10 <chSchRescheduleS>
 8004132:	f384 8811 	msr	BASEPRI, r4
}
 8004136:	bd38      	pop	{r3, r4, r5, pc}
 8004138:	20000808 	.word	0x20000808
 800413c:	2000080c 	.word	0x2000080c

08004140 <evt_thread3>:
static THD_FUNCTION(evt_thread3, p) {
 8004140:	b510      	push	{r4, lr}
 8004142:	4604      	mov	r4, r0
  chThdSleepMilliseconds(50);
 8004144:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004148:	f7fe fc82 	bl	8002a50 <chThdSleep>
 800414c:	2320      	movs	r3, #32
 800414e:	f383 8811 	msr	BASEPRI, r3
  chEvtSignalI(tp, events);
 8004152:	2101      	movs	r1, #1
 8004154:	4620      	mov	r0, r4
 8004156:	f7fd f9eb 	bl	8001530 <chEvtSignalI>
  chSchRescheduleS();
 800415a:	f7ff fc59 	bl	8003a10 <chSchRescheduleS>
 800415e:	2300      	movs	r3, #0
 8004160:	f383 8811 	msr	BASEPRI, r3
}
 8004164:	bd10      	pop	{r4, pc}
 8004166:	bf00      	nop
	...

08004170 <thread4B>:
static THD_FUNCTION(thread4B, p) {
 8004170:	b510      	push	{r4, lr}
  chThdSleepMilliseconds(150);
 8004172:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004176:	f7fe fc6b 	bl	8002a50 <chThdSleep>
 800417a:	2320      	movs	r3, #32
 800417c:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(&m2);   /* For coverage of the chMtxLockS() function variant.*/
 8004180:	4c06      	ldr	r4, [pc, #24]	; (800419c <thread4B+0x2c>)
 8004182:	4620      	mov	r0, r4
 8004184:	f7ff f83c 	bl	8003200 <chMtxLockS>
  chMtxUnlockS(&m2); /* For coverage of the chMtxUnlockS() function variant.*/
 8004188:	4620      	mov	r0, r4
 800418a:	f7fd fa01 	bl	8001590 <chMtxUnlockS>
  chSchRescheduleS();
 800418e:	f7ff fc3f 	bl	8003a10 <chSchRescheduleS>
 8004192:	2300      	movs	r3, #0
 8004194:	f383 8811 	msr	BASEPRI, r3
}
 8004198:	bd10      	pop	{r4, pc}
 800419a:	bf00      	nop
 800419c:	2000083c 	.word	0x2000083c

080041a0 <rt_test_006_006_execute>:

static void rt_test_006_006_teardown(void) {
  test_wait_threads();
}

static void rt_test_006_006_execute(void) {
 80041a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  binary_semaphore_t bsem;
  msg_t msg;

  /* [6.6.1] Creating a binary semaphore in "taken" state, the state is
     checked.*/
  test_set_step(1);
 80041a4:	4e61      	ldr	r6, [pc, #388]	; (800432c <rt_test_006_006_execute+0x18c>)
static void rt_test_006_006_execute(void) {
 80041a6:	b084      	sub	sp, #16
  test_set_step(1);
 80041a8:	2301      	movs	r3, #1
  tqp->next = (thread_t *)tqp;
 80041aa:	ad01      	add	r5, sp, #4
 80041ac:	f04f 0800 	mov.w	r8, #0
  tqp->prev = (thread_t *)tqp;
 80041b0:	e9cd 5501 	strd	r5, r5, [sp, #4]
 80041b4:	6033      	str	r3, [r6, #0]
 80041b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80041ba:	2720      	movs	r7, #32
 80041bc:	f387 8811 	msr	BASEPRI, r7
 */
static inline bool chBSemGetStateI(const binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 80041c0:	9803      	ldr	r0, [sp, #12]
  {
    chBSemObjectInit(&bsem, true);
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 80041c2:	495b      	ldr	r1, [pc, #364]	; (8004330 <rt_test_006_006_execute+0x190>)
 80041c4:	4540      	cmp	r0, r8
 80041c6:	bfcc      	ite	gt
 80041c8:	2000      	movgt	r0, #0
 80041ca:	2001      	movle	r0, #1
 80041cc:	f7fc fcd0 	bl	8000b70 <_test_assert>
 80041d0:	b120      	cbz	r0, 80041dc <rt_test_006_006_execute+0x3c>
 80041d2:	f388 8811 	msr	BASEPRI, r8
    chBSemSignal(&bsem);
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
  }
  test_end_step(6);
}
 80041d6:	b004      	add	sp, #16
 80041d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041dc:	4604      	mov	r4, r0
 80041de:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 80041e2:	2302      	movs	r3, #2
 80041e4:	4601      	mov	r1, r0
 80041e6:	4628      	mov	r0, r5
 80041e8:	6033      	str	r3, [r6, #0]
 80041ea:	f7ff fc21 	bl	8003a30 <chSemResetWithMessage.constprop.0>
 80041ee:	f387 8811 	msr	BASEPRI, r7
 80041f2:	9803      	ldr	r0, [sp, #12]
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 80041f4:	494e      	ldr	r1, [pc, #312]	; (8004330 <rt_test_006_006_execute+0x190>)
 80041f6:	2800      	cmp	r0, #0
 80041f8:	bfcc      	ite	gt
 80041fa:	2000      	movgt	r0, #0
 80041fc:	2001      	movle	r0, #1
 80041fe:	f7fc fcb7 	bl	8000b70 <_test_assert>
 8004202:	4680      	mov	r8, r0
 8004204:	2800      	cmp	r0, #0
 8004206:	d172      	bne.n	80042ee <rt_test_006_006_execute+0x14e>
 8004208:	f380 8811 	msr	BASEPRI, r0
  return ch.rlist.current;
 800420c:	4b49      	ldr	r3, [pc, #292]	; (8004334 <rt_test_006_006_execute+0x194>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 800420e:	4a4a      	ldr	r2, [pc, #296]	; (8004338 <rt_test_006_006_execute+0x198>)
  return chThdGetSelfX()->prio;
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	484a      	ldr	r0, [pc, #296]	; (800433c <rt_test_006_006_execute+0x19c>)
 8004214:	6899      	ldr	r1, [r3, #8]
  test_set_step(3);
 8004216:	2403      	movs	r4, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8004218:	462b      	mov	r3, r5
 800421a:	3901      	subs	r1, #1
  test_set_step(3);
 800421c:	6034      	str	r4, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 800421e:	f7fd ffe7 	bl	80021f0 <chThdCreateStatic.constprop.0>
 8004222:	4a47      	ldr	r2, [pc, #284]	; (8004340 <rt_test_006_006_execute+0x1a0>)
 8004224:	4601      	mov	r1, r0
  test_set_step(4);
 8004226:	2304      	movs	r3, #4
  return chSemWait(&bsp->sem);
 8004228:	4628      	mov	r0, r5
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 800422a:	6011      	str	r1, [r2, #0]
  test_set_step(4);
 800422c:	6033      	str	r3, [r6, #0]
 800422e:	f7ff f8ef 	bl	8003410 <chSemWait>
 8004232:	4604      	mov	r4, r0
 8004234:	f387 8811 	msr	BASEPRI, r7
  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 8004238:	9803      	ldr	r0, [sp, #12]
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 800423a:	493d      	ldr	r1, [pc, #244]	; (8004330 <rt_test_006_006_execute+0x190>)
 800423c:	2800      	cmp	r0, #0
 800423e:	bfcc      	ite	gt
 8004240:	2000      	movgt	r0, #0
 8004242:	2001      	movle	r0, #1
 8004244:	f7fc fc94 	bl	8000b70 <_test_assert>
 8004248:	2800      	cmp	r0, #0
 800424a:	d1c2      	bne.n	80041d2 <rt_test_006_006_execute+0x32>
 800424c:	f380 8811 	msr	BASEPRI, r0
    test_assert(msg == MSG_OK, "unexpected message");
 8004250:	fab4 f084 	clz	r0, r4
 8004254:	493b      	ldr	r1, [pc, #236]	; (8004344 <rt_test_006_006_execute+0x1a4>)
 8004256:	0940      	lsrs	r0, r0, #5
 8004258:	f7fc fc8a 	bl	8000b70 <_test_assert>
 800425c:	2800      	cmp	r0, #0
 800425e:	d1ba      	bne.n	80041d6 <rt_test_006_006_execute+0x36>
  test_set_step(5);
 8004260:	2305      	movs	r3, #5
 8004262:	6033      	str	r3, [r6, #0]
 8004264:	f387 8811 	msr	BASEPRI, r7
  if (bsp->sem.cnt < (cnt_t)1) {
 8004268:	9b03      	ldr	r3, [sp, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	dd44      	ble.n	80042f8 <rt_test_006_006_execute+0x158>
  chSchRescheduleS();
 800426e:	f7ff fbcf 	bl	8003a10 <chSchRescheduleS>
 8004272:	f04f 0800 	mov.w	r8, #0
 8004276:	f388 8811 	msr	BASEPRI, r8
 800427a:	2720      	movs	r7, #32
 800427c:	f387 8811 	msr	BASEPRI, r7
    test_assert_lock(chBSemGetStateI(&bsem) ==false, "still taken");
 8004280:	9803      	ldr	r0, [sp, #12]
 8004282:	4931      	ldr	r1, [pc, #196]	; (8004348 <rt_test_006_006_execute+0x1a8>)
 8004284:	4540      	cmp	r0, r8
 8004286:	bfd4      	ite	le
 8004288:	2000      	movle	r0, #0
 800428a:	2001      	movgt	r0, #1
 800428c:	f7fc fc70 	bl	8000b70 <_test_assert>
 8004290:	4604      	mov	r4, r0
 8004292:	2800      	cmp	r0, #0
 8004294:	d19d      	bne.n	80041d2 <rt_test_006_006_execute+0x32>
 8004296:	f380 8811 	msr	BASEPRI, r0
 800429a:	f387 8811 	msr	BASEPRI, r7
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 800429e:	9803      	ldr	r0, [sp, #12]
 80042a0:	492a      	ldr	r1, [pc, #168]	; (800434c <rt_test_006_006_execute+0x1ac>)
 80042a2:	f1a0 0001 	sub.w	r0, r0, #1
 80042a6:	fab0 f080 	clz	r0, r0
 80042aa:	0940      	lsrs	r0, r0, #5
 80042ac:	f7fc fc60 	bl	8000b70 <_test_assert>
 80042b0:	b9e8      	cbnz	r0, 80042ee <rt_test_006_006_execute+0x14e>
 80042b2:	f380 8811 	msr	BASEPRI, r0
  test_set_step(6);
 80042b6:	2306      	movs	r3, #6
 80042b8:	6033      	str	r3, [r6, #0]
 80042ba:	f387 8811 	msr	BASEPRI, r7
  if (bsp->sem.cnt < (cnt_t)1) {
 80042be:	9b03      	ldr	r3, [sp, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	dd2f      	ble.n	8004324 <rt_test_006_006_execute+0x184>
  chSchRescheduleS();
 80042c4:	f7ff fba4 	bl	8003a10 <chSchRescheduleS>
 80042c8:	2500      	movs	r5, #0
 80042ca:	f385 8811 	msr	BASEPRI, r5
 80042ce:	2620      	movs	r6, #32
 80042d0:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
 80042d4:	9803      	ldr	r0, [sp, #12]
 80042d6:	491e      	ldr	r1, [pc, #120]	; (8004350 <rt_test_006_006_execute+0x1b0>)
 80042d8:	42a8      	cmp	r0, r5
 80042da:	bfd4      	ite	le
 80042dc:	2000      	movle	r0, #0
 80042de:	2001      	movgt	r0, #1
 80042e0:	f7fc fc46 	bl	8000b70 <_test_assert>
 80042e4:	4604      	mov	r4, r0
 80042e6:	b158      	cbz	r0, 8004300 <rt_test_006_006_execute+0x160>
 80042e8:	f385 8811 	msr	BASEPRI, r5
 80042ec:	e773      	b.n	80041d6 <rt_test_006_006_execute+0x36>
 80042ee:	f384 8811 	msr	BASEPRI, r4
}
 80042f2:	b004      	add	sp, #16
 80042f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    chSemSignalI(&bsp->sem);
 80042f8:	4628      	mov	r0, r5
 80042fa:	f7fd f971 	bl	80015e0 <chSemSignalI>
 80042fe:	e7b6      	b.n	800426e <rt_test_006_006_execute+0xce>
 8004300:	f380 8811 	msr	BASEPRI, r0
 8004304:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 8004308:	9803      	ldr	r0, [sp, #12]
 800430a:	4910      	ldr	r1, [pc, #64]	; (800434c <rt_test_006_006_execute+0x1ac>)
 800430c:	f1a0 0001 	sub.w	r0, r0, #1
 8004310:	fab0 f080 	clz	r0, r0
 8004314:	0940      	lsrs	r0, r0, #5
 8004316:	f7fc fc2b 	bl	8000b70 <_test_assert>
 800431a:	2800      	cmp	r0, #0
 800431c:	d1e7      	bne.n	80042ee <rt_test_006_006_execute+0x14e>
 800431e:	f380 8811 	msr	BASEPRI, r0
  test_end_step(6);
 8004322:	e758      	b.n	80041d6 <rt_test_006_006_execute+0x36>
 8004324:	4628      	mov	r0, r5
 8004326:	f7fd f95b 	bl	80015e0 <chSemSignalI>
 800432a:	e7cb      	b.n	80042c4 <rt_test_006_006_execute+0x124>
 800432c:	2000149c 	.word	0x2000149c
 8004330:	08009e88 	.word	0x08009e88
 8004334:	200009b0 	.word	0x200009b0
 8004338:	08004391 	.word	0x08004391
 800433c:	20000d88 	.word	0x20000d88
 8004340:	200014b4 	.word	0x200014b4
 8004344:	08009e94 	.word	0x08009e94
 8004348:	08009ea8 	.word	0x08009ea8
 800434c:	08009eb4 	.word	0x08009eb4
 8004350:	08009e8c 	.word	0x08009e8c
	...

08004360 <thread2>:
static THD_FUNCTION(thread2, p) {
 8004360:	b508      	push	{r3, lr}
  chThdSleepMilliseconds(50);
 8004362:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004366:	f7fe fb73 	bl	8002a50 <chThdSleep>
 800436a:	2320      	movs	r3, #32
 800436c:	f383 8811 	msr	BASEPRI, r3
  chSemSignalI(&sem1); /* For coverage reasons */
 8004370:	4804      	ldr	r0, [pc, #16]	; (8004384 <thread2+0x24>)
 8004372:	f7fd f935 	bl	80015e0 <chSemSignalI>
  chSchRescheduleS();
 8004376:	f7ff fb4b 	bl	8003a10 <chSchRescheduleS>
 800437a:	2300      	movs	r3, #0
 800437c:	f383 8811 	msr	BASEPRI, r3
}
 8004380:	bd08      	pop	{r3, pc}
 8004382:	bf00      	nop
 8004384:	20000d70 	.word	0x20000d70
	...

08004390 <thread4>:
static THD_FUNCTION(thread4, p) {
 8004390:	b508      	push	{r3, lr}
 8004392:	2220      	movs	r2, #32
 8004394:	f382 8811 	msr	BASEPRI, r2
  if (bsp->sem.cnt < (cnt_t)1) {
 8004398:	6883      	ldr	r3, [r0, #8]
 800439a:	2b00      	cmp	r3, #0
 800439c:	dd05      	ble.n	80043aa <thread4+0x1a>
  chSchRescheduleS();
 800439e:	f7ff fb37 	bl	8003a10 <chSchRescheduleS>
 80043a2:	2300      	movs	r3, #0
 80043a4:	f383 8811 	msr	BASEPRI, r3
}
 80043a8:	bd08      	pop	{r3, pc}
    chSemSignalI(&bsp->sem);
 80043aa:	f7fd f919 	bl	80015e0 <chSemSignalI>
  chSchRescheduleS();
 80043ae:	f7ff fb2f 	bl	8003a10 <chSchRescheduleS>
 80043b2:	2300      	movs	r3, #0
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	bd08      	pop	{r3, pc}
 80043ba:	bf00      	nop
 80043bc:	0000      	movs	r0, r0
	...

080043c0 <thread1.lto_priv.0>:
static THD_FUNCTION(thread1, p) {
 80043c0:	b510      	push	{r4, lr}
 80043c2:	2320      	movs	r3, #32
 80043c4:	4604      	mov	r4, r0
 80043c6:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 80043ca:	4b09      	ldr	r3, [pc, #36]	; (80043f0 <thread1.lto_priv.0+0x30>)
 80043cc:	6818      	ldr	r0, [r3, #0]
 80043ce:	b120      	cbz	r0, 80043da <thread1.lto_priv.0+0x1a>
    *trp = NULL;
 80043d0:	2200      	movs	r2, #0
    tp->u.rdymsg = msg;
 80043d2:	6242      	str	r2, [r0, #36]	; 0x24
    *trp = NULL;
 80043d4:	601a      	str	r2, [r3, #0]
    (void) chSchReadyI(tp);
 80043d6:	f7fc ffe3 	bl	80013a0 <chSchReadyI>
  chSchRescheduleS();
 80043da:	f7ff fb19 	bl	8003a10 <chSchRescheduleS>
 80043de:	2300      	movs	r3, #0
 80043e0:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 80043e4:	7820      	ldrb	r0, [r4, #0]
}
 80043e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_emit_token(*(char *)p);
 80043ea:	f7fc bc69 	b.w	8000cc0 <test_emit_token>
 80043ee:	bf00      	nop
 80043f0:	200014c8 	.word	0x200014c8
	...

08004400 <chGuardedPoolLoadArray>:
void chGuardedPoolLoadArray(guarded_memory_pool_t *gmp, void *p, size_t n) {
 8004400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004404:	4605      	mov	r5, r0
 8004406:	460c      	mov	r4, r1
 8004408:	4616      	mov	r6, r2
 800440a:	f04f 0820 	mov.w	r8, #32
 800440e:	2700      	movs	r7, #0
 8004410:	f388 8811 	msr	BASEPRI, r8
  php->next = mp->next;
 8004414:	68eb      	ldr	r3, [r5, #12]
 8004416:	6023      	str	r3, [r4, #0]
 * @iclass
 */
static inline void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
  chSemSignalI(&gmp->sem);
 8004418:	4628      	mov	r0, r5
  mp->next = php;
 800441a:	60ec      	str	r4, [r5, #12]
 800441c:	f7fd f8e0 	bl	80015e0 <chSemSignalI>
 */
void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {

  chSysLock();
  chGuardedPoolFreeI(gmp, objp);
  chSchRescheduleS();
 8004420:	f7ff faf6 	bl	8003a10 <chSchRescheduleS>
 8004424:	f387 8811 	msr	BASEPRI, r7
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8004428:	692b      	ldr	r3, [r5, #16]
  while (n != 0U) {
 800442a:	3e01      	subs	r6, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 800442c:	441c      	add	r4, r3
  while (n != 0U) {
 800442e:	d1ef      	bne.n	8004410 <chGuardedPoolLoadArray+0x10>
}
 8004430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004440 <oslib_test_007_002_execute>:
static void oslib_test_007_002_execute(void) {
 8004440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    chGuardedPoolLoadArray(&gmp1, objects, MEMORY_POOL_SIZE);
 8004444:	4832      	ldr	r0, [pc, #200]	; (8004510 <oslib_test_007_002_execute+0xd0>)
  test_set_step(1);
 8004446:	4f33      	ldr	r7, [pc, #204]	; (8004514 <oslib_test_007_002_execute+0xd4>)
    chGuardedPoolLoadArray(&gmp1, objects, MEMORY_POOL_SIZE);
 8004448:	4933      	ldr	r1, [pc, #204]	; (8004518 <oslib_test_007_002_execute+0xd8>)
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800444a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8004520 <oslib_test_007_002_execute+0xe0>
  test_set_step(1);
 800444e:	2301      	movs	r3, #1
    chGuardedPoolLoadArray(&gmp1, objects, MEMORY_POOL_SIZE);
 8004450:	2204      	movs	r2, #4
 8004452:	4606      	mov	r6, r0
  test_set_step(1);
 8004454:	603b      	str	r3, [r7, #0]
    chGuardedPoolLoadArray(&gmp1, objects, MEMORY_POOL_SIZE);
 8004456:	f7ff ffd3 	bl	8004400 <chGuardedPoolLoadArray>
  test_set_step(2);
 800445a:	2302      	movs	r3, #2
 800445c:	603b      	str	r3, [r7, #0]
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800445e:	4635      	mov	r5, r6
  test_set_step(2);
 8004460:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8004462:	2100      	movs	r1, #0
 8004464:	4628      	mov	r0, r5
 8004466:	f7fe f913 	bl	8002690 <chGuardedPoolAllocTimeout>
 800446a:	3800      	subs	r0, #0
 800446c:	bf18      	it	ne
 800446e:	2001      	movne	r0, #1
 8004470:	4641      	mov	r1, r8
 8004472:	f7fc fb7d 	bl	8000b70 <_test_assert>
 8004476:	2800      	cmp	r0, #0
 8004478:	d148      	bne.n	800450c <oslib_test_007_002_execute+0xcc>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800447a:	3c01      	subs	r4, #1
 800447c:	d1f1      	bne.n	8004462 <oslib_test_007_002_execute+0x22>
  test_set_step(3);
 800447e:	2303      	movs	r3, #3
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8004480:	4621      	mov	r1, r4
 8004482:	4823      	ldr	r0, [pc, #140]	; (8004510 <oslib_test_007_002_execute+0xd0>)
  test_set_step(3);
 8004484:	603b      	str	r3, [r7, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8004486:	f7fe f903 	bl	8002690 <chGuardedPoolAllocTimeout>
 800448a:	fab0 f080 	clz	r0, r0
 800448e:	4923      	ldr	r1, [pc, #140]	; (800451c <oslib_test_007_002_execute+0xdc>)
 8004490:	0940      	lsrs	r0, r0, #5
 8004492:	f7fc fb6d 	bl	8000b70 <_test_assert>
 8004496:	2800      	cmp	r0, #0
 8004498:	d138      	bne.n	800450c <oslib_test_007_002_execute+0xcc>
  test_set_step(4);
 800449a:	4d1f      	ldr	r5, [pc, #124]	; (8004518 <oslib_test_007_002_execute+0xd8>)
 800449c:	f8df a070 	ldr.w	sl, [pc, #112]	; 8004510 <oslib_test_007_002_execute+0xd0>
 80044a0:	2304      	movs	r3, #4
 80044a2:	f105 0910 	add.w	r9, r5, #16
 80044a6:	603b      	str	r3, [r7, #0]
 80044a8:	f04f 0820 	mov.w	r8, #32
      chGuardedPoolFree(&gmp1, &objects[i]);
 80044ac:	462b      	mov	r3, r5
 80044ae:	f388 8811 	msr	BASEPRI, r8
  php->next = mp->next;
 80044b2:	68f2      	ldr	r2, [r6, #12]
 80044b4:	f845 2b04 	str.w	r2, [r5], #4
 80044b8:	4650      	mov	r0, sl
  mp->next = php;
 80044ba:	60f3      	str	r3, [r6, #12]
 80044bc:	f7fd f890 	bl	80015e0 <chSemSignalI>
  chSchRescheduleS();
 80044c0:	f7ff faa6 	bl	8003a10 <chSchRescheduleS>
 80044c4:	f384 8811 	msr	BASEPRI, r4
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 80044c8:	454d      	cmp	r5, r9
 80044ca:	d1ef      	bne.n	80044ac <oslib_test_007_002_execute+0x6c>
  test_set_step(5);
 80044cc:	2305      	movs	r3, #5
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 80044ce:	4e10      	ldr	r6, [pc, #64]	; (8004510 <oslib_test_007_002_execute+0xd0>)
 80044d0:	4d13      	ldr	r5, [pc, #76]	; (8004520 <oslib_test_007_002_execute+0xe0>)
  test_set_step(5);
 80044d2:	603b      	str	r3, [r7, #0]
 80044d4:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 80044d6:	2100      	movs	r1, #0
 80044d8:	4630      	mov	r0, r6
 80044da:	f7fe f8d9 	bl	8002690 <chGuardedPoolAllocTimeout>
 80044de:	3800      	subs	r0, #0
 80044e0:	bf18      	it	ne
 80044e2:	2001      	movne	r0, #1
 80044e4:	4629      	mov	r1, r5
 80044e6:	f7fc fb43 	bl	8000b70 <_test_assert>
 80044ea:	b978      	cbnz	r0, 800450c <oslib_test_007_002_execute+0xcc>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 80044ec:	3c01      	subs	r4, #1
 80044ee:	d1f2      	bne.n	80044d6 <oslib_test_007_002_execute+0x96>
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 80044f0:	4621      	mov	r1, r4
  test_set_step(6);
 80044f2:	2306      	movs	r3, #6
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 80044f4:	4806      	ldr	r0, [pc, #24]	; (8004510 <oslib_test_007_002_execute+0xd0>)
  test_set_step(6);
 80044f6:	603b      	str	r3, [r7, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 80044f8:	f7fe f8ca 	bl	8002690 <chGuardedPoolAllocTimeout>
 80044fc:	fab0 f080 	clz	r0, r0
}
 8004500:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8004504:	4905      	ldr	r1, [pc, #20]	; (800451c <oslib_test_007_002_execute+0xdc>)
 8004506:	0940      	lsrs	r0, r0, #5
 8004508:	f7fc bb32 	b.w	8000b70 <_test_assert>
}
 800450c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004510:	20000810 	.word	0x20000810
 8004514:	2000149c 	.word	0x2000149c
 8004518:	20000d60 	.word	0x20000d60
 800451c:	08008f70 	.word	0x08008f70
 8004520:	08008f64 	.word	0x08008f64
	...

08004530 <chMBFetchTimeout>:
msg_t chMBFetchTimeout(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 8004530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004532:	4604      	mov	r4, r0
 8004534:	460e      	mov	r6, r1
 8004536:	4615      	mov	r5, r2
 8004538:	2320      	movs	r3, #32
 800453a:	f383 8811 	msr	BASEPRI, r3
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 800453e:	18c7      	adds	r7, r0, r3
 8004540:	e004      	b.n	800454c <chMBFetchTimeout+0x1c>
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
 8004542:	6923      	ldr	r3, [r4, #16]
 8004544:	b96b      	cbnz	r3, 8004562 <chMBFetchTimeout+0x32>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 8004546:	f7fe f8f3 	bl	8002730 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 800454a:	b930      	cbnz	r0, 800455a <chMBFetchTimeout+0x2a>
    if (mbp->reset) {
 800454c:	7d23      	ldrb	r3, [r4, #20]
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 800454e:	4629      	mov	r1, r5
 8004550:	4638      	mov	r0, r7
    if (mbp->reset) {
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0f5      	beq.n	8004542 <chMBFetchTimeout+0x12>
      return MSG_RESET;
 8004556:	f06f 0001 	mvn.w	r0, #1
 800455a:	2300      	movs	r3, #0
 800455c:	f383 8811 	msr	BASEPRI, r3
}
 8004560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *msgp = *mbp->rdptr++;
 8004562:	68e2      	ldr	r2, [r4, #12]
      if (mbp->rdptr >= mbp->top) {
 8004564:	6861      	ldr	r1, [r4, #4]
      *msgp = *mbp->rdptr++;
 8004566:	6810      	ldr	r0, [r2, #0]
 8004568:	3204      	adds	r2, #4
      if (mbp->rdptr >= mbp->top) {
 800456a:	428a      	cmp	r2, r1
      *msgp = *mbp->rdptr++;
 800456c:	60e2      	str	r2, [r4, #12]
      mbp->cnt--;
 800456e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        mbp->rdptr = mbp->buffer;
 8004572:	bf28      	it	cs
 8004574:	6822      	ldrcs	r2, [r4, #0]
      *msgp = *mbp->rdptr++;
 8004576:	6030      	str	r0, [r6, #0]
        mbp->rdptr = mbp->buffer;
 8004578:	bf28      	it	cs
 800457a:	60e2      	strcs	r2, [r4, #12]
      mbp->cnt--;
 800457c:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 800457e:	f104 0018 	add.w	r0, r4, #24
 8004582:	f7fc ff25 	bl	80013d0 <chThdDequeueNextI.constprop.0>
      chSchRescheduleS();
 8004586:	f7ff fa43 	bl	8003a10 <chSchRescheduleS>
      return MSG_OK;
 800458a:	2000      	movs	r0, #0
 800458c:	2300      	movs	r3, #0
 800458e:	f383 8811 	msr	BASEPRI, r3
}
 8004592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080045a0 <Thread1.lto_priv.0>:

static THD_WORKING_AREA(wa1Thread1, 256);
static THD_WORKING_AREA(wa2Thread1, 256);
static THD_FUNCTION(Thread1, arg) {
 80045a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045a4:	4e11      	ldr	r6, [pc, #68]	; (80045ec <Thread1.lto_priv.0+0x4c>)
 80045a6:	b082      	sub	sp, #8
 */
static inline msg_t chJobDispatch(jobs_queue_t *jqp) {
  msg_t msg, jmsg;

  /* Waiting for a job.*/
  msg = chMBFetchTimeout(&jqp->mbx, &jmsg, TIME_INFINITE);
 80045a8:	f106 071c 	add.w	r7, r6, #28
 80045ac:	46b0      	mov	r8, r6
 80045ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045b2:	a901      	add	r1, sp, #4
 80045b4:	4638      	mov	r0, r7
 80045b6:	f7ff ffbb 	bl	8004530 <chMBFetchTimeout>
  if (msg == MSG_OK) {
 80045ba:	4604      	mov	r4, r0
 80045bc:	b110      	cbz	r0, 80045c4 <Thread1.lto_priv.0+0x24>
  (void)arg;

  do {
    msg = chJobDispatch(&jq);
  } while (msg == MSG_OK);
}
 80045be:	b002      	add	sp, #8
 80045c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    job_descriptor_t *jp = (job_descriptor_t *)jmsg;
 80045c4:	9d01      	ldr	r5, [sp, #4]

    chDbgAssert(jp != NULL, "is NULL");

    if (jp->jobfunc != NULL) {
 80045c6:	682b      	ldr	r3, [r5, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0f8      	beq.n	80045be <Thread1.lto_priv.0+0x1e>

      /* Invoking the job function.*/
      jp->jobfunc(jp->jobarg);
 80045cc:	6868      	ldr	r0, [r5, #4]
 80045ce:	4798      	blx	r3
 80045d0:	2320      	movs	r3, #32
 80045d2:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 80045d6:	68f3      	ldr	r3, [r6, #12]
 80045d8:	602b      	str	r3, [r5, #0]
 80045da:	4640      	mov	r0, r8
  mp->next = php;
 80045dc:	60f5      	str	r5, [r6, #12]
 80045de:	f7fc ffff 	bl	80015e0 <chSemSignalI>
  chSchRescheduleS();
 80045e2:	f7ff fa15 	bl	8003a10 <chSchRescheduleS>
 80045e6:	f384 8811 	msr	BASEPRI, r4
  } while (msg == MSG_OK);
 80045ea:	e7e0      	b.n	80045ae <Thread1.lto_priv.0+0xe>
 80045ec:	20000bec 	.word	0x20000bec

080045f0 <chMBPostTimeout>:
msg_t chMBPostTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 80045f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045f4:	2320      	movs	r3, #32
 80045f6:	4604      	mov	r4, r0
 80045f8:	460e      	mov	r6, r1
 80045fa:	4615      	mov	r5, r2
 80045fc:	f383 8811 	msr	BASEPRI, r3
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8004600:	f100 0818 	add.w	r8, r0, #24
 8004604:	e00a      	b.n	800461c <chMBPostTimeout+0x2c>
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8004606:	e9d4 7200 	ldrd	r7, r2, [r4]
 800460a:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800460c:	eba2 0c07 	sub.w	ip, r2, r7
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8004610:	ebb3 0fac 	cmp.w	r3, ip, asr #2
 8004614:	d10e      	bne.n	8004634 <chMBPostTimeout+0x44>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8004616:	f7fe f88b 	bl	8002730 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 800461a:	b930      	cbnz	r0, 800462a <chMBPostTimeout+0x3a>
    if (mbp->reset) {
 800461c:	7d23      	ldrb	r3, [r4, #20]
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 800461e:	4629      	mov	r1, r5
 8004620:	4640      	mov	r0, r8
    if (mbp->reset) {
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0ef      	beq.n	8004606 <chMBPostTimeout+0x16>
      return MSG_RESET;
 8004626:	f06f 0001 	mvn.w	r0, #1
 800462a:	2300      	movs	r3, #0
 800462c:	f383 8811 	msr	BASEPRI, r3
}
 8004630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *mbp->wrptr++ = msg;
 8004634:	68a0      	ldr	r0, [r4, #8]
 8004636:	1d01      	adds	r1, r0, #4
      if (mbp->wrptr >= mbp->top) {
 8004638:	428a      	cmp	r2, r1
      mbp->cnt++;
 800463a:	f103 0301 	add.w	r3, r3, #1
      *mbp->wrptr++ = msg;
 800463e:	60a1      	str	r1, [r4, #8]
 8004640:	6006      	str	r6, [r0, #0]
        mbp->wrptr = mbp->buffer;
 8004642:	bf98      	it	ls
 8004644:	60a7      	strls	r7, [r4, #8]
      mbp->cnt++;
 8004646:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8004648:	f104 0020 	add.w	r0, r4, #32
 800464c:	f7fc fec0 	bl	80013d0 <chThdDequeueNextI.constprop.0>
      chSchRescheduleS();
 8004650:	f7ff f9de 	bl	8003a10 <chSchRescheduleS>
      return MSG_OK;
 8004654:	2000      	movs	r0, #0
 8004656:	2300      	movs	r3, #0
 8004658:	f383 8811 	msr	BASEPRI, r3
}
 800465c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004660 <oslib_test_002_003_execute>:
}

static void oslib_test_002_003_execute(void) {
 8004660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  msg_t msg1, msg2;
  unsigned i;

  /* [2.3.1] Filling the mailbox.*/
  test_set_step(1);
 8004664:	4f43      	ldr	r7, [pc, #268]	; (8004774 <oslib_test_002_003_execute+0x114>)
 8004666:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800477c <oslib_test_002_003_execute+0x11c>
  {
    for (i = 0; i < MB_SIZE; i++) {
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800466a:	4e43      	ldr	r6, [pc, #268]	; (8004778 <oslib_test_002_003_execute+0x118>)
  test_set_step(1);
 800466c:	2301      	movs	r3, #1
static void oslib_test_002_003_execute(void) {
 800466e:	b082      	sub	sp, #8
  test_set_step(1);
 8004670:	603b      	str	r3, [r7, #0]
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8004672:	4645      	mov	r5, r8
  test_set_step(1);
 8004674:	2442      	movs	r4, #66	; 0x42
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8004676:	4621      	mov	r1, r4
 8004678:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800467c:	4628      	mov	r0, r5
 800467e:	f7ff ffb7 	bl	80045f0 <chMBPostTimeout>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004682:	fab0 f080 	clz	r0, r0
 8004686:	4631      	mov	r1, r6
 8004688:	0940      	lsrs	r0, r0, #5
 800468a:	3401      	adds	r4, #1
 800468c:	f7fc fa70 	bl	8000b70 <_test_assert>
 8004690:	b990      	cbnz	r0, 80046b8 <oslib_test_002_003_execute+0x58>
    for (i = 0; i < MB_SIZE; i++) {
 8004692:	2c46      	cmp	r4, #70	; 0x46
 8004694:	d1ef      	bne.n	8004676 <oslib_test_002_003_execute+0x16>
  }
  test_end_step(1);

  /* [2.3.2] Testing chMBPostTimeout(), chMBPostI(),
     chMBPostAheadTimeout() and chMBPostAheadI() timeout.*/
  test_set_step(2);
 8004696:	2302      	movs	r3, #2
  {
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 8004698:	2201      	movs	r2, #1
 800469a:	2158      	movs	r1, #88	; 0x58
 800469c:	4837      	ldr	r0, [pc, #220]	; (800477c <oslib_test_002_003_execute+0x11c>)
  test_set_step(2);
 800469e:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 80046a0:	f7ff ffa6 	bl	80045f0 <chMBPostTimeout>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80046a4:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 80046a8:	fab0 f080 	clz	r0, r0
 80046ac:	4932      	ldr	r1, [pc, #200]	; (8004778 <oslib_test_002_003_execute+0x118>)
 80046ae:	0940      	lsrs	r0, r0, #5
 80046b0:	f7fc fa5e 	bl	8000b70 <_test_assert>
 80046b4:	4604      	mov	r4, r0
 80046b6:	b110      	cbz	r0, 80046be <oslib_test_002_003_execute+0x5e>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
  }
  test_end_step(4);
}
 80046b8:	b002      	add	sp, #8
 80046ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046be:	2520      	movs	r5, #32
 80046c0:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBPostI(&mb1, 'X');
 80046c4:	2058      	movs	r0, #88	; 0x58
 80046c6:	f7fc fe93 	bl	80013f0 <chMBPostI.constprop.0>
 80046ca:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80046ce:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 80046d2:	fab0 f080 	clz	r0, r0
 80046d6:	4928      	ldr	r1, [pc, #160]	; (8004778 <oslib_test_002_003_execute+0x118>)
 80046d8:	0940      	lsrs	r0, r0, #5
 80046da:	f7fc fa49 	bl	8000b70 <_test_assert>
 80046de:	2800      	cmp	r0, #0
 80046e0:	d1ea      	bne.n	80046b8 <oslib_test_002_003_execute+0x58>
    msg1 = chMBPostAheadTimeout(&mb1, 'X', 1);
 80046e2:	2101      	movs	r1, #1
 80046e4:	2058      	movs	r0, #88	; 0x58
 80046e6:	f7ff faeb 	bl	8003cc0 <chMBPostAheadTimeout.constprop.0>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80046ea:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 80046ee:	fab0 f080 	clz	r0, r0
 80046f2:	4921      	ldr	r1, [pc, #132]	; (8004778 <oslib_test_002_003_execute+0x118>)
 80046f4:	0940      	lsrs	r0, r0, #5
 80046f6:	f7fc fa3b 	bl	8000b70 <_test_assert>
 80046fa:	4604      	mov	r4, r0
 80046fc:	2800      	cmp	r0, #0
 80046fe:	d1db      	bne.n	80046b8 <oslib_test_002_003_execute+0x58>
 8004700:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBPostAheadI(&mb1, 'X');
 8004704:	2058      	movs	r0, #88	; 0x58
 8004706:	f7fc fe9b 	bl	8001440 <chMBPostAheadI.constprop.0>
 800470a:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800470e:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 8004712:	fab0 f080 	clz	r0, r0
 8004716:	4918      	ldr	r1, [pc, #96]	; (8004778 <oslib_test_002_003_execute+0x118>)
 8004718:	0940      	lsrs	r0, r0, #5
 800471a:	f7fc fa29 	bl	8000b70 <_test_assert>
 800471e:	4604      	mov	r4, r0
 8004720:	2800      	cmp	r0, #0
 8004722:	d1c9      	bne.n	80046b8 <oslib_test_002_003_execute+0x58>
  test_set_step(3);
 8004724:	2303      	movs	r3, #3
 8004726:	603b      	str	r3, [r7, #0]
    chMBReset(&mb1);
 8004728:	f7ff fa92 	bl	8003c50 <chMBReset.constprop.0>
  test_set_step(4);
 800472c:	2304      	movs	r3, #4
    msg1 = chMBFetchTimeout(&mb1, &msg2, 1);
 800472e:	a901      	add	r1, sp, #4
 8004730:	2201      	movs	r2, #1
 8004732:	4812      	ldr	r0, [pc, #72]	; (800477c <oslib_test_002_003_execute+0x11c>)
 *
 * @xclass
 */
static inline void chMBResumeX(mailbox_t *mbp) {

  mbp->reset = false;
 8004734:	f888 4014 	strb.w	r4, [r8, #20]
  test_set_step(4);
 8004738:	603b      	str	r3, [r7, #0]
    msg1 = chMBFetchTimeout(&mb1, &msg2, 1);
 800473a:	f7ff fef9 	bl	8004530 <chMBFetchTimeout>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800473e:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 8004742:	fab0 f080 	clz	r0, r0
 8004746:	490c      	ldr	r1, [pc, #48]	; (8004778 <oslib_test_002_003_execute+0x118>)
 8004748:	0940      	lsrs	r0, r0, #5
 800474a:	f7fc fa11 	bl	8000b70 <_test_assert>
 800474e:	4604      	mov	r4, r0
 8004750:	2800      	cmp	r0, #0
 8004752:	d1b1      	bne.n	80046b8 <oslib_test_002_003_execute+0x58>
 8004754:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBFetchI(&mb1, &msg2);
 8004758:	a801      	add	r0, sp, #4
 800475a:	f7fc fe99 	bl	8001490 <chMBFetchI.constprop.0>
 800475e:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8004762:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 8004766:	fab0 f080 	clz	r0, r0
 800476a:	4903      	ldr	r1, [pc, #12]	; (8004778 <oslib_test_002_003_execute+0x118>)
 800476c:	0940      	lsrs	r0, r0, #5
 800476e:	f7fc f9ff 	bl	8000b70 <_test_assert>
 8004772:	e7a1      	b.n	80046b8 <oslib_test_002_003_execute+0x58>
 8004774:	2000149c 	.word	0x2000149c
 8004778:	08009ec8 	.word	0x08009ec8
 800477c:	2000084c 	.word	0x2000084c

08004780 <oslib_test_002_002_execute>:
static void oslib_test_002_002_execute(void) {
 8004780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8004784:	4faf      	ldr	r7, [pc, #700]	; (8004a44 <oslib_test_002_002_execute+0x2c4>)
 8004786:	f04f 0801 	mov.w	r8, #1
static void oslib_test_002_002_execute(void) {
 800478a:	b082      	sub	sp, #8
  test_set_step(1);
 800478c:	f8c7 8000 	str.w	r8, [r7]
 8004790:	2620      	movs	r6, #32
 8004792:	f386 8811 	msr	BASEPRI, r6
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8004796:	4cac      	ldr	r4, [pc, #688]	; (8004a48 <oslib_test_002_002_execute+0x2c8>)
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 8004798:	49ac      	ldr	r1, [pc, #688]	; (8004a4c <oslib_test_002_002_execute+0x2cc>)
 800479a:	6920      	ldr	r0, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800479c:	e9d4 2300 	ldrd	r2, r3, [r4]
 80047a0:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80047a2:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 80047a6:	f1a0 0004 	sub.w	r0, r0, #4
 80047aa:	fab0 f080 	clz	r0, r0
 80047ae:	0940      	lsrs	r0, r0, #5
 80047b0:	f7fc f9de 	bl	8000b70 <_test_assert>
 80047b4:	b128      	cbz	r0, 80047c2 <oslib_test_002_002_execute+0x42>
 80047b6:	2300      	movs	r3, #0
 80047b8:	f383 8811 	msr	BASEPRI, r3
}
 80047bc:	b002      	add	sp, #8
 80047be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047c2:	4605      	mov	r5, r0
 80047c4:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 80047c8:	2302      	movs	r3, #2
 80047ca:	603b      	str	r3, [r7, #0]
 80047cc:	f386 8811 	msr	BASEPRI, r6
  mbp->wrptr = mbp->buffer;
 80047d0:	6823      	ldr	r3, [r4, #0]
  mbp->cnt   = (size_t)0;
 80047d2:	6120      	str	r0, [r4, #16]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 80047d4:	f104 0018 	add.w	r0, r4, #24
  mbp->rdptr = mbp->buffer;
 80047d8:	e9c4 3302 	strd	r3, r3, [r4, #8]
  mbp->reset = true;
 80047dc:	f884 8014 	strb.w	r8, [r4, #20]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 80047e0:	f7fc fe7e 	bl	80014e0 <chThdDequeueAllI.constprop.0>
  chThdDequeueAllI(&mbp->qr, MSG_RESET);
 80047e4:	f104 0020 	add.w	r0, r4, #32
 80047e8:	f7fc fe7a 	bl	80014e0 <chThdDequeueAllI.constprop.0>
 80047ec:	f385 8811 	msr	BASEPRI, r5
 80047f0:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 80047f4:	e9d4 2300 	ldrd	r2, r3, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80047f8:	6920      	ldr	r0, [r4, #16]
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 80047fa:	4995      	ldr	r1, [pc, #596]	; (8004a50 <oslib_test_002_002_execute+0x2d0>)
  return (size_t)(mbp->top - mbp->buffer);
 80047fc:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80047fe:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 8004802:	f1a0 0004 	sub.w	r0, r0, #4
 8004806:	fab0 f080 	clz	r0, r0
 800480a:	0940      	lsrs	r0, r0, #5
 800480c:	f7fc f9b0 	bl	8000b70 <_test_assert>
 8004810:	4680      	mov	r8, r0
 8004812:	b988      	cbnz	r0, 8004838 <oslib_test_002_002_execute+0xb8>
 8004814:	f380 8811 	msr	BASEPRI, r0
 8004818:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 800481c:	6920      	ldr	r0, [r4, #16]
 800481e:	498d      	ldr	r1, [pc, #564]	; (8004a54 <oslib_test_002_002_execute+0x2d4>)
 8004820:	fab0 f080 	clz	r0, r0
 8004824:	0940      	lsrs	r0, r0, #5
 8004826:	f7fc f9a3 	bl	8000b70 <_test_assert>
 800482a:	4605      	mov	r5, r0
 800482c:	b148      	cbz	r0, 8004842 <oslib_test_002_002_execute+0xc2>
 800482e:	f388 8811 	msr	BASEPRI, r8
}
 8004832:	b002      	add	sp, #8
 8004834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004838:	f385 8811 	msr	BASEPRI, r5
 800483c:	b002      	add	sp, #8
 800483e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004842:	f380 8811 	msr	BASEPRI, r0
 8004846:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 800484a:	6820      	ldr	r0, [r4, #0]
 800484c:	68a3      	ldr	r3, [r4, #8]
 800484e:	4982      	ldr	r1, [pc, #520]	; (8004a58 <oslib_test_002_002_execute+0x2d8>)
 8004850:	1ac0      	subs	r0, r0, r3
 8004852:	fab0 f080 	clz	r0, r0
 8004856:	0940      	lsrs	r0, r0, #5
 8004858:	f7fc f98a 	bl	8000b70 <_test_assert>
 800485c:	4680      	mov	r8, r0
 800485e:	2800      	cmp	r0, #0
 8004860:	d1ea      	bne.n	8004838 <oslib_test_002_002_execute+0xb8>
 8004862:	f380 8811 	msr	BASEPRI, r0
 8004866:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 800486a:	6820      	ldr	r0, [r4, #0]
 800486c:	68e3      	ldr	r3, [r4, #12]
 800486e:	497b      	ldr	r1, [pc, #492]	; (8004a5c <oslib_test_002_002_execute+0x2dc>)
 8004870:	1ac0      	subs	r0, r0, r3
 8004872:	fab0 f080 	clz	r0, r0
 8004876:	0940      	lsrs	r0, r0, #5
 8004878:	f7fc f97a 	bl	8000b70 <_test_assert>
 800487c:	4605      	mov	r5, r0
 800487e:	2800      	cmp	r0, #0
 8004880:	d1d5      	bne.n	800482e <oslib_test_002_002_execute+0xae>
 8004882:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 8004886:	2303      	movs	r3, #3
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004888:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8004a60 <oslib_test_002_002_execute+0x2e0>
  mbp->reset = false;
 800488c:	7520      	strb	r0, [r4, #20]
  test_set_step(3);
 800488e:	603b      	str	r3, [r7, #0]
 8004890:	f04f 0942 	mov.w	r9, #66	; 0x42
 8004894:	f386 8811 	msr	BASEPRI, r6
      msg1 = chMBPostI(&mb1, 'B' + i);
 8004898:	4648      	mov	r0, r9
 800489a:	f7fc fda9 	bl	80013f0 <chMBPostI.constprop.0>
 800489e:	f385 8811 	msr	BASEPRI, r5
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80048a2:	fab0 f080 	clz	r0, r0
 80048a6:	0940      	lsrs	r0, r0, #5
 80048a8:	4651      	mov	r1, sl
 80048aa:	f7fc f961 	bl	8000b70 <_test_assert>
    for (i = 0; i < MB_SIZE - 1; i++) {
 80048ae:	f109 0901 	add.w	r9, r9, #1
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80048b2:	4680      	mov	r8, r0
 80048b4:	2800      	cmp	r0, #0
 80048b6:	d181      	bne.n	80047bc <oslib_test_002_002_execute+0x3c>
    for (i = 0; i < MB_SIZE - 1; i++) {
 80048b8:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
 80048bc:	d1ea      	bne.n	8004894 <oslib_test_002_002_execute+0x114>
 80048be:	f386 8811 	msr	BASEPRI, r6
    msg1 = chMBPostAheadI(&mb1, 'A');
 80048c2:	2041      	movs	r0, #65	; 0x41
 80048c4:	f7fc fdbc 	bl	8001440 <chMBPostAheadI.constprop.0>
 80048c8:	f388 8811 	msr	BASEPRI, r8
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80048cc:	fab0 f080 	clz	r0, r0
 80048d0:	4963      	ldr	r1, [pc, #396]	; (8004a60 <oslib_test_002_002_execute+0x2e0>)
 80048d2:	0940      	lsrs	r0, r0, #5
 80048d4:	f7fc f94c 	bl	8000b70 <_test_assert>
 80048d8:	4605      	mov	r5, r0
 80048da:	2800      	cmp	r0, #0
 80048dc:	f47f af6e 	bne.w	80047bc <oslib_test_002_002_execute+0x3c>
  test_set_step(4);
 80048e0:	f04f 0904 	mov.w	r9, #4
 80048e4:	f8c7 9000 	str.w	r9, [r7]
 80048e8:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 80048ec:	e9d4 1300 	ldrd	r1, r3, [r4]
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 80048f0:	6922      	ldr	r2, [r4, #16]
 80048f2:	1a5b      	subs	r3, r3, r1
 80048f4:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 80048f8:	495a      	ldr	r1, [pc, #360]	; (8004a64 <oslib_test_002_002_execute+0x2e4>)
 80048fa:	bf0c      	ite	eq
 80048fc:	2001      	moveq	r0, #1
 80048fe:	2000      	movne	r0, #0
 8004900:	f7fc f936 	bl	8000b70 <_test_assert>
 8004904:	4680      	mov	r8, r0
 8004906:	2800      	cmp	r0, #0
 8004908:	d196      	bne.n	8004838 <oslib_test_002_002_execute+0xb8>
 800490a:	f380 8811 	msr	BASEPRI, r0
 800490e:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 8004912:	6920      	ldr	r0, [r4, #16]
 8004914:	4954      	ldr	r1, [pc, #336]	; (8004a68 <oslib_test_002_002_execute+0x2e8>)
 8004916:	f1a0 0004 	sub.w	r0, r0, #4
 800491a:	fab0 f080 	clz	r0, r0
 800491e:	0940      	lsrs	r0, r0, #5
 8004920:	f7fc f926 	bl	8000b70 <_test_assert>
 8004924:	4605      	mov	r5, r0
 8004926:	2800      	cmp	r0, #0
 8004928:	d181      	bne.n	800482e <oslib_test_002_002_execute+0xae>
 800492a:	f380 8811 	msr	BASEPRI, r0
 800492e:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 8004932:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 8004936:	1ac0      	subs	r0, r0, r3
 8004938:	fab0 f080 	clz	r0, r0
 800493c:	494b      	ldr	r1, [pc, #300]	; (8004a6c <oslib_test_002_002_execute+0x2ec>)
 800493e:	0940      	lsrs	r0, r0, #5
 8004940:	f7fc f916 	bl	8000b70 <_test_assert>
 8004944:	2800      	cmp	r0, #0
 8004946:	f47f af77 	bne.w	8004838 <oslib_test_002_002_execute+0xb8>
 800494a:	f380 8811 	msr	BASEPRI, r0
  test_set_step(5);
 800494e:	2305      	movs	r3, #5
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004950:	4e43      	ldr	r6, [pc, #268]	; (8004a60 <oslib_test_002_002_execute+0x2e0>)
  test_set_step(5);
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	4605      	mov	r5, r0
 8004956:	f04f 0820 	mov.w	r8, #32
 800495a:	f388 8811 	msr	BASEPRI, r8
      msg1 = chMBFetchI(&mb1, &msg2);
 800495e:	a801      	add	r0, sp, #4
 8004960:	f7fc fd96 	bl	8001490 <chMBFetchI.constprop.0>
 8004964:	f385 8811 	msr	BASEPRI, r5
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004968:	fab0 f080 	clz	r0, r0
 800496c:	0940      	lsrs	r0, r0, #5
 800496e:	4631      	mov	r1, r6
 8004970:	f7fc f8fe 	bl	8000b70 <_test_assert>
 8004974:	2800      	cmp	r0, #0
 8004976:	f47f af21 	bne.w	80047bc <oslib_test_002_002_execute+0x3c>
      test_emit_token(msg2);
 800497a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800497e:	f7fc f99f 	bl	8000cc0 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
 8004982:	f1b9 0901 	subs.w	r9, r9, #1
 8004986:	d1e8      	bne.n	800495a <oslib_test_002_002_execute+0x1da>
    test_assert_sequence("ABCD", "wrong get sequence");
 8004988:	4939      	ldr	r1, [pc, #228]	; (8004a70 <oslib_test_002_002_execute+0x2f0>)
 800498a:	483a      	ldr	r0, [pc, #232]	; (8004a74 <oslib_test_002_002_execute+0x2f4>)
 800498c:	f7fc fa70 	bl	8000e70 <_test_assert_sequence>
 8004990:	2800      	cmp	r0, #0
 8004992:	f47f af13 	bne.w	80047bc <oslib_test_002_002_execute+0x3c>
  test_set_step(6);
 8004996:	2306      	movs	r3, #6
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8004998:	2146      	movs	r1, #70	; 0x46
 800499a:	482b      	ldr	r0, [pc, #172]	; (8004a48 <oslib_test_002_002_execute+0x2c8>)
  test_set_step(6);
 800499c:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800499e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049a2:	f7ff fe25 	bl	80045f0 <chMBPostTimeout>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80049a6:	fab0 f080 	clz	r0, r0
 80049aa:	492d      	ldr	r1, [pc, #180]	; (8004a60 <oslib_test_002_002_execute+0x2e0>)
 80049ac:	0940      	lsrs	r0, r0, #5
 80049ae:	f7fc f8df 	bl	8000b70 <_test_assert>
 80049b2:	2800      	cmp	r0, #0
 80049b4:	f47f af02 	bne.w	80047bc <oslib_test_002_002_execute+0x3c>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 80049b8:	a901      	add	r1, sp, #4
 80049ba:	4823      	ldr	r0, [pc, #140]	; (8004a48 <oslib_test_002_002_execute+0x2c8>)
 80049bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049c0:	f7ff fdb6 	bl	8004530 <chMBFetchTimeout>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80049c4:	fab0 f080 	clz	r0, r0
 80049c8:	4925      	ldr	r1, [pc, #148]	; (8004a60 <oslib_test_002_002_execute+0x2e0>)
 80049ca:	0940      	lsrs	r0, r0, #5
 80049cc:	f7fc f8d0 	bl	8000b70 <_test_assert>
 80049d0:	2800      	cmp	r0, #0
 80049d2:	f47f aef3 	bne.w	80047bc <oslib_test_002_002_execute+0x3c>
  test_set_step(7);
 80049d6:	2307      	movs	r3, #7
 80049d8:	603b      	str	r3, [r7, #0]
 80049da:	f388 8811 	msr	BASEPRI, r8
 80049de:	e9d4 1200 	ldrd	r1, r2, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80049e2:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 80049e4:	1a52      	subs	r2, r2, r1
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80049e6:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 80049ea:	1f19      	subs	r1, r3, #4
 80049ec:	4248      	negs	r0, r1
 80049ee:	4148      	adcs	r0, r1
 80049f0:	4917      	ldr	r1, [pc, #92]	; (8004a50 <oslib_test_002_002_execute+0x2d0>)
 80049f2:	f7fc f8bd 	bl	8000b70 <_test_assert>
 80049f6:	bb08      	cbnz	r0, 8004a3c <oslib_test_002_002_execute+0x2bc>
 80049f8:	f389 8811 	msr	BASEPRI, r9
 80049fc:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8004a00:	6920      	ldr	r0, [r4, #16]
 8004a02:	4914      	ldr	r1, [pc, #80]	; (8004a54 <oslib_test_002_002_execute+0x2d4>)
 8004a04:	fab0 f080 	clz	r0, r0
 8004a08:	0940      	lsrs	r0, r0, #5
 8004a0a:	f7fc f8b1 	bl	8000b70 <_test_assert>
 8004a0e:	b9a8      	cbnz	r0, 8004a3c <oslib_test_002_002_execute+0x2bc>
 8004a10:	f389 8811 	msr	BASEPRI, r9
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8004a14:	6820      	ldr	r0, [r4, #0]
 8004a16:	68a3      	ldr	r3, [r4, #8]
 8004a18:	490f      	ldr	r1, [pc, #60]	; (8004a58 <oslib_test_002_002_execute+0x2d8>)
 8004a1a:	1ac2      	subs	r2, r0, r3
 8004a1c:	4250      	negs	r0, r2
 8004a1e:	4150      	adcs	r0, r2
 8004a20:	f7fc f8a6 	bl	8000b70 <_test_assert>
 8004a24:	2800      	cmp	r0, #0
 8004a26:	f47f aec9 	bne.w	80047bc <oslib_test_002_002_execute+0x3c>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8004a2a:	6820      	ldr	r0, [r4, #0]
 8004a2c:	68e3      	ldr	r3, [r4, #12]
 8004a2e:	490b      	ldr	r1, [pc, #44]	; (8004a5c <oslib_test_002_002_execute+0x2dc>)
 8004a30:	1ac3      	subs	r3, r0, r3
 8004a32:	4258      	negs	r0, r3
 8004a34:	4158      	adcs	r0, r3
 8004a36:	f7fc f89b 	bl	8000b70 <_test_assert>
 8004a3a:	e6bf      	b.n	80047bc <oslib_test_002_002_execute+0x3c>
 8004a3c:	f389 8811 	msr	BASEPRI, r9
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8004a40:	e6bc      	b.n	80047bc <oslib_test_002_002_execute+0x3c>
 8004a42:	bf00      	nop
 8004a44:	2000149c 	.word	0x2000149c
 8004a48:	2000084c 	.word	0x2000084c
 8004a4c:	08009ee0 	.word	0x08009ee0
 8004a50:	08009eec 	.word	0x08009eec
 8004a54:	08009ef8 	.word	0x08009ef8
 8004a58:	08009f04 	.word	0x08009f04
 8004a5c:	08009f28 	.word	0x08009f28
 8004a60:	08009ec8 	.word	0x08009ec8
 8004a64:	08009f4c 	.word	0x08009f4c
 8004a68:	08009f58 	.word	0x08009f58
 8004a6c:	08009f64 	.word	0x08009f64
 8004a70:	08009f7c 	.word	0x08009f7c
 8004a74:	08009f90 	.word	0x08009f90
	...

08004a80 <oslib_test_002_001_execute>:
static void oslib_test_002_001_execute(void) {
 8004a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8004a84:	4fbb      	ldr	r7, [pc, #748]	; (8004d74 <oslib_test_002_001_execute+0x2f4>)
 8004a86:	2301      	movs	r3, #1
static void oslib_test_002_001_execute(void) {
 8004a88:	b082      	sub	sp, #8
  test_set_step(1);
 8004a8a:	603b      	str	r3, [r7, #0]
 8004a8c:	2620      	movs	r6, #32
 8004a8e:	f386 8811 	msr	BASEPRI, r6
 8004a92:	4cb9      	ldr	r4, [pc, #740]	; (8004d78 <oslib_test_002_001_execute+0x2f8>)
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 8004a94:	49b9      	ldr	r1, [pc, #740]	; (8004d7c <oslib_test_002_001_execute+0x2fc>)
 8004a96:	6920      	ldr	r0, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8004a98:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004a9c:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8004a9e:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 8004aa2:	f1a0 0004 	sub.w	r0, r0, #4
 8004aa6:	fab0 f080 	clz	r0, r0
 8004aaa:	0940      	lsrs	r0, r0, #5
 8004aac:	f7fc f860 	bl	8000b70 <_test_assert>
 8004ab0:	b128      	cbz	r0, 8004abe <oslib_test_002_001_execute+0x3e>
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	f383 8811 	msr	BASEPRI, r3
}
 8004ab8:	b002      	add	sp, #8
 8004aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004abe:	4605      	mov	r5, r0
 8004ac0:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	603b      	str	r3, [r7, #0]
    chMBReset(&mb1);
 8004ac8:	f7ff f8c2 	bl	8003c50 <chMBReset.constprop.0>
 8004acc:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 8004ad0:	e9d4 2300 	ldrd	r2, r3, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8004ad4:	6920      	ldr	r0, [r4, #16]
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8004ad6:	49aa      	ldr	r1, [pc, #680]	; (8004d80 <oslib_test_002_001_execute+0x300>)
  return (size_t)(mbp->top - mbp->buffer);
 8004ad8:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8004ada:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 8004ade:	f1a0 0004 	sub.w	r0, r0, #4
 8004ae2:	fab0 f080 	clz	r0, r0
 8004ae6:	0940      	lsrs	r0, r0, #5
 8004ae8:	f7fc f842 	bl	8000b70 <_test_assert>
 8004aec:	4680      	mov	r8, r0
 8004aee:	b988      	cbnz	r0, 8004b14 <oslib_test_002_001_execute+0x94>
 8004af0:	f380 8811 	msr	BASEPRI, r0
 8004af4:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8004af8:	6920      	ldr	r0, [r4, #16]
 8004afa:	49a2      	ldr	r1, [pc, #648]	; (8004d84 <oslib_test_002_001_execute+0x304>)
 8004afc:	fab0 f080 	clz	r0, r0
 8004b00:	0940      	lsrs	r0, r0, #5
 8004b02:	f7fc f835 	bl	8000b70 <_test_assert>
 8004b06:	4605      	mov	r5, r0
 8004b08:	b148      	cbz	r0, 8004b1e <oslib_test_002_001_execute+0x9e>
 8004b0a:	f388 8811 	msr	BASEPRI, r8
}
 8004b0e:	b002      	add	sp, #8
 8004b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b14:	f385 8811 	msr	BASEPRI, r5
 8004b18:	b002      	add	sp, #8
 8004b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b1e:	f380 8811 	msr	BASEPRI, r0
 8004b22:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8004b26:	6820      	ldr	r0, [r4, #0]
 8004b28:	68a3      	ldr	r3, [r4, #8]
 8004b2a:	4997      	ldr	r1, [pc, #604]	; (8004d88 <oslib_test_002_001_execute+0x308>)
 8004b2c:	1ac0      	subs	r0, r0, r3
 8004b2e:	fab0 f080 	clz	r0, r0
 8004b32:	0940      	lsrs	r0, r0, #5
 8004b34:	f7fc f81c 	bl	8000b70 <_test_assert>
 8004b38:	4680      	mov	r8, r0
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	d1ea      	bne.n	8004b14 <oslib_test_002_001_execute+0x94>
 8004b3e:	f380 8811 	msr	BASEPRI, r0
 8004b42:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8004b46:	6820      	ldr	r0, [r4, #0]
 8004b48:	68e3      	ldr	r3, [r4, #12]
 8004b4a:	4990      	ldr	r1, [pc, #576]	; (8004d8c <oslib_test_002_001_execute+0x30c>)
 8004b4c:	1ac0      	subs	r0, r0, r3
 8004b4e:	fab0 f080 	clz	r0, r0
 8004b52:	0940      	lsrs	r0, r0, #5
 8004b54:	f7fc f80c 	bl	8000b70 <_test_assert>
 8004b58:	2800      	cmp	r0, #0
 8004b5a:	d1d6      	bne.n	8004b0a <oslib_test_002_001_execute+0x8a>
 8004b5c:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 8004b60:	2303      	movs	r3, #3
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 8004b62:	4601      	mov	r1, r0
 8004b64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b68:	4620      	mov	r0, r4
  test_set_step(3);
 8004b6a:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 8004b6c:	f7ff fd40 	bl	80045f0 <chMBPostTimeout>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 8004b70:	1c81      	adds	r1, r0, #2
 8004b72:	bf14      	ite	ne
 8004b74:	2000      	movne	r0, #0
 8004b76:	2001      	moveq	r0, #1
 8004b78:	4985      	ldr	r1, [pc, #532]	; (8004d90 <oslib_test_002_001_execute+0x310>)
 8004b7a:	f7fb fff9 	bl	8000b70 <_test_assert>
 8004b7e:	2800      	cmp	r0, #0
 8004b80:	d19a      	bne.n	8004ab8 <oslib_test_002_001_execute+0x38>
    msg1 = chMBPostAheadTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 8004b82:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b86:	f7ff f89b 	bl	8003cc0 <chMBPostAheadTimeout.constprop.0>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 8004b8a:	1c82      	adds	r2, r0, #2
 8004b8c:	bf14      	ite	ne
 8004b8e:	2000      	movne	r0, #0
 8004b90:	2001      	moveq	r0, #1
 8004b92:	497f      	ldr	r1, [pc, #508]	; (8004d90 <oslib_test_002_001_execute+0x310>)
 8004b94:	f7fb ffec 	bl	8000b70 <_test_assert>
 8004b98:	2800      	cmp	r0, #0
 8004b9a:	d18d      	bne.n	8004ab8 <oslib_test_002_001_execute+0x38>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8004b9c:	a901      	add	r1, sp, #4
 8004b9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	f7ff fcc4 	bl	8004530 <chMBFetchTimeout>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 8004ba8:	1c83      	adds	r3, r0, #2
 8004baa:	bf14      	ite	ne
 8004bac:	2000      	movne	r0, #0
 8004bae:	2001      	moveq	r0, #1
 8004bb0:	4977      	ldr	r1, [pc, #476]	; (8004d90 <oslib_test_002_001_execute+0x310>)
 8004bb2:	f7fb ffdd 	bl	8000b70 <_test_assert>
 8004bb6:	2800      	cmp	r0, #0
 8004bb8:	f47f af7e 	bne.w	8004ab8 <oslib_test_002_001_execute+0x38>
  test_set_step(4);
 8004bbc:	2304      	movs	r3, #4
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004bbe:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 8004d94 <oslib_test_002_001_execute+0x314>
  mbp->reset = false;
 8004bc2:	7520      	strb	r0, [r4, #20]
  test_set_step(4);
 8004bc4:	603b      	str	r3, [r7, #0]
 8004bc6:	2542      	movs	r5, #66	; 0x42
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8004bc8:	4626      	mov	r6, r4
 8004bca:	4629      	mov	r1, r5
 8004bcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bd0:	4630      	mov	r0, r6
 8004bd2:	f7ff fd0d 	bl	80045f0 <chMBPostTimeout>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004bd6:	fab0 f080 	clz	r0, r0
 8004bda:	4641      	mov	r1, r8
 8004bdc:	0940      	lsrs	r0, r0, #5
 8004bde:	3501      	adds	r5, #1
 8004be0:	f7fb ffc6 	bl	8000b70 <_test_assert>
 8004be4:	2800      	cmp	r0, #0
 8004be6:	f47f af67 	bne.w	8004ab8 <oslib_test_002_001_execute+0x38>
    for (i = 0; i < MB_SIZE - 1; i++) {
 8004bea:	2d45      	cmp	r5, #69	; 0x45
 8004bec:	d1ed      	bne.n	8004bca <oslib_test_002_001_execute+0x14a>
    msg1 = chMBPostAheadTimeout(&mb1, 'A', TIME_INFINITE);
 8004bee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004bf2:	2041      	movs	r0, #65	; 0x41
 8004bf4:	f7ff f864 	bl	8003cc0 <chMBPostAheadTimeout.constprop.0>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004bf8:	fab0 f080 	clz	r0, r0
 8004bfc:	4965      	ldr	r1, [pc, #404]	; (8004d94 <oslib_test_002_001_execute+0x314>)
 8004bfe:	0940      	lsrs	r0, r0, #5
 8004c00:	f7fb ffb6 	bl	8000b70 <_test_assert>
 8004c04:	4605      	mov	r5, r0
 8004c06:	2800      	cmp	r0, #0
 8004c08:	f47f af56 	bne.w	8004ab8 <oslib_test_002_001_execute+0x38>
  test_set_step(5);
 8004c0c:	2305      	movs	r3, #5
 8004c0e:	603b      	str	r3, [r7, #0]
 8004c10:	f04f 0820 	mov.w	r8, #32
 8004c14:	f388 8811 	msr	BASEPRI, r8
  return (size_t)(mbp->top - mbp->buffer);
 8004c18:	e9d4 1300 	ldrd	r1, r3, [r4]
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 8004c1c:	6922      	ldr	r2, [r4, #16]
 8004c1e:	1a5b      	subs	r3, r3, r1
 8004c20:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 8004c24:	495c      	ldr	r1, [pc, #368]	; (8004d98 <oslib_test_002_001_execute+0x318>)
 8004c26:	bf0c      	ite	eq
 8004c28:	2001      	moveq	r0, #1
 8004c2a:	2000      	movne	r0, #0
 8004c2c:	f7fb ffa0 	bl	8000b70 <_test_assert>
 8004c30:	4606      	mov	r6, r0
 8004c32:	2800      	cmp	r0, #0
 8004c34:	f47f af6e 	bne.w	8004b14 <oslib_test_002_001_execute+0x94>
 8004c38:	f380 8811 	msr	BASEPRI, r0
 8004c3c:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 8004c40:	6920      	ldr	r0, [r4, #16]
 8004c42:	4956      	ldr	r1, [pc, #344]	; (8004d9c <oslib_test_002_001_execute+0x31c>)
 8004c44:	f1a0 0c04 	sub.w	ip, r0, #4
 8004c48:	f1dc 0000 	rsbs	r0, ip, #0
 8004c4c:	eb40 000c 	adc.w	r0, r0, ip
 8004c50:	f7fb ff8e 	bl	8000b70 <_test_assert>
 8004c54:	4605      	mov	r5, r0
 8004c56:	b110      	cbz	r0, 8004c5e <oslib_test_002_001_execute+0x1de>
 8004c58:	f386 8811 	msr	BASEPRI, r6
 8004c5c:	e72c      	b.n	8004ab8 <oslib_test_002_001_execute+0x38>
 8004c5e:	f380 8811 	msr	BASEPRI, r0
 8004c62:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 8004c66:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 8004c6a:	1ac6      	subs	r6, r0, r3
 8004c6c:	4270      	negs	r0, r6
 8004c6e:	4170      	adcs	r0, r6
 8004c70:	494b      	ldr	r1, [pc, #300]	; (8004da0 <oslib_test_002_001_execute+0x320>)
 8004c72:	f7fb ff7d 	bl	8000b70 <_test_assert>
 8004c76:	2800      	cmp	r0, #0
 8004c78:	f47f af4c 	bne.w	8004b14 <oslib_test_002_001_execute+0x94>
 8004c7c:	f380 8811 	msr	BASEPRI, r0
  test_set_step(6);
 8004c80:	2306      	movs	r3, #6
      msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8004c82:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8004d78 <oslib_test_002_001_execute+0x2f8>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004c86:	4e43      	ldr	r6, [pc, #268]	; (8004d94 <oslib_test_002_001_execute+0x314>)
  test_set_step(6);
 8004c88:	603b      	str	r3, [r7, #0]
 8004c8a:	2504      	movs	r5, #4
      msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8004c8c:	a901      	add	r1, sp, #4
 8004c8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c92:	4640      	mov	r0, r8
 8004c94:	f7ff fc4c 	bl	8004530 <chMBFetchTimeout>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004c98:	fab0 f080 	clz	r0, r0
 8004c9c:	4631      	mov	r1, r6
 8004c9e:	0940      	lsrs	r0, r0, #5
 8004ca0:	f7fb ff66 	bl	8000b70 <_test_assert>
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	f47f af07 	bne.w	8004ab8 <oslib_test_002_001_execute+0x38>
      test_emit_token(msg2);
 8004caa:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8004cae:	f7fc f807 	bl	8000cc0 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
 8004cb2:	3d01      	subs	r5, #1
 8004cb4:	d1ea      	bne.n	8004c8c <oslib_test_002_001_execute+0x20c>
    test_assert_sequence("ABCD", "wrong get sequence");
 8004cb6:	493b      	ldr	r1, [pc, #236]	; (8004da4 <oslib_test_002_001_execute+0x324>)
 8004cb8:	483b      	ldr	r0, [pc, #236]	; (8004da8 <oslib_test_002_001_execute+0x328>)
 8004cba:	f7fc f8d9 	bl	8000e70 <_test_assert_sequence>
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	f47f aefa 	bne.w	8004ab8 <oslib_test_002_001_execute+0x38>
  test_set_step(7);
 8004cc4:	2307      	movs	r3, #7
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8004cc6:	2146      	movs	r1, #70	; 0x46
 8004cc8:	482b      	ldr	r0, [pc, #172]	; (8004d78 <oslib_test_002_001_execute+0x2f8>)
  test_set_step(7);
 8004cca:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8004ccc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cd0:	f7ff fc8e 	bl	80045f0 <chMBPostTimeout>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004cd4:	fab0 f080 	clz	r0, r0
 8004cd8:	492e      	ldr	r1, [pc, #184]	; (8004d94 <oslib_test_002_001_execute+0x314>)
 8004cda:	0940      	lsrs	r0, r0, #5
 8004cdc:	f7fb ff48 	bl	8000b70 <_test_assert>
 8004ce0:	2800      	cmp	r0, #0
 8004ce2:	f47f aee9 	bne.w	8004ab8 <oslib_test_002_001_execute+0x38>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8004ce6:	a901      	add	r1, sp, #4
 8004ce8:	4823      	ldr	r0, [pc, #140]	; (8004d78 <oslib_test_002_001_execute+0x2f8>)
 8004cea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cee:	f7ff fc1f 	bl	8004530 <chMBFetchTimeout>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004cf2:	fab0 f080 	clz	r0, r0
 8004cf6:	4927      	ldr	r1, [pc, #156]	; (8004d94 <oslib_test_002_001_execute+0x314>)
 8004cf8:	0940      	lsrs	r0, r0, #5
 8004cfa:	f7fb ff39 	bl	8000b70 <_test_assert>
 8004cfe:	2800      	cmp	r0, #0
 8004d00:	f47f aeda 	bne.w	8004ab8 <oslib_test_002_001_execute+0x38>
  test_set_step(8);
 8004d04:	2308      	movs	r3, #8
 8004d06:	603b      	str	r3, [r7, #0]
 8004d08:	2620      	movs	r6, #32
 8004d0a:	f386 8811 	msr	BASEPRI, r6
 8004d0e:	e9d4 1200 	ldrd	r1, r2, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8004d12:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8004d14:	1a52      	subs	r2, r2, r1
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8004d16:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8004d1a:	1f19      	subs	r1, r3, #4
 8004d1c:	4248      	negs	r0, r1
 8004d1e:	4148      	adcs	r0, r1
 8004d20:	4917      	ldr	r1, [pc, #92]	; (8004d80 <oslib_test_002_001_execute+0x300>)
 8004d22:	f7fb ff25 	bl	8000b70 <_test_assert>
 8004d26:	2800      	cmp	r0, #0
 8004d28:	f47f aef4 	bne.w	8004b14 <oslib_test_002_001_execute+0x94>
 8004d2c:	f385 8811 	msr	BASEPRI, r5
 8004d30:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8004d34:	6920      	ldr	r0, [r4, #16]
 8004d36:	4913      	ldr	r1, [pc, #76]	; (8004d84 <oslib_test_002_001_execute+0x304>)
 8004d38:	fab0 f080 	clz	r0, r0
 8004d3c:	0940      	lsrs	r0, r0, #5
 8004d3e:	f7fb ff17 	bl	8000b70 <_test_assert>
 8004d42:	2800      	cmp	r0, #0
 8004d44:	f47f aee6 	bne.w	8004b14 <oslib_test_002_001_execute+0x94>
 8004d48:	f385 8811 	msr	BASEPRI, r5
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8004d4c:	6820      	ldr	r0, [r4, #0]
 8004d4e:	68a3      	ldr	r3, [r4, #8]
 8004d50:	490d      	ldr	r1, [pc, #52]	; (8004d88 <oslib_test_002_001_execute+0x308>)
 8004d52:	1ac2      	subs	r2, r0, r3
 8004d54:	4250      	negs	r0, r2
 8004d56:	4150      	adcs	r0, r2
 8004d58:	f7fb ff0a 	bl	8000b70 <_test_assert>
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	f47f aeab 	bne.w	8004ab8 <oslib_test_002_001_execute+0x38>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8004d62:	6820      	ldr	r0, [r4, #0]
 8004d64:	68e3      	ldr	r3, [r4, #12]
 8004d66:	4909      	ldr	r1, [pc, #36]	; (8004d8c <oslib_test_002_001_execute+0x30c>)
 8004d68:	1ac3      	subs	r3, r0, r3
 8004d6a:	4258      	negs	r0, r3
 8004d6c:	4158      	adcs	r0, r3
 8004d6e:	f7fb feff 	bl	8000b70 <_test_assert>
 8004d72:	e6a1      	b.n	8004ab8 <oslib_test_002_001_execute+0x38>
 8004d74:	2000149c 	.word	0x2000149c
 8004d78:	2000084c 	.word	0x2000084c
 8004d7c:	08009ee0 	.word	0x08009ee0
 8004d80:	08009eec 	.word	0x08009eec
 8004d84:	08009ef8 	.word	0x08009ef8
 8004d88:	08009f04 	.word	0x08009f04
 8004d8c:	08009f28 	.word	0x08009f28
 8004d90:	08009f98 	.word	0x08009f98
 8004d94:	08009ec8 	.word	0x08009ec8
 8004d98:	08009f4c 	.word	0x08009f4c
 8004d9c:	08009f58 	.word	0x08009f58
 8004da0:	08009f64 	.word	0x08009f64
 8004da4:	08009f7c 	.word	0x08009f7c
 8004da8:	08009f90 	.word	0x08009f90
 8004dac:	00000000 	.word	0x00000000

08004db0 <chMtxUnlock>:
void chMtxUnlock(mutex_t *mp) {
 8004db0:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 8004db2:	4b16      	ldr	r3, [pc, #88]	; (8004e0c <chMtxUnlock+0x5c>)
void chMtxUnlock(mutex_t *mp) {
 8004db4:	4601      	mov	r1, r0
  thread_t *ctp = currp;
 8004db6:	699d      	ldr	r5, [r3, #24]
 8004db8:	2320      	movs	r3, #32
 8004dba:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8004dbe:	6800      	ldr	r0, [r0, #0]
    ctp->mtxlist = mp->next;
 8004dc0:	68cb      	ldr	r3, [r1, #12]
 8004dc2:	63ab      	str	r3, [r5, #56]	; 0x38
    if (chMtxQueueNotEmptyS(mp)) {
 8004dc4:	4288      	cmp	r0, r1
 8004dc6:	d01b      	beq.n	8004e00 <chMtxUnlock+0x50>
      tprio_t newprio = ctp->realprio;
 8004dc8:	6bec      	ldr	r4, [r5, #60]	; 0x3c
      while (lmp != NULL) {
 8004dca:	b14b      	cbz	r3, 8004de0 <chMtxUnlock+0x30>
 8004dcc:	681a      	ldr	r2, [r3, #0]
        if (chMtxQueueNotEmptyS(lmp) &&
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d003      	beq.n	8004dda <chMtxUnlock+0x2a>
 8004dd2:	6892      	ldr	r2, [r2, #8]
 8004dd4:	4294      	cmp	r4, r2
 8004dd6:	bf38      	it	cc
 8004dd8:	4614      	movcc	r4, r2
        lmp = lmp->next;
 8004dda:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1f5      	bne.n	8004dcc <chMtxUnlock+0x1c>
      mp->next = tp->mtxlist;
 8004de0:	6b82      	ldr	r2, [r0, #56]	; 0x38
  tqp->next             = tp->queue.next;
 8004de2:	6803      	ldr	r3, [r0, #0]
      ctp->prio = newprio;
 8004de4:	60ac      	str	r4, [r5, #8]
 8004de6:	600b      	str	r3, [r1, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8004de8:	6059      	str	r1, [r3, #4]
      mp->next = tp->mtxlist;
 8004dea:	e9c1 0202 	strd	r0, r2, [r1, #8]
      tp->mtxlist = mp;
 8004dee:	6381      	str	r1, [r0, #56]	; 0x38
      (void) chSchReadyI(tp);
 8004df0:	f7fc fad6 	bl	80013a0 <chSchReadyI>
      chSchRescheduleS();
 8004df4:	f7fe fe0c 	bl	8003a10 <chSchRescheduleS>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	f383 8811 	msr	BASEPRI, r3
}
 8004dfe:	bd38      	pop	{r3, r4, r5, pc}
      mp->owner = NULL;
 8004e00:	2300      	movs	r3, #0
 8004e02:	6083      	str	r3, [r0, #8]
 8004e04:	2300      	movs	r3, #0
 8004e06:	f383 8811 	msr	BASEPRI, r3
}
 8004e0a:	bd38      	pop	{r3, r4, r5, pc}
 8004e0c:	200009b0 	.word	0x200009b0

08004e10 <chHeapAllocAligned.constprop.0>:
 * @return              A pointer to the aligned allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8004e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  chDbgCheck((size > 0U) && MEM_IS_VALID_ALIGNMENT(align));

  /* If an heap is not specified then the default system header is used.*/
  if (heapp == NULL) {
    heapp = &default_heap;
 8004e14:	4e38      	ldr	r6, [pc, #224]	; (8004ef8 <chHeapAllocAligned.constprop.0+0xe8>)
 8004e16:	2800      	cmp	r0, #0
 8004e18:	bf18      	it	ne
 8004e1a:	4606      	movne	r6, r0

  /* Size is converted in number of elementary allocation units.*/
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 8004e1c:	f106 080c 	add.w	r8, r6, #12
 8004e20:	4640      	mov	r0, r8
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8004e22:	1dcf      	adds	r7, r1, #7
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8004e24:	460d      	mov	r5, r1
  H_LOCK(heapp);
 8004e26:	f7fe fa4b 	bl	80032c0 <chMtxLock>

  /* Start of the free blocks list.*/
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 8004e2a:	6872      	ldr	r2, [r6, #4]
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8004e2c:	08ff      	lsrs	r7, r7, #3
 8004e2e:	1d31      	adds	r1, r6, #4
  while (H_NEXT(qp) != NULL) {
 8004e30:	b90a      	cbnz	r2, 8004e36 <chHeapAllocAligned.constprop.0+0x26>
 8004e32:	e019      	b.n	8004e68 <chHeapAllocAligned.constprop.0+0x58>
 8004e34:	461a      	mov	r2, r3
    hp = H_NEXT(qp);

    /* Pointer aligned to the requested alignment.*/
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;

    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8004e36:	f8d2 c004 	ldr.w	ip, [r2, #4]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8004e3a:	f102 030f 	add.w	r3, r2, #15
 8004e3e:	f023 0307 	bic.w	r3, r3, #7
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8004e42:	f10c 0401 	add.w	r4, ip, #1
 8004e46:	4699      	mov	r9, r3
 8004e48:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8004e4c:	3b08      	subs	r3, #8
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8004e4e:	eba4 0009 	sub.w	r0, r4, r9
 8004e52:	42a3      	cmp	r3, r4
 8004e54:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8004e58:	d202      	bcs.n	8004e60 <chHeapAllocAligned.constprop.0+0x50>
 8004e5a:	ebb7 0fe0 	cmp.w	r7, r0, asr #3
 8004e5e:	d913      	bls.n	8004e88 <chHeapAllocAligned.constprop.0+0x78>
  while (H_NEXT(qp) != NULL) {
 8004e60:	6813      	ldr	r3, [r2, #0]
 8004e62:	4611      	mov	r1, r2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1e5      	bne.n	8004e34 <chHeapAllocAligned.constprop.0+0x24>
    /* Next in the free blocks list.*/
    qp = hp;
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 8004e68:	4640      	mov	r0, r8
 8004e6a:	f7ff ffa1 	bl	8004db0 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->provider != NULL) {
 8004e6e:	6833      	ldr	r3, [r6, #0]
 8004e70:	b3bb      	cbz	r3, 8004ee2 <chHeapAllocAligned.constprop.0+0xd2>
    ahp = heapp->provider(pages * CH_HEAP_ALIGNMENT,
 8004e72:	2208      	movs	r2, #8
 8004e74:	00f8      	lsls	r0, r7, #3
 8004e76:	4611      	mov	r1, r2
 8004e78:	4798      	blx	r3
                          align,
                          sizeof (heap_header_t));
    if (ahp != NULL) {
 8004e7a:	4681      	mov	r9, r0
 8004e7c:	b108      	cbz	r0, 8004e82 <chHeapAllocAligned.constprop.0+0x72>
      hp = ahp - 1U;
      H_HEAP(hp) = heapp;
      H_SIZE(hp) = size;
 8004e7e:	e940 6502 	strd	r6, r5, [r0, #-8]
      /*lint -restore*/
    }
  }

  return NULL;
}
 8004e82:	4648      	mov	r0, r9
 8004e84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (ahp > hp) {
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d818      	bhi.n	8004ebe <chHeapAllocAligned.constprop.0+0xae>
        if (H_PAGES(hp) == pages) {
 8004e8c:	4567      	cmp	r7, ip
 8004e8e:	d02c      	beq.n	8004eea <chHeapAllocAligned.constprop.0+0xda>
          fp = H_BLOCK(hp) + pages;
 8004e90:	3701      	adds	r7, #1
 8004e92:	eb02 00c7 	add.w	r0, r2, r7, lsl #3
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8004e96:	f100 0308 	add.w	r3, r0, #8
 8004e9a:	1ae3      	subs	r3, r4, r3
 8004e9c:	10db      	asrs	r3, r3, #3
          H_NEXT(fp) = H_NEXT(hp);
 8004e9e:	6814      	ldr	r4, [r2, #0]
 8004ea0:	f842 4037 	str.w	r4, [r2, r7, lsl #3]
 8004ea4:	f102 0908 	add.w	r9, r2, #8
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8004ea8:	6043      	str	r3, [r0, #4]
          H_NEXT(qp) = fp;
 8004eaa:	6008      	str	r0, [r1, #0]
 8004eac:	4613      	mov	r3, r2
      H_UNLOCK(heapp);
 8004eae:	4640      	mov	r0, r8
      H_HEAP(hp) = heapp;
 8004eb0:	e9c3 6500 	strd	r6, r5, [r3]
      H_UNLOCK(heapp);
 8004eb4:	f7ff ff7c 	bl	8004db0 <chMtxUnlock>
}
 8004eb8:	4648      	mov	r0, r9
 8004eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8004ebe:	f102 0108 	add.w	r1, r2, #8
 8004ec2:	1a59      	subs	r1, r3, r1
 8004ec4:	10c9      	asrs	r1, r1, #3
        if (bpages > pages) {
 8004ec6:	4577      	cmp	r7, lr
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8004ec8:	6051      	str	r1, [r2, #4]
        if (bpages > pages) {
 8004eca:	d2f0      	bcs.n	8004eae <chHeapAllocAligned.constprop.0+0x9e>
          fp = H_BLOCK(ahp) + pages;
 8004ecc:	1c7c      	adds	r4, r7, #1
          H_PAGES(fp) = (bpages - pages) - 1U;
 8004ece:	43f9      	mvns	r1, r7
          fp = H_BLOCK(ahp) + pages;
 8004ed0:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
          H_NEXT(fp) = H_NEXT(hp);
 8004ed4:	6817      	ldr	r7, [r2, #0]
          H_PAGES(fp) = (bpages - pages) - 1U;
 8004ed6:	4471      	add	r1, lr
 8004ed8:	6041      	str	r1, [r0, #4]
          H_NEXT(fp) = H_NEXT(hp);
 8004eda:	f843 7034 	str.w	r7, [r3, r4, lsl #3]
          H_NEXT(hp) = fp;
 8004ede:	6010      	str	r0, [r2, #0]
 8004ee0:	e7e5      	b.n	8004eae <chHeapAllocAligned.constprop.0+0x9e>
  return NULL;
 8004ee2:	4699      	mov	r9, r3
}
 8004ee4:	4648      	mov	r0, r9
 8004ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          H_NEXT(qp) = H_NEXT(hp);
 8004eea:	4691      	mov	r9, r2
 8004eec:	4613      	mov	r3, r2
 8004eee:	f859 2b08 	ldr.w	r2, [r9], #8
 8004ef2:	600a      	str	r2, [r1, #0]
 8004ef4:	e7db      	b.n	8004eae <chHeapAllocAligned.constprop.0+0x9e>
 8004ef6:	bf00      	nop
 8004ef8:	20000b50 	.word	0x20000b50
 8004efc:	00000000 	.word	0x00000000

08004f00 <chThdCreateFromHeap.constprop.0>:
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
 8004f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f04:	4605      	mov	r5, r0
 8004f06:	b086      	sub	sp, #24
 8004f08:	460f      	mov	r7, r1
  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 8004f0a:	4601      	mov	r1, r0
 8004f0c:	4811      	ldr	r0, [pc, #68]	; (8004f54 <chThdCreateFromHeap.constprop.0+0x54>)
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
 8004f0e:	4690      	mov	r8, r2
 8004f10:	461e      	mov	r6, r3
  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 8004f12:	f7ff ff7d 	bl	8004e10 <chHeapAllocAligned.constprop.0>
  if (wsp == NULL) {
 8004f16:	4604      	mov	r4, r0
 8004f18:	b1c0      	cbz	r0, 8004f4c <chThdCreateFromHeap.constprop.0+0x4c>
  thread_descriptor_t td = {
 8004f1a:	4b0f      	ldr	r3, [pc, #60]	; (8004f58 <chThdCreateFromHeap.constprop.0+0x58>)
 8004f1c:	f8cd 800c 	str.w	r8, [sp, #12]
    (stkalign_t *)((uint8_t *)wsp + size),
 8004f20:	4405      	add	r5, r0
  thread_descriptor_t td = {
 8004f22:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8004f26:	9502      	str	r5, [sp, #8]
 8004f28:	e9cd 7000 	strd	r7, r0, [sp]
 8004f2c:	2320      	movs	r3, #32
 8004f2e:	f383 8811 	msr	BASEPRI, r3
  tp = chThdCreateSuspendedI(&td);
 8004f32:	4668      	mov	r0, sp
 8004f34:	f7fc f9bc 	bl	80012b0 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_HEAP;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  chSchWakeupS(tp, MSG_OK);
 8004f3e:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(&td);
 8004f40:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 8004f42:	f7fd f925 	bl	8002190 <chSchWakeupS>
 8004f46:	2300      	movs	r3, #0
 8004f48:	f383 8811 	msr	BASEPRI, r3
}
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	b006      	add	sp, #24
 8004f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f54:	20000bb0 	.word	0x20000bb0
 8004f58:	08000df1 	.word	0x08000df1
 8004f5c:	00000000 	.word	0x00000000

08004f60 <dyn_create_object_heap>:
                                             size_t size) {
 8004f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_element_t *p = dlp->next;
 8004f62:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 8004f64:	42a1      	cmp	r1, r4
                                             size_t size) {
 8004f66:	460d      	mov	r5, r1
 8004f68:	4606      	mov	r6, r0
 8004f6a:	4617      	mov	r7, r2
  while (p != (dyn_element_t *)dlp) {
 8004f6c:	d103      	bne.n	8004f76 <dyn_create_object_heap+0x16>
 8004f6e:	e00d      	b.n	8004f8c <dyn_create_object_heap+0x2c>
    p = p->next;
 8004f70:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8004f72:	42a5      	cmp	r5, r4
 8004f74:	d00a      	beq.n	8004f8c <dyn_create_object_heap+0x2c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8004f76:	2208      	movs	r2, #8
 8004f78:	4631      	mov	r1, r6
 8004f7a:	18a0      	adds	r0, r4, r2
 8004f7c:	f7fb fad0 	bl	8000520 <strncmp>
 8004f80:	2800      	cmp	r0, #0
 8004f82:	d1f5      	bne.n	8004f70 <dyn_create_object_heap+0x10>
  if (dep != NULL) {
 8004f84:	b114      	cbz	r4, 8004f8c <dyn_create_object_heap+0x2c>
    return NULL;
 8004f86:	4604      	mov	r4, r0
}
 8004f88:	4620      	mov	r0, r4
 8004f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @api
 */
static inline void *chHeapAlloc(memory_heap_t *heapp, size_t size) {

  return chHeapAllocAligned(heapp, size, CH_HEAP_ALIGNMENT);
 8004f8c:	4639      	mov	r1, r7
 8004f8e:	2000      	movs	r0, #0
 8004f90:	f7ff ff3e 	bl	8004e10 <chHeapAllocAligned.constprop.0>
  if (dep == NULL) {
 8004f94:	4604      	mov	r4, r0
 8004f96:	2800      	cmp	r0, #0
 8004f98:	d0f6      	beq.n	8004f88 <dyn_create_object_heap+0x28>
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 8004f9a:	2208      	movs	r2, #8
 8004f9c:	4631      	mov	r1, r6
 8004f9e:	4410      	add	r0, r2
 8004fa0:	f7fb fb10 	bl	80005c4 <strncpy>
  dep->next = dlp->next;
 8004fa4:	682b      	ldr	r3, [r5, #0]
  dep->refs = (ucnt_t)1;
 8004fa6:	2201      	movs	r2, #1
  dep->next = dlp->next;
 8004fa8:	e9c4 3200 	strd	r3, r2, [r4]
}
 8004fac:	4620      	mov	r0, r4
  dlp->next = dep;
 8004fae:	602c      	str	r4, [r5, #0]
}
 8004fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fb2:	bf00      	nop
	...

08004fc0 <chPipeWriteTimeout.constprop.0>:
 *                      lower than @p n means that a timeout occurred or the
 *                      pipe went in reset state.
 *
 * @api
 */
size_t chPipeWriteTimeout(pipe_t *pp, const uint8_t *bp,
 8004fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t max = n;

  chDbgCheck(n > 0U);

  /* If the pipe is in reset state then returns immediately.*/
  if (pp->reset) {
 8004fc4:	4d33      	ldr	r5, [pc, #204]	; (8005094 <chPipeWriteTimeout.constprop.0+0xd4>)
 8004fc6:	7d2c      	ldrb	r4, [r5, #20]
size_t chPipeWriteTimeout(pipe_t *pp, const uint8_t *bp,
 8004fc8:	b083      	sub	sp, #12
  if (pp->reset) {
 8004fca:	b11c      	cbz	r4, 8004fd4 <chPipeWriteTimeout.constprop.0+0x14>
    return (size_t)0;
 8004fcc:	2000      	movs	r0, #0
  }

  PW_UNLOCK(pp);

  return max - n;
}
 8004fce:	b003      	add	sp, #12
 8004fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd4:	4682      	mov	sl, r0
  PW_LOCK(pp);
 8004fd6:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8004fda:	f7fe f971 	bl	80032c0 <chMtxLock>
 8004fde:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800509c <chPipeWriteTimeout.constprop.0+0xdc>
    *trp = NULL;
 8004fe2:	9401      	str	r4, [sp, #4]
 8004fe4:	4657      	mov	r7, sl
  PC_LOCK(pp);
 8004fe6:	f105 0920 	add.w	r9, r5, #32
 8004fea:	e01d      	b.n	8005028 <chPipeWriteTimeout.constprop.0+0x68>
    memcpy((void *)pp->wrptr, (const void *)bp, s1);
 8004fec:	f7fb f9ae 	bl	800034c <memcpy>
    memcpy((void *)pp->buffer, (const void *)bp, s2);
 8004ff0:	6828      	ldr	r0, [r5, #0]
 8004ff2:	eb08 0106 	add.w	r1, r8, r6
 8004ff6:	465a      	mov	r2, fp
 8004ff8:	f7fb f9a8 	bl	800034c <memcpy>
    pp->wrptr = pp->buffer + s2;
 8004ffc:	682b      	ldr	r3, [r5, #0]
  PC_UNLOCK(pp);
 8004ffe:	4648      	mov	r0, r9
    pp->wrptr = pp->buffer + s2;
 8005000:	445b      	add	r3, fp
 8005002:	60ab      	str	r3, [r5, #8]
  PC_UNLOCK(pp);
 8005004:	f7ff fed4 	bl	8004db0 <chMtxUnlock>
      n  -= done;
 8005008:	1b3f      	subs	r7, r7, r4
      bp += done;
 800500a:	44a0      	add	r8, r4
 800500c:	2320      	movs	r3, #32
 800500e:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8005012:	69e8      	ldr	r0, [r5, #28]
    chSchWakeupS(tp, msg);
 8005014:	2100      	movs	r1, #0
  if (*trp != NULL) {
 8005016:	b118      	cbz	r0, 8005020 <chPipeWriteTimeout.constprop.0+0x60>
    *trp = NULL;
 8005018:	9b01      	ldr	r3, [sp, #4]
 800501a:	61eb      	str	r3, [r5, #28]
    chSchWakeupS(tp, msg);
 800501c:	f7fd f8b8 	bl	8002190 <chSchWakeupS>
 8005020:	9b01      	ldr	r3, [sp, #4]
 8005022:	f383 8811 	msr	BASEPRI, r3
  while (n > 0U) {
 8005026:	b337      	cbz	r7, 8005076 <chPipeWriteTimeout.constprop.0+0xb6>
  PC_LOCK(pp);
 8005028:	4648      	mov	r0, r9
 800502a:	f7fe f949 	bl	80032c0 <chMtxLock>
 */
static inline size_t chPipeGetSize(const pipe_t *pp) {

  /*lint -save -e9033 [10.8] Perfectly safe pointers
    arithmetic.*/
  return (size_t)(pp->top - pp->buffer);
 800502e:	e9d5 4600 	ldrd	r4, r6, [r5]
 *
 * @api
 */
static inline size_t chPipeGetFreeCount(const pipe_t *pp) {

  return chPipeGetSize(pp) - chPipeGetUsedCount(pp);
 8005032:	692b      	ldr	r3, [r5, #16]
  s1 = (size_t)(pp->top - pp->wrptr);
 8005034:	68a8      	ldr	r0, [r5, #8]
  return (size_t)(pp->top - pp->buffer);
 8005036:	1b34      	subs	r4, r6, r4
  return chPipeGetSize(pp) - chPipeGetUsedCount(pp);
 8005038:	1ae4      	subs	r4, r4, r3
 800503a:	42bc      	cmp	r4, r7
 800503c:	bf28      	it	cs
 800503e:	463c      	movcs	r4, r7
 8005040:	1a36      	subs	r6, r6, r0
  pp->cnt += n;
 8005042:	4423      	add	r3, r4
  if (n < s1) {
 8005044:	42b4      	cmp	r4, r6
  pp->cnt += n;
 8005046:	612b      	str	r3, [r5, #16]
  if (n < s1) {
 8005048:	d31c      	bcc.n	8005084 <chPipeWriteTimeout.constprop.0+0xc4>
    memcpy((void *)pp->wrptr, (const void *)bp, s1);
 800504a:	4632      	mov	r2, r6
 800504c:	4641      	mov	r1, r8
    s2 = n - s1;
 800504e:	eba4 0b06 	sub.w	fp, r4, r6
  else if (n > s1) {
 8005052:	d8cb      	bhi.n	8004fec <chPipeWriteTimeout.constprop.0+0x2c>
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 8005054:	4622      	mov	r2, r4
 8005056:	f7fb f979 	bl	800034c <memcpy>
    pp->wrptr = pp->buffer;
 800505a:	682b      	ldr	r3, [r5, #0]
 800505c:	60ab      	str	r3, [r5, #8]
  PC_UNLOCK(pp);
 800505e:	4648      	mov	r0, r9
 8005060:	f7ff fea6 	bl	8004db0 <chMtxUnlock>
    if (done == (size_t)0) {
 8005064:	2c00      	cmp	r4, #0
 8005066:	d1cf      	bne.n	8005008 <chPipeWriteTimeout.constprop.0+0x48>
 8005068:	2320      	movs	r3, #32
 800506a:	f383 8811 	msr	BASEPRI, r3
 800506e:	f384 8811 	msr	BASEPRI, r4
 8005072:	ebaa 0a07 	sub.w	sl, sl, r7
  PW_UNLOCK(pp);
 8005076:	4808      	ldr	r0, [pc, #32]	; (8005098 <chPipeWriteTimeout.constprop.0+0xd8>)
 8005078:	f7ff fe9a 	bl	8004db0 <chMtxUnlock>
 800507c:	4650      	mov	r0, sl
}
 800507e:	b003      	add	sp, #12
 8005080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 8005084:	4622      	mov	r2, r4
 8005086:	4641      	mov	r1, r8
 8005088:	f7fb f960 	bl	800034c <memcpy>
    pp->wrptr += n;
 800508c:	68ab      	ldr	r3, [r5, #8]
 800508e:	4423      	add	r3, r4
 8005090:	60ab      	str	r3, [r5, #8]
 8005092:	e7e4      	b.n	800505e <chPipeWriteTimeout.constprop.0+0x9e>
 8005094:	2000088c 	.word	0x2000088c
 8005098:	200008bc 	.word	0x200008bc
 800509c:	0800b078 	.word	0x0800b078

080050a0 <chPipeReadTimeout.constprop.0>:
 *                      lower than @p n means that a timeout occurred or the
 *                      pipe went in reset state.
 *
 * @api
 */
size_t chPipeReadTimeout(pipe_t *pp, uint8_t *bp,
 80050a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t max = n;

  chDbgCheck(n > 0U);

  /* If the pipe is in reset state then returns immediately.*/
  if (pp->reset) {
 80050a4:	4c32      	ldr	r4, [pc, #200]	; (8005170 <chPipeReadTimeout.constprop.0+0xd0>)
 80050a6:	7d25      	ldrb	r5, [r4, #20]
size_t chPipeReadTimeout(pipe_t *pp, uint8_t *bp,
 80050a8:	b083      	sub	sp, #12
  if (pp->reset) {
 80050aa:	b11d      	cbz	r5, 80050b4 <chPipeReadTimeout.constprop.0+0x14>
    return (size_t)0;
 80050ac:	2000      	movs	r0, #0
  }

  PR_UNLOCK(pp);

  return max - n;
}
 80050ae:	b003      	add	sp, #12
 80050b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050b4:	468a      	mov	sl, r1
 80050b6:	4680      	mov	r8, r0
  PR_LOCK(pp);
 80050b8:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80050bc:	f7fe f900 	bl	80032c0 <chMtxLock>
 80050c0:	4657      	mov	r7, sl
    *trp = NULL;
 80050c2:	9501      	str	r5, [sp, #4]
  PC_LOCK(pp);
 80050c4:	f104 0920 	add.w	r9, r4, #32
 80050c8:	e01d      	b.n	8005106 <chPipeReadTimeout.constprop.0+0x66>
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 80050ca:	f7fb f93f 	bl	800034c <memcpy>
    memcpy((void *)bp, (void *)pp->buffer, s2);
 80050ce:	6821      	ldr	r1, [r4, #0]
 80050d0:	eb08 0006 	add.w	r0, r8, r6
 80050d4:	465a      	mov	r2, fp
 80050d6:	f7fb f939 	bl	800034c <memcpy>
    pp->rdptr = pp->buffer + s2;
 80050da:	6823      	ldr	r3, [r4, #0]
  PC_UNLOCK(pp);
 80050dc:	4648      	mov	r0, r9
    pp->rdptr = pp->buffer + s2;
 80050de:	445b      	add	r3, fp
 80050e0:	60e3      	str	r3, [r4, #12]
  PC_UNLOCK(pp);
 80050e2:	f7ff fe65 	bl	8004db0 <chMtxUnlock>
      n  -= done;
 80050e6:	1b7f      	subs	r7, r7, r5
      bp += done;
 80050e8:	44a8      	add	r8, r5
 80050ea:	2320      	movs	r3, #32
 80050ec:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 80050f0:	69a0      	ldr	r0, [r4, #24]
    chSchWakeupS(tp, msg);
 80050f2:	2100      	movs	r1, #0
  if (*trp != NULL) {
 80050f4:	b118      	cbz	r0, 80050fe <chPipeReadTimeout.constprop.0+0x5e>
    *trp = NULL;
 80050f6:	9b01      	ldr	r3, [sp, #4]
 80050f8:	61a3      	str	r3, [r4, #24]
    chSchWakeupS(tp, msg);
 80050fa:	f7fd f849 	bl	8002190 <chSchWakeupS>
 80050fe:	9b01      	ldr	r3, [sp, #4]
 8005100:	f383 8811 	msr	BASEPRI, r3
  while (n > 0U) {
 8005104:	b32f      	cbz	r7, 8005152 <chPipeReadTimeout.constprop.0+0xb2>
  PC_LOCK(pp);
 8005106:	4648      	mov	r0, r9
 8005108:	f7fe f8da 	bl	80032c0 <chMtxLock>
  s1 = (size_t)(pp->top - pp->rdptr);
 800510c:	e9d4 1303 	ldrd	r1, r3, [r4, #12]
 8005110:	6866      	ldr	r6, [r4, #4]
 8005112:	42bb      	cmp	r3, r7
 8005114:	461d      	mov	r5, r3
 8005116:	eba6 0601 	sub.w	r6, r6, r1
 800511a:	bf28      	it	cs
 800511c:	463d      	movcs	r5, r7
  pp->cnt -= n;
 800511e:	1b5b      	subs	r3, r3, r5
  if (n < s1) {
 8005120:	42b5      	cmp	r5, r6
  pp->cnt -= n;
 8005122:	6123      	str	r3, [r4, #16]
  if (n < s1) {
 8005124:	d31c      	bcc.n	8005160 <chPipeReadTimeout.constprop.0+0xc0>
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 8005126:	4632      	mov	r2, r6
    s2 = n - s1;
 8005128:	eba5 0b06 	sub.w	fp, r5, r6
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 800512c:	4640      	mov	r0, r8
  else if (n > s1) {
 800512e:	d8cc      	bhi.n	80050ca <chPipeReadTimeout.constprop.0+0x2a>
    memcpy((void *)bp, (void *)pp->rdptr, n);
 8005130:	462a      	mov	r2, r5
 8005132:	f7fb f90b 	bl	800034c <memcpy>
    pp->rdptr = pp->buffer;
 8005136:	6823      	ldr	r3, [r4, #0]
 8005138:	60e3      	str	r3, [r4, #12]
  PC_UNLOCK(pp);
 800513a:	4648      	mov	r0, r9
 800513c:	f7ff fe38 	bl	8004db0 <chMtxUnlock>
    if (done == (size_t)0) {
 8005140:	2d00      	cmp	r5, #0
 8005142:	d1d0      	bne.n	80050e6 <chPipeReadTimeout.constprop.0+0x46>
 8005144:	2320      	movs	r3, #32
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f385 8811 	msr	BASEPRI, r5
 800514e:	ebaa 0a07 	sub.w	sl, sl, r7
  PR_UNLOCK(pp);
 8005152:	4808      	ldr	r0, [pc, #32]	; (8005174 <chPipeReadTimeout.constprop.0+0xd4>)
 8005154:	f7ff fe2c 	bl	8004db0 <chMtxUnlock>
 8005158:	4650      	mov	r0, sl
}
 800515a:	b003      	add	sp, #12
 800515c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)pp->rdptr, n);
 8005160:	462a      	mov	r2, r5
 8005162:	4640      	mov	r0, r8
 8005164:	f7fb f8f2 	bl	800034c <memcpy>
    pp->rdptr += n;
 8005168:	68e3      	ldr	r3, [r4, #12]
 800516a:	442b      	add	r3, r5
 800516c:	60e3      	str	r3, [r4, #12]
 800516e:	e7e4      	b.n	800513a <chPipeReadTimeout.constprop.0+0x9a>
 8005170:	2000088c 	.word	0x2000088c
 8005174:	200008cc 	.word	0x200008cc
	...

08005180 <oslib_test_003_002_execute>:

static void oslib_test_003_002_execute(void) {
 8005180:	b530      	push	{r4, r5, lr}

  /* [3.2.1] Reading while pipe is empty.*/
  test_set_step(1);
 8005182:	4d22      	ldr	r5, [pc, #136]	; (800520c <oslib_test_003_002_execute+0x8c>)
static void oslib_test_003_002_execute(void) {
 8005184:	b085      	sub	sp, #20
  test_set_step(1);
 8005186:	2301      	movs	r3, #1
  {
    size_t n;
    uint8_t buf[PIPE_SIZE];

    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 8005188:	2110      	movs	r1, #16
 800518a:	4668      	mov	r0, sp
  test_set_step(1);
 800518c:	602b      	str	r3, [r5, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 800518e:	f7ff ff87 	bl	80050a0 <chPipeReadTimeout.constprop.0>
    test_assert(n == 0, "wrong size");
 8005192:	fab0 f080 	clz	r0, r0
 8005196:	491e      	ldr	r1, [pc, #120]	; (8005210 <oslib_test_003_002_execute+0x90>)
 8005198:	0940      	lsrs	r0, r0, #5
 800519a:	f7fb fce9 	bl	8000b70 <_test_assert>
 800519e:	b940      	cbnz	r0, 80051b2 <oslib_test_003_002_execute+0x32>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80051a0:	4c1c      	ldr	r4, [pc, #112]	; (8005214 <oslib_test_003_002_execute+0x94>)
 80051a2:	6822      	ldr	r2, [r4, #0]
 80051a4:	68e3      	ldr	r3, [r4, #12]
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d01d      	beq.n	80051e6 <oslib_test_003_002_execute+0x66>
 80051aa:	491b      	ldr	r1, [pc, #108]	; (8005218 <oslib_test_003_002_execute+0x98>)
 80051ac:	f7fb fce0 	bl	8000b70 <_test_assert>
 80051b0:	b108      	cbz	r0, 80051b6 <oslib_test_003_002_execute+0x36>
                (pipe1.wrptr == pipe1.buffer) &&
                (pipe1.cnt == PIPE_SIZE / 2),
                "invalid pipe state");
  }
  test_end_step(2);
}
 80051b2:	b005      	add	sp, #20
 80051b4:	bd30      	pop	{r4, r5, pc}
  test_set_step(2);
 80051b6:	2302      	movs	r3, #2
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 80051b8:	2010      	movs	r0, #16
  test_set_step(2);
 80051ba:	602b      	str	r3, [r5, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 80051bc:	f7ff ff00 	bl	8004fc0 <chPipeWriteTimeout.constprop.0>
    test_assert(n == PIPE_SIZE / 2, "wrong size");
 80051c0:	f1a0 0008 	sub.w	r0, r0, #8
 80051c4:	fab0 f080 	clz	r0, r0
 80051c8:	4911      	ldr	r1, [pc, #68]	; (8005210 <oslib_test_003_002_execute+0x90>)
 80051ca:	0940      	lsrs	r0, r0, #5
 80051cc:	f7fb fcd0 	bl	8000b70 <_test_assert>
 80051d0:	2800      	cmp	r0, #0
 80051d2:	d1ee      	bne.n	80051b2 <oslib_test_003_002_execute+0x32>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 80051d4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00c      	beq.n	80051f6 <oslib_test_003_002_execute+0x76>
 80051dc:	490e      	ldr	r1, [pc, #56]	; (8005218 <oslib_test_003_002_execute+0x98>)
 80051de:	f7fb fcc7 	bl	8000b70 <_test_assert>
}
 80051e2:	b005      	add	sp, #20
 80051e4:	bd30      	pop	{r4, r5, pc}
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80051e6:	68a2      	ldr	r2, [r4, #8]
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d1de      	bne.n	80051aa <oslib_test_003_002_execute+0x2a>
 80051ec:	6920      	ldr	r0, [r4, #16]
 80051ee:	fab0 f080 	clz	r0, r0
 80051f2:	0940      	lsrs	r0, r0, #5
 80051f4:	e7d9      	b.n	80051aa <oslib_test_003_002_execute+0x2a>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 80051f6:	6822      	ldr	r2, [r4, #0]
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d1ef      	bne.n	80051dc <oslib_test_003_002_execute+0x5c>
 80051fc:	6920      	ldr	r0, [r4, #16]
 80051fe:	f1a0 0008 	sub.w	r0, r0, #8
 8005202:	fab0 f080 	clz	r0, r0
 8005206:	0940      	lsrs	r0, r0, #5
 8005208:	e7e8      	b.n	80051dc <oslib_test_003_002_execute+0x5c>
 800520a:	bf00      	nop
 800520c:	2000149c 	.word	0x2000149c
 8005210:	08009ee0 	.word	0x08009ee0
 8005214:	2000088c 	.word	0x2000088c
 8005218:	08009fac 	.word	0x08009fac
 800521c:	00000000 	.word	0x00000000

08005220 <chFactoryRegisterObject.constprop.0>:
 * @retval NULL         if the object to be registered cannot be allocated or
 *                      a registered object with the same name exists.
 *
 * @api
 */
registered_object_t *chFactoryRegisterObject(const char *name,
 8005220:	b538      	push	{r3, r4, r5, lr}
 8005222:	4605      	mov	r5, r0
                                             void *objp) {
  registered_object_t *rop;

  F_LOCK();
 8005224:	4807      	ldr	r0, [pc, #28]	; (8005244 <chFactoryRegisterObject.constprop.0+0x24>)
 8005226:	f7fe f84b 	bl	80032c0 <chMtxLock>

  rop = (registered_object_t *)dyn_create_object_pool(name,
 800522a:	4a07      	ldr	r2, [pc, #28]	; (8005248 <chFactoryRegisterObject.constprop.0+0x28>)
 800522c:	4807      	ldr	r0, [pc, #28]	; (800524c <chFactoryRegisterObject.constprop.0+0x2c>)
 800522e:	1f11      	subs	r1, r2, #4
 8005230:	f7fc ff3e 	bl	80020b0 <dyn_create_object_pool>
                                                      &ch_factory.obj_list,
                                                      &ch_factory.obj_pool);
  if (rop != NULL) {
 8005234:	4604      	mov	r4, r0
 8005236:	b100      	cbz	r0, 800523a <chFactoryRegisterObject.constprop.0+0x1a>
    /* Initializing registered object data.*/
    rop->objp = objp;
 8005238:	6105      	str	r5, [r0, #16]
  }

  F_UNLOCK();
 800523a:	4802      	ldr	r0, [pc, #8]	; (8005244 <chFactoryRegisterObject.constprop.0+0x24>)
 800523c:	f7ff fdb8 	bl	8004db0 <chMtxUnlock>

  return rop;
}
 8005240:	4620      	mov	r0, r4
 8005242:	bd38      	pop	{r3, r4, r5, pc}
 8005244:	20000a28 	.word	0x20000a28
 8005248:	20000a3c 	.word	0x20000a3c
 800524c:	08009fc0 	.word	0x08009fc0

08005250 <chFactoryFindObject.constprop.0>:
 * @retval NULL         if a registered object with the specified name
 *                      does not exist.
 *
 * @api
 */
registered_object_t *chFactoryFindObject(const char *name) {
 8005250:	b538      	push	{r3, r4, r5, lr}
  registered_object_t *rop;

  F_LOCK();
 8005252:	4d07      	ldr	r5, [pc, #28]	; (8005270 <chFactoryFindObject.constprop.0+0x20>)
 8005254:	4628      	mov	r0, r5
 8005256:	f7fe f833 	bl	80032c0 <chMtxLock>

  rop = (registered_object_t *)dyn_find_object(name, &ch_factory.obj_list);
 800525a:	f105 0110 	add.w	r1, r5, #16
 800525e:	4805      	ldr	r0, [pc, #20]	; (8005274 <chFactoryFindObject.constprop.0+0x24>)
 8005260:	f7fc ff06 	bl	8002070 <dyn_find_object>
 8005264:	4604      	mov	r4, r0

  F_UNLOCK();
 8005266:	4628      	mov	r0, r5
 8005268:	f7ff fda2 	bl	8004db0 <chMtxUnlock>

  return rop;
}
 800526c:	4620      	mov	r0, r4
 800526e:	bd38      	pop	{r3, r4, r5, pc}
 8005270:	20000a28 	.word	0x20000a28
 8005274:	08009fc0 	.word	0x08009fc0
	...

08005280 <chFactoryCreateBuffer.constprop.0>:
 * @retval NULL         if the dynamic buffer object cannot be allocated or
 *                      a dynamic buffer object with the same name exists.
 *
 * @api
 */
dyn_buffer_t *chFactoryCreateBuffer(const char *name, size_t size) {
 8005280:	b510      	push	{r4, lr}
  dyn_buffer_t *dbp;

  F_LOCK();
 8005282:	480a      	ldr	r0, [pc, #40]	; (80052ac <chFactoryCreateBuffer.constprop.0+0x2c>)
 8005284:	f7fe f81c 	bl	80032c0 <chMtxLock>

  dbp = (dyn_buffer_t *)dyn_create_object_heap(name,
 8005288:	4909      	ldr	r1, [pc, #36]	; (80052b0 <chFactoryCreateBuffer.constprop.0+0x30>)
 800528a:	480a      	ldr	r0, [pc, #40]	; (80052b4 <chFactoryCreateBuffer.constprop.0+0x34>)
 800528c:	2280      	movs	r2, #128	; 0x80
 800528e:	f7ff fe67 	bl	8004f60 <dyn_create_object_heap>
                                               &ch_factory.buf_list,
                                               size);
  if (dbp != NULL) {
 8005292:	4604      	mov	r4, r0
 8005294:	b120      	cbz	r0, 80052a0 <chFactoryCreateBuffer.constprop.0+0x20>
    /* Initializing buffer object data.*/
    memset((void *)(dbp + 1), 0, size);
 8005296:	2280      	movs	r2, #128	; 0x80
 8005298:	2100      	movs	r1, #0
 800529a:	3010      	adds	r0, #16
 800529c:	f7fb f8f0 	bl	8000480 <memset>
  }

  F_UNLOCK();
 80052a0:	4802      	ldr	r0, [pc, #8]	; (80052ac <chFactoryCreateBuffer.constprop.0+0x2c>)
 80052a2:	f7ff fd85 	bl	8004db0 <chMtxUnlock>

  return dbp;
}
 80052a6:	4620      	mov	r0, r4
 80052a8:	bd10      	pop	{r4, pc}
 80052aa:	bf00      	nop
 80052ac:	20000a28 	.word	0x20000a28
 80052b0:	20000a4c 	.word	0x20000a4c
 80052b4:	08009fc8 	.word	0x08009fc8
	...

080052c0 <chFactoryFindBuffer.constprop.0>:
 * @retval NULL         if a dynamic buffer object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_buffer_t *chFactoryFindBuffer(const char *name) {
 80052c0:	b538      	push	{r3, r4, r5, lr}
  dyn_buffer_t *dbp;

  F_LOCK();
 80052c2:	4d07      	ldr	r5, [pc, #28]	; (80052e0 <chFactoryFindBuffer.constprop.0+0x20>)
 80052c4:	4628      	mov	r0, r5
 80052c6:	f7fd fffb 	bl	80032c0 <chMtxLock>

  dbp = (dyn_buffer_t *)dyn_find_object(name, &ch_factory.buf_list);
 80052ca:	f105 0124 	add.w	r1, r5, #36	; 0x24
 80052ce:	4805      	ldr	r0, [pc, #20]	; (80052e4 <chFactoryFindBuffer.constprop.0+0x24>)
 80052d0:	f7fc fece 	bl	8002070 <dyn_find_object>
 80052d4:	4604      	mov	r4, r0

  F_UNLOCK();
 80052d6:	4628      	mov	r0, r5
 80052d8:	f7ff fd6a 	bl	8004db0 <chMtxUnlock>

  return dbp;
}
 80052dc:	4620      	mov	r0, r4
 80052de:	bd38      	pop	{r3, r4, r5, pc}
 80052e0:	20000a28 	.word	0x20000a28
 80052e4:	08009fc8 	.word	0x08009fc8
	...

080052f0 <chFactoryCreateSemaphore.constprop.0>:
 * @retval NULL         if the dynamic semaphore object cannot be allocated or
 *                      a dynamic semaphore with the same name exists.
 *
 * @api
 */
dyn_semaphore_t *chFactoryCreateSemaphore(const char *name, cnt_t n) {
 80052f0:	b510      	push	{r4, lr}
  dyn_semaphore_t *dsp;

  F_LOCK();
 80052f2:	480a      	ldr	r0, [pc, #40]	; (800531c <chFactoryCreateSemaphore.constprop.0+0x2c>)
 80052f4:	f7fd ffe4 	bl	80032c0 <chMtxLock>

  dsp = (dyn_semaphore_t *)dyn_create_object_pool(name,
 80052f8:	4a09      	ldr	r2, [pc, #36]	; (8005320 <chFactoryCreateSemaphore.constprop.0+0x30>)
 80052fa:	480a      	ldr	r0, [pc, #40]	; (8005324 <chFactoryCreateSemaphore.constprop.0+0x34>)
 80052fc:	1f11      	subs	r1, r2, #4
 80052fe:	f7fc fed7 	bl	80020b0 <dyn_create_object_pool>
                                                  &ch_factory.sem_list,
                                                  &ch_factory.sem_pool);
  if (dsp != NULL) {
 8005302:	4604      	mov	r4, r0
 8005304:	b128      	cbz	r0, 8005312 <chFactoryCreateSemaphore.constprop.0+0x22>
    /* Initializing semaphore object dataa.*/
    chSemObjectInit(&dsp->sem, n);
 8005306:	f100 0310 	add.w	r3, r0, #16
  tqp->prev = (thread_t *)tqp;
 800530a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800530e:	2200      	movs	r2, #0
 8005310:	6182      	str	r2, [r0, #24]
  }

  F_UNLOCK();
 8005312:	4802      	ldr	r0, [pc, #8]	; (800531c <chFactoryCreateSemaphore.constprop.0+0x2c>)
 8005314:	f7ff fd4c 	bl	8004db0 <chMtxUnlock>

  return dsp;
}
 8005318:	4620      	mov	r0, r4
 800531a:	bd10      	pop	{r4, pc}
 800531c:	20000a28 	.word	0x20000a28
 8005320:	20000a54 	.word	0x20000a54
 8005324:	08009fd0 	.word	0x08009fd0
	...

08005330 <chFactoryFindSemaphore.constprop.0>:
 * @retval NULL         if a dynamic semaphore object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_semaphore_t *chFactoryFindSemaphore(const char *name) {
 8005330:	b538      	push	{r3, r4, r5, lr}
  dyn_semaphore_t *dsp;

  F_LOCK();
 8005332:	4d07      	ldr	r5, [pc, #28]	; (8005350 <chFactoryFindSemaphore.constprop.0+0x20>)
 8005334:	4628      	mov	r0, r5
 8005336:	f7fd ffc3 	bl	80032c0 <chMtxLock>

  dsp = (dyn_semaphore_t *)dyn_find_object(name, &ch_factory.sem_list);
 800533a:	f105 0128 	add.w	r1, r5, #40	; 0x28
 800533e:	4805      	ldr	r0, [pc, #20]	; (8005354 <chFactoryFindSemaphore.constprop.0+0x24>)
 8005340:	f7fc fe96 	bl	8002070 <dyn_find_object>
 8005344:	4604      	mov	r4, r0

  F_UNLOCK();
 8005346:	4628      	mov	r0, r5
 8005348:	f7ff fd32 	bl	8004db0 <chMtxUnlock>

  return dsp;
}
 800534c:	4620      	mov	r0, r4
 800534e:	bd38      	pop	{r3, r4, r5, pc}
 8005350:	20000a28 	.word	0x20000a28
 8005354:	08009fd0 	.word	0x08009fd0
	...

08005360 <chFactoryCreateMailbox.constprop.0>:
 * @retval NULL         if the dynamic mailbox object cannot be allocated or
 *                      a dynamic mailbox object with the same name exists.
 *
 * @api
 */
dyn_mailbox_t *chFactoryCreateMailbox(const char *name, size_t n) {
 8005360:	b538      	push	{r3, r4, r5, lr}
  dyn_mailbox_t *dmp;

  F_LOCK();
 8005362:	4811      	ldr	r0, [pc, #68]	; (80053a8 <chFactoryCreateMailbox.constprop.0+0x48>)
 8005364:	f7fd ffac 	bl	80032c0 <chMtxLock>

  dmp = (dyn_mailbox_t *)dyn_create_object_heap(name,
 8005368:	4910      	ldr	r1, [pc, #64]	; (80053ac <chFactoryCreateMailbox.constprop.0+0x4c>)
 800536a:	4811      	ldr	r0, [pc, #68]	; (80053b0 <chFactoryCreateMailbox.constprop.0+0x50>)
 800536c:	2278      	movs	r2, #120	; 0x78
 800536e:	f7ff fdf7 	bl	8004f60 <dyn_create_object_heap>
                                                &ch_factory.mbx_list,
                                                sizeof (dyn_mailbox_t) +
                                                (n * sizeof (msg_t)));
  if (dmp != NULL) {
 8005372:	4604      	mov	r4, r0
 8005374:	b198      	cbz	r0, 800539e <chFactoryCreateMailbox.constprop.0+0x3e>
    /* Initializing mailbox object data.*/
    chMBObjectInit(&dmp->mbx, (msg_t *)(dmp + 1), n);
 8005376:	f100 0338 	add.w	r3, r0, #56	; 0x38
  chThdQueueObjectInit(&mbp->qw);
 800537a:	f104 0128 	add.w	r1, r4, #40	; 0x28
  chThdQueueObjectInit(&mbp->qr);
 800537e:	f104 0230 	add.w	r2, r4, #48	; 0x30
  mbp->wrptr  = buf;
 8005382:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8005386:	e9c4 110a 	strd	r1, r1, [r4, #40]	; 0x28
 800538a:	e9c4 220c 	strd	r2, r2, [r4, #48]	; 0x30
  mbp->top    = &buf[n];
 800538e:	f100 0578 	add.w	r5, r0, #120	; 0x78
  mbp->cnt    = (size_t)0;
 8005392:	2000      	movs	r0, #0
  mbp->buffer = buf;
 8005394:	6123      	str	r3, [r4, #16]
  mbp->top    = &buf[n];
 8005396:	6165      	str	r5, [r4, #20]
  mbp->cnt    = (size_t)0;
 8005398:	6220      	str	r0, [r4, #32]
  mbp->reset  = false;
 800539a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  }

  F_UNLOCK();
 800539e:	4802      	ldr	r0, [pc, #8]	; (80053a8 <chFactoryCreateMailbox.constprop.0+0x48>)
 80053a0:	f7ff fd06 	bl	8004db0 <chMtxUnlock>

  return dmp;
}
 80053a4:	4620      	mov	r0, r4
 80053a6:	bd38      	pop	{r3, r4, r5, pc}
 80053a8:	20000a28 	.word	0x20000a28
 80053ac:	20000a64 	.word	0x20000a64
 80053b0:	08009fd8 	.word	0x08009fd8
	...

080053c0 <chFactoryFindMailbox.constprop.0>:
 * @retval NULL         if a dynamic mailbox object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_mailbox_t *chFactoryFindMailbox(const char *name) {
 80053c0:	b538      	push	{r3, r4, r5, lr}
  dyn_mailbox_t *dmp;

  F_LOCK();
 80053c2:	4d07      	ldr	r5, [pc, #28]	; (80053e0 <chFactoryFindMailbox.constprop.0+0x20>)
 80053c4:	4628      	mov	r0, r5
 80053c6:	f7fd ff7b 	bl	80032c0 <chMtxLock>

  dmp = (dyn_mailbox_t *)dyn_find_object(name, &ch_factory.mbx_list);
 80053ca:	f105 013c 	add.w	r1, r5, #60	; 0x3c
 80053ce:	4805      	ldr	r0, [pc, #20]	; (80053e4 <chFactoryFindMailbox.constprop.0+0x24>)
 80053d0:	f7fc fe4e 	bl	8002070 <dyn_find_object>
 80053d4:	4604      	mov	r4, r0

  F_UNLOCK();
 80053d6:	4628      	mov	r0, r5
 80053d8:	f7ff fcea 	bl	8004db0 <chMtxUnlock>

  return dmp;
}
 80053dc:	4620      	mov	r0, r4
 80053de:	bd38      	pop	{r3, r4, r5, pc}
 80053e0:	20000a28 	.word	0x20000a28
 80053e4:	08009fd8 	.word	0x08009fd8
	...

080053f0 <chFactoryCreateObjectsFIFO.constprop.0>:
 *                      allocated or a dynamic "objects FIFO" object with
 *                      the same name exists.
 *
 * @api
 */
dyn_objects_fifo_t *chFactoryCreateObjectsFIFO(const char *name,
 80053f0:	b570      	push	{r4, r5, r6, lr}
                                               size_t objsize,
                                               size_t objn,
                                               unsigned objalign) {
  dyn_objects_fifo_t *dofp;

  F_LOCK();
 80053f2:	4818      	ldr	r0, [pc, #96]	; (8005454 <chFactoryCreateObjectsFIFO.constprop.0+0x64>)
 80053f4:	f7fd ff64 	bl	80032c0 <chMtxLock>

  dofp = (dyn_objects_fifo_t *)dyn_create_object_heap(name,
 80053f8:	4917      	ldr	r1, [pc, #92]	; (8005458 <chFactoryCreateObjectsFIFO.constprop.0+0x68>)
 80053fa:	4818      	ldr	r0, [pc, #96]	; (800545c <chFactoryCreateObjectsFIFO.constprop.0+0x6c>)
 80053fc:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8005400:	f7ff fdae 	bl	8004f60 <dyn_create_object_heap>
                                                      &ch_factory.fifo_list,
                                                      sizeof (dyn_objects_fifo_t) +
                                                      (objn * sizeof (msg_t)) +
                                                      (objn * objsize));
  if (dofp != NULL) {
 8005404:	4604      	mov	r4, r0
 8005406:	b300      	cbz	r0, 800544a <chFactoryCreateObjectsFIFO.constprop.0+0x5a>
  mp->next = NULL;
 8005408:	2600      	movs	r6, #0
    msg_t *msgbuf = (msg_t *)(dofp + 1);

    /* Initializing mailbox object data.*/
    chFifoObjectInitAligned(&dofp->fifo, objsize, objn, objalign,
                            (void *)&msgbuf[objn], msgbuf);
 800540a:	f100 0594 	add.w	r5, r0, #148	; 0x94
  mp->object_size = size;
 800540e:	2210      	movs	r2, #16
  mp->align = align;
 8005410:	2304      	movs	r3, #4
                                           size_t objn, unsigned objalign,
                                           void *objbuf, msg_t *msgbuf) {

  chDbgCheck((objsize >= objalign) && ((objsize % objalign) == 0U));

  chGuardedPoolObjectInitAligned(&ofp->free, objsize, objalign);
 8005412:	3010      	adds	r0, #16
 8005414:	e9c4 2308 	strd	r2, r3, [r4, #32]
  chGuardedPoolLoadArray(&ofp->free, objbuf, objn);
 8005418:	4629      	mov	r1, r5
 800541a:	e9c4 0004 	strd	r0, r0, [r4, #16]
  mp->next = NULL;
 800541e:	61e6      	str	r6, [r4, #28]
  mp->provider = provider;
 8005420:	62a6      	str	r6, [r4, #40]	; 0x28
 8005422:	61a6      	str	r6, [r4, #24]
 8005424:	f7fe ffec 	bl	8004400 <chGuardedPoolLoadArray>
    msg_t *msgbuf = (msg_t *)(dofp + 1);
 8005428:	f104 0354 	add.w	r3, r4, #84	; 0x54
  chThdQueueObjectInit(&mbp->qw);
 800542c:	f104 0144 	add.w	r1, r4, #68	; 0x44
  chThdQueueObjectInit(&mbp->qr);
 8005430:	f104 024c 	add.w	r2, r4, #76	; 0x4c
  mbp->wrptr  = buf;
 8005434:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8005438:	e9c4 1111 	strd	r1, r1, [r4, #68]	; 0x44
 800543c:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
  mbp->top    = &buf[n];
 8005440:	6325      	str	r5, [r4, #48]	; 0x30
  mbp->cnt    = (size_t)0;
 8005442:	63e6      	str	r6, [r4, #60]	; 0x3c
  mbp->reset  = false;
 8005444:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  mbp->buffer = buf;
 8005448:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  F_UNLOCK();
 800544a:	4802      	ldr	r0, [pc, #8]	; (8005454 <chFactoryCreateObjectsFIFO.constprop.0+0x64>)
 800544c:	f7ff fcb0 	bl	8004db0 <chMtxUnlock>

  return dofp;
}
 8005450:	4620      	mov	r0, r4
 8005452:	bd70      	pop	{r4, r5, r6, pc}
 8005454:	20000a28 	.word	0x20000a28
 8005458:	20000a68 	.word	0x20000a68
 800545c:	08009fe0 	.word	0x08009fe0

08005460 <chFactoryFindObjectsFIFO.constprop.0>:
 * @retval NULL         if a dynamic "objects FIFO" object with the specified
 *                      name does not exist.
 *
 * @api
 */
dyn_objects_fifo_t *chFactoryFindObjectsFIFO(const char *name) {
 8005460:	b538      	push	{r3, r4, r5, lr}
  dyn_objects_fifo_t *dofp;

  F_LOCK();
 8005462:	4d07      	ldr	r5, [pc, #28]	; (8005480 <chFactoryFindObjectsFIFO.constprop.0+0x20>)
 8005464:	4628      	mov	r0, r5
 8005466:	f7fd ff2b 	bl	80032c0 <chMtxLock>

  dofp = (dyn_objects_fifo_t *)dyn_find_object(name, &ch_factory.fifo_list);
 800546a:	f105 0140 	add.w	r1, r5, #64	; 0x40
 800546e:	4805      	ldr	r0, [pc, #20]	; (8005484 <chFactoryFindObjectsFIFO.constprop.0+0x24>)
 8005470:	f7fc fdfe 	bl	8002070 <dyn_find_object>
 8005474:	4604      	mov	r4, r0

  F_UNLOCK();
 8005476:	4628      	mov	r0, r5
 8005478:	f7ff fc9a 	bl	8004db0 <chMtxUnlock>

  return dofp;
}
 800547c:	4620      	mov	r0, r4
 800547e:	bd38      	pop	{r3, r4, r5, pc}
 8005480:	20000a28 	.word	0x20000a28
 8005484:	08009fe0 	.word	0x08009fe0
	...

08005490 <chFactoryCreatePipe.constprop.0>:
 *                      allocated or a dynamic pipe object with
 *                      the same name exists.
 *
 * @api
 */
dyn_pipe_t *chFactoryCreatePipe(const char *name, size_t size) {
 8005490:	b538      	push	{r3, r4, r5, lr}
  dyn_pipe_t *dpp;

  F_LOCK();
 8005492:	4815      	ldr	r0, [pc, #84]	; (80054e8 <chFactoryCreatePipe.constprop.0+0x58>)
 8005494:	f7fd ff14 	bl	80032c0 <chMtxLock>

  dpp = (dyn_pipe_t *)dyn_create_object_heap(name,
 8005498:	4914      	ldr	r1, [pc, #80]	; (80054ec <chFactoryCreatePipe.constprop.0+0x5c>)
 800549a:	4815      	ldr	r0, [pc, #84]	; (80054f0 <chFactoryCreatePipe.constprop.0+0x60>)
 800549c:	2270      	movs	r2, #112	; 0x70
 800549e:	f7ff fd5f 	bl	8004f60 <dyn_create_object_heap>
                                             &ch_factory.pipe_list,
                                             sizeof (dyn_pipe_t) + size);
  if (dpp != NULL) {
 80054a2:	4604      	mov	r4, r0
 80054a4:	b1d8      	cbz	r0, 80054de <chFactoryCreatePipe.constprop.0+0x4e>
    /* Initializing mailbox object data.*/
    chPipeObjectInit(&dpp->pipe, (uint8_t *)(dpp + 1), size);
 80054a6:	f100 0260 	add.w	r2, r0, #96	; 0x60
  pp->cnt    = (size_t)0;
 80054aa:	2300      	movs	r3, #0
  pp->top    = &buf[n];
 80054ac:	f100 0570 	add.w	r5, r0, #112	; 0x70
  pp->wrptr  = buf;
 80054b0:	e9c4 2206 	strd	r2, r2, [r4, #24]
  PC_INIT(pp);
 80054b4:	3030      	adds	r0, #48	; 0x30
  PW_INIT(pp);
 80054b6:	f104 0140 	add.w	r1, r4, #64	; 0x40
  pp->buffer = buf;
 80054ba:	6122      	str	r2, [r4, #16]
  PR_INIT(pp);
 80054bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
  pp->rtr    = NULL;
 80054c0:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 80054c4:	e9c4 000c 	strd	r0, r0, [r4, #48]	; 0x30
 80054c8:	e9c4 1110 	strd	r1, r1, [r4, #64]	; 0x40
 80054cc:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
  pp->top    = &buf[n];
 80054d0:	6165      	str	r5, [r4, #20]
  pp->cnt    = (size_t)0;
 80054d2:	6223      	str	r3, [r4, #32]
  pp->reset  = false;
 80054d4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  mp->owner = NULL;
 80054d8:	63a3      	str	r3, [r4, #56]	; 0x38
 80054da:	64a3      	str	r3, [r4, #72]	; 0x48
 80054dc:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  F_UNLOCK();
 80054de:	4802      	ldr	r0, [pc, #8]	; (80054e8 <chFactoryCreatePipe.constprop.0+0x58>)
 80054e0:	f7ff fc66 	bl	8004db0 <chMtxUnlock>

  return dpp;
}
 80054e4:	4620      	mov	r0, r4
 80054e6:	bd38      	pop	{r3, r4, r5, pc}
 80054e8:	20000a28 	.word	0x20000a28
 80054ec:	20000a6c 	.word	0x20000a6c
 80054f0:	08009fe8 	.word	0x08009fe8
	...

08005500 <chFactoryFindPipe.constprop.0>:
 * @retval NULL         if a dynamic pipe object with the specified
 *                      name does not exist.
 *
 * @api
 */
dyn_pipe_t *chFactoryFindPipe(const char *name) {
 8005500:	b538      	push	{r3, r4, r5, lr}
  dyn_pipe_t *dpp;

  F_LOCK();
 8005502:	4d07      	ldr	r5, [pc, #28]	; (8005520 <chFactoryFindPipe.constprop.0+0x20>)
 8005504:	4628      	mov	r0, r5
 8005506:	f7fd fedb 	bl	80032c0 <chMtxLock>

  dpp = (dyn_pipe_t *)dyn_find_object(name, &ch_factory.pipe_list);
 800550a:	f105 0144 	add.w	r1, r5, #68	; 0x44
 800550e:	4805      	ldr	r0, [pc, #20]	; (8005524 <chFactoryFindPipe.constprop.0+0x24>)
 8005510:	f7fc fdae 	bl	8002070 <dyn_find_object>
 8005514:	4604      	mov	r4, r0

  F_UNLOCK();
 8005516:	4628      	mov	r0, r5
 8005518:	f7ff fc4a 	bl	8004db0 <chMtxUnlock>

  return dpp;
}
 800551c:	4620      	mov	r0, r4
 800551e:	bd38      	pop	{r3, r4, r5, pc}
 8005520:	20000a28 	.word	0x20000a28
 8005524:	08009fe8 	.word	0x08009fe8
	...

08005530 <oslib_test_003_001_execute>:
static void oslib_test_003_001_execute(void) {
 8005530:	b570      	push	{r4, r5, r6, lr}
  PC_LOCK(pp);
 8005532:	4c1f      	ldr	r4, [pc, #124]	; (80055b0 <oslib_test_003_001_execute+0x80>)
  test_set_step(1);
 8005534:	4e1f      	ldr	r6, [pc, #124]	; (80055b4 <oslib_test_003_001_execute+0x84>)
 8005536:	2501      	movs	r5, #1
static void oslib_test_003_001_execute(void) {
 8005538:	b084      	sub	sp, #16
 800553a:	f104 0020 	add.w	r0, r4, #32
  test_set_step(1);
 800553e:	6035      	str	r5, [r6, #0]
 8005540:	f7fd febe 	bl	80032c0 <chMtxLock>
  pp->wrptr = pp->buffer;
 8005544:	6823      	ldr	r3, [r4, #0]
  pp->reset = true;
 8005546:	7525      	strb	r5, [r4, #20]
  pp->cnt   = (size_t)0;
 8005548:	2200      	movs	r2, #0
  pp->rdptr = pp->buffer;
 800554a:	e9c4 3302 	strd	r3, r3, [r4, #8]
  pp->cnt   = (size_t)0;
 800554e:	6122      	str	r2, [r4, #16]
 8005550:	2320      	movs	r3, #32
 8005552:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8005556:	69a0      	ldr	r0, [r4, #24]
 8005558:	b128      	cbz	r0, 8005566 <oslib_test_003_001_execute+0x36>
    tp->u.rdymsg = msg;
 800555a:	f06f 0301 	mvn.w	r3, #1
 800555e:	6243      	str	r3, [r0, #36]	; 0x24
    *trp = NULL;
 8005560:	61a2      	str	r2, [r4, #24]
    (void) chSchReadyI(tp);
 8005562:	f7fb ff1d 	bl	80013a0 <chSchReadyI>
  if (*trp != NULL) {
 8005566:	69e0      	ldr	r0, [r4, #28]
 8005568:	b130      	cbz	r0, 8005578 <oslib_test_003_001_execute+0x48>
    tp->u.rdymsg = msg;
 800556a:	f06f 0301 	mvn.w	r3, #1
 800556e:	6243      	str	r3, [r0, #36]	; 0x24
    *trp = NULL;
 8005570:	2300      	movs	r3, #0
 8005572:	61e3      	str	r3, [r4, #28]
    (void) chSchReadyI(tp);
 8005574:	f7fb ff14 	bl	80013a0 <chSchReadyI>
  chSchRescheduleS();
 8005578:	f7fe fa4a 	bl	8003a10 <chSchRescheduleS>
 800557c:	2500      	movs	r5, #0
 800557e:	f385 8811 	msr	BASEPRI, r5
  PC_UNLOCK(pp);
 8005582:	480d      	ldr	r0, [pc, #52]	; (80055b8 <oslib_test_003_001_execute+0x88>)
 8005584:	f7ff fc14 	bl	8004db0 <chMtxUnlock>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005588:	6822      	ldr	r2, [r4, #0]
 800558a:	68e3      	ldr	r3, [r4, #12]
 800558c:	4293      	cmp	r3, r2
 800558e:	d006      	beq.n	800559e <oslib_test_003_001_execute+0x6e>
 8005590:	4628      	mov	r0, r5
 8005592:	490a      	ldr	r1, [pc, #40]	; (80055bc <oslib_test_003_001_execute+0x8c>)
 8005594:	f7fb faec 	bl	8000b70 <_test_assert>
 8005598:	b190      	cbz	r0, 80055c0 <oslib_test_003_001_execute+0x90>
}
 800559a:	b004      	add	sp, #16
 800559c:	bd70      	pop	{r4, r5, r6, pc}
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800559e:	68a2      	ldr	r2, [r4, #8]
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d1f5      	bne.n	8005590 <oslib_test_003_001_execute+0x60>
 80055a4:	6925      	ldr	r5, [r4, #16]
 80055a6:	fab5 f085 	clz	r0, r5
 80055aa:	0940      	lsrs	r0, r0, #5
 80055ac:	e7f1      	b.n	8005592 <oslib_test_003_001_execute+0x62>
 80055ae:	bf00      	nop
 80055b0:	2000088c 	.word	0x2000088c
 80055b4:	2000149c 	.word	0x2000149c
 80055b8:	200008ac 	.word	0x200008ac
 80055bc:	08009fac 	.word	0x08009fac
  test_set_step(2);
 80055c0:	2302      	movs	r3, #2
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 80055c2:	2010      	movs	r0, #16
  test_set_step(2);
 80055c4:	6033      	str	r3, [r6, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 80055c6:	f7ff fcfb 	bl	8004fc0 <chPipeWriteTimeout.constprop.0>
    test_assert(n == 0, "not reset");
 80055ca:	fab0 f080 	clz	r0, r0
 80055ce:	49c3      	ldr	r1, [pc, #780]	; (80058dc <oslib_test_003_001_execute+0x3ac>)
 80055d0:	0940      	lsrs	r0, r0, #5
 80055d2:	f7fb facd 	bl	8000b70 <_test_assert>
 80055d6:	2800      	cmp	r0, #0
 80055d8:	d1df      	bne.n	800559a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80055da:	6822      	ldr	r2, [r4, #0]
 80055dc:	68e3      	ldr	r3, [r4, #12]
 80055de:	4293      	cmp	r3, r2
 80055e0:	f000 818d 	beq.w	80058fe <oslib_test_003_001_execute+0x3ce>
 80055e4:	49be      	ldr	r1, [pc, #760]	; (80058e0 <oslib_test_003_001_execute+0x3b0>)
 80055e6:	f7fb fac3 	bl	8000b70 <_test_assert>
 80055ea:	2800      	cmp	r0, #0
 80055ec:	d1d5      	bne.n	800559a <oslib_test_003_001_execute+0x6a>
  test_set_step(3);
 80055ee:	2303      	movs	r3, #3
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 80055f0:	2110      	movs	r1, #16
 80055f2:	4668      	mov	r0, sp
  test_set_step(3);
 80055f4:	6033      	str	r3, [r6, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 80055f6:	f7ff fd53 	bl	80050a0 <chPipeReadTimeout.constprop.0>
    test_assert(n == 0, "not reset");
 80055fa:	fab0 f080 	clz	r0, r0
 80055fe:	49b7      	ldr	r1, [pc, #732]	; (80058dc <oslib_test_003_001_execute+0x3ac>)
 8005600:	0940      	lsrs	r0, r0, #5
 8005602:	f7fb fab5 	bl	8000b70 <_test_assert>
 8005606:	2800      	cmp	r0, #0
 8005608:	d1c7      	bne.n	800559a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800560a:	6822      	ldr	r2, [r4, #0]
 800560c:	68e3      	ldr	r3, [r4, #12]
 800560e:	4293      	cmp	r3, r2
 8005610:	f000 8187 	beq.w	8005922 <oslib_test_003_001_execute+0x3f2>
 8005614:	49b2      	ldr	r1, [pc, #712]	; (80058e0 <oslib_test_003_001_execute+0x3b0>)
 8005616:	f7fb faab 	bl	8000b70 <_test_assert>
 800561a:	2800      	cmp	r0, #0
 800561c:	d1bd      	bne.n	800559a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800561e:	6822      	ldr	r2, [r4, #0]
 8005620:	68e3      	ldr	r3, [r4, #12]
 *
 * @api
 */
static inline void chPipeResume(pipe_t *pp) {

  pp->reset = false;
 8005622:	7520      	strb	r0, [r4, #20]
  test_set_step(4);
 8005624:	2104      	movs	r1, #4
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005626:	4293      	cmp	r3, r2
  test_set_step(4);
 8005628:	6031      	str	r1, [r6, #0]
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800562a:	f000 8171 	beq.w	8005910 <oslib_test_003_001_execute+0x3e0>
 800562e:	49ac      	ldr	r1, [pc, #688]	; (80058e0 <oslib_test_003_001_execute+0x3b0>)
 8005630:	f7fb fa9e 	bl	8000b70 <_test_assert>
 8005634:	2800      	cmp	r0, #0
 8005636:	d1b0      	bne.n	800559a <oslib_test_003_001_execute+0x6a>
  test_set_step(5);
 8005638:	2305      	movs	r3, #5
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800563a:	2010      	movs	r0, #16
  test_set_step(5);
 800563c:	6033      	str	r3, [r6, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800563e:	f7ff fcbf 	bl	8004fc0 <chPipeWriteTimeout.constprop.0>
    test_assert(n == PIPE_SIZE, "wrong size");
 8005642:	f1a0 0010 	sub.w	r0, r0, #16
 8005646:	fab0 f080 	clz	r0, r0
 800564a:	49a6      	ldr	r1, [pc, #664]	; (80058e4 <oslib_test_003_001_execute+0x3b4>)
 800564c:	0940      	lsrs	r0, r0, #5
 800564e:	f7fb fa8f 	bl	8000b70 <_test_assert>
 8005652:	2800      	cmp	r0, #0
 8005654:	d1a1      	bne.n	800559a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005656:	6822      	ldr	r2, [r4, #0]
 8005658:	68e3      	ldr	r3, [r4, #12]
 800565a:	4293      	cmp	r3, r2
 800565c:	f000 816a 	beq.w	8005934 <oslib_test_003_001_execute+0x404>
 8005660:	499f      	ldr	r1, [pc, #636]	; (80058e0 <oslib_test_003_001_execute+0x3b0>)
 8005662:	f7fb fa85 	bl	8000b70 <_test_assert>
 8005666:	2800      	cmp	r0, #0
 8005668:	d197      	bne.n	800559a <oslib_test_003_001_execute+0x6a>
  test_set_step(6);
 800566a:	2306      	movs	r3, #6
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 800566c:	2110      	movs	r1, #16
 800566e:	4668      	mov	r0, sp
  test_set_step(6);
 8005670:	6033      	str	r3, [r6, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 8005672:	f7ff fd15 	bl	80050a0 <chPipeReadTimeout.constprop.0>
    test_assert(n == PIPE_SIZE, "wrong size");
 8005676:	f1a0 0010 	sub.w	r0, r0, #16
 800567a:	fab0 f080 	clz	r0, r0
 800567e:	4999      	ldr	r1, [pc, #612]	; (80058e4 <oslib_test_003_001_execute+0x3b4>)
 8005680:	0940      	lsrs	r0, r0, #5
 8005682:	f7fb fa75 	bl	8000b70 <_test_assert>
 8005686:	2800      	cmp	r0, #0
 8005688:	d187      	bne.n	800559a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800568a:	6822      	ldr	r2, [r4, #0]
 800568c:	68e3      	ldr	r3, [r4, #12]
 800568e:	4293      	cmp	r3, r2
 8005690:	f000 815b 	beq.w	800594a <oslib_test_003_001_execute+0x41a>
 8005694:	4992      	ldr	r1, [pc, #584]	; (80058e0 <oslib_test_003_001_execute+0x3b0>)
 8005696:	f7fb fa6b 	bl	8000b70 <_test_assert>
 800569a:	2800      	cmp	r0, #0
 800569c:	f47f af7d 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 80056a0:	4b91      	ldr	r3, [pc, #580]	; (80058e8 <oslib_test_003_001_execute+0x3b8>)
 80056a2:	9a00      	ldr	r2, [sp, #0]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	f000 8159 	beq.w	800595c <oslib_test_003_001_execute+0x42c>
 80056aa:	2001      	movs	r0, #1
 80056ac:	498f      	ldr	r1, [pc, #572]	; (80058ec <oslib_test_003_001_execute+0x3bc>)
 80056ae:	f080 0001 	eor.w	r0, r0, #1
 80056b2:	f7fb fa5d 	bl	8000b70 <_test_assert>
 80056b6:	2800      	cmp	r0, #0
 80056b8:	f47f af6f 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
  test_set_step(7);
 80056bc:	2307      	movs	r3, #7
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 4, TIME_IMMEDIATE);
 80056be:	2004      	movs	r0, #4
  test_set_step(7);
 80056c0:	6033      	str	r3, [r6, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 4, TIME_IMMEDIATE);
 80056c2:	f7ff fc7d 	bl	8004fc0 <chPipeWriteTimeout.constprop.0>
    test_assert(n == 4, "wrong size");
 80056c6:	f1a0 0004 	sub.w	r0, r0, #4
 80056ca:	fab0 f080 	clz	r0, r0
 80056ce:	4985      	ldr	r1, [pc, #532]	; (80058e4 <oslib_test_003_001_execute+0x3b4>)
 80056d0:	0940      	lsrs	r0, r0, #5
 80056d2:	f7fb fa4d 	bl	8000b70 <_test_assert>
 80056d6:	2800      	cmp	r0, #0
 80056d8:	f47f af5f 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 80056dc:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d003      	beq.n	80056ec <oslib_test_003_001_execute+0x1bc>
 80056e4:	6822      	ldr	r2, [r4, #0]
 80056e6:	4293      	cmp	r3, r2
 80056e8:	f000 8153 	beq.w	8005992 <oslib_test_003_001_execute+0x462>
 80056ec:	497c      	ldr	r1, [pc, #496]	; (80058e0 <oslib_test_003_001_execute+0x3b0>)
 80056ee:	f7fb fa3f 	bl	8000b70 <_test_assert>
 80056f2:	2800      	cmp	r0, #0
 80056f4:	f47f af51 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
  test_set_step(8);
 80056f8:	2308      	movs	r3, #8
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE - 4, TIME_IMMEDIATE);
 80056fa:	200c      	movs	r0, #12
  test_set_step(8);
 80056fc:	6033      	str	r3, [r6, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE - 4, TIME_IMMEDIATE);
 80056fe:	f7ff fc5f 	bl	8004fc0 <chPipeWriteTimeout.constprop.0>
    test_assert(n == PIPE_SIZE - 4, "wrong size");
 8005702:	f1a0 0e0c 	sub.w	lr, r0, #12
 8005706:	f1de 0000 	rsbs	r0, lr, #0
 800570a:	eb40 000e 	adc.w	r0, r0, lr
 800570e:	4975      	ldr	r1, [pc, #468]	; (80058e4 <oslib_test_003_001_execute+0x3b4>)
 8005710:	f7fb fa2e 	bl	8000b70 <_test_assert>
 8005714:	2800      	cmp	r0, #0
 8005716:	f47f af40 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800571a:	6822      	ldr	r2, [r4, #0]
 800571c:	68e3      	ldr	r3, [r4, #12]
 800571e:	4293      	cmp	r3, r2
 8005720:	f000 813c 	beq.w	800599c <oslib_test_003_001_execute+0x46c>
 8005724:	496e      	ldr	r1, [pc, #440]	; (80058e0 <oslib_test_003_001_execute+0x3b0>)
 8005726:	f7fb fa23 	bl	8000b70 <_test_assert>
 800572a:	2800      	cmp	r0, #0
 800572c:	f47f af35 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
  test_set_step(9);
 8005730:	2309      	movs	r3, #9
    n = chPipeReadTimeout(&pipe1, buf, 4, TIME_IMMEDIATE);
 8005732:	2104      	movs	r1, #4
 8005734:	4668      	mov	r0, sp
  test_set_step(9);
 8005736:	6033      	str	r3, [r6, #0]
    n = chPipeReadTimeout(&pipe1, buf, 4, TIME_IMMEDIATE);
 8005738:	f7ff fcb2 	bl	80050a0 <chPipeReadTimeout.constprop.0>
    test_assert(n == 4, "wrong size");
 800573c:	1f05      	subs	r5, r0, #4
 800573e:	4268      	negs	r0, r5
 8005740:	4168      	adcs	r0, r5
 8005742:	4968      	ldr	r1, [pc, #416]	; (80058e4 <oslib_test_003_001_execute+0x3b4>)
 8005744:	f7fb fa14 	bl	8000b70 <_test_assert>
 8005748:	2800      	cmp	r0, #0
 800574a:	f47f af26 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr != pipe1.buffer) &&
 800574e:	6823      	ldr	r3, [r4, #0]
 8005750:	68e2      	ldr	r2, [r4, #12]
 8005752:	429a      	cmp	r2, r3
 8005754:	d003      	beq.n	800575e <oslib_test_003_001_execute+0x22e>
 8005756:	68a2      	ldr	r2, [r4, #8]
 8005758:	4293      	cmp	r3, r2
 800575a:	f000 8145 	beq.w	80059e8 <oslib_test_003_001_execute+0x4b8>
 800575e:	4960      	ldr	r1, [pc, #384]	; (80058e0 <oslib_test_003_001_execute+0x3b0>)
 8005760:	f7fb fa06 	bl	8000b70 <_test_assert>
 8005764:	2800      	cmp	r0, #0
 8005766:	f47f af18 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
    test_assert(memcmp(pipe_pattern, buf, 4) == 0, "content mismatch");
 800576a:	9800      	ldr	r0, [sp, #0]
 800576c:	4b5e      	ldr	r3, [pc, #376]	; (80058e8 <oslib_test_003_001_execute+0x3b8>)
 800576e:	495f      	ldr	r1, [pc, #380]	; (80058ec <oslib_test_003_001_execute+0x3bc>)
 8005770:	1ac2      	subs	r2, r0, r3
 8005772:	4250      	negs	r0, r2
 8005774:	4150      	adcs	r0, r2
 8005776:	f7fb f9fb 	bl	8000b70 <_test_assert>
 800577a:	2800      	cmp	r0, #0
 800577c:	f47f af0d 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
  test_set_step(10);
 8005780:	230a      	movs	r3, #10
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE - 4, TIME_IMMEDIATE);
 8005782:	210c      	movs	r1, #12
 8005784:	4668      	mov	r0, sp
  test_set_step(10);
 8005786:	6033      	str	r3, [r6, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE - 4, TIME_IMMEDIATE);
 8005788:	f7ff fc8a 	bl	80050a0 <chPipeReadTimeout.constprop.0>
    test_assert(n == PIPE_SIZE - 4, "wrong size");
 800578c:	f1a0 030c 	sub.w	r3, r0, #12
 8005790:	4258      	negs	r0, r3
 8005792:	4158      	adcs	r0, r3
 8005794:	4953      	ldr	r1, [pc, #332]	; (80058e4 <oslib_test_003_001_execute+0x3b4>)
 8005796:	f7fb f9eb 	bl	8000b70 <_test_assert>
 800579a:	2800      	cmp	r0, #0
 800579c:	f47f aefd 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80057a0:	6822      	ldr	r2, [r4, #0]
 80057a2:	68e3      	ldr	r3, [r4, #12]
 80057a4:	4293      	cmp	r3, r2
 80057a6:	f000 8105 	beq.w	80059b4 <oslib_test_003_001_execute+0x484>
 80057aa:	494d      	ldr	r1, [pc, #308]	; (80058e0 <oslib_test_003_001_execute+0x3b0>)
 80057ac:	f7fb f9e0 	bl	8000b70 <_test_assert>
 80057b0:	2800      	cmp	r0, #0
 80057b2:	f47f aef2 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE - 4) == 0, "content mismatch");
 80057b6:	4669      	mov	r1, sp
 80057b8:	484d      	ldr	r0, [pc, #308]	; (80058f0 <oslib_test_003_001_execute+0x3c0>)
 80057ba:	220c      	movs	r2, #12
 80057bc:	f7fa fd96 	bl	80002ec <memcmp>
 80057c0:	fab0 f080 	clz	r0, r0
 80057c4:	4949      	ldr	r1, [pc, #292]	; (80058ec <oslib_test_003_001_execute+0x3bc>)
 80057c6:	0940      	lsrs	r0, r0, #5
 80057c8:	f7fb f9d2 	bl	8000b70 <_test_assert>
 80057cc:	2800      	cmp	r0, #0
 80057ce:	f47f aee4 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
  test_set_step(11);
 80057d2:	230b      	movs	r3, #11
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 5, TIME_IMMEDIATE);
 80057d4:	2005      	movs	r0, #5
  test_set_step(11);
 80057d6:	6033      	str	r3, [r6, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 5, TIME_IMMEDIATE);
 80057d8:	f7ff fbf2 	bl	8004fc0 <chPipeWriteTimeout.constprop.0>
    test_assert(n == 5, "wrong size");
 80057dc:	f1a0 0e05 	sub.w	lr, r0, #5
 80057e0:	f1de 0000 	rsbs	r0, lr, #0
 80057e4:	eb40 000e 	adc.w	r0, r0, lr
 80057e8:	493e      	ldr	r1, [pc, #248]	; (80058e4 <oslib_test_003_001_execute+0x3b4>)
 80057ea:	f7fb f9c1 	bl	8000b70 <_test_assert>
 80057ee:	2800      	cmp	r0, #0
 80057f0:	f47f aed3 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 80057f4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d003      	beq.n	8005804 <oslib_test_003_001_execute+0x2d4>
 80057fc:	6822      	ldr	r2, [r4, #0]
 80057fe:	4293      	cmp	r3, r2
 8005800:	f000 80e1 	beq.w	80059c6 <oslib_test_003_001_execute+0x496>
 8005804:	4936      	ldr	r1, [pc, #216]	; (80058e0 <oslib_test_003_001_execute+0x3b0>)
 8005806:	f7fb f9b3 	bl	8000b70 <_test_assert>
 800580a:	2800      	cmp	r0, #0
 800580c:	f47f aec5 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
  test_set_step(12);
 8005810:	230c      	movs	r3, #12
    n = chPipeReadTimeout(&pipe1, buf, 5, TIME_IMMEDIATE);
 8005812:	2105      	movs	r1, #5
 8005814:	4668      	mov	r0, sp
  test_set_step(12);
 8005816:	6033      	str	r3, [r6, #0]
    n = chPipeReadTimeout(&pipe1, buf, 5, TIME_IMMEDIATE);
 8005818:	f7ff fc42 	bl	80050a0 <chPipeReadTimeout.constprop.0>
    test_assert(n == 5, "wrong size");
 800581c:	1f45      	subs	r5, r0, #5
 800581e:	4268      	negs	r0, r5
 8005820:	4168      	adcs	r0, r5
 8005822:	4930      	ldr	r1, [pc, #192]	; (80058e4 <oslib_test_003_001_execute+0x3b4>)
 8005824:	f7fb f9a4 	bl	8000b70 <_test_assert>
 8005828:	2800      	cmp	r0, #0
 800582a:	f47f aeb6 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800582e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8005832:	4293      	cmp	r3, r2
 8005834:	f000 80e8 	beq.w	8005a08 <oslib_test_003_001_execute+0x4d8>
 8005838:	4929      	ldr	r1, [pc, #164]	; (80058e0 <oslib_test_003_001_execute+0x3b0>)
 800583a:	f7fb f999 	bl	8000b70 <_test_assert>
 800583e:	2800      	cmp	r0, #0
 8005840:	f47f aeab 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
    test_assert(memcmp(pipe_pattern, buf, 5) == 0, "content mismatch");
 8005844:	4669      	mov	r1, sp
 8005846:	482a      	ldr	r0, [pc, #168]	; (80058f0 <oslib_test_003_001_execute+0x3c0>)
 8005848:	2205      	movs	r2, #5
 800584a:	f7fa fd4f 	bl	80002ec <memcmp>
 800584e:	fab0 f080 	clz	r0, r0
 8005852:	4926      	ldr	r1, [pc, #152]	; (80058ec <oslib_test_003_001_execute+0x3bc>)
 8005854:	0940      	lsrs	r0, r0, #5
 8005856:	f7fb f98b 	bl	8000b70 <_test_assert>
 800585a:	2800      	cmp	r0, #0
 800585c:	f47f ae9d 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
  test_set_step(13);
 8005860:	230d      	movs	r3, #13
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 8005862:	2010      	movs	r0, #16
  test_set_step(13);
 8005864:	6033      	str	r3, [r6, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 8005866:	f7ff fbab 	bl	8004fc0 <chPipeWriteTimeout.constprop.0>
    test_assert(n == PIPE_SIZE, "wrong size");
 800586a:	f1a0 0110 	sub.w	r1, r0, #16
 800586e:	4248      	negs	r0, r1
 8005870:	4148      	adcs	r0, r1
 8005872:	491c      	ldr	r1, [pc, #112]	; (80058e4 <oslib_test_003_001_execute+0x3b4>)
 8005874:	f7fb f97c 	bl	8000b70 <_test_assert>
 8005878:	2800      	cmp	r0, #0
 800587a:	f47f ae8e 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800587e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8005882:	4293      	cmp	r3, r2
 8005884:	f000 80b6 	beq.w	80059f4 <oslib_test_003_001_execute+0x4c4>
 8005888:	4915      	ldr	r1, [pc, #84]	; (80058e0 <oslib_test_003_001_execute+0x3b0>)
 800588a:	f7fb f971 	bl	8000b70 <_test_assert>
 800588e:	2800      	cmp	r0, #0
 8005890:	f47f ae83 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
  test_set_step(14);
 8005894:	230e      	movs	r3, #14
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 8005896:	2110      	movs	r1, #16
 8005898:	4668      	mov	r0, sp
  test_set_step(14);
 800589a:	6033      	str	r3, [r6, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 800589c:	f7ff fc00 	bl	80050a0 <chPipeReadTimeout.constprop.0>
    test_assert(n == PIPE_SIZE, "wrong size");
 80058a0:	f1a0 0310 	sub.w	r3, r0, #16
 80058a4:	4258      	negs	r0, r3
 80058a6:	4158      	adcs	r0, r3
 80058a8:	490e      	ldr	r1, [pc, #56]	; (80058e4 <oslib_test_003_001_execute+0x3b4>)
 80058aa:	f7fb f961 	bl	8000b70 <_test_assert>
 80058ae:	2800      	cmp	r0, #0
 80058b0:	f47f ae73 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 80058b4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80058b8:	4293      	cmp	r3, r2
 80058ba:	f000 808c 	beq.w	80059d6 <oslib_test_003_001_execute+0x4a6>
 80058be:	4908      	ldr	r1, [pc, #32]	; (80058e0 <oslib_test_003_001_execute+0x3b0>)
 80058c0:	f7fb f956 	bl	8000b70 <_test_assert>
 80058c4:	2800      	cmp	r0, #0
 80058c6:	f47f ae68 	bne.w	800559a <oslib_test_003_001_execute+0x6a>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 80058ca:	4669      	mov	r1, sp
 80058cc:	2210      	movs	r2, #16
 80058ce:	4808      	ldr	r0, [pc, #32]	; (80058f0 <oslib_test_003_001_execute+0x3c0>)
 80058d0:	f7fa fd0c 	bl	80002ec <memcmp>
 80058d4:	fab0 f080 	clz	r0, r0
 80058d8:	e00c      	b.n	80058f4 <oslib_test_003_001_execute+0x3c4>
 80058da:	bf00      	nop
 80058dc:	08009ff0 	.word	0x08009ff0
 80058e0:	08009fac 	.word	0x08009fac
 80058e4:	08009ee0 	.word	0x08009ee0
 80058e8:	33323130 	.word	0x33323130
 80058ec:	08009ffc 	.word	0x08009ffc
 80058f0:	0800b078 	.word	0x0800b078
 80058f4:	4949      	ldr	r1, [pc, #292]	; (8005a1c <oslib_test_003_001_execute+0x4ec>)
 80058f6:	0940      	lsrs	r0, r0, #5
 80058f8:	f7fb f93a 	bl	8000b70 <_test_assert>
  test_end_step(14);
 80058fc:	e64d      	b.n	800559a <oslib_test_003_001_execute+0x6a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80058fe:	68a2      	ldr	r2, [r4, #8]
 8005900:	4293      	cmp	r3, r2
 8005902:	f47f ae6f 	bne.w	80055e4 <oslib_test_003_001_execute+0xb4>
 8005906:	6920      	ldr	r0, [r4, #16]
 8005908:	fab0 f080 	clz	r0, r0
 800590c:	0940      	lsrs	r0, r0, #5
 800590e:	e669      	b.n	80055e4 <oslib_test_003_001_execute+0xb4>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005910:	68a2      	ldr	r2, [r4, #8]
 8005912:	4293      	cmp	r3, r2
 8005914:	f47f ae8b 	bne.w	800562e <oslib_test_003_001_execute+0xfe>
 8005918:	6920      	ldr	r0, [r4, #16]
 800591a:	fab0 f080 	clz	r0, r0
 800591e:	0940      	lsrs	r0, r0, #5
 8005920:	e685      	b.n	800562e <oslib_test_003_001_execute+0xfe>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005922:	68a2      	ldr	r2, [r4, #8]
 8005924:	4293      	cmp	r3, r2
 8005926:	f47f ae75 	bne.w	8005614 <oslib_test_003_001_execute+0xe4>
 800592a:	6920      	ldr	r0, [r4, #16]
 800592c:	fab0 f080 	clz	r0, r0
 8005930:	0940      	lsrs	r0, r0, #5
 8005932:	e66f      	b.n	8005614 <oslib_test_003_001_execute+0xe4>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005934:	68a2      	ldr	r2, [r4, #8]
 8005936:	4293      	cmp	r3, r2
 8005938:	f47f ae92 	bne.w	8005660 <oslib_test_003_001_execute+0x130>
 800593c:	6920      	ldr	r0, [r4, #16]
 800593e:	f1a0 0010 	sub.w	r0, r0, #16
 8005942:	fab0 f080 	clz	r0, r0
 8005946:	0940      	lsrs	r0, r0, #5
 8005948:	e68a      	b.n	8005660 <oslib_test_003_001_execute+0x130>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800594a:	68a2      	ldr	r2, [r4, #8]
 800594c:	4293      	cmp	r3, r2
 800594e:	f47f aea1 	bne.w	8005694 <oslib_test_003_001_execute+0x164>
 8005952:	6920      	ldr	r0, [r4, #16]
 8005954:	fab0 f080 	clz	r0, r0
 8005958:	0940      	lsrs	r0, r0, #5
 800595a:	e69b      	b.n	8005694 <oslib_test_003_001_execute+0x164>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 800595c:	9a01      	ldr	r2, [sp, #4]
 800595e:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 8005962:	429a      	cmp	r2, r3
 8005964:	f47f aea1 	bne.w	80056aa <oslib_test_003_001_execute+0x17a>
 8005968:	f103 6330 	add.w	r3, r3, #184549376	; 0xb000000
 800596c:	9a02      	ldr	r2, [sp, #8]
 800596e:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
 8005972:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005976:	429a      	cmp	r2, r3
 8005978:	f47f ae97 	bne.w	80056aa <oslib_test_003_001_execute+0x17a>
 800597c:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 8005980:	9a03      	ldr	r2, [sp, #12]
 8005982:	f503 2381 	add.w	r3, r3, #264192	; 0x40800
 8005986:	f203 330b 	addw	r3, r3, #779	; 0x30b
 800598a:	429a      	cmp	r2, r3
 800598c:	f47f ae8d 	bne.w	80056aa <oslib_test_003_001_execute+0x17a>
 8005990:	e68c      	b.n	80056ac <oslib_test_003_001_execute+0x17c>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 8005992:	6920      	ldr	r0, [r4, #16]
 8005994:	1f03      	subs	r3, r0, #4
 8005996:	4258      	negs	r0, r3
 8005998:	4158      	adcs	r0, r3
 800599a:	e6a7      	b.n	80056ec <oslib_test_003_001_execute+0x1bc>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800599c:	68a2      	ldr	r2, [r4, #8]
 800599e:	4293      	cmp	r3, r2
 80059a0:	f47f aec0 	bne.w	8005724 <oslib_test_003_001_execute+0x1f4>
 80059a4:	6920      	ldr	r0, [r4, #16]
 80059a6:	f1a0 0c10 	sub.w	ip, r0, #16
 80059aa:	f1dc 0000 	rsbs	r0, ip, #0
 80059ae:	eb40 000c 	adc.w	r0, r0, ip
 80059b2:	e6b7      	b.n	8005724 <oslib_test_003_001_execute+0x1f4>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80059b4:	68a2      	ldr	r2, [r4, #8]
 80059b6:	4293      	cmp	r3, r2
 80059b8:	f47f aef7 	bne.w	80057aa <oslib_test_003_001_execute+0x27a>
 80059bc:	6920      	ldr	r0, [r4, #16]
 80059be:	fab0 f080 	clz	r0, r0
 80059c2:	0940      	lsrs	r0, r0, #5
 80059c4:	e6f1      	b.n	80057aa <oslib_test_003_001_execute+0x27a>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 80059c6:	6920      	ldr	r0, [r4, #16]
 80059c8:	f1a0 0c05 	sub.w	ip, r0, #5
 80059cc:	f1dc 0000 	rsbs	r0, ip, #0
 80059d0:	eb40 000c 	adc.w	r0, r0, ip
 80059d4:	e716      	b.n	8005804 <oslib_test_003_001_execute+0x2d4>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 80059d6:	6822      	ldr	r2, [r4, #0]
 80059d8:	4293      	cmp	r3, r2
 80059da:	f43f af70 	beq.w	80058be <oslib_test_003_001_execute+0x38e>
 80059de:	6920      	ldr	r0, [r4, #16]
 80059e0:	fab0 f080 	clz	r0, r0
 80059e4:	0940      	lsrs	r0, r0, #5
 80059e6:	e76a      	b.n	80058be <oslib_test_003_001_execute+0x38e>
    test_assert((pipe1.rdptr != pipe1.buffer) &&
 80059e8:	6920      	ldr	r0, [r4, #16]
 80059ea:	f1a0 010c 	sub.w	r1, r0, #12
 80059ee:	4248      	negs	r0, r1
 80059f0:	4148      	adcs	r0, r1
 80059f2:	e6b4      	b.n	800575e <oslib_test_003_001_execute+0x22e>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 80059f4:	6822      	ldr	r2, [r4, #0]
 80059f6:	4293      	cmp	r3, r2
 80059f8:	f43f af46 	beq.w	8005888 <oslib_test_003_001_execute+0x358>
 80059fc:	6920      	ldr	r0, [r4, #16]
 80059fe:	f1a0 0210 	sub.w	r2, r0, #16
 8005a02:	4250      	negs	r0, r2
 8005a04:	4150      	adcs	r0, r2
 8005a06:	e73f      	b.n	8005888 <oslib_test_003_001_execute+0x358>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8005a08:	6822      	ldr	r2, [r4, #0]
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	f43f af14 	beq.w	8005838 <oslib_test_003_001_execute+0x308>
 8005a10:	6920      	ldr	r0, [r4, #16]
 8005a12:	fab0 f080 	clz	r0, r0
 8005a16:	0940      	lsrs	r0, r0, #5
 8005a18:	e70e      	b.n	8005838 <oslib_test_003_001_execute+0x308>
 8005a1a:	bf00      	nop
 8005a1c:	08009ffc 	.word	0x08009ffc

08005a20 <rt_test_011_011_execute>:
static void rt_test_011_011_execute(void) {
 8005a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 8005a24:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8005aa8 <rt_test_011_011_execute+0x88>
      chMtxLock(&mtx1);
 8005a28:	4c1c      	ldr	r4, [pc, #112]	; (8005a9c <rt_test_011_011_execute+0x7c>)
  test_set_step(1);
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	f8c8 3000 	str.w	r3, [r8]
    start = test_wait_tick();
 8005a30:	f7fd fade 	bl	8002ff0 <test_wait_tick>
    n = 0;
 8005a34:	2500      	movs	r5, #0
    start = test_wait_tick();
 8005a36:	4606      	mov	r6, r0
 8005a38:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8005a3c:	f242 770f 	movw	r7, #9999	; 0x270f
      chMtxLock(&mtx1);
 8005a40:	4620      	mov	r0, r4
 8005a42:	f7fd fc3d 	bl	80032c0 <chMtxLock>
      chMtxUnlock(&mtx1);
 8005a46:	4620      	mov	r0, r4
 8005a48:	f7ff f9b2 	bl	8004db0 <chMtxUnlock>
      chMtxLock(&mtx1);
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	f7fd fc37 	bl	80032c0 <chMtxLock>
      chMtxUnlock(&mtx1);
 8005a52:	4620      	mov	r0, r4
 8005a54:	f7ff f9ac 	bl	8004db0 <chMtxUnlock>
      chMtxLock(&mtx1);
 8005a58:	4620      	mov	r0, r4
 8005a5a:	f7fd fc31 	bl	80032c0 <chMtxLock>
      chMtxUnlock(&mtx1);
 8005a5e:	4620      	mov	r0, r4
 8005a60:	f7ff f9a6 	bl	8004db0 <chMtxUnlock>
      chMtxLock(&mtx1);
 8005a64:	4620      	mov	r0, r4
 8005a66:	f7fd fc2b 	bl	80032c0 <chMtxLock>
      chMtxUnlock(&mtx1);
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	f7ff f9a0 	bl	8004db0 <chMtxUnlock>
 8005a70:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8005a74:	1b9b      	subs	r3, r3, r6
    } while (chVTIsSystemTimeWithinX(start, end));
 8005a76:	42bb      	cmp	r3, r7
      n++;
 8005a78:	f105 0501 	add.w	r5, r5, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8005a7c:	d9e0      	bls.n	8005a40 <rt_test_011_011_execute+0x20>
  test_set_step(2);
 8005a7e:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8005a80:	4807      	ldr	r0, [pc, #28]	; (8005aa0 <rt_test_011_011_execute+0x80>)
  test_set_step(2);
 8005a82:	f8c8 3000 	str.w	r3, [r8]
    test_print("--- Score : ");
 8005a86:	f7fb f9db 	bl	8000e40 <test_print>
    test_printn(n * 4);
 8005a8a:	00a8      	lsls	r0, r5, #2
 8005a8c:	f7fb f908 	bl	8000ca0 <test_printn>
}
 8005a90:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" lock+unlock/S");
 8005a94:	4803      	ldr	r0, [pc, #12]	; (8005aa4 <rt_test_011_011_execute+0x84>)
 8005a96:	f7fb b9b3 	b.w	8000e00 <test_println>
 8005a9a:	bf00      	nop
 8005a9c:	20000c60 	.word	0x20000c60
 8005aa0:	08009dac 	.word	0x08009dac
 8005aa4:	0800a010 	.word	0x0800a010
 8005aa8:	2000149c 	.word	0x2000149c
 8005aac:	00000000 	.word	0x00000000

08005ab0 <thread8>:
static THD_FUNCTION(thread8, p) {
 8005ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab2:	4604      	mov	r4, r0
  chMtxLock(&m2);
 8005ab4:	481b      	ldr	r0, [pc, #108]	; (8005b24 <thread8+0x74>)
 8005ab6:	f7fd fc03 	bl	80032c0 <chMtxLock>
  chMtxLock(&m1);
 8005aba:	481b      	ldr	r0, [pc, #108]	; (8005b28 <thread8+0x78>)
 8005abc:	f7fd fc00 	bl	80032c0 <chMtxLock>
 8005ac0:	2320      	movs	r3, #32
 8005ac2:	f383 8811 	msr	BASEPRI, r3
  return ch.rlist.current;
 8005ac6:	4d19      	ldr	r5, [pc, #100]	; (8005b2c <thread8+0x7c>)
 *
 * @xclass
 */
static inline mutex_t *chMtxGetNextMutexX(void) {

  return chThdGetSelfX()->mtxlist;
 8005ac8:	69ab      	ldr	r3, [r5, #24]
 8005aca:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  chDbgCheckClassS();
  chDbgCheck((cp != NULL) && (timeout != TIME_IMMEDIATE));
  chDbgAssert(mp != NULL, "not owning a mutex");

  /* Releasing "current" mutex.*/
  chMtxUnlockS(mp);
 8005acc:	4630      	mov	r0, r6
 8005ace:	f7fb fd5f 	bl	8001590 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->u.wtobjp = cp;
 8005ad2:	4b17      	ldr	r3, [pc, #92]	; (8005b30 <thread8+0x80>)
 8005ad4:	69aa      	ldr	r2, [r5, #24]
  thread_t *cp = (thread_t *)tqp;
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	6253      	str	r3, [r2, #36]	; 0x24
 8005ada:	e003      	b.n	8005ae4 <thread8+0x34>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8005adc:	689f      	ldr	r7, [r3, #8]
 8005ade:	6890      	ldr	r0, [r2, #8]
 8005ae0:	4287      	cmp	r7, r0
 8005ae2:	d302      	bcc.n	8005aea <thread8+0x3a>
    cp = cp->queue.next;
 8005ae4:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8005ae6:	428b      	cmp	r3, r1
 8005ae8:	d1f8      	bne.n	8005adc <thread8+0x2c>
  tp->queue.prev             = cp->queue.prev;
 8005aea:	6859      	ldr	r1, [r3, #4]
    chSchGoSleepS(newstate);
 8005aec:	2007      	movs	r0, #7
 8005aee:	e9c2 3100 	strd	r3, r1, [r2]
  tp->queue.prev->queue.next = tp;
 8005af2:	600a      	str	r2, [r1, #0]
  cp->queue.prev             = tp;
 8005af4:	605a      	str	r2, [r3, #4]
 8005af6:	f7fc fc33 	bl	8002360 <chSchGoSleepS>
  return currp->u.rdymsg;
 8005afa:	69ab      	ldr	r3, [r5, #24]
  queue_prio_insert(currp, &cp->queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, timeout);
  if (msg != MSG_TIMEOUT) {
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afe:	3301      	adds	r3, #1
 8005b00:	d002      	beq.n	8005b08 <thread8+0x58>
    chMtxLockS(mp);
 8005b02:	4630      	mov	r0, r6
 8005b04:	f7fd fb7c 	bl	8003200 <chMtxLockS>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 8005b0e:	7820      	ldrb	r0, [r4, #0]
 8005b10:	f7fb f8d6 	bl	8000cc0 <test_emit_token>
  chMtxUnlock(&m1);
 8005b14:	4804      	ldr	r0, [pc, #16]	; (8005b28 <thread8+0x78>)
 8005b16:	f7ff f94b 	bl	8004db0 <chMtxUnlock>
}
 8005b1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  chMtxUnlock(&m2);
 8005b1e:	4801      	ldr	r0, [pc, #4]	; (8005b24 <thread8+0x74>)
 8005b20:	f7ff b946 	b.w	8004db0 <chMtxUnlock>
 8005b24:	2000083c 	.word	0x2000083c
 8005b28:	2000082c 	.word	0x2000082c
 8005b2c:	200009b0 	.word	0x200009b0
 8005b30:	20000800 	.word	0x20000800
	...

08005b40 <thread6>:
static THD_FUNCTION(thread6, p) {
 8005b40:	b570      	push	{r4, r5, r6, lr}
 8005b42:	4605      	mov	r5, r0
  chMtxLock(&m1);
 8005b44:	4816      	ldr	r0, [pc, #88]	; (8005ba0 <thread6+0x60>)
 8005b46:	f7fd fbbb 	bl	80032c0 <chMtxLock>
 8005b4a:	2320      	movs	r3, #32
 8005b4c:	f383 8811 	msr	BASEPRI, r3
  thread_t *ctp = currp;
 8005b50:	4b14      	ldr	r3, [pc, #80]	; (8005ba4 <thread6+0x64>)
 8005b52:	699c      	ldr	r4, [r3, #24]
 8005b54:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  chMtxUnlockS(mp);
 8005b56:	4630      	mov	r0, r6
 8005b58:	f7fb fd1a 	bl	8001590 <chMtxUnlockS>
  ctp->u.wtobjp = cp;
 8005b5c:	4a12      	ldr	r2, [pc, #72]	; (8005ba8 <thread6+0x68>)
 8005b5e:	6262      	str	r2, [r4, #36]	; 0x24
  thread_t *cp = (thread_t *)tqp;
 8005b60:	4613      	mov	r3, r2
 8005b62:	e003      	b.n	8005b6c <thread6+0x2c>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8005b64:	6898      	ldr	r0, [r3, #8]
 8005b66:	68a1      	ldr	r1, [r4, #8]
 8005b68:	4288      	cmp	r0, r1
 8005b6a:	d302      	bcc.n	8005b72 <thread6+0x32>
    cp = cp->queue.next;
 8005b6c:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d1f8      	bne.n	8005b64 <thread6+0x24>
  tp->queue.prev             = cp->queue.prev;
 8005b72:	685a      	ldr	r2, [r3, #4]
  chSchGoSleepS(CH_STATE_WTCOND);
 8005b74:	2007      	movs	r0, #7
 8005b76:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8005b7a:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8005b7c:	605c      	str	r4, [r3, #4]
 8005b7e:	f7fc fbef 	bl	8002360 <chSchGoSleepS>
  chMtxLockS(mp);
 8005b82:	4630      	mov	r0, r6
 8005b84:	f7fd fb3c 	bl	8003200 <chMtxLockS>
 8005b88:	2300      	movs	r3, #0
 8005b8a:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 8005b8e:	7828      	ldrb	r0, [r5, #0]
 8005b90:	f7fb f896 	bl	8000cc0 <test_emit_token>
}
 8005b94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chMtxUnlock(&m1);
 8005b98:	4801      	ldr	r0, [pc, #4]	; (8005ba0 <thread6+0x60>)
 8005b9a:	f7ff b909 	b.w	8004db0 <chMtxUnlock>
 8005b9e:	bf00      	nop
 8005ba0:	2000082c 	.word	0x2000082c
 8005ba4:	200009b0 	.word	0x200009b0
 8005ba8:	20000800 	.word	0x20000800
 8005bac:	00000000 	.word	0x00000000

08005bb0 <thread9>:
static THD_FUNCTION(thread9, p) {
 8005bb0:	b538      	push	{r3, r4, r5, lr}
  chMtxLock(&m2);
 8005bb2:	4d06      	ldr	r5, [pc, #24]	; (8005bcc <thread9+0x1c>)
static THD_FUNCTION(thread9, p) {
 8005bb4:	4604      	mov	r4, r0
  chMtxLock(&m2);
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	f7fd fb82 	bl	80032c0 <chMtxLock>
  test_emit_token(*(char *)p);
 8005bbc:	7820      	ldrb	r0, [r4, #0]
 8005bbe:	f7fb f87f 	bl	8000cc0 <test_emit_token>
  chMtxUnlock(&m2);
 8005bc2:	4628      	mov	r0, r5
}
 8005bc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chMtxUnlock(&m2);
 8005bc8:	f7ff b8f2 	b.w	8004db0 <chMtxUnlock>
 8005bcc:	2000083c 	.word	0x2000083c

08005bd0 <rt_test_007_005_execute>:
static void rt_test_007_005_execute(void) {
 8005bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bd4:	4d4f      	ldr	r5, [pc, #316]	; (8005d14 <rt_test_007_005_execute+0x144>)
  test_set_step(2);
 8005bd6:	4c50      	ldr	r4, [pc, #320]	; (8005d18 <rt_test_007_005_execute+0x148>)
  return chThdGetSelfX()->prio;
 8005bd8:	69aa      	ldr	r2, [r5, #24]
 8005bda:	2302      	movs	r3, #2
 8005bdc:	6896      	ldr	r6, [r2, #8]
 8005bde:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 8005be0:	f7fa fd2e 	bl	8000640 <chMtxTryLock.constprop.0>
    test_assert(b, "already locked");
 8005be4:	494d      	ldr	r1, [pc, #308]	; (8005d1c <rt_test_007_005_execute+0x14c>)
 8005be6:	f7fa ffc3 	bl	8000b70 <_test_assert>
 8005bea:	b108      	cbz	r0, 8005bf0 <rt_test_007_005_execute+0x20>
}
 8005bec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  test_set_step(3);
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 8005bf4:	f7fa fd24 	bl	8000640 <chMtxTryLock.constprop.0>
    test_assert(!b, "not locked");
 8005bf8:	f080 0001 	eor.w	r0, r0, #1
 8005bfc:	4948      	ldr	r1, [pc, #288]	; (8005d20 <rt_test_007_005_execute+0x150>)
 8005bfe:	b2c0      	uxtb	r0, r0
 8005c00:	f7fa ffb6 	bl	8000b70 <_test_assert>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	d1f1      	bne.n	8005bec <rt_test_007_005_execute+0x1c>
    chMtxUnlock(&m1);
 8005c08:	4f46      	ldr	r7, [pc, #280]	; (8005d24 <rt_test_007_005_execute+0x154>)
  test_set_step(4);
 8005c0a:	2304      	movs	r3, #4
    chMtxUnlock(&m1);
 8005c0c:	4638      	mov	r0, r7
  test_set_step(4);
 8005c0e:	6023      	str	r3, [r4, #0]
    chMtxUnlock(&m1);
 8005c10:	f7ff f8ce 	bl	8004db0 <chMtxUnlock>
    test_assert(m1.owner == NULL, "still owned");
 8005c14:	68b8      	ldr	r0, [r7, #8]
 8005c16:	4944      	ldr	r1, [pc, #272]	; (8005d28 <rt_test_007_005_execute+0x158>)
 8005c18:	fab0 f080 	clz	r0, r0
 8005c1c:	0940      	lsrs	r0, r0, #5
 8005c1e:	f7fa ffa7 	bl	8000b70 <_test_assert>
 8005c22:	2800      	cmp	r0, #0
 8005c24:	d1e2      	bne.n	8005bec <rt_test_007_005_execute+0x1c>
  return (bool)(tqp->next == (const thread_t *)tqp);
 8005c26:	6838      	ldr	r0, [r7, #0]
    test_assert(queue_isempty(&m1.queue), "queue not empty");
 8005c28:	4940      	ldr	r1, [pc, #256]	; (8005d2c <rt_test_007_005_execute+0x15c>)
 8005c2a:	1bc0      	subs	r0, r0, r7
 8005c2c:	fab0 f080 	clz	r0, r0
 8005c30:	0940      	lsrs	r0, r0, #5
 8005c32:	f7fa ff9d 	bl	8000b70 <_test_assert>
 8005c36:	2800      	cmp	r0, #0
 8005c38:	d1d8      	bne.n	8005bec <rt_test_007_005_execute+0x1c>
 8005c3a:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8005c3c:	493c      	ldr	r1, [pc, #240]	; (8005d30 <rt_test_007_005_execute+0x160>)
 8005c3e:	6898      	ldr	r0, [r3, #8]
 8005c40:	1b80      	subs	r0, r0, r6
 8005c42:	fab0 f080 	clz	r0, r0
  test_set_step(5);
 8005c46:	2305      	movs	r3, #5
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8005c48:	0940      	lsrs	r0, r0, #5
  test_set_step(5);
 8005c4a:	6023      	str	r3, [r4, #0]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8005c4c:	f7fa ff90 	bl	8000b70 <_test_assert>
 8005c50:	2800      	cmp	r0, #0
 8005c52:	d1cb      	bne.n	8005bec <rt_test_007_005_execute+0x1c>
  test_set_step(6);
 8005c54:	2306      	movs	r3, #6
 8005c56:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 8005c58:	f7fa fcf2 	bl	8000640 <chMtxTryLock.constprop.0>
    test_assert(b, "already locked");
 8005c5c:	492f      	ldr	r1, [pc, #188]	; (8005d1c <rt_test_007_005_execute+0x14c>)
 8005c5e:	f7fa ff87 	bl	8000b70 <_test_assert>
 8005c62:	2800      	cmp	r0, #0
 8005c64:	d1c2      	bne.n	8005bec <rt_test_007_005_execute+0x1c>
    b = chMtxTryLock(&m1);
 8005c66:	f7fa fceb 	bl	8000640 <chMtxTryLock.constprop.0>
    test_assert(!b, "not locked");
 8005c6a:	f080 0001 	eor.w	r0, r0, #1
 8005c6e:	492c      	ldr	r1, [pc, #176]	; (8005d20 <rt_test_007_005_execute+0x150>)
 8005c70:	b2c0      	uxtb	r0, r0
 8005c72:	f7fa ff7d 	bl	8000b70 <_test_assert>
 8005c76:	2800      	cmp	r0, #0
 8005c78:	d1b8      	bne.n	8005bec <rt_test_007_005_execute+0x1c>
 8005c7a:	2320      	movs	r3, #32
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 *          inheritance mechanism.
 *
 * @sclass
 */
void chMtxUnlockAllS(void) {
  thread_t *ctp = currp;
 8005c80:	f8d5 9018 	ldr.w	r9, [r5, #24]

  if (ctp->mtxlist != NULL) {
 8005c84:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
 8005c88:	b1db      	cbz	r3, 8005cc2 <rt_test_007_005_execute+0xf2>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)0;
#endif
        mp->owner = NULL;
 8005c8a:	4680      	mov	r8, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 8005c8c:	681a      	ldr	r2, [r3, #0]
      ctp->mtxlist = mp->next;
 8005c8e:	68d9      	ldr	r1, [r3, #12]
 8005c90:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
      if (chMtxQueueNotEmptyS(mp)) {
 8005c94:	4293      	cmp	r3, r2
        (void) chSchReadyI(tp);
 8005c96:	4610      	mov	r0, r2
      if (chMtxQueueNotEmptyS(mp)) {
 8005c98:	d037      	beq.n	8005d0a <rt_test_007_005_execute+0x13a>
        mp->next    = tp->mtxlist;
 8005c9a:	f8d2 c038 	ldr.w	ip, [r2, #56]	; 0x38
  tqp->next             = tp->queue.next;
 8005c9e:	6811      	ldr	r1, [r2, #0]
 8005ca0:	6019      	str	r1, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8005ca2:	604b      	str	r3, [r1, #4]
 8005ca4:	e9c3 2c02 	strd	r2, ip, [r3, #8]
        tp->mtxlist = mp;
 8005ca8:	6393      	str	r3, [r2, #56]	; 0x38
        (void) chSchReadyI(tp);
 8005caa:	f7fb fb79 	bl	80013a0 <chSchReadyI>
 8005cae:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
      }
    } while (ctp->mtxlist != NULL);
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1ea      	bne.n	8005c8c <rt_test_007_005_execute+0xbc>
    ctp->prio = ctp->realprio;
 8005cb6:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8005cba:	f8c9 3008 	str.w	r3, [r9, #8]
    chSchRescheduleS();
 8005cbe:	f7fd fea7 	bl	8003a10 <chSchRescheduleS>
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	f383 8811 	msr	BASEPRI, r3
    test_assert(m1.owner == NULL, "still owned");
 8005cc8:	68b8      	ldr	r0, [r7, #8]
 8005cca:	4917      	ldr	r1, [pc, #92]	; (8005d28 <rt_test_007_005_execute+0x158>)
 8005ccc:	fab0 f080 	clz	r0, r0
 8005cd0:	0940      	lsrs	r0, r0, #5
 8005cd2:	f7fa ff4d 	bl	8000b70 <_test_assert>
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	d188      	bne.n	8005bec <rt_test_007_005_execute+0x1c>
  return (bool)(tqp->next == (const thread_t *)tqp);
 8005cda:	6838      	ldr	r0, [r7, #0]
    test_assert(queue_isempty(&m1.queue), "queue not empty");
 8005cdc:	4913      	ldr	r1, [pc, #76]	; (8005d2c <rt_test_007_005_execute+0x15c>)
 8005cde:	1bc0      	subs	r0, r0, r7
 8005ce0:	fab0 f080 	clz	r0, r0
 8005ce4:	0940      	lsrs	r0, r0, #5
 8005ce6:	f7fa ff43 	bl	8000b70 <_test_assert>
 8005cea:	2800      	cmp	r0, #0
 8005cec:	f47f af7e 	bne.w	8005bec <rt_test_007_005_execute+0x1c>
 8005cf0:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8005cf2:	490f      	ldr	r1, [pc, #60]	; (8005d30 <rt_test_007_005_execute+0x160>)
 8005cf4:	6898      	ldr	r0, [r3, #8]
 8005cf6:	1b80      	subs	r0, r0, r6
  test_set_step(7);
 8005cf8:	2307      	movs	r3, #7
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8005cfa:	fab0 f080 	clz	r0, r0
  test_set_step(7);
 8005cfe:	6023      	str	r3, [r4, #0]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8005d00:	0940      	lsrs	r0, r0, #5
}
 8005d02:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8005d06:	f7fa bf33 	b.w	8000b70 <_test_assert>
        mp->owner = NULL;
 8005d0a:	f8c3 8008 	str.w	r8, [r3, #8]
 8005d0e:	460b      	mov	r3, r1
 8005d10:	e7cf      	b.n	8005cb2 <rt_test_007_005_execute+0xe2>
 8005d12:	bf00      	nop
 8005d14:	200009b0 	.word	0x200009b0
 8005d18:	2000149c 	.word	0x2000149c
 8005d1c:	0800a020 	.word	0x0800a020
 8005d20:	0800a030 	.word	0x0800a030
 8005d24:	2000082c 	.word	0x2000082c
 8005d28:	0800a03c 	.word	0x0800a03c
 8005d2c:	08009e04 	.word	0x08009e04
 8005d30:	0800a048 	.word	0x0800a048
	...

08005d40 <rt_test_007_004_execute>:
static void rt_test_007_004_execute(void) {
 8005d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 8005d44:	4d42      	ldr	r5, [pc, #264]	; (8005e50 <rt_test_007_004_execute+0x110>)
  test_set_step(2);
 8005d46:	4e43      	ldr	r6, [pc, #268]	; (8005e54 <rt_test_007_004_execute+0x114>)
  return chThdGetSelfX()->prio;
 8005d48:	69aa      	ldr	r2, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8005d4a:	4b43      	ldr	r3, [pc, #268]	; (8005e58 <rt_test_007_004_execute+0x118>)
 8005d4c:	6894      	ldr	r4, [r2, #8]
 8005d4e:	4843      	ldr	r0, [pc, #268]	; (8005e5c <rt_test_007_004_execute+0x11c>)
 8005d50:	4a43      	ldr	r2, [pc, #268]	; (8005e60 <rt_test_007_004_execute+0x120>)
 8005d52:	4f44      	ldr	r7, [pc, #272]	; (8005e64 <rt_test_007_004_execute+0x124>)
    pa = p + 1;
 8005d54:	f104 0801 	add.w	r8, r4, #1
  test_set_step(2);
 8005d58:	f04f 0c02 	mov.w	ip, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8005d5c:	4641      	mov	r1, r8
    pb = p + 2;
 8005d5e:	eb04 090c 	add.w	r9, r4, ip
  test_set_step(2);
 8005d62:	f8c6 c000 	str.w	ip, [r6]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8005d66:	f7fc fa43 	bl	80021f0 <chThdCreateStatic.constprop.0>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8005d6a:	4649      	mov	r1, r9
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8005d6c:	4684      	mov	ip, r0
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8005d6e:	4b3e      	ldr	r3, [pc, #248]	; (8005e68 <rt_test_007_004_execute+0x128>)
 8005d70:	4a3e      	ldr	r2, [pc, #248]	; (8005e6c <rt_test_007_004_execute+0x12c>)
 8005d72:	483f      	ldr	r0, [pc, #252]	; (8005e70 <rt_test_007_004_execute+0x130>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8005d74:	f8c7 c000 	str.w	ip, [r7]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8005d78:	f7fc fa3a 	bl	80021f0 <chThdCreateStatic.constprop.0>
  test_set_step(3);
 8005d7c:	2303      	movs	r3, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8005d7e:	4602      	mov	r2, r0
    chMtxLock(&m1);
 8005d80:	483c      	ldr	r0, [pc, #240]	; (8005e74 <rt_test_007_004_execute+0x134>)
  test_set_step(3);
 8005d82:	6033      	str	r3, [r6, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8005d84:	607a      	str	r2, [r7, #4]
    chMtxLock(&m1);
 8005d86:	f7fd fa9b 	bl	80032c0 <chMtxLock>
 8005d8a:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8005d8c:	493a      	ldr	r1, [pc, #232]	; (8005e78 <rt_test_007_004_execute+0x138>)
 8005d8e:	6898      	ldr	r0, [r3, #8]
 8005d90:	1b00      	subs	r0, r0, r4
 8005d92:	fab0 f080 	clz	r0, r0
 8005d96:	0940      	lsrs	r0, r0, #5
 8005d98:	f7fa feea 	bl	8000b70 <_test_assert>
 8005d9c:	b108      	cbz	r0, 8005da2 <rt_test_007_004_execute+0x62>
}
 8005d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  test_set_step(4);
 8005da2:	2304      	movs	r3, #4
    chThdSleepMilliseconds(100);
 8005da4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(4);
 8005da8:	6033      	str	r3, [r6, #0]
    chThdSleepMilliseconds(100);
 8005daa:	f7fc fe51 	bl	8002a50 <chThdSleep>
 8005dae:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8005db0:	4931      	ldr	r1, [pc, #196]	; (8005e78 <rt_test_007_004_execute+0x138>)
 8005db2:	6898      	ldr	r0, [r3, #8]
 8005db4:	eba0 0008 	sub.w	r0, r0, r8
 8005db8:	fab0 f080 	clz	r0, r0
 8005dbc:	0940      	lsrs	r0, r0, #5
 8005dbe:	f7fa fed7 	bl	8000b70 <_test_assert>
 8005dc2:	2800      	cmp	r0, #0
 8005dc4:	d1eb      	bne.n	8005d9e <rt_test_007_004_execute+0x5e>
  test_set_step(5);
 8005dc6:	2305      	movs	r3, #5
    chMtxLock(&m2);
 8005dc8:	482c      	ldr	r0, [pc, #176]	; (8005e7c <rt_test_007_004_execute+0x13c>)
  test_set_step(5);
 8005dca:	6033      	str	r3, [r6, #0]
    chMtxLock(&m2);
 8005dcc:	f7fd fa78 	bl	80032c0 <chMtxLock>
 8005dd0:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8005dd2:	4929      	ldr	r1, [pc, #164]	; (8005e78 <rt_test_007_004_execute+0x138>)
 8005dd4:	6898      	ldr	r0, [r3, #8]
 8005dd6:	eba0 0008 	sub.w	r0, r0, r8
 8005dda:	fab0 f080 	clz	r0, r0
 8005dde:	0940      	lsrs	r0, r0, #5
 8005de0:	f7fa fec6 	bl	8000b70 <_test_assert>
 8005de4:	2800      	cmp	r0, #0
 8005de6:	d1da      	bne.n	8005d9e <rt_test_007_004_execute+0x5e>
  test_set_step(6);
 8005de8:	2306      	movs	r3, #6
    chThdSleepMilliseconds(100);
 8005dea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(6);
 8005dee:	6033      	str	r3, [r6, #0]
    chThdSleepMilliseconds(100);
 8005df0:	f7fc fe2e 	bl	8002a50 <chThdSleep>
 8005df4:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pb, "wrong priority level");
 8005df6:	4920      	ldr	r1, [pc, #128]	; (8005e78 <rt_test_007_004_execute+0x138>)
 8005df8:	6898      	ldr	r0, [r3, #8]
 8005dfa:	eba0 0009 	sub.w	r0, r0, r9
 8005dfe:	fab0 f080 	clz	r0, r0
 8005e02:	0940      	lsrs	r0, r0, #5
 8005e04:	f7fa feb4 	bl	8000b70 <_test_assert>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	d1c8      	bne.n	8005d9e <rt_test_007_004_execute+0x5e>
  test_set_step(7);
 8005e0c:	2307      	movs	r3, #7
    chMtxUnlock(&m2);
 8005e0e:	481b      	ldr	r0, [pc, #108]	; (8005e7c <rt_test_007_004_execute+0x13c>)
  test_set_step(7);
 8005e10:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m2);
 8005e12:	f7fe ffcd 	bl	8004db0 <chMtxUnlock>
 8005e16:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8005e18:	4917      	ldr	r1, [pc, #92]	; (8005e78 <rt_test_007_004_execute+0x138>)
 8005e1a:	6898      	ldr	r0, [r3, #8]
 8005e1c:	eba0 0008 	sub.w	r0, r0, r8
 8005e20:	fab0 f080 	clz	r0, r0
 8005e24:	0940      	lsrs	r0, r0, #5
 8005e26:	f7fa fea3 	bl	8000b70 <_test_assert>
 8005e2a:	2800      	cmp	r0, #0
 8005e2c:	d1b7      	bne.n	8005d9e <rt_test_007_004_execute+0x5e>
  test_set_step(8);
 8005e2e:	2308      	movs	r3, #8
    chMtxUnlock(&m1);
 8005e30:	4810      	ldr	r0, [pc, #64]	; (8005e74 <rt_test_007_004_execute+0x134>)
  test_set_step(8);
 8005e32:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m1);
 8005e34:	f7fe ffbc 	bl	8004db0 <chMtxUnlock>
 8005e38:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8005e3a:	490f      	ldr	r1, [pc, #60]	; (8005e78 <rt_test_007_004_execute+0x138>)
 8005e3c:	6898      	ldr	r0, [r3, #8]
 8005e3e:	1b00      	subs	r0, r0, r4
 8005e40:	fab0 f080 	clz	r0, r0
}
 8005e44:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8005e48:	0940      	lsrs	r0, r0, #5
 8005e4a:	f7fa be91 	b.w	8000b70 <_test_assert>
 8005e4e:	bf00      	nop
 8005e50:	200009b0 	.word	0x200009b0
 8005e54:	2000149c 	.word	0x2000149c
 8005e58:	0800a060 	.word	0x0800a060
 8005e5c:	20000d88 	.word	0x20000d88
 8005e60:	08005e81 	.word	0x08005e81
 8005e64:	200014b4 	.word	0x200014b4
 8005e68:	0800a064 	.word	0x0800a064
 8005e6c:	08004171 	.word	0x08004171
 8005e70:	20000ed0 	.word	0x20000ed0
 8005e74:	2000082c 	.word	0x2000082c
 8005e78:	0800a048 	.word	0x0800a048
 8005e7c:	2000083c 	.word	0x2000083c

08005e80 <thread4A>:
static THD_FUNCTION(thread4A, p) {
 8005e80:	b510      	push	{r4, lr}
  chMtxLock(&m1);
 8005e82:	4c06      	ldr	r4, [pc, #24]	; (8005e9c <thread4A+0x1c>)
  chThdSleepMilliseconds(50);
 8005e84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005e88:	f7fc fde2 	bl	8002a50 <chThdSleep>
  chMtxLock(&m1);
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	f7fd fa17 	bl	80032c0 <chMtxLock>
  chMtxUnlock(&m1);
 8005e92:	4620      	mov	r0, r4
}
 8005e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMtxUnlock(&m1);
 8005e98:	f7fe bf8a 	b.w	8004db0 <chMtxUnlock>
 8005e9c:	2000082c 	.word	0x2000082c

08005ea0 <thread1.lto_priv.2>:
static THD_FUNCTION(thread1, p) {
 8005ea0:	b538      	push	{r3, r4, r5, lr}
  chMtxLock(&m1);
 8005ea2:	4d06      	ldr	r5, [pc, #24]	; (8005ebc <thread1.lto_priv.2+0x1c>)
static THD_FUNCTION(thread1, p) {
 8005ea4:	4604      	mov	r4, r0
  chMtxLock(&m1);
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	f7fd fa0a 	bl	80032c0 <chMtxLock>
  test_emit_token(*(char *)p);
 8005eac:	7820      	ldrb	r0, [r4, #0]
 8005eae:	f7fa ff07 	bl	8000cc0 <test_emit_token>
  chMtxUnlock(&m1);
 8005eb2:	4628      	mov	r0, r5
}
 8005eb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chMtxUnlock(&m1);
 8005eb8:	f7fe bf7a 	b.w	8004db0 <chMtxUnlock>
 8005ebc:	2000082c 	.word	0x2000082c

08005ec0 <chFactoryReleaseSemaphore>:
void chFactoryReleaseSemaphore(dyn_semaphore_t *dsp) {
 8005ec0:	b538      	push	{r3, r4, r5, lr}
  F_LOCK();
 8005ec2:	4d14      	ldr	r5, [pc, #80]	; (8005f14 <chFactoryReleaseSemaphore+0x54>)
void chFactoryReleaseSemaphore(dyn_semaphore_t *dsp) {
 8005ec4:	4604      	mov	r4, r0
  F_LOCK();
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	f7fd f9fa 	bl	80032c0 <chMtxLock>
  dep->refs--;
 8005ecc:	6863      	ldr	r3, [r4, #4]
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8005ed2:	b99b      	cbnz	r3, 8005efc <chFactoryReleaseSemaphore+0x3c>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8005ed4:	f105 0228 	add.w	r2, r5, #40	; 0x28
 8005ed8:	4613      	mov	r3, r2
  while (prev->next != (dyn_element_t *)dlp) {
 8005eda:	4619      	mov	r1, r3
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d011      	beq.n	8005f06 <chFactoryReleaseSemaphore+0x46>
    if (prev->next == element) {
 8005ee2:	429c      	cmp	r4, r3
 8005ee4:	d1f9      	bne.n	8005eda <chFactoryReleaseSemaphore+0x1a>
      prev->next = element->next;
 8005ee6:	6823      	ldr	r3, [r4, #0]
 8005ee8:	600b      	str	r3, [r1, #0]
 8005eea:	2320      	movs	r3, #32
 8005eec:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 8005ef0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005ef2:	6023      	str	r3, [r4, #0]
 8005ef4:	2300      	movs	r3, #0
  mp->next = php;
 8005ef6:	62ec      	str	r4, [r5, #44]	; 0x2c
 8005ef8:	f383 8811 	msr	BASEPRI, r3
}
 8005efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 8005f00:	4804      	ldr	r0, [pc, #16]	; (8005f14 <chFactoryReleaseSemaphore+0x54>)
 8005f02:	f7fe bf55 	b.w	8004db0 <chMtxUnlock>
 8005f06:	2320      	movs	r3, #32
 8005f08:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8005f10:	601a      	str	r2, [r3, #0]
 8005f12:	deff      	udf	#255	; 0xff
 8005f14:	20000a28 	.word	0x20000a28
	...

08005f20 <oslib_test_009_003_execute>:
      chFactoryReleaseSemaphore(dsp);
    }
  }
}

static void oslib_test_009_003_execute(void) {
 8005f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_semaphore_t *dsp;

  /* [9.3.1] Retrieving a dynamic semaphore by name, must not exist.*/
  test_set_step(1);
 8005f22:	4c43      	ldr	r4, [pc, #268]	; (8006030 <oslib_test_009_003_execute+0x110>)
 8005f24:	2501      	movs	r5, #1
 8005f26:	6025      	str	r5, [r4, #0]
  {
    dsp = chFactoryFindSemaphore("mysem");
 8005f28:	f7ff fa02 	bl	8005330 <chFactoryFindSemaphore.constprop.0>
    test_assert(dsp == NULL, "found");
 8005f2c:	fab0 f080 	clz	r0, r0
 8005f30:	4940      	ldr	r1, [pc, #256]	; (8006034 <oslib_test_009_003_execute+0x114>)
 8005f32:	0940      	lsrs	r0, r0, #5
 8005f34:	f7fa fe1c 	bl	8000b70 <_test_assert>
 8005f38:	b100      	cbz	r0, 8005f3c <oslib_test_009_003_execute+0x1c>
  {
    dsp = chFactoryFindSemaphore("mysem");
    test_assert(dsp == NULL, "found");
  }
  test_end_step(6);
}
 8005f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	6023      	str	r3, [r4, #0]
    dsp = chFactoryCreateSemaphore("mysem", 0);
 8005f40:	f7ff f9d6 	bl	80052f0 <chFactoryCreateSemaphore.constprop.0>
 8005f44:	4606      	mov	r6, r0
    test_assert(dsp != NULL, "cannot create");
 8005f46:	3800      	subs	r0, #0
 8005f48:	bf18      	it	ne
 8005f4a:	2001      	movne	r0, #1
 8005f4c:	493a      	ldr	r1, [pc, #232]	; (8006038 <oslib_test_009_003_execute+0x118>)
 8005f4e:	f7fa fe0f 	bl	8000b70 <_test_assert>
 8005f52:	2800      	cmp	r0, #0
 8005f54:	d1f1      	bne.n	8005f3a <oslib_test_009_003_execute+0x1a>
  test_set_step(3);
 8005f56:	2303      	movs	r3, #3
 8005f58:	6023      	str	r3, [r4, #0]
    dsp1 = chFactoryCreateSemaphore("mysem", 0);
 8005f5a:	f7ff f9c9 	bl	80052f0 <chFactoryCreateSemaphore.constprop.0>
    test_assert(dsp1 == NULL, "can create");
 8005f5e:	fab0 f080 	clz	r0, r0
 8005f62:	4936      	ldr	r1, [pc, #216]	; (800603c <oslib_test_009_003_execute+0x11c>)
 8005f64:	0940      	lsrs	r0, r0, #5
 8005f66:	f7fa fe03 	bl	8000b70 <_test_assert>
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	d1e5      	bne.n	8005f3a <oslib_test_009_003_execute+0x1a>
  test_set_step(4);
 8005f6e:	2304      	movs	r3, #4
 8005f70:	6023      	str	r3, [r4, #0]
    dsp1 = chFactoryFindSemaphore("mysem");
 8005f72:	f7ff f9dd 	bl	8005330 <chFactoryFindSemaphore.constprop.0>
 8005f76:	4607      	mov	r7, r0
    test_assert(dsp1 != NULL, "not found");
 8005f78:	3800      	subs	r0, #0
 8005f7a:	bf18      	it	ne
 8005f7c:	2001      	movne	r0, #1
 8005f7e:	4930      	ldr	r1, [pc, #192]	; (8006040 <oslib_test_009_003_execute+0x120>)
 8005f80:	f7fa fdf6 	bl	8000b70 <_test_assert>
 8005f84:	2800      	cmp	r0, #0
 8005f86:	d1d8      	bne.n	8005f3a <oslib_test_009_003_execute+0x1a>
    test_assert(dsp == dsp1, "object reference mismatch");
 8005f88:	1bf0      	subs	r0, r6, r7
 8005f8a:	fab0 f080 	clz	r0, r0
 8005f8e:	492d      	ldr	r1, [pc, #180]	; (8006044 <oslib_test_009_003_execute+0x124>)
 8005f90:	0940      	lsrs	r0, r0, #5
 8005f92:	f7fa fded 	bl	8000b70 <_test_assert>
 8005f96:	2800      	cmp	r0, #0
 8005f98:	d1cf      	bne.n	8005f3a <oslib_test_009_003_execute+0x1a>
    test_assert(dsp1->element.refs == 2, "object reference mismatch");
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	4929      	ldr	r1, [pc, #164]	; (8006044 <oslib_test_009_003_execute+0x124>)
 8005f9e:	f1a0 0002 	sub.w	r0, r0, #2
 8005fa2:	fab0 f080 	clz	r0, r0
 8005fa6:	0940      	lsrs	r0, r0, #5
 8005fa8:	f7fa fde2 	bl	8000b70 <_test_assert>
 8005fac:	2800      	cmp	r0, #0
 8005fae:	d1c4      	bne.n	8005f3a <oslib_test_009_003_execute+0x1a>
 *
 * @api
 */
static inline dyn_element_t *chFactoryDuplicateReference(dyn_element_t *dep) {

  dep->refs++;
 8005fb0:	687b      	ldr	r3, [r7, #4]
    test_assert(dsp1 == dsp2, "object reference mismatch");
 8005fb2:	4924      	ldr	r1, [pc, #144]	; (8006044 <oslib_test_009_003_execute+0x124>)
 8005fb4:	442b      	add	r3, r5
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	607b      	str	r3, [r7, #4]
 8005fba:	f7fa fdd9 	bl	8000b70 <_test_assert>
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	d1bb      	bne.n	8005f3a <oslib_test_009_003_execute+0x1a>
    test_assert(dsp2->element.refs == 3, "object reference mismatch");
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	491f      	ldr	r1, [pc, #124]	; (8006044 <oslib_test_009_003_execute+0x124>)
 8005fc6:	f1a0 0003 	sub.w	r0, r0, #3
 8005fca:	fab0 f080 	clz	r0, r0
 8005fce:	0940      	lsrs	r0, r0, #5
 8005fd0:	f7fa fdce 	bl	8000b70 <_test_assert>
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	d1b0      	bne.n	8005f3a <oslib_test_009_003_execute+0x1a>
    chFactoryReleaseSemaphore(dsp2);
 8005fd8:	4638      	mov	r0, r7
 8005fda:	f7ff ff71 	bl	8005ec0 <chFactoryReleaseSemaphore>
    test_assert(dsp1->element.refs == 2, "references mismatch");
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	4919      	ldr	r1, [pc, #100]	; (8006048 <oslib_test_009_003_execute+0x128>)
 8005fe2:	f1a0 0002 	sub.w	r0, r0, #2
 8005fe6:	fab0 f080 	clz	r0, r0
 8005fea:	0940      	lsrs	r0, r0, #5
 8005fec:	f7fa fdc0 	bl	8000b70 <_test_assert>
 8005ff0:	2800      	cmp	r0, #0
 8005ff2:	d1a2      	bne.n	8005f3a <oslib_test_009_003_execute+0x1a>
    chFactoryReleaseSemaphore(dsp1);
 8005ff4:	4638      	mov	r0, r7
 8005ff6:	f7ff ff63 	bl	8005ec0 <chFactoryReleaseSemaphore>
    test_assert(dsp->element.refs == 1, "references mismatch");
 8005ffa:	6870      	ldr	r0, [r6, #4]
 8005ffc:	4912      	ldr	r1, [pc, #72]	; (8006048 <oslib_test_009_003_execute+0x128>)
 8005ffe:	1b40      	subs	r0, r0, r5
 8006000:	fab0 f080 	clz	r0, r0
 8006004:	0940      	lsrs	r0, r0, #5
 8006006:	f7fa fdb3 	bl	8000b70 <_test_assert>
 800600a:	2800      	cmp	r0, #0
 800600c:	d195      	bne.n	8005f3a <oslib_test_009_003_execute+0x1a>
    chFactoryReleaseSemaphore(dsp);
 800600e:	4630      	mov	r0, r6
  test_set_step(5);
 8006010:	2305      	movs	r3, #5
 8006012:	6023      	str	r3, [r4, #0]
    chFactoryReleaseSemaphore(dsp);
 8006014:	f7ff ff54 	bl	8005ec0 <chFactoryReleaseSemaphore>
  test_set_step(6);
 8006018:	2306      	movs	r3, #6
 800601a:	6023      	str	r3, [r4, #0]
    dsp = chFactoryFindSemaphore("mysem");
 800601c:	f7ff f988 	bl	8005330 <chFactoryFindSemaphore.constprop.0>
    test_assert(dsp == NULL, "found");
 8006020:	fab0 f080 	clz	r0, r0
}
 8006024:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dsp == NULL, "found");
 8006028:	4902      	ldr	r1, [pc, #8]	; (8006034 <oslib_test_009_003_execute+0x114>)
 800602a:	0940      	lsrs	r0, r0, #5
 800602c:	f7fa bda0 	b.w	8000b70 <_test_assert>
 8006030:	2000149c 	.word	0x2000149c
 8006034:	0800a088 	.word	0x0800a088
 8006038:	0800a068 	.word	0x0800a068
 800603c:	0800a078 	.word	0x0800a078
 8006040:	0800a084 	.word	0x0800a084
 8006044:	0800a090 	.word	0x0800a090
 8006048:	0800a0ac 	.word	0x0800a0ac
 800604c:	00000000 	.word	0x00000000

08006050 <oslib_test_009_003_teardown>:
static void oslib_test_009_003_teardown(void) {
 8006050:	b510      	push	{r4, lr}
  dsp = chFactoryFindSemaphore("mysem");
 8006052:	f7ff f96d 	bl	8005330 <chFactoryFindSemaphore.constprop.0>
  if (dsp != NULL) {
 8006056:	b140      	cbz	r0, 800606a <oslib_test_009_003_teardown+0x1a>
    while (dsp->element.refs > 0U) {
 8006058:	6843      	ldr	r3, [r0, #4]
 800605a:	4604      	mov	r4, r0
 800605c:	b12b      	cbz	r3, 800606a <oslib_test_009_003_teardown+0x1a>
      chFactoryReleaseSemaphore(dsp);
 800605e:	4620      	mov	r0, r4
 8006060:	f7ff ff2e 	bl	8005ec0 <chFactoryReleaseSemaphore>
    while (dsp->element.refs > 0U) {
 8006064:	6863      	ldr	r3, [r4, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1f9      	bne.n	800605e <oslib_test_009_003_teardown+0xe>
}
 800606a:	bd10      	pop	{r4, pc}
 800606c:	0000      	movs	r0, r0
	...

08006070 <chFactoryReleaseObject>:
void chFactoryReleaseObject(registered_object_t *rop) {
 8006070:	b538      	push	{r3, r4, r5, lr}
  F_LOCK();
 8006072:	4d14      	ldr	r5, [pc, #80]	; (80060c4 <chFactoryReleaseObject+0x54>)
void chFactoryReleaseObject(registered_object_t *rop) {
 8006074:	4604      	mov	r4, r0
  F_LOCK();
 8006076:	4628      	mov	r0, r5
 8006078:	f7fd f922 	bl	80032c0 <chMtxLock>
  dep->refs--;
 800607c:	6863      	ldr	r3, [r4, #4]
 800607e:	3b01      	subs	r3, #1
 8006080:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8006082:	b99b      	cbnz	r3, 80060ac <chFactoryReleaseObject+0x3c>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8006084:	f105 0210 	add.w	r2, r5, #16
 8006088:	4613      	mov	r3, r2
  while (prev->next != (dyn_element_t *)dlp) {
 800608a:	4619      	mov	r1, r3
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4293      	cmp	r3, r2
 8006090:	d011      	beq.n	80060b6 <chFactoryReleaseObject+0x46>
    if (prev->next == element) {
 8006092:	429c      	cmp	r4, r3
 8006094:	d1f9      	bne.n	800608a <chFactoryReleaseObject+0x1a>
      prev->next = element->next;
 8006096:	6823      	ldr	r3, [r4, #0]
 8006098:	600b      	str	r3, [r1, #0]
 800609a:	2320      	movs	r3, #32
 800609c:	f383 8811 	msr	BASEPRI, r3
 80060a0:	696b      	ldr	r3, [r5, #20]
 80060a2:	6023      	str	r3, [r4, #0]
 80060a4:	2300      	movs	r3, #0
  mp->next = php;
 80060a6:	616c      	str	r4, [r5, #20]
 80060a8:	f383 8811 	msr	BASEPRI, r3
}
 80060ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 80060b0:	4804      	ldr	r0, [pc, #16]	; (80060c4 <chFactoryReleaseObject+0x54>)
 80060b2:	f7fe be7d 	b.w	8004db0 <chMtxUnlock>
 80060b6:	2320      	movs	r3, #32
 80060b8:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 80060bc:	2300      	movs	r3, #0
 80060be:	696a      	ldr	r2, [r5, #20]
 80060c0:	601a      	str	r2, [r3, #0]
 80060c2:	deff      	udf	#255	; 0xff
 80060c4:	20000a28 	.word	0x20000a28
	...

080060d0 <oslib_test_009_001_execute>:
static void oslib_test_009_001_execute(void) {
 80060d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 80060d4:	4c50      	ldr	r4, [pc, #320]	; (8006218 <oslib_test_009_001_execute+0x148>)
 80060d6:	2501      	movs	r5, #1
 80060d8:	6025      	str	r5, [r4, #0]
    rop = chFactoryFindObject("myobj");
 80060da:	f7ff f8b9 	bl	8005250 <chFactoryFindObject.constprop.0>
    test_assert(rop == NULL, "found");
 80060de:	fab0 f080 	clz	r0, r0
 80060e2:	494e      	ldr	r1, [pc, #312]	; (800621c <oslib_test_009_001_execute+0x14c>)
 80060e4:	0940      	lsrs	r0, r0, #5
 80060e6:	f7fa fd43 	bl	8000b70 <_test_assert>
 80060ea:	b108      	cbz	r0, 80060f0 <oslib_test_009_001_execute+0x20>
}
 80060ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(2);
 80060f0:	2302      	movs	r3, #2
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 80060f2:	484b      	ldr	r0, [pc, #300]	; (8006220 <oslib_test_009_001_execute+0x150>)
  test_set_step(2);
 80060f4:	6023      	str	r3, [r4, #0]
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 80060f6:	f7ff f893 	bl	8005220 <chFactoryRegisterObject.constprop.0>
 80060fa:	4606      	mov	r6, r0
    test_assert(rop != NULL, "cannot register");
 80060fc:	3800      	subs	r0, #0
 80060fe:	bf18      	it	ne
 8006100:	2001      	movne	r0, #1
 8006102:	4948      	ldr	r1, [pc, #288]	; (8006224 <oslib_test_009_001_execute+0x154>)
 8006104:	f7fa fd34 	bl	8000b70 <_test_assert>
 8006108:	2800      	cmp	r0, #0
 800610a:	d1ef      	bne.n	80060ec <oslib_test_009_001_execute+0x1c>
  test_set_step(3);
 800610c:	2303      	movs	r3, #3
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 800610e:	4846      	ldr	r0, [pc, #280]	; (8006228 <oslib_test_009_001_execute+0x158>)
  test_set_step(3);
 8006110:	6023      	str	r3, [r4, #0]
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 8006112:	f7ff f885 	bl	8005220 <chFactoryRegisterObject.constprop.0>
    test_assert(rop1 == NULL, "can register");
 8006116:	fab0 f080 	clz	r0, r0
 800611a:	4944      	ldr	r1, [pc, #272]	; (800622c <oslib_test_009_001_execute+0x15c>)
 800611c:	0940      	lsrs	r0, r0, #5
 800611e:	f7fa fd27 	bl	8000b70 <_test_assert>
 8006122:	2800      	cmp	r0, #0
 8006124:	d1e2      	bne.n	80060ec <oslib_test_009_001_execute+0x1c>
  test_set_step(4);
 8006126:	2304      	movs	r3, #4
 8006128:	6023      	str	r3, [r4, #0]
    rop1 = chFactoryFindObject("myobj");
 800612a:	f7ff f891 	bl	8005250 <chFactoryFindObject.constprop.0>
 800612e:	4607      	mov	r7, r0
    test_assert(rop1 != NULL, "not found");
 8006130:	3800      	subs	r0, #0
 8006132:	bf18      	it	ne
 8006134:	2001      	movne	r0, #1
 8006136:	493e      	ldr	r1, [pc, #248]	; (8006230 <oslib_test_009_001_execute+0x160>)
 8006138:	f7fa fd1a 	bl	8000b70 <_test_assert>
 800613c:	2800      	cmp	r0, #0
 800613e:	d1d5      	bne.n	80060ec <oslib_test_009_001_execute+0x1c>
    test_assert(*(uint32_t *)(rop1->objp) == 0x55aa, "object mismatch");
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	493c      	ldr	r1, [pc, #240]	; (8006234 <oslib_test_009_001_execute+0x164>)
 8006144:	6818      	ldr	r0, [r3, #0]
 8006146:	f245 58aa 	movw	r8, #21930	; 0x55aa
 800614a:	eba0 0008 	sub.w	r0, r0, r8
 800614e:	fab0 f080 	clz	r0, r0
 8006152:	0940      	lsrs	r0, r0, #5
 8006154:	f7fa fd0c 	bl	8000b70 <_test_assert>
 8006158:	2800      	cmp	r0, #0
 800615a:	d1c7      	bne.n	80060ec <oslib_test_009_001_execute+0x1c>
    test_assert(rop == rop1, "object reference mismatch");
 800615c:	1bf0      	subs	r0, r6, r7
 800615e:	fab0 f080 	clz	r0, r0
 8006162:	4935      	ldr	r1, [pc, #212]	; (8006238 <oslib_test_009_001_execute+0x168>)
 8006164:	0940      	lsrs	r0, r0, #5
 8006166:	f7fa fd03 	bl	8000b70 <_test_assert>
 800616a:	2800      	cmp	r0, #0
 800616c:	d1be      	bne.n	80060ec <oslib_test_009_001_execute+0x1c>
    test_assert(rop1->element.refs == 2, "object reference mismatch");
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	4931      	ldr	r1, [pc, #196]	; (8006238 <oslib_test_009_001_execute+0x168>)
 8006172:	f1a0 0002 	sub.w	r0, r0, #2
 8006176:	fab0 f080 	clz	r0, r0
 800617a:	0940      	lsrs	r0, r0, #5
 800617c:	f7fa fcf8 	bl	8000b70 <_test_assert>
 8006180:	2800      	cmp	r0, #0
 8006182:	d1b3      	bne.n	80060ec <oslib_test_009_001_execute+0x1c>
 8006184:	687b      	ldr	r3, [r7, #4]
    test_assert(rop1 == rop2, "object reference mismatch");
 8006186:	492c      	ldr	r1, [pc, #176]	; (8006238 <oslib_test_009_001_execute+0x168>)
 8006188:	442b      	add	r3, r5
 800618a:	4628      	mov	r0, r5
 800618c:	607b      	str	r3, [r7, #4]
 800618e:	f7fa fcef 	bl	8000b70 <_test_assert>
 8006192:	2800      	cmp	r0, #0
 8006194:	d1aa      	bne.n	80060ec <oslib_test_009_001_execute+0x1c>
    test_assert(*(uint32_t *)(rop2->objp) == 0x55aa, "object mismatch");
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	4926      	ldr	r1, [pc, #152]	; (8006234 <oslib_test_009_001_execute+0x164>)
 800619a:	6818      	ldr	r0, [r3, #0]
 800619c:	eba0 0008 	sub.w	r0, r0, r8
 80061a0:	fab0 f080 	clz	r0, r0
 80061a4:	0940      	lsrs	r0, r0, #5
 80061a6:	f7fa fce3 	bl	8000b70 <_test_assert>
 80061aa:	2800      	cmp	r0, #0
 80061ac:	d19e      	bne.n	80060ec <oslib_test_009_001_execute+0x1c>
    test_assert(rop2->element.refs == 3, "object reference mismatch");
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	4921      	ldr	r1, [pc, #132]	; (8006238 <oslib_test_009_001_execute+0x168>)
 80061b2:	f1a0 0003 	sub.w	r0, r0, #3
 80061b6:	fab0 f080 	clz	r0, r0
 80061ba:	0940      	lsrs	r0, r0, #5
 80061bc:	f7fa fcd8 	bl	8000b70 <_test_assert>
 80061c0:	2800      	cmp	r0, #0
 80061c2:	d193      	bne.n	80060ec <oslib_test_009_001_execute+0x1c>
    chFactoryReleaseObject(rop2);
 80061c4:	4638      	mov	r0, r7
 80061c6:	f7ff ff53 	bl	8006070 <chFactoryReleaseObject>
    test_assert(rop1->element.refs == 2, "references mismatch");
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	491b      	ldr	r1, [pc, #108]	; (800623c <oslib_test_009_001_execute+0x16c>)
 80061ce:	1e82      	subs	r2, r0, #2
 80061d0:	4250      	negs	r0, r2
 80061d2:	4150      	adcs	r0, r2
 80061d4:	f7fa fccc 	bl	8000b70 <_test_assert>
 80061d8:	2800      	cmp	r0, #0
 80061da:	d187      	bne.n	80060ec <oslib_test_009_001_execute+0x1c>
    chFactoryReleaseObject(rop1);
 80061dc:	4638      	mov	r0, r7
 80061de:	f7ff ff47 	bl	8006070 <chFactoryReleaseObject>
    test_assert(rop->element.refs == 1, "references mismatch");
 80061e2:	6870      	ldr	r0, [r6, #4]
 80061e4:	4915      	ldr	r1, [pc, #84]	; (800623c <oslib_test_009_001_execute+0x16c>)
 80061e6:	1b43      	subs	r3, r0, r5
 80061e8:	4258      	negs	r0, r3
 80061ea:	4158      	adcs	r0, r3
 80061ec:	f7fa fcc0 	bl	8000b70 <_test_assert>
 80061f0:	2800      	cmp	r0, #0
 80061f2:	f47f af7b 	bne.w	80060ec <oslib_test_009_001_execute+0x1c>
    chFactoryReleaseObject(rop);
 80061f6:	4630      	mov	r0, r6
  test_set_step(5);
 80061f8:	2305      	movs	r3, #5
 80061fa:	6023      	str	r3, [r4, #0]
    chFactoryReleaseObject(rop);
 80061fc:	f7ff ff38 	bl	8006070 <chFactoryReleaseObject>
  test_set_step(6);
 8006200:	2306      	movs	r3, #6
 8006202:	6023      	str	r3, [r4, #0]
    rop = chFactoryFindObject("myobj");
 8006204:	f7ff f824 	bl	8005250 <chFactoryFindObject.constprop.0>
    test_assert(rop == NULL, "found");
 8006208:	fab0 f080 	clz	r0, r0
}
 800620c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(rop == NULL, "found");
 8006210:	4902      	ldr	r1, [pc, #8]	; (800621c <oslib_test_009_001_execute+0x14c>)
 8006212:	0940      	lsrs	r0, r0, #5
 8006214:	f7fa bcac 	b.w	8000b70 <_test_assert>
 8006218:	2000149c 	.word	0x2000149c
 800621c:	0800a088 	.word	0x0800a088
 8006220:	20000884 	.word	0x20000884
 8006224:	0800a0c0 	.word	0x0800a0c0
 8006228:	20000888 	.word	0x20000888
 800622c:	0800a0d0 	.word	0x0800a0d0
 8006230:	0800a084 	.word	0x0800a084
 8006234:	0800a0e0 	.word	0x0800a0e0
 8006238:	0800a090 	.word	0x0800a090
 800623c:	0800a0ac 	.word	0x0800a0ac

08006240 <oslib_test_009_001_teardown>:
static void oslib_test_009_001_teardown(void) {
 8006240:	b510      	push	{r4, lr}
  rop = chFactoryFindObject("myobj");
 8006242:	f7ff f805 	bl	8005250 <chFactoryFindObject.constprop.0>
  if (rop != NULL) {
 8006246:	b140      	cbz	r0, 800625a <oslib_test_009_001_teardown+0x1a>
    while (rop->element.refs > 0U) {
 8006248:	6843      	ldr	r3, [r0, #4]
 800624a:	4604      	mov	r4, r0
 800624c:	b12b      	cbz	r3, 800625a <oslib_test_009_001_teardown+0x1a>
      chFactoryReleaseObject(rop);
 800624e:	4620      	mov	r0, r4
 8006250:	f7ff ff0e 	bl	8006070 <chFactoryReleaseObject>
    while (rop->element.refs > 0U) {
 8006254:	6863      	ldr	r3, [r4, #4]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d1f9      	bne.n	800624e <oslib_test_009_001_teardown+0xe>
}
 800625a:	bd10      	pop	{r4, pc}
 800625c:	0000      	movs	r0, r0
	...

08006260 <chHeapStatus>:
 *                      free free block found space or @p NULL
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8006260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  heap_header_t *qp;
  size_t n, tpages, lpages;

  if (heapp == NULL) {
    heapp = &default_heap;
 8006264:	4c17      	ldr	r4, [pc, #92]	; (80062c4 <chHeapStatus+0x64>)
 8006266:	2800      	cmp	r0, #0
 8006268:	bf18      	it	ne
 800626a:	4604      	movne	r4, r0
  }

  H_LOCK(heapp);
 800626c:	f104 090c 	add.w	r9, r4, #12
 8006270:	4648      	mov	r0, r9
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8006272:	468a      	mov	sl, r1
 8006274:	4690      	mov	r8, r2
  H_LOCK(heapp);
 8006276:	f7fd f823 	bl	80032c0 <chMtxLock>
  tpages = 0U;
  lpages = 0U;
  n = 0U;
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 800627a:	6863      	ldr	r3, [r4, #4]
 800627c:	b1f3      	cbz	r3, 80062bc <chHeapStatus+0x5c>
  lpages = 0U;
 800627e:	2500      	movs	r5, #0
  tpages = 0U;
 8006280:	462e      	mov	r6, r5
  n = 0U;
 8006282:	462f      	mov	r7, r5
  while (H_NEXT(qp) != NULL) {
 8006284:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006288:	42a5      	cmp	r5, r4
    size_t pages = H_PAGES(H_NEXT(qp));

    /* Updating counters.*/
    n++;
 800628a:	f107 0701 	add.w	r7, r7, #1
    tpages += pages;
 800628e:	4426      	add	r6, r4
    if (pages > lpages) {
 8006290:	bf38      	it	cc
 8006292:	4625      	movcc	r5, r4
  while (H_NEXT(qp) != NULL) {
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1f5      	bne.n	8006284 <chHeapStatus+0x24>

    qp = H_NEXT(qp);
  }

  /* Writing out fragmented free memory.*/
  if (totalp != NULL) {
 8006298:	f1ba 0f00 	cmp.w	sl, #0
 800629c:	d002      	beq.n	80062a4 <chHeapStatus+0x44>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 800629e:	00f6      	lsls	r6, r6, #3
 80062a0:	f8ca 6000 	str.w	r6, [sl]
  }

  /* Writing out unfragmented free memory.*/
  if (largestp != NULL) {
 80062a4:	f1b8 0f00 	cmp.w	r8, #0
 80062a8:	d002      	beq.n	80062b0 <chHeapStatus+0x50>
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 80062aa:	00ed      	lsls	r5, r5, #3
 80062ac:	f8c8 5000 	str.w	r5, [r8]
  }
  H_UNLOCK(heapp);
 80062b0:	4648      	mov	r0, r9
 80062b2:	f7fe fd7d 	bl	8004db0 <chMtxUnlock>

  return n;
}
 80062b6:	4638      	mov	r0, r7
 80062b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  lpages = 0U;
 80062bc:	461d      	mov	r5, r3
  tpages = 0U;
 80062be:	461e      	mov	r6, r3
  n = 0U;
 80062c0:	461f      	mov	r7, r3
 80062c2:	e7e9      	b.n	8006298 <chHeapStatus+0x38>
 80062c4:	20000b50 	.word	0x20000b50
	...

080062d0 <chHeapFree>:
void chHeapFree(void *p) {
 80062d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  heapp = H_HEAP(hp);
 80062d2:	e950 5302 	ldrd	r5, r3, [r0, #-8]
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 80062d6:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 80062d8:	08db      	lsrs	r3, r3, #3
  H_LOCK(heapp);
 80062da:	f105 070c 	add.w	r7, r5, #12
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 80062de:	f840 3c04 	str.w	r3, [r0, #-4]
void chHeapFree(void *p) {
 80062e2:	4606      	mov	r6, r0
  hp = (heap_header_t *)p - 1U;
 80062e4:	f1a0 0408 	sub.w	r4, r0, #8
  qp = &heapp->header;
 80062e8:	3504      	adds	r5, #4
  H_LOCK(heapp);
 80062ea:	4638      	mov	r0, r7
 80062ec:	f7fc ffe8 	bl	80032c0 <chMtxLock>
  qp = &heapp->header;
 80062f0:	462b      	mov	r3, r5
    if (((qp == &heapp->header) || (hp > qp)) &&
 80062f2:	42ab      	cmp	r3, r5
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 80062f4:	681a      	ldr	r2, [r3, #0]
    if (((qp == &heapp->header) || (hp > qp)) &&
 80062f6:	d001      	beq.n	80062fc <chHeapFree+0x2c>
 80062f8:	429c      	cmp	r4, r3
 80062fa:	d902      	bls.n	8006302 <chHeapFree+0x32>
 80062fc:	b11a      	cbz	r2, 8006306 <chHeapFree+0x36>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 80062fe:	4294      	cmp	r4, r2
 8006300:	d301      	bcc.n	8006306 <chHeapFree+0x36>
    qp = H_NEXT(qp);
 8006302:	4613      	mov	r3, r2
 8006304:	e7f5      	b.n	80062f2 <chHeapFree+0x22>
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8006306:	f856 1c04 	ldr.w	r1, [r6, #-4]
      H_NEXT(hp) = H_NEXT(qp);
 800630a:	f846 2c08 	str.w	r2, [r6, #-8]
      H_NEXT(qp) = hp;
 800630e:	601c      	str	r4, [r3, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8006310:	1c4a      	adds	r2, r1, #1
 8006312:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8006316:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 800631a:	4281      	cmp	r1, r0
 800631c:	d00a      	beq.n	8006334 <chHeapFree+0x64>
      if ((H_LIMIT(qp) == hp)) {
 800631e:	6859      	ldr	r1, [r3, #4]
 8006320:	1c4a      	adds	r2, r1, #1
 8006322:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8006326:	4294      	cmp	r4, r2
 8006328:	d011      	beq.n	800634e <chHeapFree+0x7e>
  H_UNLOCK(heapp);
 800632a:	4638      	mov	r0, r7
}
 800632c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 8006330:	f7fe bd3e 	b.w	8004db0 <chMtxUnlock>
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8006334:	e9d1 1000 	ldrd	r1, r0, [r1]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 8006338:	4402      	add	r2, r0
 800633a:	f846 2c04 	str.w	r2, [r6, #-4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 800633e:	f846 1c08 	str.w	r1, [r6, #-8]
      if ((H_LIMIT(qp) == hp)) {
 8006342:	6859      	ldr	r1, [r3, #4]
 8006344:	1c4a      	adds	r2, r1, #1
 8006346:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800634a:	4294      	cmp	r4, r2
 800634c:	d1ed      	bne.n	800632a <chHeapFree+0x5a>
        H_NEXT(qp) = H_NEXT(hp);
 800634e:	e956 0202 	ldrd	r0, r2, [r6, #-8]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8006352:	3201      	adds	r2, #1
 8006354:	4411      	add	r1, r2
        H_NEXT(qp) = H_NEXT(hp);
 8006356:	6018      	str	r0, [r3, #0]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8006358:	6059      	str	r1, [r3, #4]
  H_UNLOCK(heapp);
 800635a:	4638      	mov	r0, r7
}
 800635c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 8006360:	f7fe bd26 	b.w	8004db0 <chMtxUnlock>
	...

08006370 <oslib_test_008_002_execute>:
 *   is freed using chHeapFree(), must not fail.
 * - [8.2.2] Testing allocation failure.
 * .
 */

static void oslib_test_008_002_execute(void) {
 8006370:	b570      	push	{r4, r5, r6, lr}
  void *p1;
  size_t total_size, largest_size;

  /* [8.2.1] Single block allocation using chHeapAlloc() then the block
     is freed using chHeapFree(), must not fail.*/
  test_set_step(1);
 8006372:	4e15      	ldr	r6, [pc, #84]	; (80063c8 <oslib_test_008_002_execute+0x58>)
static void oslib_test_008_002_execute(void) {
 8006374:	b082      	sub	sp, #8
  test_set_step(1);
 8006376:	2301      	movs	r3, #1
  {
    (void)chHeapStatus(NULL, &total_size, &largest_size);
 8006378:	466a      	mov	r2, sp
 800637a:	a901      	add	r1, sp, #4
 800637c:	2000      	movs	r0, #0
  test_set_step(1);
 800637e:	6033      	str	r3, [r6, #0]
    (void)chHeapStatus(NULL, &total_size, &largest_size);
 8006380:	f7ff ff6e 	bl	8006260 <chHeapStatus>
 8006384:	2110      	movs	r1, #16
 8006386:	4811      	ldr	r0, [pc, #68]	; (80063cc <oslib_test_008_002_execute+0x5c>)
 8006388:	f7fe fd42 	bl	8004e10 <chHeapAllocAligned.constprop.0>
 800638c:	4605      	mov	r5, r0
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    test_assert(p1 != NULL, "allocation failed");
 800638e:	3800      	subs	r0, #0
 8006390:	bf18      	it	ne
 8006392:	2001      	movne	r0, #1
 8006394:	490e      	ldr	r1, [pc, #56]	; (80063d0 <oslib_test_008_002_execute+0x60>)
 8006396:	f7fa fbeb 	bl	8000b70 <_test_assert>
 800639a:	b108      	cbz	r0, 80063a0 <oslib_test_008_002_execute+0x30>
  {
    p1 = chHeapAlloc(NULL, (size_t)-256);
    test_assert(p1 == NULL, "allocation not failed");
  }
  test_end_step(2);
}
 800639c:	b002      	add	sp, #8
 800639e:	bd70      	pop	{r4, r5, r6, pc}
    chHeapFree(p1);
 80063a0:	4604      	mov	r4, r0
 80063a2:	4628      	mov	r0, r5
 80063a4:	f7ff ff94 	bl	80062d0 <chHeapFree>
  test_set_step(2);
 80063a8:	2302      	movs	r3, #2
 80063aa:	4620      	mov	r0, r4
 80063ac:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 80063b0:	6033      	str	r3, [r6, #0]
 80063b2:	f7fe fd2d 	bl	8004e10 <chHeapAllocAligned.constprop.0>
    test_assert(p1 == NULL, "allocation not failed");
 80063b6:	fab0 f080 	clz	r0, r0
 80063ba:	4906      	ldr	r1, [pc, #24]	; (80063d4 <oslib_test_008_002_execute+0x64>)
 80063bc:	0940      	lsrs	r0, r0, #5
 80063be:	f7fa fbd7 	bl	8000b70 <_test_assert>
}
 80063c2:	b002      	add	sp, #8
 80063c4:	bd70      	pop	{r4, r5, r6, pc}
 80063c6:	bf00      	nop
 80063c8:	2000149c 	.word	0x2000149c
 80063cc:	200013fc 	.word	0x200013fc
 80063d0:	0800a0f0 	.word	0x0800a0f0
 80063d4:	0800a104 	.word	0x0800a104
	...

080063e0 <oslib_test_008_001_execute>:
static void oslib_test_008_001_execute(void) {
 80063e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 80063e4:	4cbe      	ldr	r4, [pc, #760]	; (80066e0 <oslib_test_008_001_execute+0x300>)
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 80063e6:	48bf      	ldr	r0, [pc, #764]	; (80066e4 <oslib_test_008_001_execute+0x304>)
static void oslib_test_008_001_execute(void) {
 80063e8:	b084      	sub	sp, #16
  test_set_step(1);
 80063ea:	2301      	movs	r3, #1
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 80063ec:	4669      	mov	r1, sp
 80063ee:	2200      	movs	r2, #0
  test_set_step(1);
 80063f0:	6023      	str	r3, [r4, #0]
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 80063f2:	f7ff ff35 	bl	8006260 <chHeapStatus>
 80063f6:	f1a0 0001 	sub.w	r0, r0, #1
 80063fa:	fab0 f080 	clz	r0, r0
 80063fe:	49ba      	ldr	r1, [pc, #744]	; (80066e8 <oslib_test_008_001_execute+0x308>)
 8006400:	0940      	lsrs	r0, r0, #5
 8006402:	f7fa fbb5 	bl	8000b70 <_test_assert>
 8006406:	b110      	cbz	r0, 800640e <oslib_test_008_001_execute+0x2e>
}
 8006408:	b004      	add	sp, #16
 800640a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(2);
 800640e:	2302      	movs	r3, #2
 8006410:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006414:	48b3      	ldr	r0, [pc, #716]	; (80066e4 <oslib_test_008_001_execute+0x304>)
 8006416:	6023      	str	r3, [r4, #0]
 8006418:	f7fe fcfa 	bl	8004e10 <chHeapAllocAligned.constprop.0>
    test_assert(p1 == NULL, "allocation not failed");
 800641c:	fab0 f080 	clz	r0, r0
 8006420:	49b2      	ldr	r1, [pc, #712]	; (80066ec <oslib_test_008_001_execute+0x30c>)
 8006422:	0940      	lsrs	r0, r0, #5
 8006424:	f7fa fba4 	bl	8000b70 <_test_assert>
 8006428:	2800      	cmp	r0, #0
 800642a:	d1ed      	bne.n	8006408 <oslib_test_008_001_execute+0x28>
  test_set_step(3);
 800642c:	2303      	movs	r3, #3
 800642e:	2110      	movs	r1, #16
 8006430:	48ac      	ldr	r0, [pc, #688]	; (80066e4 <oslib_test_008_001_execute+0x304>)
 8006432:	6023      	str	r3, [r4, #0]
 8006434:	f7fe fcec 	bl	8004e10 <chHeapAllocAligned.constprop.0>
 8006438:	4605      	mov	r5, r0
    test_assert(p1 != NULL, "allocation failed");
 800643a:	3800      	subs	r0, #0
 800643c:	bf18      	it	ne
 800643e:	2001      	movne	r0, #1
 8006440:	49ab      	ldr	r1, [pc, #684]	; (80066f0 <oslib_test_008_001_execute+0x310>)
 8006442:	f7fa fb95 	bl	8000b70 <_test_assert>
 8006446:	2800      	cmp	r0, #0
 8006448:	d1de      	bne.n	8006408 <oslib_test_008_001_execute+0x28>
    chHeapFree(p1);
 800644a:	4628      	mov	r0, r5
 800644c:	f7ff ff40 	bl	80062d0 <chHeapFree>
  test_set_step(4);
 8006450:	2304      	movs	r3, #4
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 8006452:	a903      	add	r1, sp, #12
 8006454:	48a3      	ldr	r0, [pc, #652]	; (80066e4 <oslib_test_008_001_execute+0x304>)
  test_set_step(4);
 8006456:	6023      	str	r3, [r4, #0]
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 8006458:	aa02      	add	r2, sp, #8
 800645a:	f7ff ff01 	bl	8006260 <chHeapStatus>
 800645e:	4603      	mov	r3, r0
    test_assert(n == 1, "missing free block");
 8006460:	f1a0 0001 	sub.w	r0, r0, #1
 8006464:	fab0 f080 	clz	r0, r0
 8006468:	49a2      	ldr	r1, [pc, #648]	; (80066f4 <oslib_test_008_001_execute+0x314>)
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 800646a:	9301      	str	r3, [sp, #4]
    test_assert(n == 1, "missing free block");
 800646c:	0940      	lsrs	r0, r0, #5
 800646e:	f7fa fb7f 	bl	8000b70 <_test_assert>
 8006472:	2800      	cmp	r0, #0
 8006474:	d1c8      	bne.n	8006408 <oslib_test_008_001_execute+0x28>
    test_assert(total_size >= ALLOC_SIZE, "unexpected heap state");
 8006476:	9803      	ldr	r0, [sp, #12]
 8006478:	499f      	ldr	r1, [pc, #636]	; (80066f8 <oslib_test_008_001_execute+0x318>)
 800647a:	280f      	cmp	r0, #15
 800647c:	bf94      	ite	ls
 800647e:	2000      	movls	r0, #0
 8006480:	2001      	movhi	r0, #1
 8006482:	f7fa fb75 	bl	8000b70 <_test_assert>
 8006486:	2800      	cmp	r0, #0
 8006488:	d1be      	bne.n	8006408 <oslib_test_008_001_execute+0x28>
    test_assert(total_size == largest_size, "unexpected heap state");
 800648a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 800648e:	1ac0      	subs	r0, r0, r3
 8006490:	fab0 f080 	clz	r0, r0
 8006494:	4998      	ldr	r1, [pc, #608]	; (80066f8 <oslib_test_008_001_execute+0x318>)
 8006496:	0940      	lsrs	r0, r0, #5
 8006498:	f7fa fb6a 	bl	8000b70 <_test_assert>
 800649c:	4605      	mov	r5, r0
 800649e:	2800      	cmp	r0, #0
 80064a0:	d1b2      	bne.n	8006408 <oslib_test_008_001_execute+0x28>
  test_set_step(5);
 80064a2:	2305      	movs	r3, #5
 80064a4:	2110      	movs	r1, #16
 80064a6:	488f      	ldr	r0, [pc, #572]	; (80066e4 <oslib_test_008_001_execute+0x304>)
 80064a8:	6023      	str	r3, [r4, #0]
 80064aa:	f7fe fcb1 	bl	8004e10 <chHeapAllocAligned.constprop.0>
 80064ae:	2110      	movs	r1, #16
 80064b0:	4680      	mov	r8, r0
 80064b2:	488c      	ldr	r0, [pc, #560]	; (80066e4 <oslib_test_008_001_execute+0x304>)
 80064b4:	f7fe fcac 	bl	8004e10 <chHeapAllocAligned.constprop.0>
 80064b8:	2110      	movs	r1, #16
 80064ba:	4607      	mov	r7, r0
 80064bc:	4889      	ldr	r0, [pc, #548]	; (80066e4 <oslib_test_008_001_execute+0x304>)
 80064be:	f7fe fca7 	bl	8004e10 <chHeapAllocAligned.constprop.0>
 80064c2:	4606      	mov	r6, r0
    chHeapFree(p1);                                 /* Does not merge.*/
 80064c4:	4640      	mov	r0, r8
 80064c6:	f7ff ff03 	bl	80062d0 <chHeapFree>
    chHeapFree(p2);                                 /* Merges backward.*/
 80064ca:	4638      	mov	r0, r7
 80064cc:	f7ff ff00 	bl	80062d0 <chHeapFree>
    chHeapFree(p3);                                 /* Merges both sides.*/
 80064d0:	4630      	mov	r0, r6
 80064d2:	f7ff fefd 	bl	80062d0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80064d6:	462a      	mov	r2, r5
 80064d8:	a901      	add	r1, sp, #4
 80064da:	4882      	ldr	r0, [pc, #520]	; (80066e4 <oslib_test_008_001_execute+0x304>)
 80064dc:	f7ff fec0 	bl	8006260 <chHeapStatus>
 80064e0:	f1a0 0001 	sub.w	r0, r0, #1
 80064e4:	fab0 f080 	clz	r0, r0
 80064e8:	497f      	ldr	r1, [pc, #508]	; (80066e8 <oslib_test_008_001_execute+0x308>)
 80064ea:	0940      	lsrs	r0, r0, #5
 80064ec:	f7fa fb40 	bl	8000b70 <_test_assert>
 80064f0:	4605      	mov	r5, r0
 80064f2:	2800      	cmp	r0, #0
 80064f4:	d188      	bne.n	8006408 <oslib_test_008_001_execute+0x28>
  test_set_step(6);
 80064f6:	2306      	movs	r3, #6
 80064f8:	2110      	movs	r1, #16
 80064fa:	487a      	ldr	r0, [pc, #488]	; (80066e4 <oslib_test_008_001_execute+0x304>)
 80064fc:	6023      	str	r3, [r4, #0]
 80064fe:	f7fe fc87 	bl	8004e10 <chHeapAllocAligned.constprop.0>
 8006502:	2110      	movs	r1, #16
 8006504:	4606      	mov	r6, r0
 8006506:	4877      	ldr	r0, [pc, #476]	; (80066e4 <oslib_test_008_001_execute+0x304>)
 8006508:	f7fe fc82 	bl	8004e10 <chHeapAllocAligned.constprop.0>
 800650c:	2110      	movs	r1, #16
 800650e:	4607      	mov	r7, r0
 8006510:	4874      	ldr	r0, [pc, #464]	; (80066e4 <oslib_test_008_001_execute+0x304>)
 8006512:	f7fe fc7d 	bl	8004e10 <chHeapAllocAligned.constprop.0>
    chHeapFree(p3);                                 /* Merges forward.*/
 8006516:	f7ff fedb 	bl	80062d0 <chHeapFree>
    chHeapFree(p2);                                 /* Merges forward.*/
 800651a:	4638      	mov	r0, r7
 800651c:	f7ff fed8 	bl	80062d0 <chHeapFree>
    chHeapFree(p1);                                 /* Merges forward.*/
 8006520:	4630      	mov	r0, r6
 8006522:	f7ff fed5 	bl	80062d0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8006526:	462a      	mov	r2, r5
 8006528:	a901      	add	r1, sp, #4
 800652a:	486e      	ldr	r0, [pc, #440]	; (80066e4 <oslib_test_008_001_execute+0x304>)
 800652c:	f7ff fe98 	bl	8006260 <chHeapStatus>
 8006530:	f1a0 0001 	sub.w	r0, r0, #1
 8006534:	fab0 f080 	clz	r0, r0
 8006538:	496b      	ldr	r1, [pc, #428]	; (80066e8 <oslib_test_008_001_execute+0x308>)
 800653a:	0940      	lsrs	r0, r0, #5
 800653c:	f7fa fb18 	bl	8000b70 <_test_assert>
 8006540:	4605      	mov	r5, r0
 8006542:	2800      	cmp	r0, #0
 8006544:	f47f af60 	bne.w	8006408 <oslib_test_008_001_execute+0x28>
  test_set_step(7);
 8006548:	2307      	movs	r3, #7
 800654a:	2111      	movs	r1, #17
 800654c:	4865      	ldr	r0, [pc, #404]	; (80066e4 <oslib_test_008_001_execute+0x304>)
 800654e:	6023      	str	r3, [r4, #0]
 8006550:	f7fe fc5e 	bl	8004e10 <chHeapAllocAligned.constprop.0>
 8006554:	2110      	movs	r1, #16
 8006556:	4606      	mov	r6, r0
 8006558:	4862      	ldr	r0, [pc, #392]	; (80066e4 <oslib_test_008_001_execute+0x304>)
 800655a:	f7fe fc59 	bl	8004e10 <chHeapAllocAligned.constprop.0>
 800655e:	4603      	mov	r3, r0
    chHeapFree(p1);
 8006560:	4630      	mov	r0, r6
 8006562:	461e      	mov	r6, r3
 8006564:	f7ff feb4 	bl	80062d0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 8006568:	462a      	mov	r2, r5
 800656a:	a901      	add	r1, sp, #4
 800656c:	485d      	ldr	r0, [pc, #372]	; (80066e4 <oslib_test_008_001_execute+0x304>)
 800656e:	f7ff fe77 	bl	8006260 <chHeapStatus>
 8006572:	f1a0 0002 	sub.w	r0, r0, #2
 8006576:	fab0 f080 	clz	r0, r0
 800657a:	4960      	ldr	r1, [pc, #384]	; (80066fc <oslib_test_008_001_execute+0x31c>)
 800657c:	0940      	lsrs	r0, r0, #5
 800657e:	f7fa faf7 	bl	8000b70 <_test_assert>
 8006582:	4605      	mov	r5, r0
 8006584:	2800      	cmp	r0, #0
 8006586:	f47f af3f 	bne.w	8006408 <oslib_test_008_001_execute+0x28>
 800658a:	2110      	movs	r1, #16
 800658c:	4855      	ldr	r0, [pc, #340]	; (80066e4 <oslib_test_008_001_execute+0x304>)
 800658e:	f7fe fc3f 	bl	8004e10 <chHeapAllocAligned.constprop.0>
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 8006592:	462a      	mov	r2, r5
 8006594:	4607      	mov	r7, r0
 8006596:	a901      	add	r1, sp, #4
 8006598:	4852      	ldr	r0, [pc, #328]	; (80066e4 <oslib_test_008_001_execute+0x304>)
 800659a:	f7ff fe61 	bl	8006260 <chHeapStatus>
 800659e:	2801      	cmp	r0, #1
 80065a0:	f000 809c 	beq.w	80066dc <oslib_test_008_001_execute+0x2fc>
 80065a4:	484f      	ldr	r0, [pc, #316]	; (80066e4 <oslib_test_008_001_execute+0x304>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	a901      	add	r1, sp, #4
 80065aa:	f7ff fe59 	bl	8006260 <chHeapStatus>
 80065ae:	f1a0 0c02 	sub.w	ip, r0, #2
 80065b2:	f1dc 0000 	rsbs	r0, ip, #0
 80065b6:	eb40 000c 	adc.w	r0, r0, ip
 80065ba:	494b      	ldr	r1, [pc, #300]	; (80066e8 <oslib_test_008_001_execute+0x308>)
 80065bc:	f7fa fad8 	bl	8000b70 <_test_assert>
 80065c0:	4605      	mov	r5, r0
 80065c2:	2800      	cmp	r0, #0
 80065c4:	f47f af20 	bne.w	8006408 <oslib_test_008_001_execute+0x28>
    chHeapFree(p2);
 80065c8:	4630      	mov	r0, r6
 80065ca:	f7ff fe81 	bl	80062d0 <chHeapFree>
    chHeapFree(p1);
 80065ce:	4638      	mov	r0, r7
 80065d0:	f7ff fe7e 	bl	80062d0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80065d4:	462a      	mov	r2, r5
 80065d6:	a901      	add	r1, sp, #4
 80065d8:	4842      	ldr	r0, [pc, #264]	; (80066e4 <oslib_test_008_001_execute+0x304>)
 80065da:	f7ff fe41 	bl	8006260 <chHeapStatus>
 80065de:	1e46      	subs	r6, r0, #1
 80065e0:	4270      	negs	r0, r6
 80065e2:	4941      	ldr	r1, [pc, #260]	; (80066e8 <oslib_test_008_001_execute+0x308>)
 80065e4:	4170      	adcs	r0, r6
 80065e6:	f7fa fac3 	bl	8000b70 <_test_assert>
 80065ea:	4605      	mov	r5, r0
 80065ec:	2800      	cmp	r0, #0
 80065ee:	f47f af0b 	bne.w	8006408 <oslib_test_008_001_execute+0x28>
  test_set_step(8);
 80065f2:	2308      	movs	r3, #8
 80065f4:	2110      	movs	r1, #16
 80065f6:	483b      	ldr	r0, [pc, #236]	; (80066e4 <oslib_test_008_001_execute+0x304>)
 80065f8:	6023      	str	r3, [r4, #0]
 80065fa:	f7fe fc09 	bl	8004e10 <chHeapAllocAligned.constprop.0>
 80065fe:	2110      	movs	r1, #16
 8006600:	4607      	mov	r7, r0
 8006602:	4838      	ldr	r0, [pc, #224]	; (80066e4 <oslib_test_008_001_execute+0x304>)
 8006604:	f7fe fc04 	bl	8004e10 <chHeapAllocAligned.constprop.0>
 8006608:	4606      	mov	r6, r0
    chHeapFree(p1);
 800660a:	4638      	mov	r0, r7
 800660c:	f7ff fe60 	bl	80062d0 <chHeapFree>
    test_assert( chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 8006610:	462a      	mov	r2, r5
 8006612:	a901      	add	r1, sp, #4
 8006614:	4833      	ldr	r0, [pc, #204]	; (80066e4 <oslib_test_008_001_execute+0x304>)
 8006616:	f7ff fe23 	bl	8006260 <chHeapStatus>
 800661a:	1e85      	subs	r5, r0, #2
 800661c:	4268      	negs	r0, r5
 800661e:	4168      	adcs	r0, r5
 8006620:	4936      	ldr	r1, [pc, #216]	; (80066fc <oslib_test_008_001_execute+0x31c>)
 8006622:	f7fa faa5 	bl	8000b70 <_test_assert>
 8006626:	4605      	mov	r5, r0
 8006628:	2800      	cmp	r0, #0
 800662a:	f47f aeed 	bne.w	8006408 <oslib_test_008_001_execute+0x28>
 800662e:	2120      	movs	r1, #32
 8006630:	482c      	ldr	r0, [pc, #176]	; (80066e4 <oslib_test_008_001_execute+0x304>)
 8006632:	f7fe fbed 	bl	8004e10 <chHeapAllocAligned.constprop.0>
    chHeapFree(p1);
 8006636:	f7ff fe4b 	bl	80062d0 <chHeapFree>
    chHeapFree(p2);
 800663a:	4630      	mov	r0, r6
 800663c:	f7ff fe48 	bl	80062d0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8006640:	462a      	mov	r2, r5
 8006642:	a901      	add	r1, sp, #4
 8006644:	4827      	ldr	r0, [pc, #156]	; (80066e4 <oslib_test_008_001_execute+0x304>)
 8006646:	f7ff fe0b 	bl	8006260 <chHeapStatus>
 800664a:	1e41      	subs	r1, r0, #1
 800664c:	4248      	negs	r0, r1
 800664e:	4148      	adcs	r0, r1
 8006650:	4925      	ldr	r1, [pc, #148]	; (80066e8 <oslib_test_008_001_execute+0x308>)
 8006652:	f7fa fa8d 	bl	8000b70 <_test_assert>
 8006656:	4602      	mov	r2, r0
 8006658:	2800      	cmp	r0, #0
 800665a:	f47f aed5 	bne.w	8006408 <oslib_test_008_001_execute+0x28>
  test_set_step(9);
 800665e:	2309      	movs	r3, #9
    (void)chHeapStatus(&test_heap, &n, NULL);
 8006660:	a901      	add	r1, sp, #4
 8006662:	4820      	ldr	r0, [pc, #128]	; (80066e4 <oslib_test_008_001_execute+0x304>)
  test_set_step(9);
 8006664:	6023      	str	r3, [r4, #0]
    (void)chHeapStatus(&test_heap, &n, NULL);
 8006666:	f7ff fdfb 	bl	8006260 <chHeapStatus>
 800666a:	9901      	ldr	r1, [sp, #4]
 800666c:	481d      	ldr	r0, [pc, #116]	; (80066e4 <oslib_test_008_001_execute+0x304>)
 800666e:	f7fe fbcf 	bl	8004e10 <chHeapAllocAligned.constprop.0>
 8006672:	4606      	mov	r6, r0
    test_assert(p1 != NULL, "allocation failed");
 8006674:	3800      	subs	r0, #0
 8006676:	491e      	ldr	r1, [pc, #120]	; (80066f0 <oslib_test_008_001_execute+0x310>)
 8006678:	bf18      	it	ne
 800667a:	2001      	movne	r0, #1
 800667c:	f7fa fa78 	bl	8000b70 <_test_assert>
 8006680:	4602      	mov	r2, r0
 8006682:	2800      	cmp	r0, #0
 8006684:	f47f aec0 	bne.w	8006408 <oslib_test_008_001_execute+0x28>
    test_assert(chHeapStatus(&test_heap, NULL, NULL) == 0, "not empty");
 8006688:	4601      	mov	r1, r0
 800668a:	4816      	ldr	r0, [pc, #88]	; (80066e4 <oslib_test_008_001_execute+0x304>)
 800668c:	f7ff fde8 	bl	8006260 <chHeapStatus>
 8006690:	fab0 f080 	clz	r0, r0
 8006694:	491a      	ldr	r1, [pc, #104]	; (8006700 <oslib_test_008_001_execute+0x320>)
 8006696:	0940      	lsrs	r0, r0, #5
 8006698:	f7fa fa6a 	bl	8000b70 <_test_assert>
 800669c:	4605      	mov	r5, r0
 800669e:	2800      	cmp	r0, #0
 80066a0:	f47f aeb2 	bne.w	8006408 <oslib_test_008_001_execute+0x28>
    chHeapFree(p1);
 80066a4:	4630      	mov	r0, r6
 80066a6:	f7ff fe13 	bl	80062d0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80066aa:	462a      	mov	r2, r5
 80066ac:	a901      	add	r1, sp, #4
  test_set_step(10);
 80066ae:	230a      	movs	r3, #10
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80066b0:	480c      	ldr	r0, [pc, #48]	; (80066e4 <oslib_test_008_001_execute+0x304>)
  test_set_step(10);
 80066b2:	6023      	str	r3, [r4, #0]
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80066b4:	f7ff fdd4 	bl	8006260 <chHeapStatus>
 80066b8:	1e42      	subs	r2, r0, #1
 80066ba:	4250      	negs	r0, r2
 80066bc:	4150      	adcs	r0, r2
 80066be:	490a      	ldr	r1, [pc, #40]	; (80066e8 <oslib_test_008_001_execute+0x308>)
 80066c0:	f7fa fa56 	bl	8000b70 <_test_assert>
 80066c4:	2800      	cmp	r0, #0
 80066c6:	f47f ae9f 	bne.w	8006408 <oslib_test_008_001_execute+0x28>
    test_assert(n == sz, "size changed");
 80066ca:	e9dd 3000 	ldrd	r3, r0, [sp]
 80066ce:	1ac3      	subs	r3, r0, r3
 80066d0:	4258      	negs	r0, r3
 80066d2:	490c      	ldr	r1, [pc, #48]	; (8006704 <oslib_test_008_001_execute+0x324>)
 80066d4:	4158      	adcs	r0, r3
 80066d6:	f7fa fa4b 	bl	8000b70 <_test_assert>
 80066da:	e695      	b.n	8006408 <oslib_test_008_001_execute+0x28>
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 80066dc:	2001      	movs	r0, #1
 80066de:	e76c      	b.n	80065ba <oslib_test_008_001_execute+0x1da>
 80066e0:	2000149c 	.word	0x2000149c
 80066e4:	200013fc 	.word	0x200013fc
 80066e8:	0800a11c 	.word	0x0800a11c
 80066ec:	0800a104 	.word	0x0800a104
 80066f0:	0800a0f0 	.word	0x0800a0f0
 80066f4:	0800a12c 	.word	0x0800a12c
 80066f8:	0800a140 	.word	0x0800a140
 80066fc:	0800a158 	.word	0x0800a158
 8006700:	08009eec 	.word	0x08009eec
 8006704:	0800a168 	.word	0x0800a168
	...

08006710 <dyn_release_object_heap.part.0>:
static void dyn_release_object_heap(dyn_element_t *dep,
 8006710:	4603      	mov	r3, r0
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8006712:	4608      	mov	r0, r1
 8006714:	e001      	b.n	800671a <dyn_release_object_heap.part.0+0xa>
    if (prev->next == element) {
 8006716:	4283      	cmp	r3, r0
 8006718:	d006      	beq.n	8006728 <dyn_release_object_heap.part.0+0x18>
  while (prev->next != (dyn_element_t *)dlp) {
 800671a:	4602      	mov	r2, r0
 800671c:	6800      	ldr	r0, [r0, #0]
 800671e:	4288      	cmp	r0, r1
 8006720:	d1f9      	bne.n	8006716 <dyn_release_object_heap.part.0+0x6>
  return NULL;
 8006722:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 8006724:	f7ff bdd4 	b.w	80062d0 <chHeapFree>
      prev->next = element->next;
 8006728:	6803      	ldr	r3, [r0, #0]
 800672a:	6013      	str	r3, [r2, #0]
    chHeapFree((void *)dep);
 800672c:	f7ff bdd0 	b.w	80062d0 <chHeapFree>

08006730 <chFactoryReleasePipe>:
 *
 * @param[in] dpp       dynamic pipe object reference
 *
 * @api
 */
void chFactoryReleasePipe(dyn_pipe_t *dpp) {
 8006730:	b510      	push	{r4, lr}
 8006732:	4604      	mov	r4, r0

  F_LOCK();
 8006734:	4807      	ldr	r0, [pc, #28]	; (8006754 <chFactoryReleasePipe+0x24>)
 8006736:	f7fc fdc3 	bl	80032c0 <chMtxLock>
  dep->refs--;
 800673a:	6863      	ldr	r3, [r4, #4]
 800673c:	3b01      	subs	r3, #1
 800673e:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8006740:	b91b      	cbnz	r3, 800674a <chFactoryReleasePipe+0x1a>
 8006742:	4905      	ldr	r1, [pc, #20]	; (8006758 <chFactoryReleasePipe+0x28>)
 8006744:	4620      	mov	r0, r4
 8006746:	f7ff ffe3 	bl	8006710 <dyn_release_object_heap.part.0>

  dyn_release_object_heap(&dpp->element, &ch_factory.pipe_list);

  F_UNLOCK();
}
 800674a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 800674e:	4801      	ldr	r0, [pc, #4]	; (8006754 <chFactoryReleasePipe+0x24>)
 8006750:	f7fe bb2e 	b.w	8004db0 <chMtxUnlock>
 8006754:	20000a28 	.word	0x20000a28
 8006758:	20000a6c 	.word	0x20000a6c
 800675c:	00000000 	.word	0x00000000

08006760 <oslib_test_009_006_execute>:
      chFactoryReleasePipe(dpp);
    }
  }
}

static void oslib_test_009_006_execute(void) {
 8006760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_pipe_t *dpp;

  /* [9.6.1] Retrieving a dynamic pipe by name, must not exist.*/
  test_set_step(1);
 8006762:	4c43      	ldr	r4, [pc, #268]	; (8006870 <oslib_test_009_006_execute+0x110>)
 8006764:	2501      	movs	r5, #1
 8006766:	6025      	str	r5, [r4, #0]
  {
    dpp = chFactoryFindPipe("mypipe");
 8006768:	f7fe feca 	bl	8005500 <chFactoryFindPipe.constprop.0>
    test_assert(dpp == NULL, "found");
 800676c:	fab0 f080 	clz	r0, r0
 8006770:	4940      	ldr	r1, [pc, #256]	; (8006874 <oslib_test_009_006_execute+0x114>)
 8006772:	0940      	lsrs	r0, r0, #5
 8006774:	f7fa f9fc 	bl	8000b70 <_test_assert>
 8006778:	b100      	cbz	r0, 800677c <oslib_test_009_006_execute+0x1c>
  {
    dpp = chFactoryFindPipe("mypipe");
    test_assert(dpp == NULL, "found");
  }
  test_end_step(6);
}
 800677a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 800677c:	2302      	movs	r3, #2
 800677e:	6023      	str	r3, [r4, #0]
    dpp = chFactoryCreatePipe("mypipe", 16U);
 8006780:	f7fe fe86 	bl	8005490 <chFactoryCreatePipe.constprop.0>
 8006784:	4606      	mov	r6, r0
    test_assert(dpp != NULL, "cannot create");
 8006786:	3800      	subs	r0, #0
 8006788:	bf18      	it	ne
 800678a:	2001      	movne	r0, #1
 800678c:	493a      	ldr	r1, [pc, #232]	; (8006878 <oslib_test_009_006_execute+0x118>)
 800678e:	f7fa f9ef 	bl	8000b70 <_test_assert>
 8006792:	2800      	cmp	r0, #0
 8006794:	d1f1      	bne.n	800677a <oslib_test_009_006_execute+0x1a>
  test_set_step(3);
 8006796:	2303      	movs	r3, #3
 8006798:	6023      	str	r3, [r4, #0]
    dpp1 = chFactoryCreatePipe("mypipe", 16U);
 800679a:	f7fe fe79 	bl	8005490 <chFactoryCreatePipe.constprop.0>
    test_assert(dpp1 == NULL, "can create");
 800679e:	fab0 f080 	clz	r0, r0
 80067a2:	4936      	ldr	r1, [pc, #216]	; (800687c <oslib_test_009_006_execute+0x11c>)
 80067a4:	0940      	lsrs	r0, r0, #5
 80067a6:	f7fa f9e3 	bl	8000b70 <_test_assert>
 80067aa:	2800      	cmp	r0, #0
 80067ac:	d1e5      	bne.n	800677a <oslib_test_009_006_execute+0x1a>
  test_set_step(4);
 80067ae:	2304      	movs	r3, #4
 80067b0:	6023      	str	r3, [r4, #0]
    dpp1 = chFactoryFindPipe("mypipe");
 80067b2:	f7fe fea5 	bl	8005500 <chFactoryFindPipe.constprop.0>
 80067b6:	4607      	mov	r7, r0
    test_assert(dpp1 != NULL, "not found");
 80067b8:	3800      	subs	r0, #0
 80067ba:	bf18      	it	ne
 80067bc:	2001      	movne	r0, #1
 80067be:	4930      	ldr	r1, [pc, #192]	; (8006880 <oslib_test_009_006_execute+0x120>)
 80067c0:	f7fa f9d6 	bl	8000b70 <_test_assert>
 80067c4:	2800      	cmp	r0, #0
 80067c6:	d1d8      	bne.n	800677a <oslib_test_009_006_execute+0x1a>
    test_assert(dpp == dpp1, "object reference mismatch");
 80067c8:	1bf0      	subs	r0, r6, r7
 80067ca:	fab0 f080 	clz	r0, r0
 80067ce:	492d      	ldr	r1, [pc, #180]	; (8006884 <oslib_test_009_006_execute+0x124>)
 80067d0:	0940      	lsrs	r0, r0, #5
 80067d2:	f7fa f9cd 	bl	8000b70 <_test_assert>
 80067d6:	2800      	cmp	r0, #0
 80067d8:	d1cf      	bne.n	800677a <oslib_test_009_006_execute+0x1a>
    test_assert(dpp1->element.refs == 2, "object reference mismatch");
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	4929      	ldr	r1, [pc, #164]	; (8006884 <oslib_test_009_006_execute+0x124>)
 80067de:	f1a0 0002 	sub.w	r0, r0, #2
 80067e2:	fab0 f080 	clz	r0, r0
 80067e6:	0940      	lsrs	r0, r0, #5
 80067e8:	f7fa f9c2 	bl	8000b70 <_test_assert>
 80067ec:	2800      	cmp	r0, #0
 80067ee:	d1c4      	bne.n	800677a <oslib_test_009_006_execute+0x1a>
 80067f0:	687b      	ldr	r3, [r7, #4]
    test_assert(dpp1 == dpp2, "object reference mismatch");
 80067f2:	4924      	ldr	r1, [pc, #144]	; (8006884 <oslib_test_009_006_execute+0x124>)
 80067f4:	442b      	add	r3, r5
 80067f6:	4628      	mov	r0, r5
 80067f8:	607b      	str	r3, [r7, #4]
 80067fa:	f7fa f9b9 	bl	8000b70 <_test_assert>
 80067fe:	2800      	cmp	r0, #0
 8006800:	d1bb      	bne.n	800677a <oslib_test_009_006_execute+0x1a>
    test_assert(dpp2->element.refs == 3, "object reference mismatch");
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	491f      	ldr	r1, [pc, #124]	; (8006884 <oslib_test_009_006_execute+0x124>)
 8006806:	f1a0 0003 	sub.w	r0, r0, #3
 800680a:	fab0 f080 	clz	r0, r0
 800680e:	0940      	lsrs	r0, r0, #5
 8006810:	f7fa f9ae 	bl	8000b70 <_test_assert>
 8006814:	2800      	cmp	r0, #0
 8006816:	d1b0      	bne.n	800677a <oslib_test_009_006_execute+0x1a>
    chFactoryReleasePipe(dpp2);
 8006818:	4638      	mov	r0, r7
 800681a:	f7ff ff89 	bl	8006730 <chFactoryReleasePipe>
    test_assert(dpp1->element.refs == 2, "references mismatch");
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	4919      	ldr	r1, [pc, #100]	; (8006888 <oslib_test_009_006_execute+0x128>)
 8006822:	f1a0 0002 	sub.w	r0, r0, #2
 8006826:	fab0 f080 	clz	r0, r0
 800682a:	0940      	lsrs	r0, r0, #5
 800682c:	f7fa f9a0 	bl	8000b70 <_test_assert>
 8006830:	2800      	cmp	r0, #0
 8006832:	d1a2      	bne.n	800677a <oslib_test_009_006_execute+0x1a>
    chFactoryReleasePipe(dpp1);
 8006834:	4638      	mov	r0, r7
 8006836:	f7ff ff7b 	bl	8006730 <chFactoryReleasePipe>
    test_assert(dpp->element.refs == 1, "references mismatch");
 800683a:	6870      	ldr	r0, [r6, #4]
 800683c:	4912      	ldr	r1, [pc, #72]	; (8006888 <oslib_test_009_006_execute+0x128>)
 800683e:	1b40      	subs	r0, r0, r5
 8006840:	fab0 f080 	clz	r0, r0
 8006844:	0940      	lsrs	r0, r0, #5
 8006846:	f7fa f993 	bl	8000b70 <_test_assert>
 800684a:	2800      	cmp	r0, #0
 800684c:	d195      	bne.n	800677a <oslib_test_009_006_execute+0x1a>
    chFactoryReleasePipe(dpp);
 800684e:	4630      	mov	r0, r6
  test_set_step(5);
 8006850:	2305      	movs	r3, #5
 8006852:	6023      	str	r3, [r4, #0]
    chFactoryReleasePipe(dpp);
 8006854:	f7ff ff6c 	bl	8006730 <chFactoryReleasePipe>
  test_set_step(6);
 8006858:	2306      	movs	r3, #6
 800685a:	6023      	str	r3, [r4, #0]
    dpp = chFactoryFindPipe("mypipe");
 800685c:	f7fe fe50 	bl	8005500 <chFactoryFindPipe.constprop.0>
    test_assert(dpp == NULL, "found");
 8006860:	fab0 f080 	clz	r0, r0
}
 8006864:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dpp == NULL, "found");
 8006868:	4902      	ldr	r1, [pc, #8]	; (8006874 <oslib_test_009_006_execute+0x114>)
 800686a:	0940      	lsrs	r0, r0, #5
 800686c:	f7fa b980 	b.w	8000b70 <_test_assert>
 8006870:	2000149c 	.word	0x2000149c
 8006874:	0800a088 	.word	0x0800a088
 8006878:	0800a068 	.word	0x0800a068
 800687c:	0800a078 	.word	0x0800a078
 8006880:	0800a084 	.word	0x0800a084
 8006884:	0800a090 	.word	0x0800a090
 8006888:	0800a0ac 	.word	0x0800a0ac
 800688c:	00000000 	.word	0x00000000

08006890 <oslib_test_009_006_teardown>:
static void oslib_test_009_006_teardown(void) {
 8006890:	b510      	push	{r4, lr}
  dpp = chFactoryFindPipe("mypipe");
 8006892:	f7fe fe35 	bl	8005500 <chFactoryFindPipe.constprop.0>
  if (dpp != NULL) {
 8006896:	b140      	cbz	r0, 80068aa <oslib_test_009_006_teardown+0x1a>
    while (dpp->element.refs > 0U) {
 8006898:	6843      	ldr	r3, [r0, #4]
 800689a:	4604      	mov	r4, r0
 800689c:	b12b      	cbz	r3, 80068aa <oslib_test_009_006_teardown+0x1a>
      chFactoryReleasePipe(dpp);
 800689e:	4620      	mov	r0, r4
 80068a0:	f7ff ff46 	bl	8006730 <chFactoryReleasePipe>
    while (dpp->element.refs > 0U) {
 80068a4:	6863      	ldr	r3, [r4, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1f9      	bne.n	800689e <oslib_test_009_006_teardown+0xe>
}
 80068aa:	bd10      	pop	{r4, pc}
 80068ac:	0000      	movs	r0, r0
	...

080068b0 <chFactoryReleaseObjectsFIFO>:
void chFactoryReleaseObjectsFIFO(dyn_objects_fifo_t *dofp) {
 80068b0:	b510      	push	{r4, lr}
 80068b2:	4604      	mov	r4, r0
  F_LOCK();
 80068b4:	4807      	ldr	r0, [pc, #28]	; (80068d4 <chFactoryReleaseObjectsFIFO+0x24>)
 80068b6:	f7fc fd03 	bl	80032c0 <chMtxLock>
  dep->refs--;
 80068ba:	6863      	ldr	r3, [r4, #4]
 80068bc:	3b01      	subs	r3, #1
 80068be:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 80068c0:	b91b      	cbnz	r3, 80068ca <chFactoryReleaseObjectsFIFO+0x1a>
 80068c2:	4905      	ldr	r1, [pc, #20]	; (80068d8 <chFactoryReleaseObjectsFIFO+0x28>)
 80068c4:	4620      	mov	r0, r4
 80068c6:	f7ff ff23 	bl	8006710 <dyn_release_object_heap.part.0>
}
 80068ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 80068ce:	4801      	ldr	r0, [pc, #4]	; (80068d4 <chFactoryReleaseObjectsFIFO+0x24>)
 80068d0:	f7fe ba6e 	b.w	8004db0 <chMtxUnlock>
 80068d4:	20000a28 	.word	0x20000a28
 80068d8:	20000a68 	.word	0x20000a68
 80068dc:	00000000 	.word	0x00000000

080068e0 <oslib_test_009_005_execute>:
static void oslib_test_009_005_execute(void) {
 80068e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 80068e2:	4c43      	ldr	r4, [pc, #268]	; (80069f0 <oslib_test_009_005_execute+0x110>)
 80068e4:	2501      	movs	r5, #1
 80068e6:	6025      	str	r5, [r4, #0]
    dofp = chFactoryFindObjectsFIFO("myfifo");
 80068e8:	f7fe fdba 	bl	8005460 <chFactoryFindObjectsFIFO.constprop.0>
    test_assert(dofp == NULL, "found");
 80068ec:	fab0 f080 	clz	r0, r0
 80068f0:	4940      	ldr	r1, [pc, #256]	; (80069f4 <oslib_test_009_005_execute+0x114>)
 80068f2:	0940      	lsrs	r0, r0, #5
 80068f4:	f7fa f93c 	bl	8000b70 <_test_assert>
 80068f8:	b100      	cbz	r0, 80068fc <oslib_test_009_005_execute+0x1c>
}
 80068fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 80068fc:	2302      	movs	r3, #2
 80068fe:	6023      	str	r3, [r4, #0]
    dofp = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 8006900:	f7fe fd76 	bl	80053f0 <chFactoryCreateObjectsFIFO.constprop.0>
 8006904:	4606      	mov	r6, r0
    test_assert(dofp != NULL, "cannot create");
 8006906:	3800      	subs	r0, #0
 8006908:	bf18      	it	ne
 800690a:	2001      	movne	r0, #1
 800690c:	493a      	ldr	r1, [pc, #232]	; (80069f8 <oslib_test_009_005_execute+0x118>)
 800690e:	f7fa f92f 	bl	8000b70 <_test_assert>
 8006912:	2800      	cmp	r0, #0
 8006914:	d1f1      	bne.n	80068fa <oslib_test_009_005_execute+0x1a>
  test_set_step(3);
 8006916:	2303      	movs	r3, #3
 8006918:	6023      	str	r3, [r4, #0]
    dofp1 = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 800691a:	f7fe fd69 	bl	80053f0 <chFactoryCreateObjectsFIFO.constprop.0>
    test_assert(dofp1 == NULL, "can create");
 800691e:	fab0 f080 	clz	r0, r0
 8006922:	4936      	ldr	r1, [pc, #216]	; (80069fc <oslib_test_009_005_execute+0x11c>)
 8006924:	0940      	lsrs	r0, r0, #5
 8006926:	f7fa f923 	bl	8000b70 <_test_assert>
 800692a:	2800      	cmp	r0, #0
 800692c:	d1e5      	bne.n	80068fa <oslib_test_009_005_execute+0x1a>
  test_set_step(4);
 800692e:	2304      	movs	r3, #4
 8006930:	6023      	str	r3, [r4, #0]
    dofp1 = chFactoryFindObjectsFIFO("myfifo");
 8006932:	f7fe fd95 	bl	8005460 <chFactoryFindObjectsFIFO.constprop.0>
 8006936:	4607      	mov	r7, r0
    test_assert(dofp1 != NULL, "not found");
 8006938:	3800      	subs	r0, #0
 800693a:	bf18      	it	ne
 800693c:	2001      	movne	r0, #1
 800693e:	4930      	ldr	r1, [pc, #192]	; (8006a00 <oslib_test_009_005_execute+0x120>)
 8006940:	f7fa f916 	bl	8000b70 <_test_assert>
 8006944:	2800      	cmp	r0, #0
 8006946:	d1d8      	bne.n	80068fa <oslib_test_009_005_execute+0x1a>
    test_assert(dofp == dofp1, "object reference mismatch");
 8006948:	1bf0      	subs	r0, r6, r7
 800694a:	fab0 f080 	clz	r0, r0
 800694e:	492d      	ldr	r1, [pc, #180]	; (8006a04 <oslib_test_009_005_execute+0x124>)
 8006950:	0940      	lsrs	r0, r0, #5
 8006952:	f7fa f90d 	bl	8000b70 <_test_assert>
 8006956:	2800      	cmp	r0, #0
 8006958:	d1cf      	bne.n	80068fa <oslib_test_009_005_execute+0x1a>
    test_assert(dofp1->element.refs == 2, "object reference mismatch");
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	4929      	ldr	r1, [pc, #164]	; (8006a04 <oslib_test_009_005_execute+0x124>)
 800695e:	f1a0 0002 	sub.w	r0, r0, #2
 8006962:	fab0 f080 	clz	r0, r0
 8006966:	0940      	lsrs	r0, r0, #5
 8006968:	f7fa f902 	bl	8000b70 <_test_assert>
 800696c:	2800      	cmp	r0, #0
 800696e:	d1c4      	bne.n	80068fa <oslib_test_009_005_execute+0x1a>
 8006970:	687b      	ldr	r3, [r7, #4]
    test_assert(dofp1 == dofp2, "object reference mismatch");
 8006972:	4924      	ldr	r1, [pc, #144]	; (8006a04 <oslib_test_009_005_execute+0x124>)
 8006974:	442b      	add	r3, r5
 8006976:	4628      	mov	r0, r5
 8006978:	607b      	str	r3, [r7, #4]
 800697a:	f7fa f8f9 	bl	8000b70 <_test_assert>
 800697e:	2800      	cmp	r0, #0
 8006980:	d1bb      	bne.n	80068fa <oslib_test_009_005_execute+0x1a>
    test_assert(dofp2->element.refs == 3, "object reference mismatch");
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	491f      	ldr	r1, [pc, #124]	; (8006a04 <oslib_test_009_005_execute+0x124>)
 8006986:	f1a0 0003 	sub.w	r0, r0, #3
 800698a:	fab0 f080 	clz	r0, r0
 800698e:	0940      	lsrs	r0, r0, #5
 8006990:	f7fa f8ee 	bl	8000b70 <_test_assert>
 8006994:	2800      	cmp	r0, #0
 8006996:	d1b0      	bne.n	80068fa <oslib_test_009_005_execute+0x1a>
    chFactoryReleaseObjectsFIFO(dofp2);
 8006998:	4638      	mov	r0, r7
 800699a:	f7ff ff89 	bl	80068b0 <chFactoryReleaseObjectsFIFO>
    test_assert(dofp1->element.refs == 2, "references mismatch");
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	4919      	ldr	r1, [pc, #100]	; (8006a08 <oslib_test_009_005_execute+0x128>)
 80069a2:	f1a0 0002 	sub.w	r0, r0, #2
 80069a6:	fab0 f080 	clz	r0, r0
 80069aa:	0940      	lsrs	r0, r0, #5
 80069ac:	f7fa f8e0 	bl	8000b70 <_test_assert>
 80069b0:	2800      	cmp	r0, #0
 80069b2:	d1a2      	bne.n	80068fa <oslib_test_009_005_execute+0x1a>
    chFactoryReleaseObjectsFIFO(dofp1);
 80069b4:	4638      	mov	r0, r7
 80069b6:	f7ff ff7b 	bl	80068b0 <chFactoryReleaseObjectsFIFO>
    test_assert(dofp->element.refs == 1, "references mismatch");
 80069ba:	6870      	ldr	r0, [r6, #4]
 80069bc:	4912      	ldr	r1, [pc, #72]	; (8006a08 <oslib_test_009_005_execute+0x128>)
 80069be:	1b40      	subs	r0, r0, r5
 80069c0:	fab0 f080 	clz	r0, r0
 80069c4:	0940      	lsrs	r0, r0, #5
 80069c6:	f7fa f8d3 	bl	8000b70 <_test_assert>
 80069ca:	2800      	cmp	r0, #0
 80069cc:	d195      	bne.n	80068fa <oslib_test_009_005_execute+0x1a>
    chFactoryReleaseObjectsFIFO(dofp);
 80069ce:	4630      	mov	r0, r6
  test_set_step(5);
 80069d0:	2305      	movs	r3, #5
 80069d2:	6023      	str	r3, [r4, #0]
    chFactoryReleaseObjectsFIFO(dofp);
 80069d4:	f7ff ff6c 	bl	80068b0 <chFactoryReleaseObjectsFIFO>
  test_set_step(6);
 80069d8:	2306      	movs	r3, #6
 80069da:	6023      	str	r3, [r4, #0]
    dofp = chFactoryFindObjectsFIFO("myfifo");
 80069dc:	f7fe fd40 	bl	8005460 <chFactoryFindObjectsFIFO.constprop.0>
    test_assert(dofp == NULL, "found");
 80069e0:	fab0 f080 	clz	r0, r0
}
 80069e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dofp == NULL, "found");
 80069e8:	4902      	ldr	r1, [pc, #8]	; (80069f4 <oslib_test_009_005_execute+0x114>)
 80069ea:	0940      	lsrs	r0, r0, #5
 80069ec:	f7fa b8c0 	b.w	8000b70 <_test_assert>
 80069f0:	2000149c 	.word	0x2000149c
 80069f4:	0800a088 	.word	0x0800a088
 80069f8:	0800a068 	.word	0x0800a068
 80069fc:	0800a078 	.word	0x0800a078
 8006a00:	0800a084 	.word	0x0800a084
 8006a04:	0800a090 	.word	0x0800a090
 8006a08:	0800a0ac 	.word	0x0800a0ac
 8006a0c:	00000000 	.word	0x00000000

08006a10 <oslib_test_009_005_teardown>:
static void oslib_test_009_005_teardown(void) {
 8006a10:	b510      	push	{r4, lr}
  dofp = chFactoryFindObjectsFIFO("myfifo");
 8006a12:	f7fe fd25 	bl	8005460 <chFactoryFindObjectsFIFO.constprop.0>
  if (dofp != NULL) {
 8006a16:	b140      	cbz	r0, 8006a2a <oslib_test_009_005_teardown+0x1a>
    while (dofp->element.refs > 0U) {
 8006a18:	6843      	ldr	r3, [r0, #4]
 8006a1a:	4604      	mov	r4, r0
 8006a1c:	b12b      	cbz	r3, 8006a2a <oslib_test_009_005_teardown+0x1a>
      chFactoryReleaseObjectsFIFO(dofp);
 8006a1e:	4620      	mov	r0, r4
 8006a20:	f7ff ff46 	bl	80068b0 <chFactoryReleaseObjectsFIFO>
    while (dofp->element.refs > 0U) {
 8006a24:	6863      	ldr	r3, [r4, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1f9      	bne.n	8006a1e <oslib_test_009_005_teardown+0xe>
}
 8006a2a:	bd10      	pop	{r4, pc}
 8006a2c:	0000      	movs	r0, r0
	...

08006a30 <chFactoryReleaseMailbox>:
void chFactoryReleaseMailbox(dyn_mailbox_t *dmp) {
 8006a30:	b510      	push	{r4, lr}
 8006a32:	4604      	mov	r4, r0
  F_LOCK();
 8006a34:	4807      	ldr	r0, [pc, #28]	; (8006a54 <chFactoryReleaseMailbox+0x24>)
 8006a36:	f7fc fc43 	bl	80032c0 <chMtxLock>
  dep->refs--;
 8006a3a:	6863      	ldr	r3, [r4, #4]
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8006a40:	b91b      	cbnz	r3, 8006a4a <chFactoryReleaseMailbox+0x1a>
 8006a42:	4905      	ldr	r1, [pc, #20]	; (8006a58 <chFactoryReleaseMailbox+0x28>)
 8006a44:	4620      	mov	r0, r4
 8006a46:	f7ff fe63 	bl	8006710 <dyn_release_object_heap.part.0>
}
 8006a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 8006a4e:	4801      	ldr	r0, [pc, #4]	; (8006a54 <chFactoryReleaseMailbox+0x24>)
 8006a50:	f7fe b9ae 	b.w	8004db0 <chMtxUnlock>
 8006a54:	20000a28 	.word	0x20000a28
 8006a58:	20000a64 	.word	0x20000a64
 8006a5c:	00000000 	.word	0x00000000

08006a60 <oslib_test_009_004_execute>:
static void oslib_test_009_004_execute(void) {
 8006a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8006a62:	4c43      	ldr	r4, [pc, #268]	; (8006b70 <oslib_test_009_004_execute+0x110>)
 8006a64:	2501      	movs	r5, #1
 8006a66:	6025      	str	r5, [r4, #0]
    dmp = chFactoryFindMailbox("mymbx");
 8006a68:	f7fe fcaa 	bl	80053c0 <chFactoryFindMailbox.constprop.0>
    test_assert(dmp == NULL, "found");
 8006a6c:	fab0 f080 	clz	r0, r0
 8006a70:	4940      	ldr	r1, [pc, #256]	; (8006b74 <oslib_test_009_004_execute+0x114>)
 8006a72:	0940      	lsrs	r0, r0, #5
 8006a74:	f7fa f87c 	bl	8000b70 <_test_assert>
 8006a78:	b100      	cbz	r0, 8006a7c <oslib_test_009_004_execute+0x1c>
}
 8006a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	6023      	str	r3, [r4, #0]
    dmp = chFactoryCreateMailbox("mymbx", 16U);
 8006a80:	f7fe fc6e 	bl	8005360 <chFactoryCreateMailbox.constprop.0>
 8006a84:	4606      	mov	r6, r0
    test_assert(dmp != NULL, "cannot create");
 8006a86:	3800      	subs	r0, #0
 8006a88:	bf18      	it	ne
 8006a8a:	2001      	movne	r0, #1
 8006a8c:	493a      	ldr	r1, [pc, #232]	; (8006b78 <oslib_test_009_004_execute+0x118>)
 8006a8e:	f7fa f86f 	bl	8000b70 <_test_assert>
 8006a92:	2800      	cmp	r0, #0
 8006a94:	d1f1      	bne.n	8006a7a <oslib_test_009_004_execute+0x1a>
  test_set_step(3);
 8006a96:	2303      	movs	r3, #3
 8006a98:	6023      	str	r3, [r4, #0]
    dmp1 = chFactoryCreateMailbox("mymbx", 16U);
 8006a9a:	f7fe fc61 	bl	8005360 <chFactoryCreateMailbox.constprop.0>
    test_assert(dmp1 == NULL, "can create");
 8006a9e:	fab0 f080 	clz	r0, r0
 8006aa2:	4936      	ldr	r1, [pc, #216]	; (8006b7c <oslib_test_009_004_execute+0x11c>)
 8006aa4:	0940      	lsrs	r0, r0, #5
 8006aa6:	f7fa f863 	bl	8000b70 <_test_assert>
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	d1e5      	bne.n	8006a7a <oslib_test_009_004_execute+0x1a>
  test_set_step(4);
 8006aae:	2304      	movs	r3, #4
 8006ab0:	6023      	str	r3, [r4, #0]
    dmp1 = chFactoryFindMailbox("mymbx");
 8006ab2:	f7fe fc85 	bl	80053c0 <chFactoryFindMailbox.constprop.0>
 8006ab6:	4607      	mov	r7, r0
    test_assert(dmp1 != NULL, "not found");
 8006ab8:	3800      	subs	r0, #0
 8006aba:	bf18      	it	ne
 8006abc:	2001      	movne	r0, #1
 8006abe:	4930      	ldr	r1, [pc, #192]	; (8006b80 <oslib_test_009_004_execute+0x120>)
 8006ac0:	f7fa f856 	bl	8000b70 <_test_assert>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	d1d8      	bne.n	8006a7a <oslib_test_009_004_execute+0x1a>
    test_assert(dmp == dmp1, "object reference mismatch");
 8006ac8:	1bf0      	subs	r0, r6, r7
 8006aca:	fab0 f080 	clz	r0, r0
 8006ace:	492d      	ldr	r1, [pc, #180]	; (8006b84 <oslib_test_009_004_execute+0x124>)
 8006ad0:	0940      	lsrs	r0, r0, #5
 8006ad2:	f7fa f84d 	bl	8000b70 <_test_assert>
 8006ad6:	2800      	cmp	r0, #0
 8006ad8:	d1cf      	bne.n	8006a7a <oslib_test_009_004_execute+0x1a>
    test_assert(dmp1->element.refs == 2, "object reference mismatch");
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	4929      	ldr	r1, [pc, #164]	; (8006b84 <oslib_test_009_004_execute+0x124>)
 8006ade:	f1a0 0002 	sub.w	r0, r0, #2
 8006ae2:	fab0 f080 	clz	r0, r0
 8006ae6:	0940      	lsrs	r0, r0, #5
 8006ae8:	f7fa f842 	bl	8000b70 <_test_assert>
 8006aec:	2800      	cmp	r0, #0
 8006aee:	d1c4      	bne.n	8006a7a <oslib_test_009_004_execute+0x1a>
 8006af0:	687b      	ldr	r3, [r7, #4]
    test_assert(dmp1 == dmp2, "object reference mismatch");
 8006af2:	4924      	ldr	r1, [pc, #144]	; (8006b84 <oslib_test_009_004_execute+0x124>)
 8006af4:	442b      	add	r3, r5
 8006af6:	4628      	mov	r0, r5
 8006af8:	607b      	str	r3, [r7, #4]
 8006afa:	f7fa f839 	bl	8000b70 <_test_assert>
 8006afe:	2800      	cmp	r0, #0
 8006b00:	d1bb      	bne.n	8006a7a <oslib_test_009_004_execute+0x1a>
    test_assert(dmp2->element.refs == 3, "object reference mismatch");
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	491f      	ldr	r1, [pc, #124]	; (8006b84 <oslib_test_009_004_execute+0x124>)
 8006b06:	f1a0 0003 	sub.w	r0, r0, #3
 8006b0a:	fab0 f080 	clz	r0, r0
 8006b0e:	0940      	lsrs	r0, r0, #5
 8006b10:	f7fa f82e 	bl	8000b70 <_test_assert>
 8006b14:	2800      	cmp	r0, #0
 8006b16:	d1b0      	bne.n	8006a7a <oslib_test_009_004_execute+0x1a>
    chFactoryReleaseMailbox(dmp2);
 8006b18:	4638      	mov	r0, r7
 8006b1a:	f7ff ff89 	bl	8006a30 <chFactoryReleaseMailbox>
    test_assert(dmp1->element.refs == 2, "references mismatch");
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	4919      	ldr	r1, [pc, #100]	; (8006b88 <oslib_test_009_004_execute+0x128>)
 8006b22:	f1a0 0002 	sub.w	r0, r0, #2
 8006b26:	fab0 f080 	clz	r0, r0
 8006b2a:	0940      	lsrs	r0, r0, #5
 8006b2c:	f7fa f820 	bl	8000b70 <_test_assert>
 8006b30:	2800      	cmp	r0, #0
 8006b32:	d1a2      	bne.n	8006a7a <oslib_test_009_004_execute+0x1a>
    chFactoryReleaseMailbox(dmp1);
 8006b34:	4638      	mov	r0, r7
 8006b36:	f7ff ff7b 	bl	8006a30 <chFactoryReleaseMailbox>
    test_assert(dmp->element.refs == 1, "references mismatch");
 8006b3a:	6870      	ldr	r0, [r6, #4]
 8006b3c:	4912      	ldr	r1, [pc, #72]	; (8006b88 <oslib_test_009_004_execute+0x128>)
 8006b3e:	1b40      	subs	r0, r0, r5
 8006b40:	fab0 f080 	clz	r0, r0
 8006b44:	0940      	lsrs	r0, r0, #5
 8006b46:	f7fa f813 	bl	8000b70 <_test_assert>
 8006b4a:	2800      	cmp	r0, #0
 8006b4c:	d195      	bne.n	8006a7a <oslib_test_009_004_execute+0x1a>
    chFactoryReleaseMailbox(dmp);
 8006b4e:	4630      	mov	r0, r6
  test_set_step(5);
 8006b50:	2305      	movs	r3, #5
 8006b52:	6023      	str	r3, [r4, #0]
    chFactoryReleaseMailbox(dmp);
 8006b54:	f7ff ff6c 	bl	8006a30 <chFactoryReleaseMailbox>
  test_set_step(6);
 8006b58:	2306      	movs	r3, #6
 8006b5a:	6023      	str	r3, [r4, #0]
    dmp = chFactoryFindMailbox("mymbx");
 8006b5c:	f7fe fc30 	bl	80053c0 <chFactoryFindMailbox.constprop.0>
    test_assert(dmp == NULL, "found");
 8006b60:	fab0 f080 	clz	r0, r0
}
 8006b64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dmp == NULL, "found");
 8006b68:	4902      	ldr	r1, [pc, #8]	; (8006b74 <oslib_test_009_004_execute+0x114>)
 8006b6a:	0940      	lsrs	r0, r0, #5
 8006b6c:	f7fa b800 	b.w	8000b70 <_test_assert>
 8006b70:	2000149c 	.word	0x2000149c
 8006b74:	0800a088 	.word	0x0800a088
 8006b78:	0800a068 	.word	0x0800a068
 8006b7c:	0800a078 	.word	0x0800a078
 8006b80:	0800a084 	.word	0x0800a084
 8006b84:	0800a090 	.word	0x0800a090
 8006b88:	0800a0ac 	.word	0x0800a0ac
 8006b8c:	00000000 	.word	0x00000000

08006b90 <oslib_test_009_004_teardown>:
static void oslib_test_009_004_teardown(void) {
 8006b90:	b510      	push	{r4, lr}
  dmp = chFactoryFindMailbox("mymbx");
 8006b92:	f7fe fc15 	bl	80053c0 <chFactoryFindMailbox.constprop.0>
  if (dmp != NULL) {
 8006b96:	b140      	cbz	r0, 8006baa <oslib_test_009_004_teardown+0x1a>
    while (dmp->element.refs > 0U) {
 8006b98:	6843      	ldr	r3, [r0, #4]
 8006b9a:	4604      	mov	r4, r0
 8006b9c:	b12b      	cbz	r3, 8006baa <oslib_test_009_004_teardown+0x1a>
      chFactoryReleaseMailbox(dmp);
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	f7ff ff46 	bl	8006a30 <chFactoryReleaseMailbox>
    while (dmp->element.refs > 0U) {
 8006ba4:	6863      	ldr	r3, [r4, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1f9      	bne.n	8006b9e <oslib_test_009_004_teardown+0xe>
}
 8006baa:	bd10      	pop	{r4, pc}
 8006bac:	0000      	movs	r0, r0
	...

08006bb0 <chFactoryReleaseBuffer>:
void chFactoryReleaseBuffer(dyn_buffer_t *dbp) {
 8006bb0:	b510      	push	{r4, lr}
 8006bb2:	4604      	mov	r4, r0
  F_LOCK();
 8006bb4:	4807      	ldr	r0, [pc, #28]	; (8006bd4 <chFactoryReleaseBuffer+0x24>)
 8006bb6:	f7fc fb83 	bl	80032c0 <chMtxLock>
  dep->refs--;
 8006bba:	6863      	ldr	r3, [r4, #4]
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8006bc0:	b91b      	cbnz	r3, 8006bca <chFactoryReleaseBuffer+0x1a>
 8006bc2:	4905      	ldr	r1, [pc, #20]	; (8006bd8 <chFactoryReleaseBuffer+0x28>)
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f7ff fda3 	bl	8006710 <dyn_release_object_heap.part.0>
}
 8006bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 8006bce:	4801      	ldr	r0, [pc, #4]	; (8006bd4 <chFactoryReleaseBuffer+0x24>)
 8006bd0:	f7fe b8ee 	b.w	8004db0 <chMtxUnlock>
 8006bd4:	20000a28 	.word	0x20000a28
 8006bd8:	20000a4c 	.word	0x20000a4c
 8006bdc:	00000000 	.word	0x00000000

08006be0 <oslib_test_009_002_execute>:
static void oslib_test_009_002_execute(void) {
 8006be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8006be2:	4c43      	ldr	r4, [pc, #268]	; (8006cf0 <oslib_test_009_002_execute+0x110>)
 8006be4:	2501      	movs	r5, #1
 8006be6:	6025      	str	r5, [r4, #0]
    dbp = chFactoryFindBuffer("mybuf");
 8006be8:	f7fe fb6a 	bl	80052c0 <chFactoryFindBuffer.constprop.0>
    test_assert(dbp == NULL, "found");
 8006bec:	fab0 f080 	clz	r0, r0
 8006bf0:	4940      	ldr	r1, [pc, #256]	; (8006cf4 <oslib_test_009_002_execute+0x114>)
 8006bf2:	0940      	lsrs	r0, r0, #5
 8006bf4:	f7f9 ffbc 	bl	8000b70 <_test_assert>
 8006bf8:	b100      	cbz	r0, 8006bfc <oslib_test_009_002_execute+0x1c>
}
 8006bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	6023      	str	r3, [r4, #0]
    dbp = chFactoryCreateBuffer("mybuf", 128U);
 8006c00:	f7fe fb3e 	bl	8005280 <chFactoryCreateBuffer.constprop.0>
 8006c04:	4606      	mov	r6, r0
    test_assert(dbp != NULL, "cannot create");
 8006c06:	3800      	subs	r0, #0
 8006c08:	bf18      	it	ne
 8006c0a:	2001      	movne	r0, #1
 8006c0c:	493a      	ldr	r1, [pc, #232]	; (8006cf8 <oslib_test_009_002_execute+0x118>)
 8006c0e:	f7f9 ffaf 	bl	8000b70 <_test_assert>
 8006c12:	2800      	cmp	r0, #0
 8006c14:	d1f1      	bne.n	8006bfa <oslib_test_009_002_execute+0x1a>
  test_set_step(3);
 8006c16:	2303      	movs	r3, #3
 8006c18:	6023      	str	r3, [r4, #0]
    dbp1 = chFactoryCreateBuffer("mybuf", 128U);
 8006c1a:	f7fe fb31 	bl	8005280 <chFactoryCreateBuffer.constprop.0>
    test_assert(dbp1 == NULL, "can create");
 8006c1e:	fab0 f080 	clz	r0, r0
 8006c22:	4936      	ldr	r1, [pc, #216]	; (8006cfc <oslib_test_009_002_execute+0x11c>)
 8006c24:	0940      	lsrs	r0, r0, #5
 8006c26:	f7f9 ffa3 	bl	8000b70 <_test_assert>
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	d1e5      	bne.n	8006bfa <oslib_test_009_002_execute+0x1a>
  test_set_step(4);
 8006c2e:	2304      	movs	r3, #4
 8006c30:	6023      	str	r3, [r4, #0]
    dbp1 = chFactoryFindBuffer("mybuf");
 8006c32:	f7fe fb45 	bl	80052c0 <chFactoryFindBuffer.constprop.0>
 8006c36:	4607      	mov	r7, r0
    test_assert(dbp1 != NULL, "not found");
 8006c38:	3800      	subs	r0, #0
 8006c3a:	bf18      	it	ne
 8006c3c:	2001      	movne	r0, #1
 8006c3e:	4930      	ldr	r1, [pc, #192]	; (8006d00 <oslib_test_009_002_execute+0x120>)
 8006c40:	f7f9 ff96 	bl	8000b70 <_test_assert>
 8006c44:	2800      	cmp	r0, #0
 8006c46:	d1d8      	bne.n	8006bfa <oslib_test_009_002_execute+0x1a>
    test_assert(dbp == dbp1, "object reference mismatch");
 8006c48:	1bf0      	subs	r0, r6, r7
 8006c4a:	fab0 f080 	clz	r0, r0
 8006c4e:	492d      	ldr	r1, [pc, #180]	; (8006d04 <oslib_test_009_002_execute+0x124>)
 8006c50:	0940      	lsrs	r0, r0, #5
 8006c52:	f7f9 ff8d 	bl	8000b70 <_test_assert>
 8006c56:	2800      	cmp	r0, #0
 8006c58:	d1cf      	bne.n	8006bfa <oslib_test_009_002_execute+0x1a>
    test_assert(dbp1->element.refs == 2, "object reference mismatch");
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	4929      	ldr	r1, [pc, #164]	; (8006d04 <oslib_test_009_002_execute+0x124>)
 8006c5e:	f1a0 0002 	sub.w	r0, r0, #2
 8006c62:	fab0 f080 	clz	r0, r0
 8006c66:	0940      	lsrs	r0, r0, #5
 8006c68:	f7f9 ff82 	bl	8000b70 <_test_assert>
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	d1c4      	bne.n	8006bfa <oslib_test_009_002_execute+0x1a>
 8006c70:	687b      	ldr	r3, [r7, #4]
    test_assert(dbp1 == dbp2, "object reference mismatch");
 8006c72:	4924      	ldr	r1, [pc, #144]	; (8006d04 <oslib_test_009_002_execute+0x124>)
 8006c74:	442b      	add	r3, r5
 8006c76:	4628      	mov	r0, r5
 8006c78:	607b      	str	r3, [r7, #4]
 8006c7a:	f7f9 ff79 	bl	8000b70 <_test_assert>
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	d1bb      	bne.n	8006bfa <oslib_test_009_002_execute+0x1a>
    test_assert(dbp2->element.refs == 3, "object reference mismatch");
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	491f      	ldr	r1, [pc, #124]	; (8006d04 <oslib_test_009_002_execute+0x124>)
 8006c86:	f1a0 0003 	sub.w	r0, r0, #3
 8006c8a:	fab0 f080 	clz	r0, r0
 8006c8e:	0940      	lsrs	r0, r0, #5
 8006c90:	f7f9 ff6e 	bl	8000b70 <_test_assert>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	d1b0      	bne.n	8006bfa <oslib_test_009_002_execute+0x1a>
    chFactoryReleaseBuffer(dbp2);
 8006c98:	4638      	mov	r0, r7
 8006c9a:	f7ff ff89 	bl	8006bb0 <chFactoryReleaseBuffer>
    test_assert(dbp1->element.refs == 2, "references mismatch");
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	4919      	ldr	r1, [pc, #100]	; (8006d08 <oslib_test_009_002_execute+0x128>)
 8006ca2:	f1a0 0002 	sub.w	r0, r0, #2
 8006ca6:	fab0 f080 	clz	r0, r0
 8006caa:	0940      	lsrs	r0, r0, #5
 8006cac:	f7f9 ff60 	bl	8000b70 <_test_assert>
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	d1a2      	bne.n	8006bfa <oslib_test_009_002_execute+0x1a>
    chFactoryReleaseBuffer(dbp1);
 8006cb4:	4638      	mov	r0, r7
 8006cb6:	f7ff ff7b 	bl	8006bb0 <chFactoryReleaseBuffer>
    test_assert(dbp->element.refs == 1, "references mismatch");
 8006cba:	6870      	ldr	r0, [r6, #4]
 8006cbc:	4912      	ldr	r1, [pc, #72]	; (8006d08 <oslib_test_009_002_execute+0x128>)
 8006cbe:	1b40      	subs	r0, r0, r5
 8006cc0:	fab0 f080 	clz	r0, r0
 8006cc4:	0940      	lsrs	r0, r0, #5
 8006cc6:	f7f9 ff53 	bl	8000b70 <_test_assert>
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	d195      	bne.n	8006bfa <oslib_test_009_002_execute+0x1a>
    chFactoryReleaseBuffer(dbp);
 8006cce:	4630      	mov	r0, r6
  test_set_step(5);
 8006cd0:	2305      	movs	r3, #5
 8006cd2:	6023      	str	r3, [r4, #0]
    chFactoryReleaseBuffer(dbp);
 8006cd4:	f7ff ff6c 	bl	8006bb0 <chFactoryReleaseBuffer>
  test_set_step(6);
 8006cd8:	2306      	movs	r3, #6
 8006cda:	6023      	str	r3, [r4, #0]
    dbp = chFactoryFindBuffer("mybuf");
 8006cdc:	f7fe faf0 	bl	80052c0 <chFactoryFindBuffer.constprop.0>
    test_assert(dbp == NULL, "found");
 8006ce0:	fab0 f080 	clz	r0, r0
}
 8006ce4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dbp == NULL, "found");
 8006ce8:	4902      	ldr	r1, [pc, #8]	; (8006cf4 <oslib_test_009_002_execute+0x114>)
 8006cea:	0940      	lsrs	r0, r0, #5
 8006cec:	f7f9 bf40 	b.w	8000b70 <_test_assert>
 8006cf0:	2000149c 	.word	0x2000149c
 8006cf4:	0800a088 	.word	0x0800a088
 8006cf8:	0800a068 	.word	0x0800a068
 8006cfc:	0800a078 	.word	0x0800a078
 8006d00:	0800a084 	.word	0x0800a084
 8006d04:	0800a090 	.word	0x0800a090
 8006d08:	0800a0ac 	.word	0x0800a0ac
 8006d0c:	00000000 	.word	0x00000000

08006d10 <oslib_test_009_002_teardown>:
static void oslib_test_009_002_teardown(void) {
 8006d10:	b510      	push	{r4, lr}
  dbp = chFactoryFindBuffer("mybuf");
 8006d12:	f7fe fad5 	bl	80052c0 <chFactoryFindBuffer.constprop.0>
  if (dbp != NULL) {
 8006d16:	b140      	cbz	r0, 8006d2a <oslib_test_009_002_teardown+0x1a>
    while (dbp->element.refs > 0U) {
 8006d18:	6843      	ldr	r3, [r0, #4]
 8006d1a:	4604      	mov	r4, r0
 8006d1c:	b12b      	cbz	r3, 8006d2a <oslib_test_009_002_teardown+0x1a>
      chFactoryReleaseBuffer(dbp);
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f7ff ff46 	bl	8006bb0 <chFactoryReleaseBuffer>
    while (dbp->element.refs > 0U) {
 8006d24:	6863      	ldr	r3, [r4, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d1f9      	bne.n	8006d1e <oslib_test_009_002_teardown+0xe>
}
 8006d2a:	bd10      	pop	{r4, pc}
 8006d2c:	0000      	movs	r0, r0
	...

08006d30 <chThdRelease>:
 8006d30:	2220      	movs	r2, #32
 8006d32:	f382 8811 	msr	BASEPRI, r2
  tp->refs--;
 8006d36:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 8006d40:	6a03      	ldr	r3, [r0, #32]
 8006d42:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8006d46:	2b0f      	cmp	r3, #15
 8006d48:	d003      	beq.n	8006d52 <chThdRelease+0x22>
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f383 8811 	msr	BASEPRI, r3
 8006d50:	4770      	bx	lr
    REG_REMOVE(tp);
 8006d52:	e9d0 1304 	ldrd	r1, r3, [r0, #16]
void chThdRelease(thread_t *tp) {
 8006d56:	b410      	push	{r4}
    REG_REMOVE(tp);
 8006d58:	6119      	str	r1, [r3, #16]
 8006d5a:	6904      	ldr	r4, [r0, #16]
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	6163      	str	r3, [r4, #20]
 8006d60:	f381 8811 	msr	BASEPRI, r1
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 8006d64:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8006d68:	f003 0303 	and.w	r3, r3, #3
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d00d      	beq.n	8006d8c <chThdRelease+0x5c>
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d001      	beq.n	8006d78 <chThdRelease+0x48>
}
 8006d74:	bc10      	pop	{r4}
 8006d76:	4770      	bx	lr
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 8006d78:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006d7a:	69c0      	ldr	r0, [r0, #28]
 8006d7c:	f382 8811 	msr	BASEPRI, r2
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	6002      	str	r2, [r0, #0]
  mp->next = php;
 8006d84:	6018      	str	r0, [r3, #0]
 8006d86:	f381 8811 	msr	BASEPRI, r1
 8006d8a:	e7f3      	b.n	8006d74 <chThdRelease+0x44>
      chHeapFree(chThdGetWorkingAreaX(tp));
 8006d8c:	69c0      	ldr	r0, [r0, #28]
}
 8006d8e:	bc10      	pop	{r4}
      chHeapFree(chThdGetWorkingAreaX(tp));
 8006d90:	f7ff ba9e 	b.w	80062d0 <chHeapFree>
	...

08006da0 <rt_test_011_006_execute>:
static void rt_test_011_006_execute(void) {
 8006da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 8006da4:	4b17      	ldr	r3, [pc, #92]	; (8006e04 <rt_test_011_006_execute+0x64>)
  test_set_step(1);
 8006da6:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8006e14 <rt_test_011_006_execute+0x74>
  return chThdGetSelfX()->prio;
 8006daa:	699b      	ldr	r3, [r3, #24]
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8006dac:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8006e18 <rt_test_011_006_execute+0x78>
  tprio_t prio = chThdGetPriorityX() + 1;
 8006db0:	689e      	ldr	r6, [r3, #8]
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8006db2:	4f15      	ldr	r7, [pc, #84]	; (8006e08 <rt_test_011_006_execute+0x68>)
  test_set_step(1);
 8006db4:	2301      	movs	r3, #1
  tprio_t prio = chThdGetPriorityX() + 1;
 8006db6:	441e      	add	r6, r3
  test_set_step(1);
 8006db8:	f8c9 3000 	str.w	r3, [r9]
    start = test_wait_tick();
 8006dbc:	f7fc f918 	bl	8002ff0 <test_wait_tick>
    n = 0;
 8006dc0:	2400      	movs	r4, #0
    start = test_wait_tick();
 8006dc2:	4605      	mov	r5, r0
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	4642      	mov	r2, r8
 8006dc8:	4631      	mov	r1, r6
 8006dca:	4638      	mov	r0, r7
 8006dcc:	f7fb fa10 	bl	80021f0 <chThdCreateStatic.constprop.0>
 8006dd0:	f7ff ffae 	bl	8006d30 <chThdRelease>
 8006dd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8006dd8:	f242 720f 	movw	r2, #9999	; 0x270f
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dde:	1b5b      	subs	r3, r3, r5
 8006de0:	4293      	cmp	r3, r2
      n++;
 8006de2:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8006de6:	d9ed      	bls.n	8006dc4 <rt_test_011_006_execute+0x24>
  test_set_step(2);
 8006de8:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8006dea:	4808      	ldr	r0, [pc, #32]	; (8006e0c <rt_test_011_006_execute+0x6c>)
  test_set_step(2);
 8006dec:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 8006df0:	f7fa f826 	bl	8000e40 <test_print>
    test_printn(n);
 8006df4:	4620      	mov	r0, r4
 8006df6:	f7f9 ff53 	bl	8000ca0 <test_printn>
}
 8006dfa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" threads/S");
 8006dfe:	4804      	ldr	r0, [pc, #16]	; (8006e10 <rt_test_011_006_execute+0x70>)
 8006e00:	f7f9 bffe 	b.w	8000e00 <test_println>
 8006e04:	200009b0 	.word	0x200009b0
 8006e08:	20000d88 	.word	0x20000d88
 8006e0c:	08009dac 	.word	0x08009dac
 8006e10:	0800a178 	.word	0x0800a178
 8006e14:	2000149c 	.word	0x2000149c
 8006e18:	080039c1 	.word	0x080039c1
 8006e1c:	00000000 	.word	0x00000000

08006e20 <chThdWait>:
msg_t chThdWait(thread_t *tp) {
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	4604      	mov	r4, r0
 8006e24:	2320      	movs	r3, #32
 8006e26:	f383 8811 	msr	BASEPRI, r3
  if (tp->state != CH_STATE_FINAL) {
 8006e2a:	f890 3020 	ldrb.w	r3, [r0, #32]
 8006e2e:	2b0f      	cmp	r3, #15
 8006e30:	d007      	beq.n	8006e42 <chThdWait+0x22>
    list_insert(currp, &tp->waiting);
 8006e32:	4b08      	ldr	r3, [pc, #32]	; (8006e54 <chThdWait+0x34>)
  tp->queue.next = tlp->next;
 8006e34:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8006e36:	699b      	ldr	r3, [r3, #24]
    chSchGoSleepS(CH_STATE_WTEXIT);
 8006e38:	2009      	movs	r0, #9
 8006e3a:	601a      	str	r2, [r3, #0]
  tlp->next = tp;
 8006e3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e3e:	f7fb fa8f 	bl	8002360 <chSchGoSleepS>
  msg = tp->u.exitcode;
 8006e42:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006e44:	2300      	movs	r3, #0
 8006e46:	f383 8811 	msr	BASEPRI, r3
  chThdRelease(tp);
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	f7ff ff70 	bl	8006d30 <chThdRelease>
}
 8006e50:	4628      	mov	r0, r5
 8006e52:	bd38      	pop	{r3, r4, r5, pc}
 8006e54:	200009b0 	.word	0x200009b0
	...

08006e60 <oslib_test_005_001_execute>:
 *   emitted tokens.
 * - [5.1.3] Waiting for the thread to terminate-.
 * .
 */

static void oslib_test_005_001_execute(void) {
 8006e60:	b570      	push	{r4, r5, r6, lr}
  return ch.rlist.current;
 8006e62:	4a4d      	ldr	r2, [pc, #308]	; (8006f98 <oslib_test_005_001_execute+0x138>)
  thread_t *tp;

  /* [5.1.1] Starting the dispatcher thread.*/
  test_set_step(1);
  {
    thread_descriptor_t td = {
 8006e64:	4b4d      	ldr	r3, [pc, #308]	; (8006f9c <oslib_test_005_001_execute+0x13c>)
  return chThdGetSelfX()->prio;
 8006e66:	6992      	ldr	r2, [r2, #24]
 8006e68:	494d      	ldr	r1, [pc, #308]	; (8006fa0 <oslib_test_005_001_execute+0x140>)
      .name  = "dispatcher",
      .wbase = waThread1,
      .wend  = THD_WORKING_AREA_END(waThread1),
      .prio  = chThdGetPriorityX() + 1,
 8006e6a:	6892      	ldr	r2, [r2, #8]
  test_set_step(1);
 8006e6c:	4c4d      	ldr	r4, [pc, #308]	; (8006fa4 <oslib_test_005_001_execute+0x144>)
    thread_descriptor_t td = {
 8006e6e:	4d4e      	ldr	r5, [pc, #312]	; (8006fa8 <oslib_test_005_001_execute+0x148>)
static void oslib_test_005_001_execute(void) {
 8006e70:	b08a      	sub	sp, #40	; 0x28
      .prio  = chThdGetPriorityX() + 1,
 8006e72:	3201      	adds	r2, #1
    thread_descriptor_t td = {
 8006e74:	9305      	str	r3, [sp, #20]
 8006e76:	9207      	str	r2, [sp, #28]
 8006e78:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8006e7c:	2200      	movs	r2, #0
  test_set_step(1);
 8006e7e:	2601      	movs	r6, #1
      .funcp = Thread1,
      .arg   = NULL
    };
    tp = chThdCreate(&td);
 8006e80:	a804      	add	r0, sp, #16
    thread_descriptor_t td = {
 8006e82:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8006e86:	9306      	str	r3, [sp, #24]
 8006e88:	9504      	str	r5, [sp, #16]
  test_set_step(1);
 8006e8a:	6026      	str	r6, [r4, #0]
    tp = chThdCreate(&td);
 8006e8c:	f7fb fa58 	bl	8002340 <chThdCreate>
  }
  test_end_step(1);

  /* [5.1.2] Calling the default veneers, checking the result and the
     emitted tokens.*/
  test_set_step(2);
 8006e90:	2302      	movs	r3, #2
 * @param[in] func      pointer to the function to be called
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect0(thread_t *tp, delegate_fn0_t func) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn0, func);
 8006e92:	4946      	ldr	r1, [pc, #280]	; (8006fac <oslib_test_005_001_execute+0x14c>)
 8006e94:	4a46      	ldr	r2, [pc, #280]	; (8006fb0 <oslib_test_005_001_execute+0x150>)
 8006e96:	6023      	str	r3, [r4, #0]
    tp = chThdCreate(&td);
 8006e98:	4605      	mov	r5, r0
 8006e9a:	f7fc f999 	bl	80031d0 <chDelegateCallVeneer>
  {
    int retval;

    retval = chDelegateCallDirect0(tp, (delegate_fn0_t)dis_func0);
    test_assert(retval == 0x55AA, "invalid return value");
 8006e9e:	f245 53aa 	movw	r3, #21930	; 0x55aa
 8006ea2:	1ac0      	subs	r0, r0, r3
 8006ea4:	fab0 f080 	clz	r0, r0
 8006ea8:	4942      	ldr	r1, [pc, #264]	; (8006fb4 <oslib_test_005_001_execute+0x154>)
 8006eaa:	0940      	lsrs	r0, r0, #5
 8006eac:	f7f9 fe60 	bl	8000b70 <_test_assert>
 8006eb0:	b108      	cbz	r0, 8006eb6 <oslib_test_005_001_execute+0x56>
  {
    msg_t msg = chThdWait(tp);
    test_assert(msg == 0x0FA5, "invalid exit code");
  }
  test_end_step(3);
}
 8006eb2:	b00a      	add	sp, #40	; 0x28
 8006eb4:	bd70      	pop	{r4, r5, r6, pc}
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect1(thread_t *tp, delegate_fn1_t func,
                                          msg_t p1) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn1, func, p1);
 8006eb6:	4940      	ldr	r1, [pc, #256]	; (8006fb8 <oslib_test_005_001_execute+0x158>)
 8006eb8:	4a40      	ldr	r2, [pc, #256]	; (8006fbc <oslib_test_005_001_execute+0x15c>)
 8006eba:	2341      	movs	r3, #65	; 0x41
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	f7fc f987 	bl	80031d0 <chDelegateCallVeneer>
    test_assert(retval == (int)'A', "invalid return value");
 8006ec2:	f1a0 0041 	sub.w	r0, r0, #65	; 0x41
 8006ec6:	fab0 f080 	clz	r0, r0
 8006eca:	493a      	ldr	r1, [pc, #232]	; (8006fb4 <oslib_test_005_001_execute+0x154>)
 8006ecc:	0940      	lsrs	r0, r0, #5
 8006ece:	f7f9 fe4f 	bl	8000b70 <_test_assert>
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	d1ed      	bne.n	8006eb2 <oslib_test_005_001_execute+0x52>
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect2(thread_t *tp, delegate_fn2_t func,
                                          msg_t p1, msg_t p2) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn2, func, p1, p2);
 8006ed6:	2343      	movs	r3, #67	; 0x43
 8006ed8:	4939      	ldr	r1, [pc, #228]	; (8006fc0 <oslib_test_005_001_execute+0x160>)
 8006eda:	9300      	str	r3, [sp, #0]
 8006edc:	4a39      	ldr	r2, [pc, #228]	; (8006fc4 <oslib_test_005_001_execute+0x164>)
 8006ede:	2342      	movs	r3, #66	; 0x42
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	f7fc f975 	bl	80031d0 <chDelegateCallVeneer>
    test_assert(retval == (int)'B', "invalid return value");
 8006ee6:	f1a0 0042 	sub.w	r0, r0, #66	; 0x42
 8006eea:	fab0 f080 	clz	r0, r0
 8006eee:	4931      	ldr	r1, [pc, #196]	; (8006fb4 <oslib_test_005_001_execute+0x154>)
 8006ef0:	0940      	lsrs	r0, r0, #5
 8006ef2:	f7f9 fe3d 	bl	8000b70 <_test_assert>
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	d1db      	bne.n	8006eb2 <oslib_test_005_001_execute+0x52>
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect3(thread_t *tp, delegate_fn3_t func,
                                          msg_t p1, msg_t p2, msg_t p3) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn3, func, p1, p2, p3);
 8006efa:	2345      	movs	r3, #69	; 0x45
 8006efc:	2246      	movs	r2, #70	; 0x46
 8006efe:	e9cd 3200 	strd	r3, r2, [sp]
 8006f02:	4931      	ldr	r1, [pc, #196]	; (8006fc8 <oslib_test_005_001_execute+0x168>)
 8006f04:	4a31      	ldr	r2, [pc, #196]	; (8006fcc <oslib_test_005_001_execute+0x16c>)
 8006f06:	2344      	movs	r3, #68	; 0x44
 8006f08:	4628      	mov	r0, r5
 8006f0a:	f7fc f961 	bl	80031d0 <chDelegateCallVeneer>
    test_assert(retval == (int)'D', "invalid return value");
 8006f0e:	f1a0 0044 	sub.w	r0, r0, #68	; 0x44
 8006f12:	fab0 f080 	clz	r0, r0
 8006f16:	4927      	ldr	r1, [pc, #156]	; (8006fb4 <oslib_test_005_001_execute+0x154>)
 8006f18:	0940      	lsrs	r0, r0, #5
 8006f1a:	f7f9 fe29 	bl	8000b70 <_test_assert>
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	d1c7      	bne.n	8006eb2 <oslib_test_005_001_execute+0x52>
 */
static inline msg_t chDelegateCallDirect4(thread_t *tp, delegate_fn4_t func,
                                          msg_t p1, msg_t p2, msg_t p3,
                                          msg_t p4) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn4, func, p1, p2, p3, p4);
 8006f22:	2148      	movs	r1, #72	; 0x48
 8006f24:	2249      	movs	r2, #73	; 0x49
 8006f26:	234a      	movs	r3, #74	; 0x4a
 8006f28:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	4928      	ldr	r1, [pc, #160]	; (8006fd0 <oslib_test_005_001_execute+0x170>)
 8006f30:	4a28      	ldr	r2, [pc, #160]	; (8006fd4 <oslib_test_005_001_execute+0x174>)
 8006f32:	2347      	movs	r3, #71	; 0x47
 8006f34:	f7fc f94c 	bl	80031d0 <chDelegateCallVeneer>
    test_assert(retval == (int)'G', "invalid return value");
 8006f38:	f1a0 0047 	sub.w	r0, r0, #71	; 0x47
 8006f3c:	fab0 f080 	clz	r0, r0
 8006f40:	491c      	ldr	r1, [pc, #112]	; (8006fb4 <oslib_test_005_001_execute+0x154>)
 8006f42:	0940      	lsrs	r0, r0, #5
 8006f44:	f7f9 fe14 	bl	8000b70 <_test_assert>
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	d1b2      	bne.n	8006eb2 <oslib_test_005_001_execute+0x52>
  return chDelegateCallVeneer(tp, __ch_delegate_fn0, func);
 8006f4c:	4917      	ldr	r1, [pc, #92]	; (8006fac <oslib_test_005_001_execute+0x14c>)
 8006f4e:	4a22      	ldr	r2, [pc, #136]	; (8006fd8 <oslib_test_005_001_execute+0x178>)
 8006f50:	4628      	mov	r0, r5
 8006f52:	f7fc f93d 	bl	80031d0 <chDelegateCallVeneer>
    test_assert(retval == 0xAA55, "invalid return value");
 8006f56:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006f5a:	1ac0      	subs	r0, r0, r3
 8006f5c:	fab0 f080 	clz	r0, r0
 8006f60:	4914      	ldr	r1, [pc, #80]	; (8006fb4 <oslib_test_005_001_execute+0x154>)
 8006f62:	0940      	lsrs	r0, r0, #5
 8006f64:	f7f9 fe04 	bl	8000b70 <_test_assert>
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	d1a2      	bne.n	8006eb2 <oslib_test_005_001_execute+0x52>
    test_assert_sequence("0ABCDEFGHIJZ", "unexpected tokens");
 8006f6c:	491b      	ldr	r1, [pc, #108]	; (8006fdc <oslib_test_005_001_execute+0x17c>)
 8006f6e:	481c      	ldr	r0, [pc, #112]	; (8006fe0 <oslib_test_005_001_execute+0x180>)
 8006f70:	f7f9 ff7e 	bl	8000e70 <_test_assert_sequence>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	d19c      	bne.n	8006eb2 <oslib_test_005_001_execute+0x52>
  test_set_step(3);
 8006f78:	2303      	movs	r3, #3
    msg_t msg = chThdWait(tp);
 8006f7a:	4628      	mov	r0, r5
  test_set_step(3);
 8006f7c:	6023      	str	r3, [r4, #0]
    msg_t msg = chThdWait(tp);
 8006f7e:	f7ff ff4f 	bl	8006e20 <chThdWait>
    test_assert(msg == 0x0FA5, "invalid exit code");
 8006f82:	f640 73a5 	movw	r3, #4005	; 0xfa5
 8006f86:	1ac0      	subs	r0, r0, r3
 8006f88:	fab0 f080 	clz	r0, r0
 8006f8c:	4915      	ldr	r1, [pc, #84]	; (8006fe4 <oslib_test_005_001_execute+0x184>)
 8006f8e:	0940      	lsrs	r0, r0, #5
 8006f90:	f7f9 fdee 	bl	8000b70 <_test_assert>
  test_end_step(3);
 8006f94:	e78d      	b.n	8006eb2 <oslib_test_005_001_execute+0x52>
 8006f96:	bf00      	nop
 8006f98:	200009b0 	.word	0x200009b0
 8006f9c:	20001888 	.word	0x20001888
 8006fa0:	08003971 	.word	0x08003971
 8006fa4:	2000149c 	.word	0x2000149c
 8006fa8:	0800a184 	.word	0x0800a184
 8006fac:	080007d1 	.word	0x080007d1
 8006fb0:	08000d01 	.word	0x08000d01
 8006fb4:	0800a190 	.word	0x0800a190
 8006fb8:	080007e1 	.word	0x080007e1
 8006fbc:	08000d11 	.word	0x08000d11
 8006fc0:	08000801 	.word	0x08000801
 8006fc4:	08000d21 	.word	0x08000d21
 8006fc8:	08000821 	.word	0x08000821
 8006fcc:	08000d41 	.word	0x08000d41
 8006fd0:	08000841 	.word	0x08000841
 8006fd4:	08000d61 	.word	0x08000d61
 8006fd8:	08000d91 	.word	0x08000d91
 8006fdc:	08009e4c 	.word	0x08009e4c
 8006fe0:	0800a1a8 	.word	0x0800a1a8
 8006fe4:	0800a1b8 	.word	0x0800a1b8
	...

08006ff0 <oslib_test_004_001_execute>:
 * - [4.1.3] Sending jobs with various timings.
 * - [4.1.4] Sending two null jobs to make threads exit.
 * .
 */

static void oslib_test_004_001_execute(void) {
 8006ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  mp->next = NULL;
 8006ff4:	4c47      	ldr	r4, [pc, #284]	; (8007114 <oslib_test_004_001_execute+0x124>)
  thread_t *tp1, *tp2;

  /* [4.1.1] Initializing the Jobs Queue object.*/
  test_set_step(1);
 8006ff6:	4f48      	ldr	r7, [pc, #288]	; (8007118 <oslib_test_004_001_execute+0x128>)
  return ch.rlist.current;
 8006ff8:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8007144 <oslib_test_004_001_execute+0x154>
  chGuardedPoolLoadArray(&jqp->free, (void *)jobsbuf, jobsn);
 8006ffc:	4947      	ldr	r1, [pc, #284]	; (800711c <oslib_test_004_001_execute+0x12c>)
  tqp->next = (thread_t *)tqp;
 8006ffe:	6024      	str	r4, [r4, #0]
 8007000:	2500      	movs	r5, #0
  mp->align = align;
 8007002:	2204      	movs	r2, #4
  mp->object_size = size;
 8007004:	2308      	movs	r3, #8
static void oslib_test_004_001_execute(void) {
 8007006:	b08c      	sub	sp, #48	; 0x30
 8007008:	4620      	mov	r0, r4
 800700a:	6123      	str	r3, [r4, #16]
  mp->next = NULL;
 800700c:	60e5      	str	r5, [r4, #12]
  test_set_step(1);
 800700e:	2301      	movs	r3, #1
  mp->provider = provider;
 8007010:	61a5      	str	r5, [r4, #24]
 8007012:	60a5      	str	r5, [r4, #8]
  mp->align = align;
 8007014:	6162      	str	r2, [r4, #20]
  tqp->prev = (thread_t *)tqp;
 8007016:	6064      	str	r4, [r4, #4]
 8007018:	603b      	str	r3, [r7, #0]
 800701a:	f7fd f9f1 	bl	8004400 <chGuardedPoolLoadArray>
  return chThdGetSelfX()->prio;
 800701e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8007022:	4b3f      	ldr	r3, [pc, #252]	; (8007120 <oslib_test_004_001_execute+0x130>)
  {
    thread_descriptor_t td1 = {
      .name  = "dispatcher1",
      .wbase = wa1Thread1,
      .wend  = THD_WORKING_AREA_END(wa1Thread1),
      .prio  = chThdGetPriorityX() - 1,
 8007024:	6892      	ldr	r2, [r2, #8]
    thread_descriptor_t td1 = {
 8007026:	493f      	ldr	r1, [pc, #252]	; (8007124 <oslib_test_004_001_execute+0x134>)
 8007028:	61e3      	str	r3, [r4, #28]
  mbp->wrptr  = buf;
 800702a:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  mbp->top    = &buf[n];
 800702e:	3310      	adds	r3, #16
      .prio  = chThdGetPriorityX() - 1,
 8007030:	3a01      	subs	r2, #1
 8007032:	6223      	str	r3, [r4, #32]
  test_set_step(2);
 8007034:	2302      	movs	r3, #2
    thread_descriptor_t td1 = {
 8007036:	f501 70e4 	add.w	r0, r1, #456	; 0x1c8
  test_set_step(2);
 800703a:	603b      	str	r3, [r7, #0]
    thread_descriptor_t td1 = {
 800703c:	9209      	str	r2, [sp, #36]	; 0x24
  tqp->next = (thread_t *)tqp;
 800703e:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8007042:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8007046:	f8df c100 	ldr.w	ip, [pc, #256]	; 8007148 <oslib_test_004_001_execute+0x158>
 800704a:	4e37      	ldr	r6, [pc, #220]	; (8007128 <oslib_test_004_001_execute+0x138>)
  mbp->cnt    = (size_t)0;
 800704c:	62e5      	str	r5, [r4, #44]	; 0x2c
  tqp->prev = (thread_t *)tqp;
 800704e:	e9c4 220d 	strd	r2, r2, [r4, #52]	; 0x34
 8007052:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  mbp->reset  = false;
 8007056:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
 800705a:	9008      	str	r0, [sp, #32]
      .funcp = Thread1,
      .arg   = NULL
    };
    tp1 = chThdCreate(&td1);
 800705c:	a806      	add	r0, sp, #24
    thread_descriptor_t td1 = {
 800705e:	950b      	str	r5, [sp, #44]	; 0x2c
 8007060:	9107      	str	r1, [sp, #28]
 8007062:	f8cd c018 	str.w	ip, [sp, #24]
 8007066:	960a      	str	r6, [sp, #40]	; 0x28
    tp1 = chThdCreate(&td1);
 8007068:	f7fb f96a 	bl	8002340 <chThdCreate>
 800706c:	f8d8 3018 	ldr.w	r3, [r8, #24]

    thread_descriptor_t td2 = {
 8007070:	4a2e      	ldr	r2, [pc, #184]	; (800712c <oslib_test_004_001_execute+0x13c>)
      .name  = "dispatcher2",
      .wbase = wa2Thread1,
      .wend  = THD_WORKING_AREA_END(wa2Thread1),
      .prio  = chThdGetPriorityX() - 2,
 8007072:	689b      	ldr	r3, [r3, #8]
    thread_descriptor_t td2 = {
 8007074:	492e      	ldr	r1, [pc, #184]	; (8007130 <oslib_test_004_001_execute+0x140>)
 8007076:	9505      	str	r5, [sp, #20]
      .prio  = chThdGetPriorityX() - 2,
 8007078:	3b02      	subs	r3, #2
    thread_descriptor_t td2 = {
 800707a:	f502 75e4 	add.w	r5, r2, #456	; 0x1c8
    tp1 = chThdCreate(&td1);
 800707e:	4681      	mov	r9, r0
      .funcp = Thread1,
      .arg   = NULL
    };
    tp2 = chThdCreate(&td2);
 8007080:	4668      	mov	r0, sp
    thread_descriptor_t td2 = {
 8007082:	e9cd 2501 	strd	r2, r5, [sp, #4]
 8007086:	9303      	str	r3, [sp, #12]
 8007088:	9604      	str	r6, [sp, #16]
 800708a:	9100      	str	r1, [sp, #0]
    tp2 = chThdCreate(&td2);
 800708c:	f7fb f958 	bl	8002340 <chThdCreate>
 8007090:	4e28      	ldr	r6, [pc, #160]	; (8007134 <oslib_test_004_001_execute+0x144>)
  }
  test_end_step(2);

  /* [4.1.3] Sending jobs with various timings.*/
  test_set_step(3);
 8007092:	2303      	movs	r3, #3
    tp2 = chThdCreate(&td2);
 8007094:	4680      	mov	r8, r0
  test_set_step(3);
 8007096:	603b      	str	r3, [r7, #0]
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 8007098:	f104 051c 	add.w	r5, r4, #28
 800709c:	f04f 0a61 	mov.w	sl, #97	; 0x61
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 80070a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80070a4:	4620      	mov	r0, r4
 80070a6:	f7fb faf3 	bl	8002690 <chGuardedPoolAllocTimeout>
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 80070aa:	2200      	movs	r2, #0
    job_descriptor_t *jdp;

    for (i = 0; i < 8; i++) {
      jdp = chJobGet(&jq);
      jdp->jobfunc = job_slow;
      jdp->jobarg  = (void *)('a' + i);
 80070ac:	e9c0 6a00 	strd	r6, sl, [r0]
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 80070b0:	4601      	mov	r1, r0
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 80070b2:	f10a 0a01 	add.w	sl, sl, #1
 80070b6:	4628      	mov	r0, r5
 80070b8:	f7fd fa9a 	bl	80045f0 <chMBPostTimeout>
    for (i = 0; i < 8; i++) {
 80070bc:	f1ba 0f69 	cmp.w	sl, #105	; 0x69
 80070c0:	d1ee      	bne.n	80070a0 <oslib_test_004_001_execute+0xb0>
    }
  }
  test_end_step(3);

  /* [4.1.4] Sending two null jobs to make threads exit.*/
  test_set_step(4);
 80070c2:	2304      	movs	r3, #4
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 80070c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80070c8:	4812      	ldr	r0, [pc, #72]	; (8007114 <oslib_test_004_001_execute+0x124>)
 80070ca:	603b      	str	r3, [r7, #0]
 80070cc:	f7fb fae0 	bl	8002690 <chGuardedPoolAllocTimeout>
  {
    job_descriptor_t *jdp;

    jdp = chJobGet(&jq);
    jdp->jobfunc = NULL;
 80070d0:	2400      	movs	r4, #0
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 80070d2:	4622      	mov	r2, r4
    jdp->jobarg  = NULL;
 80070d4:	e9c0 4400 	strd	r4, r4, [r0]
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 80070d8:	4601      	mov	r1, r0
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 80070da:	4817      	ldr	r0, [pc, #92]	; (8007138 <oslib_test_004_001_execute+0x148>)
 80070dc:	f7fd fa88 	bl	80045f0 <chMBPostTimeout>
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 80070e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80070e4:	480b      	ldr	r0, [pc, #44]	; (8007114 <oslib_test_004_001_execute+0x124>)
 80070e6:	f7fb fad3 	bl	8002690 <chGuardedPoolAllocTimeout>
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 80070ea:	4622      	mov	r2, r4
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 80070ec:	4601      	mov	r1, r0
    chJobPost(&jq, jdp);
    jdp = chJobGet(&jq);
    jdp->jobfunc = NULL;
    jdp->jobarg  = NULL;
 80070ee:	e9c0 4400 	strd	r4, r4, [r0]
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 80070f2:	4811      	ldr	r0, [pc, #68]	; (8007138 <oslib_test_004_001_execute+0x148>)
 80070f4:	f7fd fa7c 	bl	80045f0 <chMBPostTimeout>
    chJobPost(&jq, jdp);
    (void) chThdWait(tp1);
 80070f8:	4648      	mov	r0, r9
 80070fa:	f7ff fe91 	bl	8006e20 <chThdWait>
    (void) chThdWait(tp2);
 80070fe:	4640      	mov	r0, r8
 8007100:	f7ff fe8e 	bl	8006e20 <chThdWait>
    test_assert_sequence("abcdefgh", "unexpected tokens");
 8007104:	490d      	ldr	r1, [pc, #52]	; (800713c <oslib_test_004_001_execute+0x14c>)
 8007106:	480e      	ldr	r0, [pc, #56]	; (8007140 <oslib_test_004_001_execute+0x150>)
 8007108:	f7f9 feb2 	bl	8000e70 <_test_assert_sequence>
  }
  test_end_step(4);
}
 800710c:	b00c      	add	sp, #48	; 0x30
 800710e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007112:	bf00      	nop
 8007114:	20000bec 	.word	0x20000bec
 8007118:	2000149c 	.word	0x2000149c
 800711c:	20000bcc 	.word	0x20000bcc
 8007120:	20000c50 	.word	0x20000c50
 8007124:	200014f8 	.word	0x200014f8
 8007128:	080045a1 	.word	0x080045a1
 800712c:	200016c0 	.word	0x200016c0
 8007130:	0800a1d8 	.word	0x0800a1d8
 8007134:	08002f11 	.word	0x08002f11
 8007138:	20000c08 	.word	0x20000c08
 800713c:	08009e4c 	.word	0x08009e4c
 8007140:	08009e7c 	.word	0x08009e7c
 8007144:	200009b0 	.word	0x200009b0
 8007148:	0800a1cc 	.word	0x0800a1cc
 800714c:	00000000 	.word	0x00000000

08007150 <rt_test_011_005_execute>:
static void rt_test_011_005_execute(void) {
 8007150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 8007154:	4b17      	ldr	r3, [pc, #92]	; (80071b4 <rt_test_011_005_execute+0x64>)
  test_set_step(1);
 8007156:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80071c4 <rt_test_011_005_execute+0x74>
  return chThdGetSelfX()->prio;
 800715a:	699b      	ldr	r3, [r3, #24]
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 800715c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80071c8 <rt_test_011_005_execute+0x78>
  tprio_t prio = chThdGetPriorityX() - 1;
 8007160:	689e      	ldr	r6, [r3, #8]
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8007162:	4f15      	ldr	r7, [pc, #84]	; (80071b8 <rt_test_011_005_execute+0x68>)
  test_set_step(1);
 8007164:	2301      	movs	r3, #1
 8007166:	f8c9 3000 	str.w	r3, [r9]
    start = test_wait_tick();
 800716a:	f7fb ff41 	bl	8002ff0 <test_wait_tick>
  tprio_t prio = chThdGetPriorityX() - 1;
 800716e:	3e01      	subs	r6, #1
    start = test_wait_tick();
 8007170:	4605      	mov	r5, r0
    n = 0;
 8007172:	2400      	movs	r4, #0
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8007174:	2300      	movs	r3, #0
 8007176:	4642      	mov	r2, r8
 8007178:	4631      	mov	r1, r6
 800717a:	4638      	mov	r0, r7
 800717c:	f7fb f838 	bl	80021f0 <chThdCreateStatic.constprop.0>
 8007180:	f7ff fe4e 	bl	8006e20 <chThdWait>
 8007184:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8007188:	f242 720f 	movw	r2, #9999	; 0x270f
 800718c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718e:	1b5b      	subs	r3, r3, r5
 8007190:	4293      	cmp	r3, r2
      n++;
 8007192:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8007196:	d9ed      	bls.n	8007174 <rt_test_011_005_execute+0x24>
  test_set_step(2);
 8007198:	2302      	movs	r3, #2
    test_print("--- Score : ");
 800719a:	4808      	ldr	r0, [pc, #32]	; (80071bc <rt_test_011_005_execute+0x6c>)
  test_set_step(2);
 800719c:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 80071a0:	f7f9 fe4e 	bl	8000e40 <test_print>
    test_printn(n);
 80071a4:	4620      	mov	r0, r4
 80071a6:	f7f9 fd7b 	bl	8000ca0 <test_printn>
}
 80071aa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" threads/S");
 80071ae:	4804      	ldr	r0, [pc, #16]	; (80071c0 <rt_test_011_005_execute+0x70>)
 80071b0:	f7f9 be26 	b.w	8000e00 <test_println>
 80071b4:	200009b0 	.word	0x200009b0
 80071b8:	20000d88 	.word	0x20000d88
 80071bc:	08009dac 	.word	0x08009dac
 80071c0:	0800a178 	.word	0x0800a178
 80071c4:	2000149c 	.word	0x2000149c
 80071c8:	080039c1 	.word	0x080039c1
 80071cc:	00000000 	.word	0x00000000

080071d0 <test_wait_threads>:
void test_wait_threads(void) {
 80071d0:	b570      	push	{r4, r5, r6, lr}
 80071d2:	4c07      	ldr	r4, [pc, #28]	; (80071f0 <test_wait_threads+0x20>)
      threads[i] = NULL;
 80071d4:	2600      	movs	r6, #0
 80071d6:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 80071da:	f854 0b04 	ldr.w	r0, [r4], #4
 80071de:	b118      	cbz	r0, 80071e8 <test_wait_threads+0x18>
      chThdWait(threads[i]);
 80071e0:	f7ff fe1e 	bl	8006e20 <chThdWait>
      threads[i] = NULL;
 80071e4:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 80071e8:	42ac      	cmp	r4, r5
 80071ea:	d1f6      	bne.n	80071da <test_wait_threads+0xa>
}
 80071ec:	bd70      	pop	{r4, r5, r6, pc}
 80071ee:	bf00      	nop
 80071f0:	200014b4 	.word	0x200014b4
	...

08007200 <rt_test_011_008_execute>:
static void rt_test_011_008_execute(void) {
 8007200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8007204:	4f2c      	ldr	r7, [pc, #176]	; (80072b8 <rt_test_011_008_execute+0xb8>)
  test_set_step(1);
 8007206:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80072d0 <rt_test_011_008_execute+0xd0>
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800720a:	4e2c      	ldr	r6, [pc, #176]	; (80072bc <rt_test_011_008_execute+0xbc>)
 800720c:	4d2c      	ldr	r5, [pc, #176]	; (80072c0 <rt_test_011_008_execute+0xc0>)
 800720e:	4c2d      	ldr	r4, [pc, #180]	; (80072c4 <rt_test_011_008_execute+0xc4>)
static void rt_test_011_008_execute(void) {
 8007210:	b082      	sub	sp, #8
  test_set_step(1);
 8007212:	2201      	movs	r2, #1
    n = 0;
 8007214:	2300      	movs	r3, #0
  test_set_step(1);
 8007216:	f8c8 2000 	str.w	r2, [r8]
    n = 0;
 800721a:	9301      	str	r3, [sp, #4]
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800721c:	f7fb fee8 	bl	8002ff0 <test_wait_tick>
  return chThdGetSelfX()->prio;
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	6899      	ldr	r1, [r3, #8]
 8007224:	4632      	mov	r2, r6
 8007226:	ab01      	add	r3, sp, #4
 8007228:	3901      	subs	r1, #1
 800722a:	4628      	mov	r0, r5
 800722c:	f7fa ffe0 	bl	80021f0 <chThdCreateStatic.constprop.0>
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8007234:	6899      	ldr	r1, [r3, #8]
 8007236:	4632      	mov	r2, r6
 8007238:	ab01      	add	r3, sp, #4
 800723a:	3901      	subs	r1, #1
 800723c:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 8007240:	f7fa ffd6 	bl	80021f0 <chThdCreateStatic.constprop.0>
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8007248:	6899      	ldr	r1, [r3, #8]
 800724a:	4632      	mov	r2, r6
 800724c:	ab01      	add	r3, sp, #4
 800724e:	3901      	subs	r1, #1
 8007250:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8007254:	f7fa ffcc 	bl	80021f0 <chThdCreateStatic.constprop.0>
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800725c:	6899      	ldr	r1, [r3, #8]
 800725e:	4632      	mov	r2, r6
 8007260:	ab01      	add	r3, sp, #4
 8007262:	3901      	subs	r1, #1
 8007264:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8007268:	f7fa ffc2 	bl	80021f0 <chThdCreateStatic.constprop.0>
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8007270:	6899      	ldr	r1, [r3, #8]
 8007272:	4632      	mov	r2, r6
 8007274:	3901      	subs	r1, #1
 8007276:	ab01      	add	r3, sp, #4
 8007278:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 800727c:	f7fa ffb8 	bl	80021f0 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 8007280:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8007282:	4602      	mov	r2, r0
    chThdSleepSeconds(1);
 8007284:	f242 7010 	movw	r0, #10000	; 0x2710
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8007288:	6122      	str	r2, [r4, #16]
  test_set_step(2);
 800728a:	f8c8 3000 	str.w	r3, [r8]
    chThdSleepSeconds(1);
 800728e:	f7fb fbdf 	bl	8002a50 <chThdSleep>
    test_terminate_threads();
 8007292:	f7f9 fcb5 	bl	8000c00 <test_terminate_threads>
    test_wait_threads();
 8007296:	f7ff ff9b 	bl	80071d0 <test_wait_threads>
  test_set_step(3);
 800729a:	2303      	movs	r3, #3
    test_print("--- Score : ");
 800729c:	480a      	ldr	r0, [pc, #40]	; (80072c8 <rt_test_011_008_execute+0xc8>)
  test_set_step(3);
 800729e:	f8c8 3000 	str.w	r3, [r8]
    test_print("--- Score : ");
 80072a2:	f7f9 fdcd 	bl	8000e40 <test_print>
    test_printn(n);
 80072a6:	9801      	ldr	r0, [sp, #4]
 80072a8:	f7f9 fcfa 	bl	8000ca0 <test_printn>
    test_println(" ctxswc/S");
 80072ac:	4807      	ldr	r0, [pc, #28]	; (80072cc <rt_test_011_008_execute+0xcc>)
 80072ae:	f7f9 fda7 	bl	8000e00 <test_println>
}
 80072b2:	b002      	add	sp, #8
 80072b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072b8:	200009b0 	.word	0x200009b0
 80072bc:	08002161 	.word	0x08002161
 80072c0:	20000d88 	.word	0x20000d88
 80072c4:	200014b4 	.word	0x200014b4
 80072c8:	08009dac 	.word	0x08009dac
 80072cc:	0800a1e4 	.word	0x0800a1e4
 80072d0:	2000149c 	.word	0x2000149c
	...

080072e0 <rt_test_011_007_execute>:
static void rt_test_011_007_execute(void) {
 80072e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 80072e4:	4d35      	ldr	r5, [pc, #212]	; (80073bc <rt_test_011_007_execute+0xdc>)
  test_set_step(1);
 80072e6:	4f36      	ldr	r7, [pc, #216]	; (80073c0 <rt_test_011_007_execute+0xe0>)
  return chThdGetSelfX()->prio;
 80072e8:	69ab      	ldr	r3, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 80072ea:	4a36      	ldr	r2, [pc, #216]	; (80073c4 <rt_test_011_007_execute+0xe4>)
 80072ec:	6899      	ldr	r1, [r3, #8]
 80072ee:	4836      	ldr	r0, [pc, #216]	; (80073c8 <rt_test_011_007_execute+0xe8>)
 80072f0:	4c36      	ldr	r4, [pc, #216]	; (80073cc <rt_test_011_007_execute+0xec>)
 80072f2:	4e37      	ldr	r6, [pc, #220]	; (80073d0 <rt_test_011_007_execute+0xf0>)
  test_set_step(1);
 80072f4:	2301      	movs	r3, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 80072f6:	3105      	adds	r1, #5
  test_set_step(1);
 80072f8:	603b      	str	r3, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 80072fa:	2300      	movs	r3, #0
 80072fc:	f7fa ff78 	bl	80021f0 <chThdCreateStatic.constprop.0>
 8007300:	69a9      	ldr	r1, [r5, #24]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 8007302:	4a30      	ldr	r2, [pc, #192]	; (80073c4 <rt_test_011_007_execute+0xe4>)
 8007304:	6889      	ldr	r1, [r1, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 8007306:	4603      	mov	r3, r0
 8007308:	6023      	str	r3, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 800730a:	3104      	adds	r1, #4
 800730c:	2300      	movs	r3, #0
 800730e:	4831      	ldr	r0, [pc, #196]	; (80073d4 <rt_test_011_007_execute+0xf4>)
 8007310:	f7fa ff6e 	bl	80021f0 <chThdCreateStatic.constprop.0>
 8007314:	69a9      	ldr	r1, [r5, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 8007316:	4a2b      	ldr	r2, [pc, #172]	; (80073c4 <rt_test_011_007_execute+0xe4>)
 8007318:	6889      	ldr	r1, [r1, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 800731a:	4603      	mov	r3, r0
 800731c:	6063      	str	r3, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 800731e:	3103      	adds	r1, #3
 8007320:	2300      	movs	r3, #0
 8007322:	482d      	ldr	r0, [pc, #180]	; (80073d8 <rt_test_011_007_execute+0xf8>)
 8007324:	f7fa ff64 	bl	80021f0 <chThdCreateStatic.constprop.0>
 8007328:	69a9      	ldr	r1, [r5, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 800732a:	4a26      	ldr	r2, [pc, #152]	; (80073c4 <rt_test_011_007_execute+0xe4>)
 800732c:	6889      	ldr	r1, [r1, #8]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 800732e:	4603      	mov	r3, r0
 8007330:	60a3      	str	r3, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 8007332:	3102      	adds	r1, #2
 8007334:	2300      	movs	r3, #0
 8007336:	4829      	ldr	r0, [pc, #164]	; (80073dc <rt_test_011_007_execute+0xfc>)
 8007338:	f7fa ff5a 	bl	80021f0 <chThdCreateStatic.constprop.0>
 800733c:	69a9      	ldr	r1, [r5, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 800733e:	4a21      	ldr	r2, [pc, #132]	; (80073c4 <rt_test_011_007_execute+0xe4>)
 8007340:	6889      	ldr	r1, [r1, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 8007342:	4603      	mov	r3, r0
 8007344:	60e3      	str	r3, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 8007346:	3101      	adds	r1, #1
 8007348:	2300      	movs	r3, #0
 800734a:	4825      	ldr	r0, [pc, #148]	; (80073e0 <rt_test_011_007_execute+0x100>)
 800734c:	f7fa ff50 	bl	80021f0 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 8007350:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 8007352:	6120      	str	r0, [r4, #16]
  test_set_step(2);
 8007354:	603b      	str	r3, [r7, #0]
    start = test_wait_tick();
 8007356:	f7fb fe4b 	bl	8002ff0 <test_wait_tick>
    n = 0;
 800735a:	2400      	movs	r4, #0
    start = test_wait_tick();
 800735c:	4605      	mov	r5, r0
 800735e:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 8007362:	2100      	movs	r1, #0
 8007364:	4630      	mov	r0, r6
 8007366:	f7fc fb63 	bl	8003a30 <chSemResetWithMessage.constprop.0>
 800736a:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    } while (chVTIsSystemTimeWithinX(start, end));
 800736e:	f242 720f 	movw	r2, #9999	; 0x270f
 8007372:	1b5b      	subs	r3, r3, r5
 8007374:	4293      	cmp	r3, r2
      n++;
 8007376:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 800737a:	d9f2      	bls.n	8007362 <rt_test_011_007_execute+0x82>
  test_set_step(3);
 800737c:	2303      	movs	r3, #3
 800737e:	603b      	str	r3, [r7, #0]
    test_terminate_threads();
 8007380:	f7f9 fc3e 	bl	8000c00 <test_terminate_threads>
 8007384:	2100      	movs	r1, #0
 8007386:	4812      	ldr	r0, [pc, #72]	; (80073d0 <rt_test_011_007_execute+0xf0>)
 8007388:	f7fc fb52 	bl	8003a30 <chSemResetWithMessage.constprop.0>
    test_wait_threads();
 800738c:	f7ff ff20 	bl	80071d0 <test_wait_threads>
  test_set_step(4);
 8007390:	2304      	movs	r3, #4
    test_print("--- Score : ");
 8007392:	4814      	ldr	r0, [pc, #80]	; (80073e4 <rt_test_011_007_execute+0x104>)
  test_set_step(4);
 8007394:	603b      	str	r3, [r7, #0]
    test_print("--- Score : ");
 8007396:	f7f9 fd53 	bl	8000e40 <test_print>
    test_printn(n);
 800739a:	4620      	mov	r0, r4
 800739c:	f7f9 fc80 	bl	8000ca0 <test_printn>
    test_printn(n * 6);
 80073a0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    test_print(" reschedules/S, ");
 80073a4:	4810      	ldr	r0, [pc, #64]	; (80073e8 <rt_test_011_007_execute+0x108>)
 80073a6:	f7f9 fd4b 	bl	8000e40 <test_print>
    test_printn(n * 6);
 80073aa:	0060      	lsls	r0, r4, #1
 80073ac:	f7f9 fc78 	bl	8000ca0 <test_printn>
}
 80073b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" ctxswc/S");
 80073b4:	480d      	ldr	r0, [pc, #52]	; (80073ec <rt_test_011_007_execute+0x10c>)
 80073b6:	f7f9 bd23 	b.w	8000e00 <test_println>
 80073ba:	bf00      	nop
 80073bc:	200009b0 	.word	0x200009b0
 80073c0:	2000149c 	.word	0x2000149c
 80073c4:	080034d1 	.word	0x080034d1
 80073c8:	20000d88 	.word	0x20000d88
 80073cc:	200014b4 	.word	0x200014b4
 80073d0:	20000d7c 	.word	0x20000d7c
 80073d4:	20000ed0 	.word	0x20000ed0
 80073d8:	20001018 	.word	0x20001018
 80073dc:	20001160 	.word	0x20001160
 80073e0:	200012a8 	.word	0x200012a8
 80073e4:	08009dac 	.word	0x08009dac
 80073e8:	0800a1f0 	.word	0x0800a1f0
 80073ec:	0800a1e4 	.word	0x0800a1e4

080073f0 <rt_test_011_004_execute>:
  return ch.rlist.current;
 80073f0:	4b2b      	ldr	r3, [pc, #172]	; (80074a0 <rt_test_011_004_execute+0xb0>)
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 80073f2:	4a2c      	ldr	r2, [pc, #176]	; (80074a4 <rt_test_011_004_execute+0xb4>)
  return chThdGetSelfX()->prio;
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	482c      	ldr	r0, [pc, #176]	; (80074a8 <rt_test_011_004_execute+0xb8>)
 80073f8:	6899      	ldr	r1, [r3, #8]
static void rt_test_011_004_execute(void) {
 80073fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 80073fe:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80074b8 <rt_test_011_004_execute+0xc8>
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8007402:	3101      	adds	r1, #1
  test_set_step(1);
 8007404:	2401      	movs	r4, #1
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8007406:	2300      	movs	r3, #0
  test_set_step(1);
 8007408:	f8ca 4000 	str.w	r4, [sl]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800740c:	f7fa fef0 	bl	80021f0 <chThdCreateStatic.constprop.0>
 8007410:	4a26      	ldr	r2, [pc, #152]	; (80074ac <rt_test_011_004_execute+0xbc>)
  test_set_step(2);
 8007412:	2302      	movs	r3, #2
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8007414:	4604      	mov	r4, r0
 8007416:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8007418:	f8ca 3000 	str.w	r3, [sl]
    start = test_wait_tick();
 800741c:	f7fb fde8 	bl	8002ff0 <test_wait_tick>
    n = 0;
 8007420:	2500      	movs	r5, #0
    start = test_wait_tick();
 8007422:	4606      	mov	r6, r0
      chSchWakeupS(tp, MSG_OK);
 8007424:	462f      	mov	r7, r5
 8007426:	f04f 0820 	mov.w	r8, #32
 800742a:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
 800742e:	f388 8811 	msr	BASEPRI, r8
 8007432:	2100      	movs	r1, #0
 8007434:	4620      	mov	r0, r4
 8007436:	f7fa feab 	bl	8002190 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 800743a:	4620      	mov	r0, r4
 800743c:	2100      	movs	r1, #0
 800743e:	f7fa fea7 	bl	8002190 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 8007442:	4620      	mov	r0, r4
 8007444:	2100      	movs	r1, #0
 8007446:	f7fa fea3 	bl	8002190 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 800744a:	4620      	mov	r0, r4
 800744c:	2100      	movs	r1, #0
 800744e:	f7fa fe9f 	bl	8002190 <chSchWakeupS>
 8007452:	f387 8811 	msr	BASEPRI, r7
 8007456:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    } while (chVTIsSystemTimeWithinX(start, end));
 800745a:	f242 720f 	movw	r2, #9999	; 0x270f
 800745e:	1b9b      	subs	r3, r3, r6
 8007460:	4293      	cmp	r3, r2
      n += 4;
 8007462:	f105 0504 	add.w	r5, r5, #4
    } while (chVTIsSystemTimeWithinX(start, end));
 8007466:	d9e2      	bls.n	800742e <rt_test_011_004_execute+0x3e>
  test_set_step(3);
 8007468:	2303      	movs	r3, #3
 800746a:	f8ca 3000 	str.w	r3, [sl]
 800746e:	f388 8811 	msr	BASEPRI, r8
    chSchWakeupS(tp, MSG_TIMEOUT);
 8007472:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007476:	4620      	mov	r0, r4
 8007478:	f7fa fe8a 	bl	8002190 <chSchWakeupS>
 800747c:	f387 8811 	msr	BASEPRI, r7
    test_wait_threads();
 8007480:	f7ff fea6 	bl	80071d0 <test_wait_threads>
  test_set_step(4);
 8007484:	2304      	movs	r3, #4
    test_print("--- Score : ");
 8007486:	480a      	ldr	r0, [pc, #40]	; (80074b0 <rt_test_011_004_execute+0xc0>)
  test_set_step(4);
 8007488:	f8ca 3000 	str.w	r3, [sl]
    test_print("--- Score : ");
 800748c:	f7f9 fcd8 	bl	8000e40 <test_print>
    test_printn(n * 2);
 8007490:	0068      	lsls	r0, r5, #1
 8007492:	f7f9 fc05 	bl	8000ca0 <test_printn>
}
 8007496:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_println(" ctxswc/S");
 800749a:	4806      	ldr	r0, [pc, #24]	; (80074b4 <rt_test_011_004_execute+0xc4>)
 800749c:	f7f9 bcb0 	b.w	8000e00 <test_println>
 80074a0:	200009b0 	.word	0x200009b0
 80074a4:	08002451 	.word	0x08002451
 80074a8:	20000d88 	.word	0x20000d88
 80074ac:	200014b4 	.word	0x200014b4
 80074b0:	08009dac 	.word	0x08009dac
 80074b4:	0800a1e4 	.word	0x0800a1e4
 80074b8:	2000149c 	.word	0x2000149c
 80074bc:	00000000 	.word	0x00000000

080074c0 <rt_test_011_003_execute>:
static void rt_test_011_003_execute(void) {
 80074c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 80074c4:	4e2d      	ldr	r6, [pc, #180]	; (800757c <rt_test_011_003_execute+0xbc>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80074c6:	4d2e      	ldr	r5, [pc, #184]	; (8007580 <rt_test_011_003_execute+0xc0>)
  return chThdGetSelfX()->prio;
 80074c8:	69b3      	ldr	r3, [r6, #24]
  test_set_step(1);
 80074ca:	4f2e      	ldr	r7, [pc, #184]	; (8007584 <rt_test_011_003_execute+0xc4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80074cc:	6899      	ldr	r1, [r3, #8]
 80074ce:	4a2e      	ldr	r2, [pc, #184]	; (8007588 <rt_test_011_003_execute+0xc8>)
 80074d0:	4c2e      	ldr	r4, [pc, #184]	; (800758c <rt_test_011_003_execute+0xcc>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 80074d2:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 800759c <rt_test_011_003_execute+0xdc>
  test_set_step(1);
 80074d6:	f04f 0c01 	mov.w	ip, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80074da:	3101      	adds	r1, #1
 80074dc:	4628      	mov	r0, r5
 80074de:	2300      	movs	r3, #0
  test_set_step(1);
 80074e0:	f8c7 c000 	str.w	ip, [r7]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80074e4:	f7fa fe84 	bl	80021f0 <chThdCreateStatic.constprop.0>
 80074e8:	69b3      	ldr	r3, [r6, #24]
 80074ea:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 80074ec:	6899      	ldr	r1, [r3, #8]
  test_set_step(2);
 80074ee:	f04f 0c02 	mov.w	ip, #2
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 80074f2:	4642      	mov	r2, r8
 80074f4:	3902      	subs	r1, #2
 80074f6:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 80074fa:	2300      	movs	r3, #0
  test_set_step(2);
 80074fc:	f8c7 c000 	str.w	ip, [r7]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8007500:	f7fa fe76 	bl	80021f0 <chThdCreateStatic.constprop.0>
 8007504:	69b3      	ldr	r3, [r6, #24]
 8007506:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
 8007508:	6899      	ldr	r1, [r3, #8]
 800750a:	4642      	mov	r2, r8
 800750c:	3903      	subs	r1, #3
 800750e:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8007512:	2300      	movs	r3, #0
 8007514:	f7fa fe6c 	bl	80021f0 <chThdCreateStatic.constprop.0>
 8007518:	69b3      	ldr	r3, [r6, #24]
 800751a:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 800751c:	6899      	ldr	r1, [r3, #8]
 800751e:	4642      	mov	r2, r8
 8007520:	3904      	subs	r1, #4
 8007522:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8007526:	2300      	movs	r3, #0
 8007528:	f7fa fe62 	bl	80021f0 <chThdCreateStatic.constprop.0>
 800752c:	69b3      	ldr	r3, [r6, #24]
 800752e:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 8007530:	6899      	ldr	r1, [r3, #8]
 8007532:	4642      	mov	r2, r8
 8007534:	3905      	subs	r1, #5
 8007536:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 800753a:	2300      	movs	r3, #0
 800753c:	f7fa fe58 	bl	80021f0 <chThdCreateStatic.constprop.0>
  test_set_step(3);
 8007540:	2303      	movs	r3, #3
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 8007542:	4602      	mov	r2, r0
    n = msg_loop_test(threads[0]);
 8007544:	6820      	ldr	r0, [r4, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 8007546:	6122      	str	r2, [r4, #16]
  test_set_step(3);
 8007548:	603b      	str	r3, [r7, #0]
    n = msg_loop_test(threads[0]);
 800754a:	f7fb fe09 	bl	8003160 <msg_loop_test>
 800754e:	4604      	mov	r4, r0
    test_wait_threads();
 8007550:	f7ff fe3e 	bl	80071d0 <test_wait_threads>
  test_set_step(4);
 8007554:	2304      	movs	r3, #4
    test_print("--- Score : ");
 8007556:	480e      	ldr	r0, [pc, #56]	; (8007590 <rt_test_011_003_execute+0xd0>)
  test_set_step(4);
 8007558:	603b      	str	r3, [r7, #0]
    test_print("--- Score : ");
 800755a:	f7f9 fc71 	bl	8000e40 <test_print>
    test_printn(n);
 800755e:	4620      	mov	r0, r4
 8007560:	f7f9 fb9e 	bl	8000ca0 <test_printn>
    test_print(" msgs/S, ");
 8007564:	480b      	ldr	r0, [pc, #44]	; (8007594 <rt_test_011_003_execute+0xd4>)
 8007566:	f7f9 fc6b 	bl	8000e40 <test_print>
    test_printn(n << 1);
 800756a:	0060      	lsls	r0, r4, #1
 800756c:	f7f9 fb98 	bl	8000ca0 <test_printn>
}
 8007570:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" ctxswc/S");
 8007574:	4808      	ldr	r0, [pc, #32]	; (8007598 <rt_test_011_003_execute+0xd8>)
 8007576:	f7f9 bc43 	b.w	8000e00 <test_println>
 800757a:	bf00      	nop
 800757c:	200009b0 	.word	0x200009b0
 8007580:	20000d88 	.word	0x20000d88
 8007584:	2000149c 	.word	0x2000149c
 8007588:	080030f1 	.word	0x080030f1
 800758c:	200014b4 	.word	0x200014b4
 8007590:	08009dac 	.word	0x08009dac
 8007594:	0800a204 	.word	0x0800a204
 8007598:	0800a1e4 	.word	0x0800a1e4
 800759c:	080039c1 	.word	0x080039c1

080075a0 <rt_test_011_002_execute>:
static void rt_test_011_002_execute(void) {
 80075a0:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 80075a2:	4b14      	ldr	r3, [pc, #80]	; (80075f4 <rt_test_011_002_execute+0x54>)
  test_set_step(1);
 80075a4:	4d14      	ldr	r5, [pc, #80]	; (80075f8 <rt_test_011_002_execute+0x58>)
  return chThdGetSelfX()->prio;
 80075a6:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80075a8:	4a14      	ldr	r2, [pc, #80]	; (80075fc <rt_test_011_002_execute+0x5c>)
 80075aa:	6899      	ldr	r1, [r3, #8]
 80075ac:	4814      	ldr	r0, [pc, #80]	; (8007600 <rt_test_011_002_execute+0x60>)
 80075ae:	3101      	adds	r1, #1
  test_set_step(1);
 80075b0:	2401      	movs	r4, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80075b2:	2300      	movs	r3, #0
  test_set_step(1);
 80075b4:	602c      	str	r4, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80075b6:	f7fa fe1b 	bl	80021f0 <chThdCreateStatic.constprop.0>
 80075ba:	4b12      	ldr	r3, [pc, #72]	; (8007604 <rt_test_011_002_execute+0x64>)
  test_set_step(2);
 80075bc:	2202      	movs	r2, #2
 80075be:	602a      	str	r2, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80075c0:	6018      	str	r0, [r3, #0]
    n = msg_loop_test(threads[0]);
 80075c2:	f7fb fdcd 	bl	8003160 <msg_loop_test>
 80075c6:	4604      	mov	r4, r0
    test_wait_threads();
 80075c8:	f7ff fe02 	bl	80071d0 <test_wait_threads>
  test_set_step(3);
 80075cc:	2303      	movs	r3, #3
    test_print("--- Score : ");
 80075ce:	480e      	ldr	r0, [pc, #56]	; (8007608 <rt_test_011_002_execute+0x68>)
  test_set_step(3);
 80075d0:	602b      	str	r3, [r5, #0]
    test_print("--- Score : ");
 80075d2:	f7f9 fc35 	bl	8000e40 <test_print>
    test_printn(n);
 80075d6:	4620      	mov	r0, r4
 80075d8:	f7f9 fb62 	bl	8000ca0 <test_printn>
    test_print(" msgs/S, ");
 80075dc:	480b      	ldr	r0, [pc, #44]	; (800760c <rt_test_011_002_execute+0x6c>)
 80075de:	f7f9 fc2f 	bl	8000e40 <test_print>
    test_printn(n << 1);
 80075e2:	0060      	lsls	r0, r4, #1
 80075e4:	f7f9 fb5c 	bl	8000ca0 <test_printn>
}
 80075e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println(" ctxswc/S");
 80075ec:	4808      	ldr	r0, [pc, #32]	; (8007610 <rt_test_011_002_execute+0x70>)
 80075ee:	f7f9 bc07 	b.w	8000e00 <test_println>
 80075f2:	bf00      	nop
 80075f4:	200009b0 	.word	0x200009b0
 80075f8:	2000149c 	.word	0x2000149c
 80075fc:	080030f1 	.word	0x080030f1
 8007600:	20000d88 	.word	0x20000d88
 8007604:	200014b4 	.word	0x200014b4
 8007608:	08009dac 	.word	0x08009dac
 800760c:	0800a204 	.word	0x0800a204
 8007610:	0800a1e4 	.word	0x0800a1e4
	...

08007620 <rt_test_011_001_execute>:
static void rt_test_011_001_execute(void) {
 8007620:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 8007622:	4b14      	ldr	r3, [pc, #80]	; (8007674 <rt_test_011_001_execute+0x54>)
  test_set_step(1);
 8007624:	4d14      	ldr	r5, [pc, #80]	; (8007678 <rt_test_011_001_execute+0x58>)
  return chThdGetSelfX()->prio;
 8007626:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8007628:	4a14      	ldr	r2, [pc, #80]	; (800767c <rt_test_011_001_execute+0x5c>)
 800762a:	6899      	ldr	r1, [r3, #8]
 800762c:	4814      	ldr	r0, [pc, #80]	; (8007680 <rt_test_011_001_execute+0x60>)
 800762e:	3901      	subs	r1, #1
  test_set_step(1);
 8007630:	2401      	movs	r4, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8007632:	2300      	movs	r3, #0
  test_set_step(1);
 8007634:	602c      	str	r4, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8007636:	f7fa fddb 	bl	80021f0 <chThdCreateStatic.constprop.0>
 800763a:	4b12      	ldr	r3, [pc, #72]	; (8007684 <rt_test_011_001_execute+0x64>)
  test_set_step(2);
 800763c:	2202      	movs	r2, #2
 800763e:	602a      	str	r2, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8007640:	6018      	str	r0, [r3, #0]
    n = msg_loop_test(threads[0]);
 8007642:	f7fb fd8d 	bl	8003160 <msg_loop_test>
 8007646:	4604      	mov	r4, r0
    test_wait_threads();
 8007648:	f7ff fdc2 	bl	80071d0 <test_wait_threads>
  test_set_step(3);
 800764c:	2303      	movs	r3, #3
    test_print("--- Score : ");
 800764e:	480e      	ldr	r0, [pc, #56]	; (8007688 <rt_test_011_001_execute+0x68>)
  test_set_step(3);
 8007650:	602b      	str	r3, [r5, #0]
    test_print("--- Score : ");
 8007652:	f7f9 fbf5 	bl	8000e40 <test_print>
    test_printn(n);
 8007656:	4620      	mov	r0, r4
 8007658:	f7f9 fb22 	bl	8000ca0 <test_printn>
    test_print(" msgs/S, ");
 800765c:	480b      	ldr	r0, [pc, #44]	; (800768c <rt_test_011_001_execute+0x6c>)
 800765e:	f7f9 fbef 	bl	8000e40 <test_print>
    test_printn(n << 1);
 8007662:	0060      	lsls	r0, r4, #1
 8007664:	f7f9 fb1c 	bl	8000ca0 <test_printn>
}
 8007668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println(" ctxswc/S");
 800766c:	4808      	ldr	r0, [pc, #32]	; (8007690 <rt_test_011_001_execute+0x70>)
 800766e:	f7f9 bbc7 	b.w	8000e00 <test_println>
 8007672:	bf00      	nop
 8007674:	200009b0 	.word	0x200009b0
 8007678:	2000149c 	.word	0x2000149c
 800767c:	080030f1 	.word	0x080030f1
 8007680:	20000d88 	.word	0x20000d88
 8007684:	200014b4 	.word	0x200014b4
 8007688:	08009dac 	.word	0x08009dac
 800768c:	0800a204 	.word	0x0800a204
 8007690:	0800a1e4 	.word	0x0800a1e4
	...

080076a0 <rt_test_010_002_execute>:

static void rt_test_010_002_execute(void) {
 80076a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned i;
  tprio_t prio;

  /* [10.2.1] Adding four working areas to the pool.*/
  test_set_step(1);
 80076a2:	4d43      	ldr	r5, [pc, #268]	; (80077b0 <rt_test_010_002_execute+0x110>)
 80076a4:	4b43      	ldr	r3, [pc, #268]	; (80077b4 <rt_test_010_002_execute+0x114>)
 80076a6:	4a44      	ldr	r2, [pc, #272]	; (80077b8 <rt_test_010_002_execute+0x118>)
 80076a8:	4944      	ldr	r1, [pc, #272]	; (80077bc <rt_test_010_002_execute+0x11c>)
 80076aa:	2001      	movs	r0, #1
 80076ac:	6028      	str	r0, [r5, #0]
  {
    for (i = 0; i < 4; i++)
 80076ae:	f103 070c 	add.w	r7, r3, #12
 80076b2:	2620      	movs	r6, #32
 80076b4:	2400      	movs	r4, #0
 80076b6:	f386 8811 	msr	BASEPRI, r6
  php->next = mp->next;
 80076ba:	6808      	ldr	r0, [r1, #0]
 80076bc:	6010      	str	r0, [r2, #0]
  mp->next = php;
 80076be:	600a      	str	r2, [r1, #0]
 80076c0:	f384 8811 	msr	BASEPRI, r4
 80076c4:	429f      	cmp	r7, r3
 80076c6:	d002      	beq.n	80076ce <rt_test_010_002_execute+0x2e>
 80076c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80076cc:	e7f3      	b.n	80076b6 <rt_test_010_002_execute+0x16>
  return ch.rlist.current;
 80076ce:	4b3c      	ldr	r3, [pc, #240]	; (80077c0 <rt_test_010_002_execute+0x120>)
  test_end_step(2);

  /* [10.2.3] Creating the five threads.*/
  test_set_step(3);
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 80076d0:	4a3c      	ldr	r2, [pc, #240]	; (80077c4 <rt_test_010_002_execute+0x124>)
  return chThdGetSelfX()->prio;
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	483c      	ldr	r0, [pc, #240]	; (80077c8 <rt_test_010_002_execute+0x128>)
 80076d6:	689e      	ldr	r6, [r3, #8]
 80076d8:	4c3c      	ldr	r4, [pc, #240]	; (80077cc <rt_test_010_002_execute+0x12c>)
 80076da:	1e71      	subs	r1, r6, #1
  test_set_step(3);
 80076dc:	2303      	movs	r3, #3
 80076de:	602b      	str	r3, [r5, #0]
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 80076e0:	f7fa fdde 	bl	80022a0 <chThdCreateFromMemoryPool.constprop.0>
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 80076e4:	1eb1      	subs	r1, r6, #2
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 80076e6:	4603      	mov	r3, r0
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 80076e8:	4a39      	ldr	r2, [pc, #228]	; (80077d0 <rt_test_010_002_execute+0x130>)
 80076ea:	483a      	ldr	r0, [pc, #232]	; (80077d4 <rt_test_010_002_execute+0x134>)
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 80076ec:	6023      	str	r3, [r4, #0]
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 80076ee:	f7fa fdd7 	bl	80022a0 <chThdCreateFromMemoryPool.constprop.0>
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 80076f2:	1ef1      	subs	r1, r6, #3
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 80076f4:	4603      	mov	r3, r0
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 80076f6:	4a38      	ldr	r2, [pc, #224]	; (80077d8 <rt_test_010_002_execute+0x138>)
 80076f8:	4838      	ldr	r0, [pc, #224]	; (80077dc <rt_test_010_002_execute+0x13c>)
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 80076fa:	6063      	str	r3, [r4, #4]
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 80076fc:	f7fa fdd0 	bl	80022a0 <chThdCreateFromMemoryPool.constprop.0>
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8007700:	1f31      	subs	r1, r6, #4
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8007702:	4603      	mov	r3, r0
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8007704:	4a36      	ldr	r2, [pc, #216]	; (80077e0 <rt_test_010_002_execute+0x140>)
 8007706:	4837      	ldr	r0, [pc, #220]	; (80077e4 <rt_test_010_002_execute+0x144>)
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8007708:	60a3      	str	r3, [r4, #8]
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 800770a:	f7fa fdc9 	bl	80022a0 <chThdCreateFromMemoryPool.constprop.0>
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 800770e:	4a36      	ldr	r2, [pc, #216]	; (80077e8 <rt_test_010_002_execute+0x148>)
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8007710:	4603      	mov	r3, r0
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8007712:	1f71      	subs	r1, r6, #5
 8007714:	4835      	ldr	r0, [pc, #212]	; (80077ec <rt_test_010_002_execute+0x14c>)
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8007716:	60e3      	str	r3, [r4, #12]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8007718:	f7fa fdc2 	bl	80022a0 <chThdCreateFromMemoryPool.constprop.0>
  test_end_step(3);

  /* [10.2.4] Testing that only the fifth thread creation failed.*/
  test_set_step(4);
  {
    test_assert((threads[0] != NULL) &&
 800771c:	6823      	ldr	r3, [r4, #0]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 800771e:	6120      	str	r0, [r4, #16]
  test_set_step(4);
 8007720:	2204      	movs	r2, #4
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8007722:	4606      	mov	r6, r0
  test_set_step(4);
 8007724:	602a      	str	r2, [r5, #0]
    test_assert((threads[0] != NULL) &&
 8007726:	2b00      	cmp	r3, #0
 8007728:	d03b      	beq.n	80077a2 <rt_test_010_002_execute+0x102>
 800772a:	6860      	ldr	r0, [r4, #4]
 800772c:	b128      	cbz	r0, 800773a <rt_test_010_002_execute+0x9a>
 800772e:	68a0      	ldr	r0, [r4, #8]
 8007730:	b118      	cbz	r0, 800773a <rt_test_010_002_execute+0x9a>
 8007732:	68e0      	ldr	r0, [r4, #12]
 8007734:	3800      	subs	r0, #0
 8007736:	bf18      	it	ne
 8007738:	2001      	movne	r0, #1
 800773a:	492d      	ldr	r1, [pc, #180]	; (80077f0 <rt_test_010_002_execute+0x150>)
 800773c:	f7f9 fa18 	bl	8000b70 <_test_assert>
 8007740:	b100      	cbz	r0, 8007744 <rt_test_010_002_execute+0xa4>
    for (i = 0; i < 4; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
  }
  test_end_step(6);
}
 8007742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    test_assert(threads[4] == NULL,
 8007744:	fab6 f086 	clz	r0, r6
 8007748:	492a      	ldr	r1, [pc, #168]	; (80077f4 <rt_test_010_002_execute+0x154>)
 800774a:	0940      	lsrs	r0, r0, #5
 800774c:	f7f9 fa10 	bl	8000b70 <_test_assert>
 8007750:	2800      	cmp	r0, #0
 8007752:	d1f6      	bne.n	8007742 <rt_test_010_002_execute+0xa2>
  test_set_step(5);
 8007754:	2305      	movs	r3, #5
 8007756:	602b      	str	r3, [r5, #0]
    test_wait_threads();
 8007758:	f7ff fd3a 	bl	80071d0 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
 800775c:	4926      	ldr	r1, [pc, #152]	; (80077f8 <rt_test_010_002_execute+0x158>)
 800775e:	4827      	ldr	r0, [pc, #156]	; (80077fc <rt_test_010_002_execute+0x15c>)
 8007760:	f7f9 fb86 	bl	8000e70 <_test_assert_sequence>
 8007764:	2800      	cmp	r0, #0
 8007766:	d1ec      	bne.n	8007742 <rt_test_010_002_execute+0xa2>
  test_set_step(6);
 8007768:	2306      	movs	r3, #6
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
 800776a:	4f14      	ldr	r7, [pc, #80]	; (80077bc <rt_test_010_002_execute+0x11c>)
 800776c:	4e24      	ldr	r6, [pc, #144]	; (8007800 <rt_test_010_002_execute+0x160>)
  test_set_step(6);
 800776e:	602b      	str	r3, [r5, #0]
 8007770:	2404      	movs	r4, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
 8007772:	4638      	mov	r0, r7
 8007774:	f7f9 fc24 	bl	8000fc0 <chPoolAlloc>
 8007778:	3800      	subs	r0, #0
 800777a:	bf18      	it	ne
 800777c:	2001      	movne	r0, #1
 800777e:	4631      	mov	r1, r6
 8007780:	f7f9 f9f6 	bl	8000b70 <_test_assert>
 8007784:	2800      	cmp	r0, #0
 8007786:	d1dc      	bne.n	8007742 <rt_test_010_002_execute+0xa2>
    for (i = 0; i < 4; i++)
 8007788:	3c01      	subs	r4, #1
 800778a:	d1f2      	bne.n	8007772 <rt_test_010_002_execute+0xd2>
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
 800778c:	480b      	ldr	r0, [pc, #44]	; (80077bc <rt_test_010_002_execute+0x11c>)
 800778e:	f7f9 fc17 	bl	8000fc0 <chPoolAlloc>
 8007792:	fab0 f080 	clz	r0, r0
}
 8007796:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
 800779a:	491a      	ldr	r1, [pc, #104]	; (8007804 <rt_test_010_002_execute+0x164>)
 800779c:	0940      	lsrs	r0, r0, #5
 800779e:	f7f9 b9e7 	b.w	8000b70 <_test_assert>
    test_assert((threads[0] != NULL) &&
 80077a2:	4913      	ldr	r1, [pc, #76]	; (80077f0 <rt_test_010_002_execute+0x150>)
 80077a4:	4618      	mov	r0, r3
 80077a6:	f7f9 f9e3 	bl	8000b70 <_test_assert>
 80077aa:	2800      	cmp	r0, #0
 80077ac:	d1c9      	bne.n	8007742 <rt_test_010_002_execute+0xa2>
 80077ae:	e7c9      	b.n	8007744 <rt_test_010_002_execute+0xa4>
 80077b0:	2000149c 	.word	0x2000149c
 80077b4:	0800b5a0 	.word	0x0800b5a0
 80077b8:	20000d88 	.word	0x20000d88
 80077bc:	20000c40 	.word	0x20000c40
 80077c0:	200009b0 	.word	0x200009b0
 80077c4:	0800a060 	.word	0x0800a060
 80077c8:	0800a210 	.word	0x0800a210
 80077cc:	200014b4 	.word	0x200014b4
 80077d0:	0800a064 	.word	0x0800a064
 80077d4:	0800a218 	.word	0x0800a218
 80077d8:	0800a220 	.word	0x0800a220
 80077dc:	0800a224 	.word	0x0800a224
 80077e0:	0800a22c 	.word	0x0800a22c
 80077e4:	0800a230 	.word	0x0800a230
 80077e8:	0800a354 	.word	0x0800a354
 80077ec:	0800a238 	.word	0x0800a238
 80077f0:	0800a240 	.word	0x0800a240
 80077f4:	0800a258 	.word	0x0800a258
 80077f8:	08008f4c 	.word	0x08008f4c
 80077fc:	08009f90 	.word	0x08009f90
 8007800:	0800a274 	.word	0x0800a274
 8007804:	0800a284 	.word	0x0800a284
	...

08007810 <rt_test_010_001_execute>:
static void rt_test_010_001_execute(void) {
 8007810:	b5f0      	push	{r4, r5, r6, r7, lr}
  return ch.rlist.current;
 8007812:	4b40      	ldr	r3, [pc, #256]	; (8007914 <rt_test_010_001_execute+0x104>)
  test_set_step(2);
 8007814:	4d40      	ldr	r5, [pc, #256]	; (8007918 <rt_test_010_001_execute+0x108>)
  return chThdGetSelfX()->prio;
 8007816:	699b      	ldr	r3, [r3, #24]
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 8007818:	4840      	ldr	r0, [pc, #256]	; (800791c <rt_test_010_001_execute+0x10c>)
 800781a:	689e      	ldr	r6, [r3, #8]
static void rt_test_010_001_execute(void) {
 800781c:	b085      	sub	sp, #20
  test_set_step(2);
 800781e:	2302      	movs	r3, #2
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 8007820:	a903      	add	r1, sp, #12
 8007822:	aa02      	add	r2, sp, #8
  test_set_step(2);
 8007824:	602b      	str	r3, [r5, #0]
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 8007826:	f7fe fd1b 	bl	8006260 <chHeapStatus>
 800782a:	4604      	mov	r4, r0
    test_assert(n1 == 1, "heap fragmented");
 800782c:	f1a0 0001 	sub.w	r0, r0, #1
 8007830:	fab0 f080 	clz	r0, r0
 8007834:	493a      	ldr	r1, [pc, #232]	; (8007920 <rt_test_010_001_execute+0x110>)
 8007836:	0940      	lsrs	r0, r0, #5
 8007838:	f7f9 f99a 	bl	8000b70 <_test_assert>
 800783c:	b108      	cbz	r0, 8007842 <rt_test_010_001_execute+0x32>
}
 800783e:	b005      	add	sp, #20
 8007840:	bdf0      	pop	{r4, r5, r6, r7, pc}
  test_set_step(3);
 8007842:	2203      	movs	r2, #3
    threads[0] = chThdCreateFromHeap(&heap1,
 8007844:	4937      	ldr	r1, [pc, #220]	; (8007924 <rt_test_010_001_execute+0x114>)
  test_set_step(3);
 8007846:	602a      	str	r2, [r5, #0]
    threads[0] = chThdCreateFromHeap(&heap1,
 8007848:	4b37      	ldr	r3, [pc, #220]	; (8007928 <rt_test_010_001_execute+0x118>)
 800784a:	4f38      	ldr	r7, [pc, #224]	; (800792c <rt_test_010_001_execute+0x11c>)
 800784c:	1e72      	subs	r2, r6, #1
 800784e:	f44f 70a4 	mov.w	r0, #328	; 0x148
 8007852:	f7fd fb55 	bl	8004f00 <chThdCreateFromHeap.constprop.0>
 8007856:	6038      	str	r0, [r7, #0]
    test_assert(threads[0] != NULL, "thread creation failed");
 8007858:	3800      	subs	r0, #0
 800785a:	bf18      	it	ne
 800785c:	2001      	movne	r0, #1
 800785e:	4934      	ldr	r1, [pc, #208]	; (8007930 <rt_test_010_001_execute+0x120>)
 8007860:	f7f9 f986 	bl	8000b70 <_test_assert>
 8007864:	2800      	cmp	r0, #0
 8007866:	d1ea      	bne.n	800783e <rt_test_010_001_execute+0x2e>
  test_set_step(4);
 8007868:	2204      	movs	r2, #4
    threads[1] = chThdCreateFromHeap(&heap1,
 800786a:	4b32      	ldr	r3, [pc, #200]	; (8007934 <rt_test_010_001_execute+0x124>)
 800786c:	4932      	ldr	r1, [pc, #200]	; (8007938 <rt_test_010_001_execute+0x128>)
  test_set_step(4);
 800786e:	602a      	str	r2, [r5, #0]
    threads[1] = chThdCreateFromHeap(&heap1,
 8007870:	f44f 70a4 	mov.w	r0, #328	; 0x148
 8007874:	1eb2      	subs	r2, r6, #2
 8007876:	f7fd fb43 	bl	8004f00 <chThdCreateFromHeap.constprop.0>
 800787a:	4603      	mov	r3, r0
    test_assert(threads[1] != NULL, "thread creation failed");
 800787c:	3800      	subs	r0, #0
 800787e:	bf18      	it	ne
 8007880:	2001      	movne	r0, #1
 8007882:	492b      	ldr	r1, [pc, #172]	; (8007930 <rt_test_010_001_execute+0x120>)
    threads[1] = chThdCreateFromHeap(&heap1,
 8007884:	607b      	str	r3, [r7, #4]
    test_assert(threads[1] != NULL, "thread creation failed");
 8007886:	f7f9 f973 	bl	8000b70 <_test_assert>
 800788a:	2800      	cmp	r0, #0
 800788c:	d1d7      	bne.n	800783e <rt_test_010_001_execute+0x2e>
  test_set_step(5);
 800788e:	2005      	movs	r0, #5
    threads[2] = chThdCreateFromHeap(&heap1,
 8007890:	4b2a      	ldr	r3, [pc, #168]	; (800793c <rt_test_010_001_execute+0x12c>)
 8007892:	492b      	ldr	r1, [pc, #172]	; (8007940 <rt_test_010_001_execute+0x130>)
  test_set_step(5);
 8007894:	6028      	str	r0, [r5, #0]
    threads[2] = chThdCreateFromHeap(&heap1,
 8007896:	1ef2      	subs	r2, r6, #3
 8007898:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800789c:	f7fd fb30 	bl	8004f00 <chThdCreateFromHeap.constprop.0>
 80078a0:	4603      	mov	r3, r0
    test_assert(threads[2] == NULL, "thread creation not failed");
 80078a2:	fab0 f080 	clz	r0, r0
 80078a6:	4927      	ldr	r1, [pc, #156]	; (8007944 <rt_test_010_001_execute+0x134>)
    threads[2] = chThdCreateFromHeap(&heap1,
 80078a8:	60bb      	str	r3, [r7, #8]
    test_assert(threads[2] == NULL, "thread creation not failed");
 80078aa:	0940      	lsrs	r0, r0, #5
 80078ac:	f7f9 f960 	bl	8000b70 <_test_assert>
 80078b0:	2800      	cmp	r0, #0
 80078b2:	d1c4      	bne.n	800783e <rt_test_010_001_execute+0x2e>
  test_set_step(6);
 80078b4:	2306      	movs	r3, #6
 80078b6:	602b      	str	r3, [r5, #0]
    test_wait_threads();
 80078b8:	f7ff fc8a 	bl	80071d0 <test_wait_threads>
    test_assert_sequence("AB", "invalid sequence");
 80078bc:	4922      	ldr	r1, [pc, #136]	; (8007948 <rt_test_010_001_execute+0x138>)
 80078be:	4823      	ldr	r0, [pc, #140]	; (800794c <rt_test_010_001_execute+0x13c>)
 80078c0:	f7f9 fad6 	bl	8000e70 <_test_assert_sequence>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	d1ba      	bne.n	800783e <rt_test_010_001_execute+0x2e>
  test_set_step(7);
 80078c8:	2307      	movs	r3, #7
    n2 = chHeapStatus(&heap1, &total2, &largest2);
 80078ca:	a901      	add	r1, sp, #4
 80078cc:	4813      	ldr	r0, [pc, #76]	; (800791c <rt_test_010_001_execute+0x10c>)
  test_set_step(7);
 80078ce:	602b      	str	r3, [r5, #0]
    n2 = chHeapStatus(&heap1, &total2, &largest2);
 80078d0:	466a      	mov	r2, sp
 80078d2:	f7fe fcc5 	bl	8006260 <chHeapStatus>
    test_assert(n1 == n2, "fragmentation changed");
 80078d6:	1a20      	subs	r0, r4, r0
 80078d8:	fab0 f080 	clz	r0, r0
 80078dc:	491c      	ldr	r1, [pc, #112]	; (8007950 <rt_test_010_001_execute+0x140>)
 80078de:	0940      	lsrs	r0, r0, #5
 80078e0:	f7f9 f946 	bl	8000b70 <_test_assert>
 80078e4:	2800      	cmp	r0, #0
 80078e6:	d1aa      	bne.n	800783e <rt_test_010_001_execute+0x2e>
    test_assert(total1 == total2, "total free space changed");
 80078e8:	9803      	ldr	r0, [sp, #12]
 80078ea:	9b01      	ldr	r3, [sp, #4]
 80078ec:	4919      	ldr	r1, [pc, #100]	; (8007954 <rt_test_010_001_execute+0x144>)
 80078ee:	1ac0      	subs	r0, r0, r3
 80078f0:	fab0 f080 	clz	r0, r0
 80078f4:	0940      	lsrs	r0, r0, #5
 80078f6:	f7f9 f93b 	bl	8000b70 <_test_assert>
 80078fa:	2800      	cmp	r0, #0
 80078fc:	d19f      	bne.n	800783e <rt_test_010_001_execute+0x2e>
    test_assert(largest1 == largest2, "largest fragment size changed");
 80078fe:	9802      	ldr	r0, [sp, #8]
 8007900:	9b00      	ldr	r3, [sp, #0]
 8007902:	4915      	ldr	r1, [pc, #84]	; (8007958 <rt_test_010_001_execute+0x148>)
 8007904:	1ac0      	subs	r0, r0, r3
 8007906:	fab0 f080 	clz	r0, r0
 800790a:	0940      	lsrs	r0, r0, #5
 800790c:	f7f9 f930 	bl	8000b70 <_test_assert>
 8007910:	e795      	b.n	800783e <rt_test_010_001_execute+0x2e>
 8007912:	bf00      	nop
 8007914:	200009b0 	.word	0x200009b0
 8007918:	2000149c 	.word	0x2000149c
 800791c:	20000bb0 	.word	0x20000bb0
 8007920:	0800a11c 	.word	0x0800a11c
 8007924:	0800a210 	.word	0x0800a210
 8007928:	0800a060 	.word	0x0800a060
 800792c:	200014b4 	.word	0x200014b4
 8007930:	0800a240 	.word	0x0800a240
 8007934:	0800a064 	.word	0x0800a064
 8007938:	0800a218 	.word	0x0800a218
 800793c:	0800a220 	.word	0x0800a220
 8007940:	0800a224 	.word	0x0800a224
 8007944:	0800a258 	.word	0x0800a258
 8007948:	08008f4c 	.word	0x08008f4c
 800794c:	0800a298 	.word	0x0800a298
 8007950:	0800a29c 	.word	0x0800a29c
 8007954:	0800a2b4 	.word	0x0800a2b4
 8007958:	0800a2d0 	.word	0x0800a2d0
 800795c:	00000000 	.word	0x00000000

08007960 <rt_test_009_007_execute>:

static void rt_test_009_007_execute(void) {
 8007960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  event_listener_t el1, el2;
  systime_t target_time;

  /* [9.7.1] Registering on two event sources associating them with
     flags 1 and 4.*/
  test_set_step(1);
 8007964:	4d39      	ldr	r5, [pc, #228]	; (8007a4c <rt_test_009_007_execute+0xec>)
 8007966:	2301      	movs	r3, #1
static void rt_test_009_007_execute(void) {
 8007968:	b08a      	sub	sp, #40	; 0x28
  test_set_step(1);
 800796a:	602b      	str	r3, [r5, #0]
 800796c:	2420      	movs	r4, #32
 800796e:	f384 8811 	msr	BASEPRI, r4
  elp->next     = esp->next;
 8007972:	4f37      	ldr	r7, [pc, #220]	; (8007a50 <rt_test_009_007_execute+0xf0>)
  elp->listener = currp;
 8007974:	4e37      	ldr	r6, [pc, #220]	; (8007a54 <rt_test_009_007_execute+0xf4>)
  elp->next     = esp->next;
 8007976:	6839      	ldr	r1, [r7, #0]
  elp->listener = currp;
 8007978:	69b2      	ldr	r2, [r6, #24]
  elp->events   = events;
 800797a:	9307      	str	r3, [sp, #28]
  esp->next     = elp;
 800797c:	f10d 0a14 	add.w	sl, sp, #20
  elp->flags    = (eventflags_t)0;
 8007980:	2300      	movs	r3, #0
  elp->wflags   = wflags;
 8007982:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  elp->listener = currp;
 8007986:	e9cd 1205 	strd	r1, r2, [sp, #20]
  elp->wflags   = wflags;
 800798a:	e9cd 3008 	strd	r3, r0, [sp, #32]
  esp->next     = elp;
 800798e:	f8c7 a000 	str.w	sl, [r7]
 8007992:	f383 8811 	msr	BASEPRI, r3
 8007996:	f384 8811 	msr	BASEPRI, r4
  elp->next     = esp->next;
 800799a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8007a70 <rt_test_009_007_execute+0x110>
  elp->listener = currp;
 800799e:	69b2      	ldr	r2, [r6, #24]
  elp->next     = esp->next;
 80079a0:	f8d8 1000 	ldr.w	r1, [r8]
  elp->flags    = (eventflags_t)0;
 80079a4:	9303      	str	r3, [sp, #12]
  elp->events   = events;
 80079a6:	f04f 0904 	mov.w	r9, #4
  elp->listener = currp;
 80079aa:	e9cd 1200 	strd	r1, r2, [sp]
  elp->wflags   = wflags;
 80079ae:	9004      	str	r0, [sp, #16]
  esp->next     = elp;
 80079b0:	f8c8 d000 	str.w	sp, [r8]
  elp->events   = events;
 80079b4:	f8cd 9008 	str.w	r9, [sp, #8]
 80079b8:	f383 8811 	msr	BASEPRI, r3
  test_end_step(1);

  /* [9.7.2] Getting current time and starting a broadcaster thread,
     the thread broadcast the first Event Source immediately and the
     other after 50mS.*/
  test_set_step(2);
 80079bc:	2302      	movs	r3, #2
 80079be:	602b      	str	r3, [r5, #0]
  {
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80079c0:	f7fb fb16 	bl	8002ff0 <test_wait_tick>
 80079c4:	69b2      	ldr	r2, [r6, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80079c6:	4b24      	ldr	r3, [pc, #144]	; (8007a58 <rt_test_009_007_execute+0xf8>)
 80079c8:	6891      	ldr	r1, [r2, #8]
 80079ca:	4a24      	ldr	r2, [pc, #144]	; (8007a5c <rt_test_009_007_execute+0xfc>)
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80079cc:	4604      	mov	r4, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80079ce:	3901      	subs	r1, #1
 80079d0:	4823      	ldr	r0, [pc, #140]	; (8007a60 <rt_test_009_007_execute+0x100>)
 80079d2:	f7fa fc0d 	bl	80021f0 <chThdCreateStatic.constprop.0>
 80079d6:	4b23      	ldr	r3, [pc, #140]	; (8007a64 <rt_test_009_007_execute+0x104>)
  test_end_step(2);

  /* [9.7.3] Calling chEvtWaitAll() then verifying that both event
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(3);
 80079d8:	2203      	movs	r2, #3
 80079da:	602a      	str	r2, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80079dc:	6018      	str	r0, [r3, #0]
  {
    m = chEvtWaitAll(5);
 80079de:	f7fa fd17 	bl	8002410 <chEvtWaitAll.constprop.0>
    test_assert_time_window(target_time,
 80079e2:	f504 7102 	add.w	r1, r4, #520	; 0x208
 80079e6:	f504 70fa 	add.w	r0, r4, #500	; 0x1f4
 80079ea:	f7f8 fe59 	bl	80006a0 <_test_assert_time_window.constprop.0>
 80079ee:	b110      	cbz	r0, 80079f6 <rt_test_009_007_execute+0x96>
    chEvtUnregister(&es2, &el2);
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
  }
  test_end_step(4);
}
 80079f0:	b00a      	add	sp, #40	; 0x28
 80079f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 80079f6:	f7f8 fe43 	bl	8000680 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 80079fa:	fab0 f080 	clz	r0, r0
 80079fe:	491a      	ldr	r1, [pc, #104]	; (8007a68 <rt_test_009_007_execute+0x108>)
 8007a00:	0940      	lsrs	r0, r0, #5
 8007a02:	f7f9 f8b5 	bl	8000b70 <_test_assert>
 8007a06:	2800      	cmp	r0, #0
 8007a08:	d1f2      	bne.n	80079f0 <rt_test_009_007_execute+0x90>
    test_wait_threads();
 8007a0a:	f7ff fbe1 	bl	80071d0 <test_wait_threads>
    chEvtUnregister(&es1, &el1);
 8007a0e:	4651      	mov	r1, sl
 8007a10:	4638      	mov	r0, r7
  test_set_step(4);
 8007a12:	f8c5 9000 	str.w	r9, [r5]
    chEvtUnregister(&es1, &el1);
 8007a16:	f7f9 fb83 	bl	8001120 <chEvtUnregister>
    chEvtUnregister(&es2, &el2);
 8007a1a:	4669      	mov	r1, sp
 8007a1c:	4640      	mov	r0, r8
 8007a1e:	f7f9 fb7f 	bl	8001120 <chEvtUnregister>
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
 8007a22:	6838      	ldr	r0, [r7, #0]
 8007a24:	4911      	ldr	r1, [pc, #68]	; (8007a6c <rt_test_009_007_execute+0x10c>)
 8007a26:	1bc0      	subs	r0, r0, r7
 8007a28:	fab0 f080 	clz	r0, r0
 8007a2c:	0940      	lsrs	r0, r0, #5
 8007a2e:	f7f9 f89f 	bl	8000b70 <_test_assert>
 8007a32:	2800      	cmp	r0, #0
 8007a34:	d1dc      	bne.n	80079f0 <rt_test_009_007_execute+0x90>
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
 8007a36:	f8d8 0000 	ldr.w	r0, [r8]
 8007a3a:	490c      	ldr	r1, [pc, #48]	; (8007a6c <rt_test_009_007_execute+0x10c>)
 8007a3c:	eba0 0008 	sub.w	r0, r0, r8
 8007a40:	fab0 f080 	clz	r0, r0
 8007a44:	0940      	lsrs	r0, r0, #5
 8007a46:	f7f9 f893 	bl	8000b70 <_test_assert>
 8007a4a:	e7d1      	b.n	80079f0 <rt_test_009_007_execute+0x90>
 8007a4c:	2000149c 	.word	0x2000149c
 8007a50:	20000808 	.word	0x20000808
 8007a54:	200009b0 	.word	0x200009b0
 8007a58:	0800a060 	.word	0x0800a060
 8007a5c:	08004101 	.word	0x08004101
 8007a60:	20000d88 	.word	0x20000d88
 8007a64:	200014b4 	.word	0x200014b4
 8007a68:	0800a2f0 	.word	0x0800a2f0
 8007a6c:	08008fa8 	.word	0x08008fa8
 8007a70:	2000080c 	.word	0x2000080c
	...

08007a80 <rt_test_009_005_execute>:
static void rt_test_009_005_execute(void) {
 8007a80:	b538      	push	{r3, r4, r5, lr}
    chEvtAddEvents(5);
 8007a82:	2005      	movs	r0, #5
  test_set_step(2);
 8007a84:	4c28      	ldr	r4, [pc, #160]	; (8007b28 <rt_test_009_005_execute+0xa8>)
    chEvtAddEvents(5);
 8007a86:	f7f9 fb3b 	bl	8001100 <chEvtAddEvents>
  test_set_step(2);
 8007a8a:	2302      	movs	r3, #2
 8007a8c:	6023      	str	r3, [r4, #0]
    m = chEvtWaitAll(5);
 8007a8e:	f7fa fcbf 	bl	8002410 <chEvtWaitAll.constprop.0>
    test_assert(m == 5, "unexpected pending bit");
 8007a92:	f1a0 0005 	sub.w	r0, r0, #5
 8007a96:	fab0 f080 	clz	r0, r0
 8007a9a:	4924      	ldr	r1, [pc, #144]	; (8007b2c <rt_test_009_005_execute+0xac>)
 8007a9c:	0940      	lsrs	r0, r0, #5
 8007a9e:	f7f9 f867 	bl	8000b70 <_test_assert>
 8007aa2:	b100      	cbz	r0, 8007aa6 <rt_test_009_005_execute+0x26>
}
 8007aa4:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8007aa6:	f7f8 fdeb 	bl	8000680 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 8007aaa:	fab0 f080 	clz	r0, r0
 8007aae:	4920      	ldr	r1, [pc, #128]	; (8007b30 <rt_test_009_005_execute+0xb0>)
 8007ab0:	0940      	lsrs	r0, r0, #5
 8007ab2:	f7f9 f85d 	bl	8000b70 <_test_assert>
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	d1f4      	bne.n	8007aa4 <rt_test_009_005_execute+0x24>
    chEvtAddEvents(4);
 8007aba:	2004      	movs	r0, #4
 8007abc:	f7f9 fb20 	bl	8001100 <chEvtAddEvents>
  test_set_step(4);
 8007ac0:	2304      	movs	r3, #4
 8007ac2:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8007ac4:	f7fb fa94 	bl	8002ff0 <test_wait_tick>
  return ch.rlist.current;
 8007ac8:	4b1a      	ldr	r3, [pc, #104]	; (8007b34 <rt_test_009_005_execute+0xb4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8007aca:	4a1b      	ldr	r2, [pc, #108]	; (8007b38 <rt_test_009_005_execute+0xb8>)
 8007acc:	699b      	ldr	r3, [r3, #24]
 8007ace:	6899      	ldr	r1, [r3, #8]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8007ad0:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8007ad2:	3901      	subs	r1, #1
 8007ad4:	4819      	ldr	r0, [pc, #100]	; (8007b3c <rt_test_009_005_execute+0xbc>)
 8007ad6:	f7fa fb8b 	bl	80021f0 <chThdCreateStatic.constprop.0>
 8007ada:	4a19      	ldr	r2, [pc, #100]	; (8007b40 <rt_test_009_005_execute+0xc0>)
  test_set_step(5);
 8007adc:	2305      	movs	r3, #5
 8007ade:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8007ae0:	6010      	str	r0, [r2, #0]
    m = chEvtWaitAll(5);
 8007ae2:	f7fa fc95 	bl	8002410 <chEvtWaitAll.constprop.0>
    test_assert_time_window(target_time,
 8007ae6:	f505 7102 	add.w	r1, r5, #520	; 0x208
    m = chEvtWaitAll(5);
 8007aea:	4604      	mov	r4, r0
    test_assert_time_window(target_time,
 8007aec:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
 8007af0:	f7f8 fdd6 	bl	80006a0 <_test_assert_time_window.constprop.0>
 8007af4:	2800      	cmp	r0, #0
 8007af6:	d1d5      	bne.n	8007aa4 <rt_test_009_005_execute+0x24>
    test_assert(m == 5, "event flags error");
 8007af8:	f1a4 0005 	sub.w	r0, r4, #5
 8007afc:	fab0 f080 	clz	r0, r0
 8007b00:	4910      	ldr	r1, [pc, #64]	; (8007b44 <rt_test_009_005_execute+0xc4>)
 8007b02:	0940      	lsrs	r0, r0, #5
 8007b04:	f7f9 f834 	bl	8000b70 <_test_assert>
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	d1cb      	bne.n	8007aa4 <rt_test_009_005_execute+0x24>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8007b0c:	f7f8 fdb8 	bl	8000680 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 8007b10:	fab0 f080 	clz	r0, r0
 8007b14:	4906      	ldr	r1, [pc, #24]	; (8007b30 <rt_test_009_005_execute+0xb0>)
 8007b16:	0940      	lsrs	r0, r0, #5
 8007b18:	f7f9 f82a 	bl	8000b70 <_test_assert>
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	d1c1      	bne.n	8007aa4 <rt_test_009_005_execute+0x24>
}
 8007b20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_wait_threads();
 8007b24:	f7ff bb54 	b.w	80071d0 <test_wait_threads>
 8007b28:	2000149c 	.word	0x2000149c
 8007b2c:	0800a2fc 	.word	0x0800a2fc
 8007b30:	0800a2f0 	.word	0x0800a2f0
 8007b34:	200009b0 	.word	0x200009b0
 8007b38:	08004141 	.word	0x08004141
 8007b3c:	20000d88 	.word	0x20000d88
 8007b40:	200014b4 	.word	0x200014b4
 8007b44:	0800a314 	.word	0x0800a314
	...

08007b50 <rt_test_009_004_execute>:
static void rt_test_009_004_execute(void) {
 8007b50:	b538      	push	{r3, r4, r5, lr}
    chEvtAddEvents(5);
 8007b52:	2005      	movs	r0, #5
  test_set_step(2);
 8007b54:	4c27      	ldr	r4, [pc, #156]	; (8007bf4 <rt_test_009_004_execute+0xa4>)
    chEvtAddEvents(5);
 8007b56:	f7f9 fad3 	bl	8001100 <chEvtAddEvents>
  test_set_step(2);
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	6023      	str	r3, [r4, #0]
    m = chEvtWaitAny(ALL_EVENTS);
 8007b5e:	f7fa fc37 	bl	80023d0 <chEvtWaitAny.constprop.0>
    test_assert(m == 5, "unexpected pending bit");
 8007b62:	f1a0 0005 	sub.w	r0, r0, #5
 8007b66:	fab0 f080 	clz	r0, r0
 8007b6a:	4923      	ldr	r1, [pc, #140]	; (8007bf8 <rt_test_009_004_execute+0xa8>)
 8007b6c:	0940      	lsrs	r0, r0, #5
 8007b6e:	f7f8 ffff 	bl	8000b70 <_test_assert>
 8007b72:	b100      	cbz	r0, 8007b76 <rt_test_009_004_execute+0x26>
}
 8007b74:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8007b76:	f7f8 fd83 	bl	8000680 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 8007b7a:	fab0 f080 	clz	r0, r0
 8007b7e:	491f      	ldr	r1, [pc, #124]	; (8007bfc <rt_test_009_004_execute+0xac>)
 8007b80:	0940      	lsrs	r0, r0, #5
 8007b82:	f7f8 fff5 	bl	8000b70 <_test_assert>
 8007b86:	2800      	cmp	r0, #0
 8007b88:	d1f4      	bne.n	8007b74 <rt_test_009_004_execute+0x24>
  test_set_step(3);
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8007b8e:	f7fb fa2f 	bl	8002ff0 <test_wait_tick>
 8007b92:	4b1b      	ldr	r3, [pc, #108]	; (8007c00 <rt_test_009_004_execute+0xb0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8007b94:	4a1b      	ldr	r2, [pc, #108]	; (8007c04 <rt_test_009_004_execute+0xb4>)
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	6899      	ldr	r1, [r3, #8]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8007b9a:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8007b9c:	3901      	subs	r1, #1
 8007b9e:	481a      	ldr	r0, [pc, #104]	; (8007c08 <rt_test_009_004_execute+0xb8>)
 8007ba0:	f7fa fb26 	bl	80021f0 <chThdCreateStatic.constprop.0>
 8007ba4:	4a19      	ldr	r2, [pc, #100]	; (8007c0c <rt_test_009_004_execute+0xbc>)
  test_set_step(4);
 8007ba6:	2304      	movs	r3, #4
 8007ba8:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8007baa:	6010      	str	r0, [r2, #0]
    m = chEvtWaitAny(ALL_EVENTS);
 8007bac:	f7fa fc10 	bl	80023d0 <chEvtWaitAny.constprop.0>
    test_assert_time_window(target_time,
 8007bb0:	f505 7102 	add.w	r1, r5, #520	; 0x208
    m = chEvtWaitAny(ALL_EVENTS);
 8007bb4:	4604      	mov	r4, r0
    test_assert_time_window(target_time,
 8007bb6:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
 8007bba:	f7f8 fd71 	bl	80006a0 <_test_assert_time_window.constprop.0>
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	d1d8      	bne.n	8007b74 <rt_test_009_004_execute+0x24>
    test_assert(m == 1, "event flag error");
 8007bc2:	f1a4 0001 	sub.w	r0, r4, #1
 8007bc6:	fab0 f080 	clz	r0, r0
 8007bca:	4911      	ldr	r1, [pc, #68]	; (8007c10 <rt_test_009_004_execute+0xc0>)
 8007bcc:	0940      	lsrs	r0, r0, #5
 8007bce:	f7f8 ffcf 	bl	8000b70 <_test_assert>
 8007bd2:	2800      	cmp	r0, #0
 8007bd4:	d1ce      	bne.n	8007b74 <rt_test_009_004_execute+0x24>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8007bd6:	f7f8 fd53 	bl	8000680 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 8007bda:	fab0 f080 	clz	r0, r0
 8007bde:	4907      	ldr	r1, [pc, #28]	; (8007bfc <rt_test_009_004_execute+0xac>)
 8007be0:	0940      	lsrs	r0, r0, #5
 8007be2:	f7f8 ffc5 	bl	8000b70 <_test_assert>
 8007be6:	2800      	cmp	r0, #0
 8007be8:	d1c4      	bne.n	8007b74 <rt_test_009_004_execute+0x24>
}
 8007bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_wait_threads();
 8007bee:	f7ff baef 	b.w	80071d0 <test_wait_threads>
 8007bf2:	bf00      	nop
 8007bf4:	2000149c 	.word	0x2000149c
 8007bf8:	0800a2fc 	.word	0x0800a2fc
 8007bfc:	0800a2f0 	.word	0x0800a2f0
 8007c00:	200009b0 	.word	0x200009b0
 8007c04:	08004141 	.word	0x08004141
 8007c08:	20000d88 	.word	0x20000d88
 8007c0c:	200014b4 	.word	0x200014b4
 8007c10:	0800a328 	.word	0x0800a328
	...

08007c20 <rt_test_009_003_execute>:
static void rt_test_009_003_execute(void) {
 8007c20:	b538      	push	{r3, r4, r5, lr}
    chEvtAddEvents(7);
 8007c22:	2007      	movs	r0, #7
  test_set_step(2);
 8007c24:	4c33      	ldr	r4, [pc, #204]	; (8007cf4 <rt_test_009_003_execute+0xd4>)
    chEvtAddEvents(7);
 8007c26:	f7f9 fa6b 	bl	8001100 <chEvtAddEvents>
  test_set_step(2);
 8007c2a:	2302      	movs	r3, #2
 8007c2c:	6023      	str	r3, [r4, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 8007c2e:	f7fa fbaf 	bl	8002390 <chEvtWaitOne.constprop.0>
    test_assert(m == 1, "single event error");
 8007c32:	f1a0 0001 	sub.w	r0, r0, #1
 8007c36:	fab0 f080 	clz	r0, r0
 8007c3a:	492f      	ldr	r1, [pc, #188]	; (8007cf8 <rt_test_009_003_execute+0xd8>)
 8007c3c:	0940      	lsrs	r0, r0, #5
 8007c3e:	f7f8 ff97 	bl	8000b70 <_test_assert>
 8007c42:	b100      	cbz	r0, 8007c46 <rt_test_009_003_execute+0x26>
}
 8007c44:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtWaitOne(ALL_EVENTS);
 8007c46:	f7fa fba3 	bl	8002390 <chEvtWaitOne.constprop.0>
    test_assert(m == 2, "single event error");
 8007c4a:	f1a0 0002 	sub.w	r0, r0, #2
 8007c4e:	fab0 f080 	clz	r0, r0
 8007c52:	4929      	ldr	r1, [pc, #164]	; (8007cf8 <rt_test_009_003_execute+0xd8>)
 8007c54:	0940      	lsrs	r0, r0, #5
 8007c56:	f7f8 ff8b 	bl	8000b70 <_test_assert>
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	d1f2      	bne.n	8007c44 <rt_test_009_003_execute+0x24>
    m = chEvtWaitOne(ALL_EVENTS);
 8007c5e:	f7fa fb97 	bl	8002390 <chEvtWaitOne.constprop.0>
    test_assert(m == 4, "single event error");
 8007c62:	f1a0 0004 	sub.w	r0, r0, #4
 8007c66:	fab0 f080 	clz	r0, r0
 8007c6a:	4923      	ldr	r1, [pc, #140]	; (8007cf8 <rt_test_009_003_execute+0xd8>)
 8007c6c:	0940      	lsrs	r0, r0, #5
 8007c6e:	f7f8 ff7f 	bl	8000b70 <_test_assert>
 8007c72:	2800      	cmp	r0, #0
 8007c74:	d1e6      	bne.n	8007c44 <rt_test_009_003_execute+0x24>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8007c76:	f7f8 fd03 	bl	8000680 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 8007c7a:	fab0 f080 	clz	r0, r0
 8007c7e:	491f      	ldr	r1, [pc, #124]	; (8007cfc <rt_test_009_003_execute+0xdc>)
 8007c80:	0940      	lsrs	r0, r0, #5
 8007c82:	f7f8 ff75 	bl	8000b70 <_test_assert>
 8007c86:	2800      	cmp	r0, #0
 8007c88:	d1dc      	bne.n	8007c44 <rt_test_009_003_execute+0x24>
  test_set_step(3);
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8007c8e:	f7fb f9af 	bl	8002ff0 <test_wait_tick>
 8007c92:	4b1b      	ldr	r3, [pc, #108]	; (8007d00 <rt_test_009_003_execute+0xe0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8007c94:	4a1b      	ldr	r2, [pc, #108]	; (8007d04 <rt_test_009_003_execute+0xe4>)
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	6899      	ldr	r1, [r3, #8]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8007c9a:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8007c9c:	3901      	subs	r1, #1
 8007c9e:	481a      	ldr	r0, [pc, #104]	; (8007d08 <rt_test_009_003_execute+0xe8>)
 8007ca0:	f7fa faa6 	bl	80021f0 <chThdCreateStatic.constprop.0>
 8007ca4:	4a19      	ldr	r2, [pc, #100]	; (8007d0c <rt_test_009_003_execute+0xec>)
  test_set_step(4);
 8007ca6:	2304      	movs	r3, #4
 8007ca8:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8007caa:	6010      	str	r0, [r2, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 8007cac:	f7fa fb70 	bl	8002390 <chEvtWaitOne.constprop.0>
    test_assert_time_window(target_time,
 8007cb0:	f505 7102 	add.w	r1, r5, #520	; 0x208
    m = chEvtWaitOne(ALL_EVENTS);
 8007cb4:	4604      	mov	r4, r0
    test_assert_time_window(target_time,
 8007cb6:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
 8007cba:	f7f8 fcf1 	bl	80006a0 <_test_assert_time_window.constprop.0>
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	d1c0      	bne.n	8007c44 <rt_test_009_003_execute+0x24>
    test_assert(m == 1, "event flag error");
 8007cc2:	f1a4 0001 	sub.w	r0, r4, #1
 8007cc6:	fab0 f080 	clz	r0, r0
 8007cca:	4911      	ldr	r1, [pc, #68]	; (8007d10 <rt_test_009_003_execute+0xf0>)
 8007ccc:	0940      	lsrs	r0, r0, #5
 8007cce:	f7f8 ff4f 	bl	8000b70 <_test_assert>
 8007cd2:	2800      	cmp	r0, #0
 8007cd4:	d1b6      	bne.n	8007c44 <rt_test_009_003_execute+0x24>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8007cd6:	f7f8 fcd3 	bl	8000680 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 8007cda:	fab0 f080 	clz	r0, r0
 8007cde:	4907      	ldr	r1, [pc, #28]	; (8007cfc <rt_test_009_003_execute+0xdc>)
 8007ce0:	0940      	lsrs	r0, r0, #5
 8007ce2:	f7f8 ff45 	bl	8000b70 <_test_assert>
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	d1ac      	bne.n	8007c44 <rt_test_009_003_execute+0x24>
}
 8007cea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_wait_threads();
 8007cee:	f7ff ba6f 	b.w	80071d0 <test_wait_threads>
 8007cf2:	bf00      	nop
 8007cf4:	2000149c 	.word	0x2000149c
 8007cf8:	0800a33c 	.word	0x0800a33c
 8007cfc:	0800a2f0 	.word	0x0800a2f0
 8007d00:	200009b0 	.word	0x200009b0
 8007d04:	08004141 	.word	0x08004141
 8007d08:	20000d88 	.word	0x20000d88
 8007d0c:	200014b4 	.word	0x200014b4
 8007d10:	0800a328 	.word	0x0800a328
	...

08007d20 <rt_test_008_001_execute>:
 * - [8.1.1] Starting the messenger thread.
 * - [8.1.2] Waiting for four messages then testing the receive order.
 * .
 */

static void rt_test_008_001_execute(void) {
 8007d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d22:	4b16      	ldr	r3, [pc, #88]	; (8007d7c <rt_test_008_001_execute+0x5c>)
  thread_t *tp;
  msg_t msg;

  /* [8.1.1] Starting the messenger thread.*/
  test_set_step(1);
 8007d24:	4c16      	ldr	r4, [pc, #88]	; (8007d80 <rt_test_008_001_execute+0x60>)
 8007d26:	699b      	ldr	r3, [r3, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8007d28:	4a16      	ldr	r2, [pc, #88]	; (8007d84 <rt_test_008_001_execute+0x64>)
 8007d2a:	6899      	ldr	r1, [r3, #8]
 8007d2c:	4816      	ldr	r0, [pc, #88]	; (8007d88 <rt_test_008_001_execute+0x68>)
 8007d2e:	3101      	adds	r1, #1
  test_set_step(1);
 8007d30:	2501      	movs	r5, #1
 8007d32:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8007d34:	f7fa fa5c 	bl	80021f0 <chThdCreateStatic.constprop.0>
 8007d38:	4a14      	ldr	r2, [pc, #80]	; (8007d8c <rt_test_008_001_execute+0x6c>)
  }
  test_end_step(1);

  /* [8.1.2] Waiting for four messages then testing the receive
     order.*/
  test_set_step(2);
 8007d3a:	2302      	movs	r3, #2
 8007d3c:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8007d3e:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8007d40:	2404      	movs	r4, #4
 8007d42:	2720      	movs	r7, #32
 8007d44:	2600      	movs	r6, #0
 8007d46:	f387 8811 	msr	BASEPRI, r7
  tp = chMsgWaitS();
 8007d4a:	f7fb f9b1 	bl	80030b0 <chMsgWaitS>
 8007d4e:	f386 8811 	msr	BASEPRI, r6
  {
    unsigned i;

    for (i = 0; i < 4; i++) {
      tp = chMsgWait();
      msg = chMsgGet(tp);
 8007d52:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007d54:	f387 8811 	msr	BASEPRI, r7
  chSchWakeupS(tp, msg);
 8007d58:	4629      	mov	r1, r5
 8007d5a:	f7fa fa19 	bl	8002190 <chSchWakeupS>
 8007d5e:	f386 8811 	msr	BASEPRI, r6
      chMsgRelease(tp, msg);
      test_emit_token(msg);
 8007d62:	b2e8      	uxtb	r0, r5
 8007d64:	f7f8 ffac 	bl	8000cc0 <test_emit_token>
    for (i = 0; i < 4; i++) {
 8007d68:	3c01      	subs	r4, #1
 8007d6a:	d1ec      	bne.n	8007d46 <rt_test_008_001_execute+0x26>
    }
    test_wait_threads();
 8007d6c:	f7ff fa30 	bl	80071d0 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
  }
  test_end_step(2);
}
 8007d70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCD", "invalid sequence");
 8007d74:	4906      	ldr	r1, [pc, #24]	; (8007d90 <rt_test_008_001_execute+0x70>)
 8007d76:	4807      	ldr	r0, [pc, #28]	; (8007d94 <rt_test_008_001_execute+0x74>)
 8007d78:	f7f9 b87a 	b.w	8000e70 <_test_assert_sequence>
 8007d7c:	200009b0 	.word	0x200009b0
 8007d80:	2000149c 	.word	0x2000149c
 8007d84:	080031a1 	.word	0x080031a1
 8007d88:	20000d88 	.word	0x20000d88
 8007d8c:	200014b4 	.word	0x200014b4
 8007d90:	08008f4c 	.word	0x08008f4c
 8007d94:	08009f90 	.word	0x08009f90
	...

08007da0 <rt_test_007_009_execute>:

static void rt_test_007_009_execute(void) {
 8007da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da2:	4b1e      	ldr	r3, [pc, #120]	; (8007e1c <rt_test_007_009_execute+0x7c>)

  /* [7.9.2] Thread A is created at priority P(+1), it locks M2, locks
     M1 and goes to wait on C1.*/
  test_set_step(2);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8007da4:	4e1e      	ldr	r6, [pc, #120]	; (8007e20 <rt_test_007_009_execute+0x80>)
  return chThdGetSelfX()->prio;
 8007da6:	699b      	ldr	r3, [r3, #24]
  test_set_step(2);
 8007da8:	4c1e      	ldr	r4, [pc, #120]	; (8007e24 <rt_test_007_009_execute+0x84>)
 8007daa:	689f      	ldr	r7, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8007dac:	4a1e      	ldr	r2, [pc, #120]	; (8007e28 <rt_test_007_009_execute+0x88>)
 8007dae:	4b1f      	ldr	r3, [pc, #124]	; (8007e2c <rt_test_007_009_execute+0x8c>)
 8007db0:	4d1f      	ldr	r5, [pc, #124]	; (8007e30 <rt_test_007_009_execute+0x90>)
 8007db2:	1c79      	adds	r1, r7, #1
  test_set_step(2);
 8007db4:	f04f 0c02 	mov.w	ip, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8007db8:	4630      	mov	r0, r6
  test_set_step(2);
 8007dba:	f8c4 c000 	str.w	ip, [r4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8007dbe:	f7fa fa17 	bl	80021f0 <chThdCreateStatic.constprop.0>
 8007dc2:	4602      	mov	r2, r0
  }
  test_end_step(2);

  /* [7.9.3] Thread C is created at priority P(+2), it enqueues on M1
     and boosts TA priority at P(+2).*/
  test_set_step(3);
 8007dc4:	f04f 0c03 	mov.w	ip, #3
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8007dc8:	1cb9      	adds	r1, r7, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8007dca:	602a      	str	r2, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8007dcc:	4b19      	ldr	r3, [pc, #100]	; (8007e34 <rt_test_007_009_execute+0x94>)
 8007dce:	4a1a      	ldr	r2, [pc, #104]	; (8007e38 <rt_test_007_009_execute+0x98>)
  test_set_step(3);
 8007dd0:	f8c4 c000 	str.w	ip, [r4]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8007dd4:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 8007dd8:	f7fa fa0a 	bl	80021f0 <chThdCreateStatic.constprop.0>

  /* [7.9.4] Thread B is created at priority P(+3), it enqueues on M2
     and boosts TA priority at P(+3).*/
  test_set_step(4);
  {
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8007ddc:	1cf9      	adds	r1, r7, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8007dde:	4684      	mov	ip, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8007de0:	4a16      	ldr	r2, [pc, #88]	; (8007e3c <rt_test_007_009_execute+0x9c>)
 8007de2:	4b17      	ldr	r3, [pc, #92]	; (8007e40 <rt_test_007_009_execute+0xa0>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8007de4:	f8c5 c004 	str.w	ip, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8007de8:	f506 7024 	add.w	r0, r6, #656	; 0x290
  test_set_step(4);
 8007dec:	2604      	movs	r6, #4
 8007dee:	6026      	str	r6, [r4, #0]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8007df0:	f7fa f9fe 	bl	80021f0 <chThdCreateStatic.constprop.0>
  test_end_step(4);

  /* [7.9.5] Signaling C1: TA wakes up, unlocks M1 and priority goes to
     P(+2). TB locks M1, unlocks M1 and completes. TA unlocks M2 and
     priority goes to P(+1). TC waits on C1. TA completes.*/
  test_set_step(5);
 8007df4:	2305      	movs	r3, #5
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8007df6:	60a8      	str	r0, [r5, #8]
  test_set_step(5);
 8007df8:	6023      	str	r3, [r4, #0]
  {
    chCondSignal(&c1);
 8007dfa:	f7fa fa39 	bl	8002270 <chCondSignal.constprop.0>
  }
  test_end_step(5);

  /* [7.9.6] Signaling C1: TC wakes up, unlocks M1 and completes.*/
  test_set_step(6);
 8007dfe:	2306      	movs	r3, #6
 8007e00:	6023      	str	r3, [r4, #0]
  {
    chCondSignal(&c1);
 8007e02:	f7fa fa35 	bl	8002270 <chCondSignal.constprop.0>
  }
  test_end_step(6);

  /* [7.9.7] Checking the order of operations.*/
  test_set_step(7);
 8007e06:	2307      	movs	r3, #7
 8007e08:	6023      	str	r3, [r4, #0]
  {
    test_wait_threads();
 8007e0a:	f7ff f9e1 	bl	80071d0 <test_wait_threads>
    test_assert_sequence("ABC", "invalid sequence");
  }
  test_end_step(7);
}
 8007e0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 8007e12:	490c      	ldr	r1, [pc, #48]	; (8007e44 <rt_test_007_009_execute+0xa4>)
 8007e14:	480c      	ldr	r0, [pc, #48]	; (8007e48 <rt_test_007_009_execute+0xa8>)
 8007e16:	f7f9 b82b 	b.w	8000e70 <_test_assert_sequence>
 8007e1a:	bf00      	nop
 8007e1c:	200009b0 	.word	0x200009b0
 8007e20:	20000d88 	.word	0x20000d88
 8007e24:	2000149c 	.word	0x2000149c
 8007e28:	08005ab1 	.word	0x08005ab1
 8007e2c:	0800a060 	.word	0x0800a060
 8007e30:	200014b4 	.word	0x200014b4
 8007e34:	0800a220 	.word	0x0800a220
 8007e38:	08005b41 	.word	0x08005b41
 8007e3c:	08005bb1 	.word	0x08005bb1
 8007e40:	0800a064 	.word	0x0800a064
 8007e44:	08008f4c 	.word	0x08008f4c
 8007e48:	08008f60 	.word	0x08008f60
 8007e4c:	00000000 	.word	0x00000000

08007e50 <rt_test_007_008_execute>:
static void rt_test_007_008_execute(void) {
 8007e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ch.rlist.current;
 8007e52:	4b28      	ldr	r3, [pc, #160]	; (8007ef4 <rt_test_007_008_execute+0xa4>)
  test_set_step(1);
 8007e54:	4e28      	ldr	r6, [pc, #160]	; (8007ef8 <rt_test_007_008_execute+0xa8>)
  return chThdGetSelfX()->prio;
 8007e56:	699a      	ldr	r2, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007e58:	4828      	ldr	r0, [pc, #160]	; (8007efc <rt_test_007_008_execute+0xac>)
 8007e5a:	6895      	ldr	r5, [r2, #8]
 8007e5c:	4b28      	ldr	r3, [pc, #160]	; (8007f00 <rt_test_007_008_execute+0xb0>)
 8007e5e:	4a29      	ldr	r2, [pc, #164]	; (8007f04 <rt_test_007_008_execute+0xb4>)
 8007e60:	4c29      	ldr	r4, [pc, #164]	; (8007f08 <rt_test_007_008_execute+0xb8>)
 8007e62:	1c69      	adds	r1, r5, #1
  test_set_step(1);
 8007e64:	2701      	movs	r7, #1
 8007e66:	6037      	str	r7, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007e68:	f7fa f9c2 	bl	80021f0 <chThdCreateStatic.constprop.0>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8007e6c:	1ca9      	adds	r1, r5, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007e6e:	4607      	mov	r7, r0
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8007e70:	4b26      	ldr	r3, [pc, #152]	; (8007f0c <rt_test_007_008_execute+0xbc>)
 8007e72:	4a24      	ldr	r2, [pc, #144]	; (8007f04 <rt_test_007_008_execute+0xb4>)
 8007e74:	4826      	ldr	r0, [pc, #152]	; (8007f10 <rt_test_007_008_execute+0xc0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007e76:	6027      	str	r7, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8007e78:	f7fa f9ba 	bl	80021f0 <chThdCreateStatic.constprop.0>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007e7c:	1ce9      	adds	r1, r5, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8007e7e:	4607      	mov	r7, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007e80:	4b24      	ldr	r3, [pc, #144]	; (8007f14 <rt_test_007_008_execute+0xc4>)
 8007e82:	4a20      	ldr	r2, [pc, #128]	; (8007f04 <rt_test_007_008_execute+0xb4>)
 8007e84:	4824      	ldr	r0, [pc, #144]	; (8007f18 <rt_test_007_008_execute+0xc8>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8007e86:	6067      	str	r7, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007e88:	f7fa f9b2 	bl	80021f0 <chThdCreateStatic.constprop.0>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8007e8c:	1d29      	adds	r1, r5, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007e8e:	4607      	mov	r7, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8007e90:	4b22      	ldr	r3, [pc, #136]	; (8007f1c <rt_test_007_008_execute+0xcc>)
 8007e92:	4a1c      	ldr	r2, [pc, #112]	; (8007f04 <rt_test_007_008_execute+0xb4>)
 8007e94:	4822      	ldr	r0, [pc, #136]	; (8007f20 <rt_test_007_008_execute+0xd0>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007e96:	60a7      	str	r7, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8007e98:	f7fa f9aa 	bl	80021f0 <chThdCreateStatic.constprop.0>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8007e9c:	4b21      	ldr	r3, [pc, #132]	; (8007f24 <rt_test_007_008_execute+0xd4>)
 8007e9e:	4a19      	ldr	r2, [pc, #100]	; (8007f04 <rt_test_007_008_execute+0xb4>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8007ea0:	4607      	mov	r7, r0
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8007ea2:	1d69      	adds	r1, r5, #5
 8007ea4:	4820      	ldr	r0, [pc, #128]	; (8007f28 <rt_test_007_008_execute+0xd8>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8007ea6:	60e7      	str	r7, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8007ea8:	f7fa f9a2 	bl	80021f0 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 8007eac:	2302      	movs	r3, #2
 8007eae:	6033      	str	r3, [r6, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8007eb0:	6120      	str	r0, [r4, #16]
 8007eb2:	2320      	movs	r3, #32
 8007eb4:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8007eb8:	4c1c      	ldr	r4, [pc, #112]	; (8007f2c <rt_test_007_008_execute+0xdc>)
 8007eba:	6823      	ldr	r3, [r4, #0]
  while (queue_notempty(&cp->queue)) {
 8007ebc:	42a3      	cmp	r3, r4
 8007ebe:	d00b      	beq.n	8007ed8 <rt_test_007_008_execute+0x88>
    chSchReadyI(queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 8007ec0:	f06f 0501 	mvn.w	r5, #1
  tqp->next             = tp->queue.next;
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	6022      	str	r2, [r4, #0]
 8007ec8:	4618      	mov	r0, r3
  tqp->next->queue.prev = (thread_t *)tqp;
 8007eca:	6054      	str	r4, [r2, #4]
 8007ecc:	f7f9 fa68 	bl	80013a0 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8007ed0:	6823      	ldr	r3, [r4, #0]
 8007ed2:	6245      	str	r5, [r0, #36]	; 0x24
  while (queue_notempty(&cp->queue)) {
 8007ed4:	42a3      	cmp	r3, r4
 8007ed6:	d1f5      	bne.n	8007ec4 <rt_test_007_008_execute+0x74>
  chSchRescheduleS();
 8007ed8:	f7fb fd9a 	bl	8003a10 <chSchRescheduleS>
 8007edc:	2300      	movs	r3, #0
 8007ede:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 8007ee2:	f7ff f975 	bl	80071d0 <test_wait_threads>
}
 8007ee6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8007eea:	4911      	ldr	r1, [pc, #68]	; (8007f30 <rt_test_007_008_execute+0xe0>)
 8007eec:	4811      	ldr	r0, [pc, #68]	; (8007f34 <rt_test_007_008_execute+0xe4>)
 8007eee:	f7f8 bfbf 	b.w	8000e70 <_test_assert_sequence>
 8007ef2:	bf00      	nop
 8007ef4:	200009b0 	.word	0x200009b0
 8007ef8:	2000149c 	.word	0x2000149c
 8007efc:	20000d88 	.word	0x20000d88
 8007f00:	0800a354 	.word	0x0800a354
 8007f04:	08005b41 	.word	0x08005b41
 8007f08:	200014b4 	.word	0x200014b4
 8007f0c:	0800a22c 	.word	0x0800a22c
 8007f10:	20000ed0 	.word	0x20000ed0
 8007f14:	0800a220 	.word	0x0800a220
 8007f18:	20001018 	.word	0x20001018
 8007f1c:	0800a064 	.word	0x0800a064
 8007f20:	20001160 	.word	0x20001160
 8007f24:	0800a060 	.word	0x0800a060
 8007f28:	200012a8 	.word	0x200012a8
 8007f2c:	20000800 	.word	0x20000800
 8007f30:	08008f4c 	.word	0x08008f4c
 8007f34:	0800a350 	.word	0x0800a350
	...

08007f40 <rt_test_007_007_execute>:
  return ch.rlist.current;
 8007f40:	4b2c      	ldr	r3, [pc, #176]	; (8007ff4 <rt_test_007_007_execute+0xb4>)
  return chThdGetSelfX()->prio;
 8007f42:	699b      	ldr	r3, [r3, #24]
static void rt_test_007_007_execute(void) {
 8007f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f48:	689f      	ldr	r7, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007f4a:	4e2b      	ldr	r6, [pc, #172]	; (8007ff8 <rt_test_007_007_execute+0xb8>)
 8007f4c:	4d2b      	ldr	r5, [pc, #172]	; (8007ffc <rt_test_007_007_execute+0xbc>)
  test_set_step(1);
 8007f4e:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008020 <rt_test_007_007_execute+0xe0>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007f52:	4b2b      	ldr	r3, [pc, #172]	; (8008000 <rt_test_007_007_execute+0xc0>)
 8007f54:	4c2b      	ldr	r4, [pc, #172]	; (8008004 <rt_test_007_007_execute+0xc4>)
 8007f56:	1c79      	adds	r1, r7, #1
 8007f58:	4632      	mov	r2, r6
  test_set_step(1);
 8007f5a:	f04f 0c01 	mov.w	ip, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007f5e:	4628      	mov	r0, r5
  test_set_step(1);
 8007f60:	f8c8 c000 	str.w	ip, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007f64:	f7fa f944 	bl	80021f0 <chThdCreateStatic.constprop.0>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8007f68:	1cb9      	adds	r1, r7, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007f6a:	4684      	mov	ip, r0
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8007f6c:	4632      	mov	r2, r6
 8007f6e:	4b26      	ldr	r3, [pc, #152]	; (8008008 <rt_test_007_007_execute+0xc8>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8007f70:	f8c4 c000 	str.w	ip, [r4]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8007f74:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 8007f78:	f7fa f93a 	bl	80021f0 <chThdCreateStatic.constprop.0>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007f7c:	1cf9      	adds	r1, r7, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8007f7e:	4684      	mov	ip, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007f80:	4632      	mov	r2, r6
 8007f82:	4b22      	ldr	r3, [pc, #136]	; (800800c <rt_test_007_007_execute+0xcc>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8007f84:	f8c4 c004 	str.w	ip, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007f88:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8007f8c:	f7fa f930 	bl	80021f0 <chThdCreateStatic.constprop.0>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8007f90:	1d39      	adds	r1, r7, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007f92:	4684      	mov	ip, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8007f94:	4632      	mov	r2, r6
 8007f96:	4b1e      	ldr	r3, [pc, #120]	; (8008010 <rt_test_007_007_execute+0xd0>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007f98:	f8c4 c008 	str.w	ip, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8007f9c:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8007fa0:	f7fa f926 	bl	80021f0 <chThdCreateStatic.constprop.0>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8007fa4:	4b1b      	ldr	r3, [pc, #108]	; (8008014 <rt_test_007_007_execute+0xd4>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8007fa6:	4684      	mov	ip, r0
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8007fa8:	1d79      	adds	r1, r7, #5
 8007faa:	4632      	mov	r2, r6
 8007fac:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8007fb0:	f8c4 c00c 	str.w	ip, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8007fb4:	f7fa f91c 	bl	80021f0 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 8007fb8:	2302      	movs	r3, #2
 8007fba:	f8c8 3000 	str.w	r3, [r8]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8007fbe:	6120      	str	r0, [r4, #16]
 8007fc0:	2320      	movs	r3, #32
 8007fc2:	f383 8811 	msr	BASEPRI, r3
    chCondSignalI(&c1);
 8007fc6:	f7f9 faa3 	bl	8001510 <chCondSignalI.constprop.0>
    chCondSignalI(&c1);
 8007fca:	f7f9 faa1 	bl	8001510 <chCondSignalI.constprop.0>
    chCondSignalI(&c1);
 8007fce:	f7f9 fa9f 	bl	8001510 <chCondSignalI.constprop.0>
    chCondSignalI(&c1);
 8007fd2:	f7f9 fa9d 	bl	8001510 <chCondSignalI.constprop.0>
    chCondSignalI(&c1);
 8007fd6:	f7f9 fa9b 	bl	8001510 <chCondSignalI.constprop.0>
    chSchRescheduleS();
 8007fda:	f7fb fd19 	bl	8003a10 <chSchRescheduleS>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 8007fe4:	f7ff f8f4 	bl	80071d0 <test_wait_threads>
}
 8007fe8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8007fec:	490a      	ldr	r1, [pc, #40]	; (8008018 <rt_test_007_007_execute+0xd8>)
 8007fee:	480b      	ldr	r0, [pc, #44]	; (800801c <rt_test_007_007_execute+0xdc>)
 8007ff0:	f7f8 bf3e 	b.w	8000e70 <_test_assert_sequence>
 8007ff4:	200009b0 	.word	0x200009b0
 8007ff8:	08005b41 	.word	0x08005b41
 8007ffc:	20000d88 	.word	0x20000d88
 8008000:	0800a354 	.word	0x0800a354
 8008004:	200014b4 	.word	0x200014b4
 8008008:	0800a22c 	.word	0x0800a22c
 800800c:	0800a220 	.word	0x0800a220
 8008010:	0800a064 	.word	0x0800a064
 8008014:	0800a060 	.word	0x0800a060
 8008018:	08008f4c 	.word	0x08008f4c
 800801c:	0800a350 	.word	0x0800a350
 8008020:	2000149c 	.word	0x2000149c
	...

08008030 <rt_test_006_006_teardown>:
  test_wait_threads();
 8008030:	f7ff b8ce 	b.w	80071d0 <test_wait_threads>
	...

08008040 <rt_test_007_004_teardown>:
 8008040:	f7ff b8c6 	b.w	80071d0 <test_wait_threads>
	...

08008050 <rt_test_007_001_execute>:
static void rt_test_007_001_execute(void) {
 8008050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ch.rlist.current;
 8008052:	4f29      	ldr	r7, [pc, #164]	; (80080f8 <rt_test_007_001_execute+0xa8>)
  test_set_step(2);
 8008054:	4e29      	ldr	r6, [pc, #164]	; (80080fc <rt_test_007_001_execute+0xac>)
  return chThdGetSelfX()->prio;
 8008056:	69bb      	ldr	r3, [r7, #24]
    chMtxLock(&m1);
 8008058:	4829      	ldr	r0, [pc, #164]	; (8008100 <rt_test_007_001_execute+0xb0>)
 800805a:	689c      	ldr	r4, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 800805c:	4d29      	ldr	r5, [pc, #164]	; (8008104 <rt_test_007_001_execute+0xb4>)
  test_set_step(2);
 800805e:	2302      	movs	r3, #2
 8008060:	6033      	str	r3, [r6, #0]
    chMtxLock(&m1);
 8008062:	f7fb f92d 	bl	80032c0 <chMtxLock>
  test_set_step(3);
 8008066:	f04f 0c03 	mov.w	ip, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 800806a:	4b27      	ldr	r3, [pc, #156]	; (8008108 <rt_test_007_001_execute+0xb8>)
 800806c:	4a27      	ldr	r2, [pc, #156]	; (800810c <rt_test_007_001_execute+0xbc>)
 800806e:	4828      	ldr	r0, [pc, #160]	; (8008110 <rt_test_007_001_execute+0xc0>)
  test_set_step(3);
 8008070:	f8c6 c000 	str.w	ip, [r6]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8008074:	1c61      	adds	r1, r4, #1
 8008076:	f7fa f8bb 	bl	80021f0 <chThdCreateStatic.constprop.0>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 800807a:	4b26      	ldr	r3, [pc, #152]	; (8008114 <rt_test_007_001_execute+0xc4>)
 800807c:	4a23      	ldr	r2, [pc, #140]	; (800810c <rt_test_007_001_execute+0xbc>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 800807e:	4684      	mov	ip, r0
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8008080:	1ca1      	adds	r1, r4, #2
 8008082:	4825      	ldr	r0, [pc, #148]	; (8008118 <rt_test_007_001_execute+0xc8>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8008084:	f8c5 c000 	str.w	ip, [r5]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8008088:	f7fa f8b2 	bl	80021f0 <chThdCreateStatic.constprop.0>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 800808c:	4b23      	ldr	r3, [pc, #140]	; (800811c <rt_test_007_001_execute+0xcc>)
 800808e:	4a1f      	ldr	r2, [pc, #124]	; (800810c <rt_test_007_001_execute+0xbc>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8008090:	4684      	mov	ip, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8008092:	1ce1      	adds	r1, r4, #3
 8008094:	4822      	ldr	r0, [pc, #136]	; (8008120 <rt_test_007_001_execute+0xd0>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8008096:	f8c5 c004 	str.w	ip, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 800809a:	f7fa f8a9 	bl	80021f0 <chThdCreateStatic.constprop.0>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 800809e:	4b21      	ldr	r3, [pc, #132]	; (8008124 <rt_test_007_001_execute+0xd4>)
 80080a0:	4a1a      	ldr	r2, [pc, #104]	; (800810c <rt_test_007_001_execute+0xbc>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 80080a2:	4684      	mov	ip, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 80080a4:	1d21      	adds	r1, r4, #4
 80080a6:	4820      	ldr	r0, [pc, #128]	; (8008128 <rt_test_007_001_execute+0xd8>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 80080a8:	f8c5 c008 	str.w	ip, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 80080ac:	f7fa f8a0 	bl	80021f0 <chThdCreateStatic.constprop.0>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80080b0:	1d61      	adds	r1, r4, #5
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 80080b2:	4684      	mov	ip, r0
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80080b4:	4b1d      	ldr	r3, [pc, #116]	; (800812c <rt_test_007_001_execute+0xdc>)
 80080b6:	4a15      	ldr	r2, [pc, #84]	; (800810c <rt_test_007_001_execute+0xbc>)
 80080b8:	481d      	ldr	r0, [pc, #116]	; (8008130 <rt_test_007_001_execute+0xe0>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 80080ba:	f8c5 c00c 	str.w	ip, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80080be:	f7fa f897 	bl	80021f0 <chThdCreateStatic.constprop.0>
  test_set_step(4);
 80080c2:	2304      	movs	r3, #4
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80080c4:	4602      	mov	r2, r0
    chMtxUnlock(&m1);
 80080c6:	480e      	ldr	r0, [pc, #56]	; (8008100 <rt_test_007_001_execute+0xb0>)
  test_set_step(4);
 80080c8:	6033      	str	r3, [r6, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80080ca:	612a      	str	r2, [r5, #16]
    chMtxUnlock(&m1);
 80080cc:	f7fc fe70 	bl	8004db0 <chMtxUnlock>
    test_wait_threads();
 80080d0:	f7ff f87e 	bl	80071d0 <test_wait_threads>
 80080d4:	69bb      	ldr	r3, [r7, #24]
    test_assert(prio == chThdGetPriorityX(), "wrong priority level");
 80080d6:	4917      	ldr	r1, [pc, #92]	; (8008134 <rt_test_007_001_execute+0xe4>)
 80080d8:	6898      	ldr	r0, [r3, #8]
 80080da:	1b00      	subs	r0, r0, r4
 80080dc:	fab0 f080 	clz	r0, r0
 80080e0:	0940      	lsrs	r0, r0, #5
 80080e2:	f7f8 fd45 	bl	8000b70 <_test_assert>
 80080e6:	b100      	cbz	r0, 80080ea <rt_test_007_001_execute+0x9a>
}
 80080e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 80080ee:	4912      	ldr	r1, [pc, #72]	; (8008138 <rt_test_007_001_execute+0xe8>)
 80080f0:	4812      	ldr	r0, [pc, #72]	; (800813c <rt_test_007_001_execute+0xec>)
 80080f2:	f7f8 bebd 	b.w	8000e70 <_test_assert_sequence>
 80080f6:	bf00      	nop
 80080f8:	200009b0 	.word	0x200009b0
 80080fc:	2000149c 	.word	0x2000149c
 8008100:	2000082c 	.word	0x2000082c
 8008104:	200014b4 	.word	0x200014b4
 8008108:	0800a354 	.word	0x0800a354
 800810c:	08005ea1 	.word	0x08005ea1
 8008110:	20000d88 	.word	0x20000d88
 8008114:	0800a22c 	.word	0x0800a22c
 8008118:	20000ed0 	.word	0x20000ed0
 800811c:	0800a220 	.word	0x0800a220
 8008120:	20001018 	.word	0x20001018
 8008124:	0800a064 	.word	0x0800a064
 8008128:	20001160 	.word	0x20001160
 800812c:	0800a060 	.word	0x0800a060
 8008130:	200012a8 	.word	0x200012a8
 8008134:	0800a048 	.word	0x0800a048
 8008138:	08008f4c 	.word	0x08008f4c
 800813c:	0800a350 	.word	0x0800a350

08008140 <rt_test_006_005_teardown>:
 8008140:	f7ff b846 	b.w	80071d0 <test_wait_threads>
	...

08008150 <rt_test_006_004_execute>:
  return ch.rlist.current;
 8008150:	4b23      	ldr	r3, [pc, #140]	; (80081e0 <rt_test_006_004_execute+0x90>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8008152:	4824      	ldr	r0, [pc, #144]	; (80081e4 <rt_test_006_004_execute+0x94>)
  return chThdGetSelfX()->prio;
 8008154:	699a      	ldr	r2, [r3, #24]
 8008156:	4b24      	ldr	r3, [pc, #144]	; (80081e8 <rt_test_006_004_execute+0x98>)
 8008158:	6891      	ldr	r1, [r2, #8]
 800815a:	4a24      	ldr	r2, [pc, #144]	; (80081ec <rt_test_006_004_execute+0x9c>)
static void rt_test_006_004_execute(void) {
 800815c:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 800815e:	4c24      	ldr	r4, [pc, #144]	; (80081f0 <rt_test_006_004_execute+0xa0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8008160:	3101      	adds	r1, #1
  test_set_step(1);
 8008162:	2501      	movs	r5, #1
 8008164:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8008166:	f7fa f843 	bl	80021f0 <chThdCreateStatic.constprop.0>
 800816a:	4b22      	ldr	r3, [pc, #136]	; (80081f4 <rt_test_006_004_execute+0xa4>)
  test_set_step(2);
 800816c:	2502      	movs	r5, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 800816e:	6018      	str	r0, [r3, #0]
  test_set_step(2);
 8008170:	6025      	str	r5, [r4, #0]
 8008172:	2320      	movs	r3, #32
 8008174:	f383 8811 	msr	BASEPRI, r3
void chSemAddCounterI(semaphore_t *sp, cnt_t n) {
 8008178:	4c1f      	ldr	r4, [pc, #124]	; (80081f8 <rt_test_006_004_execute+0xa8>)
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 800817a:	2600      	movs	r6, #0
 800817c:	e002      	b.n	8008184 <rt_test_006_004_execute+0x34>
  while (n > (cnt_t)0) {
 800817e:	2d01      	cmp	r5, #1
 8008180:	d00e      	beq.n	80081a0 <rt_test_006_004_execute+0x50>
 8008182:	2501      	movs	r5, #1
    if (++sp->cnt <= (cnt_t)0) {
 8008184:	68a3      	ldr	r3, [r4, #8]
 8008186:	3301      	adds	r3, #1
 8008188:	2b00      	cmp	r3, #0
 800818a:	60a3      	str	r3, [r4, #8]
 800818c:	dcf7      	bgt.n	800817e <rt_test_006_004_execute+0x2e>
  thread_t *tp = tqp->next;
 800818e:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 8008190:	6803      	ldr	r3, [r0, #0]
 8008192:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8008194:	605c      	str	r4, [r3, #4]
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 8008196:	f7f9 f903 	bl	80013a0 <chSchReadyI>
  while (n > (cnt_t)0) {
 800819a:	2d01      	cmp	r5, #1
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 800819c:	6246      	str	r6, [r0, #36]	; 0x24
  while (n > (cnt_t)0) {
 800819e:	d1f0      	bne.n	8008182 <rt_test_006_004_execute+0x32>
    chSchRescheduleS();
 80081a0:	f7fb fc36 	bl	8003a10 <chSchRescheduleS>
 80081a4:	2500      	movs	r5, #0
 80081a6:	f385 8811 	msr	BASEPRI, r5
    test_wait_threads();
 80081aa:	f7ff f811 	bl	80071d0 <test_wait_threads>
 80081ae:	2320      	movs	r3, #32
 80081b0:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "invalid counter");
 80081b4:	68a0      	ldr	r0, [r4, #8]
 80081b6:	4911      	ldr	r1, [pc, #68]	; (80081fc <rt_test_006_004_execute+0xac>)
 80081b8:	f1a0 0001 	sub.w	r0, r0, #1
 80081bc:	fab0 f080 	clz	r0, r0
 80081c0:	0940      	lsrs	r0, r0, #5
 80081c2:	f7f8 fcd5 	bl	8000b70 <_test_assert>
 80081c6:	b110      	cbz	r0, 80081ce <rt_test_006_004_execute+0x7e>
 80081c8:	f385 8811 	msr	BASEPRI, r5
}
 80081cc:	bd70      	pop	{r4, r5, r6, pc}
 80081ce:	f380 8811 	msr	BASEPRI, r0
    test_assert_sequence("A", "invalid sequence");
 80081d2:	490b      	ldr	r1, [pc, #44]	; (8008200 <rt_test_006_004_execute+0xb0>)
 80081d4:	4804      	ldr	r0, [pc, #16]	; (80081e8 <rt_test_006_004_execute+0x98>)
}
 80081d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_sequence("A", "invalid sequence");
 80081da:	f7f8 be49 	b.w	8000e70 <_test_assert_sequence>
 80081de:	bf00      	nop
 80081e0:	200009b0 	.word	0x200009b0
 80081e4:	20000d88 	.word	0x20000d88
 80081e8:	0800a060 	.word	0x0800a060
 80081ec:	08003521 	.word	0x08003521
 80081f0:	2000149c 	.word	0x2000149c
 80081f4:	200014b4 	.word	0x200014b4
 80081f8:	20000d70 	.word	0x20000d70
 80081fc:	0800a358 	.word	0x0800a358
 8008200:	08008f4c 	.word	0x08008f4c
	...

08008210 <rt_test_006_003_execute>:
static void rt_test_006_003_execute(void) {
 8008210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 8008214:	4d4b      	ldr	r5, [pc, #300]	; (8008344 <rt_test_006_003_execute+0x134>)
 8008216:	2001      	movs	r0, #1
 8008218:	6028      	str	r0, [r5, #0]
 800821a:	2320      	movs	r3, #32
 800821c:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8008220:	4c49      	ldr	r4, [pc, #292]	; (8008348 <rt_test_006_003_execute+0x138>)
 8008222:	68a3      	ldr	r3, [r4, #8]
 8008224:	3b01      	subs	r3, #1
 8008226:	bf5c      	itt	pl
 8008228:	60a3      	strpl	r3, [r4, #8]
 800822a:	2000      	movpl	r0, #0
 800822c:	2300      	movs	r3, #0
 800822e:	f383 8811 	msr	BASEPRI, r3
    test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 8008232:	4946      	ldr	r1, [pc, #280]	; (800834c <rt_test_006_003_execute+0x13c>)
 8008234:	f7f8 fc9c 	bl	8000b70 <_test_assert>
 8008238:	b108      	cbz	r0, 800823e <rt_test_006_003_execute+0x2e>
}
 800823a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return (bool)(tqp->next == (const thread_t *)tqp);
 800823e:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8008240:	4943      	ldr	r1, [pc, #268]	; (8008350 <rt_test_006_003_execute+0x140>)
 8008242:	1b00      	subs	r0, r0, r4
 8008244:	fab0 f080 	clz	r0, r0
 8008248:	0940      	lsrs	r0, r0, #5
 800824a:	f7f8 fc91 	bl	8000b70 <_test_assert>
 800824e:	2800      	cmp	r0, #0
 8008250:	d1f3      	bne.n	800823a <rt_test_006_003_execute+0x2a>
    test_assert(sem1.cnt == 0, "counter not zero");
 8008252:	68a0      	ldr	r0, [r4, #8]
 8008254:	493f      	ldr	r1, [pc, #252]	; (8008354 <rt_test_006_003_execute+0x144>)
 8008256:	fab0 f080 	clz	r0, r0
 800825a:	0940      	lsrs	r0, r0, #5
 800825c:	f7f8 fc88 	bl	8000b70 <_test_assert>
 8008260:	4603      	mov	r3, r0
 8008262:	2800      	cmp	r0, #0
 8008264:	d1e9      	bne.n	800823a <rt_test_006_003_execute+0x2a>
  return ch.rlist.current;
 8008266:	493c      	ldr	r1, [pc, #240]	; (8008358 <rt_test_006_003_execute+0x148>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008268:	4a3c      	ldr	r2, [pc, #240]	; (800835c <rt_test_006_003_execute+0x14c>)
  return chThdGetSelfX()->prio;
 800826a:	6989      	ldr	r1, [r1, #24]
 800826c:	483c      	ldr	r0, [pc, #240]	; (8008360 <rt_test_006_003_execute+0x150>)
 800826e:	6889      	ldr	r1, [r1, #8]
  test_set_step(2);
 8008270:	2602      	movs	r6, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008272:	3901      	subs	r1, #1
  test_set_step(2);
 8008274:	602e      	str	r6, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008276:	f7f9 ffbb 	bl	80021f0 <chThdCreateStatic.constprop.0>
 800827a:	4b3a      	ldr	r3, [pc, #232]	; (8008364 <rt_test_006_003_execute+0x154>)
 800827c:	4602      	mov	r2, r0
    msg = chSemWaitTimeout(&sem1, TIME_MS2I(500));
 800827e:	f241 3088 	movw	r0, #5000	; 0x1388
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008282:	601a      	str	r2, [r3, #0]
    msg = chSemWaitTimeout(&sem1, TIME_MS2I(500));
 8008284:	f7fa f924 	bl	80024d0 <chSemWaitTimeout.constprop.0>
 8008288:	4606      	mov	r6, r0
    test_wait_threads();
 800828a:	f7fe ffa1 	bl	80071d0 <test_wait_threads>
    test_assert(msg == MSG_OK, "wrong wake-up message");
 800828e:	fab6 f086 	clz	r0, r6
 8008292:	492e      	ldr	r1, [pc, #184]	; (800834c <rt_test_006_003_execute+0x13c>)
 8008294:	0940      	lsrs	r0, r0, #5
 8008296:	f7f8 fc6b 	bl	8000b70 <_test_assert>
 800829a:	2800      	cmp	r0, #0
 800829c:	d1cd      	bne.n	800823a <rt_test_006_003_execute+0x2a>
 800829e:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80082a0:	492b      	ldr	r1, [pc, #172]	; (8008350 <rt_test_006_003_execute+0x140>)
 80082a2:	1b00      	subs	r0, r0, r4
 80082a4:	fab0 f080 	clz	r0, r0
 80082a8:	0940      	lsrs	r0, r0, #5
 80082aa:	f7f8 fc61 	bl	8000b70 <_test_assert>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	d1c3      	bne.n	800823a <rt_test_006_003_execute+0x2a>
    test_assert(sem1.cnt == 0, "counter not zero");
 80082b2:	68a0      	ldr	r0, [r4, #8]
 80082b4:	4927      	ldr	r1, [pc, #156]	; (8008354 <rt_test_006_003_execute+0x144>)
 80082b6:	fab0 f080 	clz	r0, r0
 80082ba:	0940      	lsrs	r0, r0, #5
 80082bc:	f7f8 fc58 	bl	8000b70 <_test_assert>
 80082c0:	2800      	cmp	r0, #0
 80082c2:	d1ba      	bne.n	800823a <rt_test_006_003_execute+0x2a>
  test_set_step(3);
 80082c4:	2303      	movs	r3, #3
 80082c6:	602b      	str	r3, [r5, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(5 * 50));
 80082c8:	f7fa fe92 	bl	8002ff0 <test_wait_tick>
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 80082cc:	4f1f      	ldr	r7, [pc, #124]	; (800834c <rt_test_006_003_execute+0x13c>)
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80082ce:	4e20      	ldr	r6, [pc, #128]	; (8008350 <rt_test_006_003_execute+0x140>)
      test_assert(sem1.cnt == 0, "counter not zero");
 80082d0:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8008354 <rt_test_006_003_execute+0x144>
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(5 * 50));
 80082d4:	4681      	mov	r9, r0
 80082d6:	2541      	movs	r5, #65	; 0x41
      test_emit_token('A' + i);
 80082d8:	4628      	mov	r0, r5
 80082da:	f7f8 fcf1 	bl	8000cc0 <test_emit_token>
      msg = chSemWaitTimeout(&sem1, TIME_MS2I(50));
 80082de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80082e2:	f7fa f8f5 	bl	80024d0 <chSemWaitTimeout.constprop.0>
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 80082e6:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 80082ea:	fab0 f080 	clz	r0, r0
 80082ee:	4639      	mov	r1, r7
 80082f0:	0940      	lsrs	r0, r0, #5
 80082f2:	f7f8 fc3d 	bl	8000b70 <_test_assert>
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80082f6:	4631      	mov	r1, r6
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 80082f8:	2800      	cmp	r0, #0
 80082fa:	d19e      	bne.n	800823a <rt_test_006_003_execute+0x2a>
 80082fc:	6820      	ldr	r0, [r4, #0]
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80082fe:	1b00      	subs	r0, r0, r4
 8008300:	fab0 f080 	clz	r0, r0
 8008304:	0940      	lsrs	r0, r0, #5
 8008306:	f7f8 fc33 	bl	8000b70 <_test_assert>
      test_assert(sem1.cnt == 0, "counter not zero");
 800830a:	4641      	mov	r1, r8
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 800830c:	2800      	cmp	r0, #0
 800830e:	d194      	bne.n	800823a <rt_test_006_003_execute+0x2a>
      test_assert(sem1.cnt == 0, "counter not zero");
 8008310:	68a0      	ldr	r0, [r4, #8]
 8008312:	fab0 f080 	clz	r0, r0
 8008316:	0940      	lsrs	r0, r0, #5
 8008318:	f7f8 fc2a 	bl	8000b70 <_test_assert>
    for (i = 0; i < 5; i++) {
 800831c:	3501      	adds	r5, #1
 800831e:	b2ed      	uxtb	r5, r5
      test_assert(sem1.cnt == 0, "counter not zero");
 8008320:	2800      	cmp	r0, #0
 8008322:	d18a      	bne.n	800823a <rt_test_006_003_execute+0x2a>
    for (i = 0; i < 5; i++) {
 8008324:	2d46      	cmp	r5, #70	; 0x46
 8008326:	d1d7      	bne.n	80082d8 <rt_test_006_003_execute+0xc8>
    test_assert_sequence("ABCDE", "invalid sequence");
 8008328:	490f      	ldr	r1, [pc, #60]	; (8008368 <rt_test_006_003_execute+0x158>)
 800832a:	4810      	ldr	r0, [pc, #64]	; (800836c <rt_test_006_003_execute+0x15c>)
 800832c:	f7f8 fda0 	bl	8000e70 <_test_assert_sequence>
 8008330:	2800      	cmp	r0, #0
 8008332:	d182      	bne.n	800823a <rt_test_006_003_execute+0x2a>
    test_assert_time_window(target_time,
 8008334:	f609 11d8 	addw	r1, r9, #2520	; 0x9d8
 8008338:	f609 10c4 	addw	r0, r9, #2500	; 0x9c4
}
 800833c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert_time_window(target_time,
 8008340:	f7f8 b9ae 	b.w	80006a0 <_test_assert_time_window.constprop.0>
 8008344:	2000149c 	.word	0x2000149c
 8008348:	20000d70 	.word	0x20000d70
 800834c:	08009ec8 	.word	0x08009ec8
 8008350:	08009e04 	.word	0x08009e04
 8008354:	08009e14 	.word	0x08009e14
 8008358:	200009b0 	.word	0x200009b0
 800835c:	08004361 	.word	0x08004361
 8008360:	20000d88 	.word	0x20000d88
 8008364:	200014b4 	.word	0x200014b4
 8008368:	08008f4c 	.word	0x08008f4c
 800836c:	0800a350 	.word	0x0800a350

08008370 <rt_test_006_002_execute>:
static void rt_test_006_002_execute(void) {
 8008370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8008374:	4c2b      	ldr	r4, [pc, #172]	; (8008424 <rt_test_006_002_execute+0xb4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8008376:	4f2c      	ldr	r7, [pc, #176]	; (8008428 <rt_test_006_002_execute+0xb8>)
  return chThdGetSelfX()->prio;
 8008378:	69a3      	ldr	r3, [r4, #24]
 800837a:	4e2c      	ldr	r6, [pc, #176]	; (800842c <rt_test_006_002_execute+0xbc>)
 800837c:	6899      	ldr	r1, [r3, #8]
  test_set_step(1);
 800837e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8008454 <rt_test_006_002_execute+0xe4>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8008382:	4b2b      	ldr	r3, [pc, #172]	; (8008430 <rt_test_006_002_execute+0xc0>)
 8008384:	4d2b      	ldr	r5, [pc, #172]	; (8008434 <rt_test_006_002_execute+0xc4>)
  test_set_step(1);
 8008386:	f04f 0c01 	mov.w	ip, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 800838a:	463a      	mov	r2, r7
 800838c:	3105      	adds	r1, #5
 800838e:	4630      	mov	r0, r6
  test_set_step(1);
 8008390:	f8c8 c000 	str.w	ip, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8008394:	f7f9 ff2c 	bl	80021f0 <chThdCreateStatic.constprop.0>
 8008398:	69a2      	ldr	r2, [r4, #24]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 800839a:	4b27      	ldr	r3, [pc, #156]	; (8008438 <rt_test_006_002_execute+0xc8>)
 800839c:	6891      	ldr	r1, [r2, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 800839e:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 80083a0:	463a      	mov	r2, r7
 80083a2:	3101      	adds	r1, #1
 80083a4:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 80083a8:	f7f9 ff22 	bl	80021f0 <chThdCreateStatic.constprop.0>
 80083ac:	69a2      	ldr	r2, [r4, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 80083ae:	4b23      	ldr	r3, [pc, #140]	; (800843c <rt_test_006_002_execute+0xcc>)
 80083b0:	6891      	ldr	r1, [r2, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 80083b2:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 80083b4:	463a      	mov	r2, r7
 80083b6:	3103      	adds	r1, #3
 80083b8:	f506 7024 	add.w	r0, r6, #656	; 0x290
 80083bc:	f7f9 ff18 	bl	80021f0 <chThdCreateStatic.constprop.0>
 80083c0:	69a2      	ldr	r2, [r4, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 80083c2:	4b1f      	ldr	r3, [pc, #124]	; (8008440 <rt_test_006_002_execute+0xd0>)
 80083c4:	6891      	ldr	r1, [r2, #8]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 80083c6:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 80083c8:	463a      	mov	r2, r7
 80083ca:	3104      	adds	r1, #4
 80083cc:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 80083d0:	f7f9 ff0e 	bl	80021f0 <chThdCreateStatic.constprop.0>
 80083d4:	69a3      	ldr	r3, [r4, #24]
    chSemSignal(&sem1);
 80083d6:	4c1b      	ldr	r4, [pc, #108]	; (8008444 <rt_test_006_002_execute+0xd4>)
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 80083d8:	6899      	ldr	r1, [r3, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 80083da:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 80083dc:	3102      	adds	r1, #2
 80083de:	463a      	mov	r2, r7
 80083e0:	4b19      	ldr	r3, [pc, #100]	; (8008448 <rt_test_006_002_execute+0xd8>)
 80083e2:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 80083e6:	f7f9 ff03 	bl	80021f0 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 80083ea:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 80083ec:	4602      	mov	r2, r0
    chSemSignal(&sem1);
 80083ee:	4620      	mov	r0, r4
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 80083f0:	612a      	str	r2, [r5, #16]
  test_set_step(2);
 80083f2:	f8c8 3000 	str.w	r3, [r8]
    chSemSignal(&sem1);
 80083f6:	f7f9 ff83 	bl	8002300 <chSemSignal>
    chSemSignal(&sem1);
 80083fa:	4620      	mov	r0, r4
 80083fc:	f7f9 ff80 	bl	8002300 <chSemSignal>
    chSemSignal(&sem1);
 8008400:	4620      	mov	r0, r4
 8008402:	f7f9 ff7d 	bl	8002300 <chSemSignal>
    chSemSignal(&sem1);
 8008406:	4620      	mov	r0, r4
 8008408:	f7f9 ff7a 	bl	8002300 <chSemSignal>
    chSemSignal(&sem1);
 800840c:	4620      	mov	r0, r4
 800840e:	f7f9 ff77 	bl	8002300 <chSemSignal>
    test_wait_threads();
 8008412:	f7fe fedd 	bl	80071d0 <test_wait_threads>
}
 8008416:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 800841a:	490c      	ldr	r1, [pc, #48]	; (800844c <rt_test_006_002_execute+0xdc>)
 800841c:	480c      	ldr	r0, [pc, #48]	; (8008450 <rt_test_006_002_execute+0xe0>)
 800841e:	f7f8 bd27 	b.w	8000e70 <_test_assert_sequence>
 8008422:	bf00      	nop
 8008424:	200009b0 	.word	0x200009b0
 8008428:	08003521 	.word	0x08003521
 800842c:	20000d88 	.word	0x20000d88
 8008430:	0800a060 	.word	0x0800a060
 8008434:	200014b4 	.word	0x200014b4
 8008438:	0800a064 	.word	0x0800a064
 800843c:	0800a220 	.word	0x0800a220
 8008440:	0800a22c 	.word	0x0800a22c
 8008444:	20000d70 	.word	0x20000d70
 8008448:	0800a354 	.word	0x0800a354
 800844c:	08008f4c 	.word	0x08008f4c
 8008450:	0800a350 	.word	0x0800a350
 8008454:	2000149c 	.word	0x2000149c
	...

08008460 <rt_test_005_001_execute>:

static void rt_test_005_001_execute(void) {
 8008460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8008464:	4d30      	ldr	r5, [pc, #192]	; (8008528 <rt_test_005_001_execute+0xc8>)
  msg_t msg;

  /* [5.1.1] The function chThdSuspendTimeoutS() is invoked, the thread
     is remotely resumed with message @p MSG_OK. On return the message
     and the state of the reference are tested.*/
  test_set_step(1);
 8008466:	4f31      	ldr	r7, [pc, #196]	; (800852c <rt_test_005_001_execute+0xcc>)
  return chThdGetSelfX()->prio;
 8008468:	69aa      	ldr	r2, [r5, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 800846a:	4b31      	ldr	r3, [pc, #196]	; (8008530 <rt_test_005_001_execute+0xd0>)
 800846c:	6891      	ldr	r1, [r2, #8]
 800846e:	4831      	ldr	r0, [pc, #196]	; (8008534 <rt_test_005_001_execute+0xd4>)
 8008470:	4a31      	ldr	r2, [pc, #196]	; (8008538 <rt_test_005_001_execute+0xd8>)
 8008472:	3901      	subs	r1, #1
  test_set_step(1);
 8008474:	2401      	movs	r4, #1
 8008476:	603c      	str	r4, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 8008478:	f7f9 feba 	bl	80021f0 <chThdCreateStatic.constprop.0>
 800847c:	4b2f      	ldr	r3, [pc, #188]	; (800853c <rt_test_005_001_execute+0xdc>)
 800847e:	2620      	movs	r6, #32
 8008480:	6018      	str	r0, [r3, #0]
 8008482:	f386 8811 	msr	BASEPRI, r6
  return ch.rlist.current;
 8008486:	69ab      	ldr	r3, [r5, #24]
  *trp = tp;
 8008488:	4c2d      	ldr	r4, [pc, #180]	; (8008540 <rt_test_005_001_execute+0xe0>)
  tp->u.wttrp = trp;
 800848a:	625c      	str	r4, [r3, #36]	; 0x24
    chSchGoSleepS(newstate);
 800848c:	2003      	movs	r0, #3
  *trp = tp;
 800848e:	6023      	str	r3, [r4, #0]
 8008490:	f7f9 ff66 	bl	8002360 <chSchGoSleepS>
  return currp->u.rdymsg;
 8008494:	69aa      	ldr	r2, [r5, #24]
 8008496:	2300      	movs	r3, #0
 8008498:	f8d2 8024 	ldr.w	r8, [r2, #36]	; 0x24
 800849c:	f383 8811 	msr	BASEPRI, r3
    chSysLock();
    msg = chThdSuspendTimeoutS(&tr1, TIME_INFINITE);
    chSysUnlock();
    test_assert(NULL == tr1, "not NULL");
 80084a0:	6820      	ldr	r0, [r4, #0]
 80084a2:	4928      	ldr	r1, [pc, #160]	; (8008544 <rt_test_005_001_execute+0xe4>)
 80084a4:	fab0 f080 	clz	r0, r0
 80084a8:	0940      	lsrs	r0, r0, #5
 80084aa:	f7f8 fb61 	bl	8000b70 <_test_assert>
 80084ae:	b108      	cbz	r0, 80084b4 <rt_test_005_001_execute+0x54>
                            "out of time window");
    test_assert(NULL == tr1, "not NULL");
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
  }
  test_end_step(2);
}
 80084b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert(MSG_OK == msg,"wrong returned message");
 80084b4:	fab8 f088 	clz	r0, r8
 80084b8:	4923      	ldr	r1, [pc, #140]	; (8008548 <rt_test_005_001_execute+0xe8>)
 80084ba:	0940      	lsrs	r0, r0, #5
 80084bc:	f7f8 fb58 	bl	8000b70 <_test_assert>
 80084c0:	4680      	mov	r8, r0
 80084c2:	2800      	cmp	r0, #0
 80084c4:	d1f4      	bne.n	80084b0 <rt_test_005_001_execute+0x50>
    test_wait_threads();
 80084c6:	f7fe fe83 	bl	80071d0 <test_wait_threads>
  test_set_step(2);
 80084ca:	2302      	movs	r3, #2
 80084cc:	603b      	str	r3, [r7, #0]
 80084ce:	f386 8811 	msr	BASEPRI, r6
 80084d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80084d6:	69ab      	ldr	r3, [r5, #24]
 80084d8:	6a56      	ldr	r6, [r2, #36]	; 0x24
  tp->u.wttrp = trp;
 80084da:	625c      	str	r4, [r3, #36]	; 0x24
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 80084dc:	f242 7110 	movw	r1, #10000	; 0x2710
 80084e0:	2003      	movs	r0, #3
  *trp = tp;
 80084e2:	6023      	str	r3, [r4, #0]
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 80084e4:	f7f9 ffcc 	bl	8002480 <chSchGoSleepTimeoutS>
 80084e8:	4605      	mov	r5, r0
 80084ea:	f388 8811 	msr	BASEPRI, r8
    test_assert_time_window(chTimeAddX(time, TIME_MS2I(1000)),
 80084ee:	f506 511c 	add.w	r1, r6, #9984	; 0x2700
 80084f2:	4608      	mov	r0, r1
 80084f4:	3010      	adds	r0, #16
 80084f6:	3113      	adds	r1, #19
 80084f8:	f7f8 f8d2 	bl	80006a0 <_test_assert_time_window.constprop.0>
 80084fc:	2800      	cmp	r0, #0
 80084fe:	d1d7      	bne.n	80084b0 <rt_test_005_001_execute+0x50>
    test_assert(NULL == tr1, "not NULL");
 8008500:	6820      	ldr	r0, [r4, #0]
 8008502:	4910      	ldr	r1, [pc, #64]	; (8008544 <rt_test_005_001_execute+0xe4>)
 8008504:	fab0 f080 	clz	r0, r0
 8008508:	0940      	lsrs	r0, r0, #5
 800850a:	f7f8 fb31 	bl	8000b70 <_test_assert>
 800850e:	2800      	cmp	r0, #0
 8008510:	d1ce      	bne.n	80084b0 <rt_test_005_001_execute+0x50>
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
 8008512:	f1a5 30ff 	sub.w	r0, r5, #4294967295	; 0xffffffff
 8008516:	fab0 f080 	clz	r0, r0
}
 800851a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
 800851e:	490a      	ldr	r1, [pc, #40]	; (8008548 <rt_test_005_001_execute+0xe8>)
 8008520:	0940      	lsrs	r0, r0, #5
 8008522:	f7f8 bb25 	b.w	8000b70 <_test_assert>
 8008526:	bf00      	nop
 8008528:	200009b0 	.word	0x200009b0
 800852c:	2000149c 	.word	0x2000149c
 8008530:	0800a060 	.word	0x0800a060
 8008534:	20000d88 	.word	0x20000d88
 8008538:	080043c1 	.word	0x080043c1
 800853c:	200014b4 	.word	0x200014b4
 8008540:	200014c8 	.word	0x200014c8
 8008544:	0800a368 	.word	0x0800a368
 8008548:	08009dec 	.word	0x08009dec
 800854c:	00000000 	.word	0x00000000

08008550 <rt_test_004_002_execute>:
 * - [4.2.3] Creating 5 threads with pseudo-random priority, execution
 *   sequence is tested.
 * .
 */

static void rt_test_004_002_execute(void) {
 8008550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008552:	4d5a      	ldr	r5, [pc, #360]	; (80086bc <rt_test_004_002_execute+0x16c>)

  /* [4.2.1] Creating 5 threads with increasing priority, execution
     sequence is tested.*/
  test_set_step(1);
 8008554:	4e5a      	ldr	r6, [pc, #360]	; (80086c0 <rt_test_004_002_execute+0x170>)
  return chThdGetSelfX()->prio;
 8008556:	69aa      	ldr	r2, [r5, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008558:	4b5a      	ldr	r3, [pc, #360]	; (80086c4 <rt_test_004_002_execute+0x174>)
 800855a:	6891      	ldr	r1, [r2, #8]
 800855c:	485a      	ldr	r0, [pc, #360]	; (80086c8 <rt_test_004_002_execute+0x178>)
 800855e:	4a5b      	ldr	r2, [pc, #364]	; (80086cc <rt_test_004_002_execute+0x17c>)
 8008560:	4c5b      	ldr	r4, [pc, #364]	; (80086d0 <rt_test_004_002_execute+0x180>)
 8008562:	3905      	subs	r1, #5
  test_set_step(1);
 8008564:	2701      	movs	r7, #1
 8008566:	6037      	str	r7, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008568:	f7f9 fe42 	bl	80021f0 <chThdCreateStatic.constprop.0>
 800856c:	69aa      	ldr	r2, [r5, #24]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800856e:	4b59      	ldr	r3, [pc, #356]	; (80086d4 <rt_test_004_002_execute+0x184>)
 8008570:	6891      	ldr	r1, [r2, #8]
 8008572:	4a56      	ldr	r2, [pc, #344]	; (80086cc <rt_test_004_002_execute+0x17c>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008574:	4607      	mov	r7, r0
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008576:	3904      	subs	r1, #4
 8008578:	4857      	ldr	r0, [pc, #348]	; (80086d8 <rt_test_004_002_execute+0x188>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800857a:	6027      	str	r7, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800857c:	f7f9 fe38 	bl	80021f0 <chThdCreateStatic.constprop.0>
 8008580:	69aa      	ldr	r2, [r5, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008582:	4b56      	ldr	r3, [pc, #344]	; (80086dc <rt_test_004_002_execute+0x18c>)
 8008584:	6891      	ldr	r1, [r2, #8]
 8008586:	4a51      	ldr	r2, [pc, #324]	; (80086cc <rt_test_004_002_execute+0x17c>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008588:	4607      	mov	r7, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 800858a:	3903      	subs	r1, #3
 800858c:	4854      	ldr	r0, [pc, #336]	; (80086e0 <rt_test_004_002_execute+0x190>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800858e:	6067      	str	r7, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008590:	f7f9 fe2e 	bl	80021f0 <chThdCreateStatic.constprop.0>
 8008594:	69aa      	ldr	r2, [r5, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008596:	4b53      	ldr	r3, [pc, #332]	; (80086e4 <rt_test_004_002_execute+0x194>)
 8008598:	6891      	ldr	r1, [r2, #8]
 800859a:	4a4c      	ldr	r2, [pc, #304]	; (80086cc <rt_test_004_002_execute+0x17c>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 800859c:	4607      	mov	r7, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 800859e:	3902      	subs	r1, #2
 80085a0:	4851      	ldr	r0, [pc, #324]	; (80086e8 <rt_test_004_002_execute+0x198>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80085a2:	60a7      	str	r7, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80085a4:	f7f9 fe24 	bl	80021f0 <chThdCreateStatic.constprop.0>
 80085a8:	69aa      	ldr	r2, [r5, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80085aa:	4b50      	ldr	r3, [pc, #320]	; (80086ec <rt_test_004_002_execute+0x19c>)
 80085ac:	6891      	ldr	r1, [r2, #8]
 80085ae:	4a47      	ldr	r2, [pc, #284]	; (80086cc <rt_test_004_002_execute+0x17c>)
 80085b0:	3901      	subs	r1, #1
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80085b2:	4607      	mov	r7, r0
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80085b4:	484e      	ldr	r0, [pc, #312]	; (80086f0 <rt_test_004_002_execute+0x1a0>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80085b6:	60e7      	str	r7, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80085b8:	f7f9 fe1a 	bl	80021f0 <chThdCreateStatic.constprop.0>
 80085bc:	6120      	str	r0, [r4, #16]
    test_wait_threads();
 80085be:	f7fe fe07 	bl	80071d0 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 80085c2:	494c      	ldr	r1, [pc, #304]	; (80086f4 <rt_test_004_002_execute+0x1a4>)
 80085c4:	484c      	ldr	r0, [pc, #304]	; (80086f8 <rt_test_004_002_execute+0x1a8>)
 80085c6:	f7f8 fc53 	bl	8000e70 <_test_assert_sequence>
 80085ca:	b100      	cbz	r0, 80085ce <rt_test_004_002_execute+0x7e>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
    test_wait_threads();
    test_assert_sequence("ABCDE", "invalid sequence");
  }
  test_end_step(3);
}
 80085cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085ce:	69aa      	ldr	r2, [r5, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80085d0:	4b46      	ldr	r3, [pc, #280]	; (80086ec <rt_test_004_002_execute+0x19c>)
 80085d2:	6891      	ldr	r1, [r2, #8]
 80085d4:	4846      	ldr	r0, [pc, #280]	; (80086f0 <rt_test_004_002_execute+0x1a0>)
 80085d6:	4a3d      	ldr	r2, [pc, #244]	; (80086cc <rt_test_004_002_execute+0x17c>)
 80085d8:	3901      	subs	r1, #1
  test_set_step(2);
 80085da:	2702      	movs	r7, #2
 80085dc:	6037      	str	r7, [r6, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80085de:	f7f9 fe07 	bl	80021f0 <chThdCreateStatic.constprop.0>
 80085e2:	69aa      	ldr	r2, [r5, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80085e4:	4b3f      	ldr	r3, [pc, #252]	; (80086e4 <rt_test_004_002_execute+0x194>)
 80085e6:	6891      	ldr	r1, [r2, #8]
 80085e8:	4a38      	ldr	r2, [pc, #224]	; (80086cc <rt_test_004_002_execute+0x17c>)
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80085ea:	4607      	mov	r7, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80085ec:	3902      	subs	r1, #2
 80085ee:	483e      	ldr	r0, [pc, #248]	; (80086e8 <rt_test_004_002_execute+0x198>)
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80085f0:	6127      	str	r7, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80085f2:	f7f9 fdfd 	bl	80021f0 <chThdCreateStatic.constprop.0>
 80085f6:	69aa      	ldr	r2, [r5, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80085f8:	4b38      	ldr	r3, [pc, #224]	; (80086dc <rt_test_004_002_execute+0x18c>)
 80085fa:	6891      	ldr	r1, [r2, #8]
 80085fc:	4a33      	ldr	r2, [pc, #204]	; (80086cc <rt_test_004_002_execute+0x17c>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80085fe:	4607      	mov	r7, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008600:	3903      	subs	r1, #3
 8008602:	4837      	ldr	r0, [pc, #220]	; (80086e0 <rt_test_004_002_execute+0x190>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008604:	60e7      	str	r7, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008606:	f7f9 fdf3 	bl	80021f0 <chThdCreateStatic.constprop.0>
 800860a:	69aa      	ldr	r2, [r5, #24]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800860c:	4b31      	ldr	r3, [pc, #196]	; (80086d4 <rt_test_004_002_execute+0x184>)
 800860e:	6891      	ldr	r1, [r2, #8]
 8008610:	4a2e      	ldr	r2, [pc, #184]	; (80086cc <rt_test_004_002_execute+0x17c>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008612:	4607      	mov	r7, r0
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008614:	3904      	subs	r1, #4
 8008616:	4830      	ldr	r0, [pc, #192]	; (80086d8 <rt_test_004_002_execute+0x188>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008618:	60a7      	str	r7, [r4, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800861a:	f7f9 fde9 	bl	80021f0 <chThdCreateStatic.constprop.0>
 800861e:	69aa      	ldr	r2, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008620:	4b28      	ldr	r3, [pc, #160]	; (80086c4 <rt_test_004_002_execute+0x174>)
 8008622:	6891      	ldr	r1, [r2, #8]
 8008624:	4a29      	ldr	r2, [pc, #164]	; (80086cc <rt_test_004_002_execute+0x17c>)
 8008626:	3905      	subs	r1, #5
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008628:	4607      	mov	r7, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800862a:	4827      	ldr	r0, [pc, #156]	; (80086c8 <rt_test_004_002_execute+0x178>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800862c:	6067      	str	r7, [r4, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800862e:	f7f9 fddf 	bl	80021f0 <chThdCreateStatic.constprop.0>
 8008632:	6020      	str	r0, [r4, #0]
    test_wait_threads();
 8008634:	f7fe fdcc 	bl	80071d0 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8008638:	492e      	ldr	r1, [pc, #184]	; (80086f4 <rt_test_004_002_execute+0x1a4>)
 800863a:	482f      	ldr	r0, [pc, #188]	; (80086f8 <rt_test_004_002_execute+0x1a8>)
 800863c:	f7f8 fc18 	bl	8000e70 <_test_assert_sequence>
 8008640:	2800      	cmp	r0, #0
 8008642:	d1c3      	bne.n	80085cc <rt_test_004_002_execute+0x7c>
 8008644:	69aa      	ldr	r2, [r5, #24]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008646:	4b23      	ldr	r3, [pc, #140]	; (80086d4 <rt_test_004_002_execute+0x184>)
 8008648:	6891      	ldr	r1, [r2, #8]
 800864a:	4823      	ldr	r0, [pc, #140]	; (80086d8 <rt_test_004_002_execute+0x188>)
 800864c:	4a1f      	ldr	r2, [pc, #124]	; (80086cc <rt_test_004_002_execute+0x17c>)
 800864e:	3904      	subs	r1, #4
  test_set_step(3);
 8008650:	2703      	movs	r7, #3
 8008652:	6037      	str	r7, [r6, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008654:	f7f9 fdcc 	bl	80021f0 <chThdCreateStatic.constprop.0>
 8008658:	69aa      	ldr	r2, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800865a:	4b1a      	ldr	r3, [pc, #104]	; (80086c4 <rt_test_004_002_execute+0x174>)
 800865c:	6891      	ldr	r1, [r2, #8]
 800865e:	4a1b      	ldr	r2, [pc, #108]	; (80086cc <rt_test_004_002_execute+0x17c>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008660:	4606      	mov	r6, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008662:	3905      	subs	r1, #5
 8008664:	4818      	ldr	r0, [pc, #96]	; (80086c8 <rt_test_004_002_execute+0x178>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008666:	6066      	str	r6, [r4, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008668:	f7f9 fdc2 	bl	80021f0 <chThdCreateStatic.constprop.0>
 800866c:	69aa      	ldr	r2, [r5, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800866e:	4b1f      	ldr	r3, [pc, #124]	; (80086ec <rt_test_004_002_execute+0x19c>)
 8008670:	6891      	ldr	r1, [r2, #8]
 8008672:	4a16      	ldr	r2, [pc, #88]	; (80086cc <rt_test_004_002_execute+0x17c>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008674:	4606      	mov	r6, r0
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8008676:	3901      	subs	r1, #1
 8008678:	481d      	ldr	r0, [pc, #116]	; (80086f0 <rt_test_004_002_execute+0x1a0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800867a:	6026      	str	r6, [r4, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800867c:	f7f9 fdb8 	bl	80021f0 <chThdCreateStatic.constprop.0>
 8008680:	69aa      	ldr	r2, [r5, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008682:	4b18      	ldr	r3, [pc, #96]	; (80086e4 <rt_test_004_002_execute+0x194>)
 8008684:	6891      	ldr	r1, [r2, #8]
 8008686:	4a11      	ldr	r2, [pc, #68]	; (80086cc <rt_test_004_002_execute+0x17c>)
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8008688:	4606      	mov	r6, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 800868a:	3902      	subs	r1, #2
 800868c:	4816      	ldr	r0, [pc, #88]	; (80086e8 <rt_test_004_002_execute+0x198>)
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800868e:	6126      	str	r6, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008690:	f7f9 fdae 	bl	80021f0 <chThdCreateStatic.constprop.0>
 8008694:	69aa      	ldr	r2, [r5, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008696:	4b11      	ldr	r3, [pc, #68]	; (80086dc <rt_test_004_002_execute+0x18c>)
 8008698:	6891      	ldr	r1, [r2, #8]
 800869a:	4a0c      	ldr	r2, [pc, #48]	; (80086cc <rt_test_004_002_execute+0x17c>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 800869c:	4606      	mov	r6, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 800869e:	3903      	subs	r1, #3
 80086a0:	480f      	ldr	r0, [pc, #60]	; (80086e0 <rt_test_004_002_execute+0x190>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80086a2:	60e6      	str	r6, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80086a4:	f7f9 fda4 	bl	80021f0 <chThdCreateStatic.constprop.0>
 80086a8:	60a0      	str	r0, [r4, #8]
    test_wait_threads();
 80086aa:	f7fe fd91 	bl	80071d0 <test_wait_threads>
}
 80086ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 80086b2:	4910      	ldr	r1, [pc, #64]	; (80086f4 <rt_test_004_002_execute+0x1a4>)
 80086b4:	4810      	ldr	r0, [pc, #64]	; (80086f8 <rt_test_004_002_execute+0x1a8>)
 80086b6:	f7f8 bbdb 	b.w	8000e70 <_test_assert_sequence>
 80086ba:	bf00      	nop
 80086bc:	200009b0 	.word	0x200009b0
 80086c0:	2000149c 	.word	0x2000149c
 80086c4:	0800a354 	.word	0x0800a354
 80086c8:	20000d88 	.word	0x20000d88
 80086cc:	08000de1 	.word	0x08000de1
 80086d0:	200014b4 	.word	0x200014b4
 80086d4:	0800a22c 	.word	0x0800a22c
 80086d8:	20000ed0 	.word	0x20000ed0
 80086dc:	0800a220 	.word	0x0800a220
 80086e0:	20001018 	.word	0x20001018
 80086e4:	0800a064 	.word	0x0800a064
 80086e8:	20001160 	.word	0x20001160
 80086ec:	0800a060 	.word	0x0800a060
 80086f0:	200012a8 	.word	0x200012a8
 80086f4:	08008f4c 	.word	0x08008f4c
 80086f8:	0800a350 	.word	0x0800a350
 80086fc:	00000000 	.word	0x00000000

08008700 <chThdSetPriority>:
tprio_t chThdSetPriority(tprio_t newprio) {
 8008700:	b510      	push	{r4, lr}
 8008702:	2220      	movs	r2, #32
 8008704:	f382 8811 	msr	BASEPRI, r2
  oldprio = currp->realprio;
 8008708:	4a08      	ldr	r2, [pc, #32]	; (800872c <chThdSetPriority+0x2c>)
 800870a:	6992      	ldr	r2, [r2, #24]
 800870c:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if ((currp->prio == currp->realprio) || (newprio > currp->prio)) {
 800870e:	6891      	ldr	r1, [r2, #8]
 8008710:	42a1      	cmp	r1, r4
 8008712:	d001      	beq.n	8008718 <chThdSetPriority+0x18>
 8008714:	4281      	cmp	r1, r0
 8008716:	d200      	bcs.n	800871a <chThdSetPriority+0x1a>
    currp->prio = newprio;
 8008718:	6090      	str	r0, [r2, #8]
  currp->realprio = newprio;
 800871a:	63d0      	str	r0, [r2, #60]	; 0x3c
  chSchRescheduleS();
 800871c:	f7fb f978 	bl	8003a10 <chSchRescheduleS>
 8008720:	2300      	movs	r3, #0
 8008722:	f383 8811 	msr	BASEPRI, r3
}
 8008726:	4620      	mov	r0, r4
 8008728:	bd10      	pop	{r4, pc}
 800872a:	bf00      	nop
 800872c:	200009b0 	.word	0x200009b0

08008730 <rt_test_004_004_execute>:
 * - [4.4.3] Raising thread priority above the boosted level.
 * - [4.4.4] Restoring original conditions.
 * .
 */

static void rt_test_004_004_execute(void) {
 8008730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8008734:	4d2f      	ldr	r5, [pc, #188]	; (80087f4 <rt_test_004_004_execute+0xc4>)
  }
  test_end_step(1);

  /* [4.4.2] Raising thread priority above original priority but below
     the boosted level.*/
  test_set_step(2);
 8008736:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008808 <rt_test_004_004_execute+0xd8>
 800873a:	69ab      	ldr	r3, [r5, #24]
  return chThdGetSelfX()->prio;
 800873c:	689c      	ldr	r4, [r3, #8]
    chThdGetSelfX()->prio += 2;
 800873e:	1ca6      	adds	r6, r4, #2
  {
    p1 = chThdSetPriority(prio + 1);
 8008740:	1c67      	adds	r7, r4, #1
    chThdGetSelfX()->prio += 2;
 8008742:	609e      	str	r6, [r3, #8]
    p1 = chThdSetPriority(prio + 1);
 8008744:	4638      	mov	r0, r7
  test_set_step(2);
 8008746:	2302      	movs	r3, #2
 8008748:	f8c8 3000 	str.w	r3, [r8]
    p1 = chThdSetPriority(prio + 1);
 800874c:	f7ff ffd8 	bl	8008700 <chThdSetPriority>
    test_assert(p1 == prio, "unexpected returned priority level");
 8008750:	1b00      	subs	r0, r0, r4
 8008752:	fab0 f080 	clz	r0, r0
 8008756:	4928      	ldr	r1, [pc, #160]	; (80087f8 <rt_test_004_004_execute+0xc8>)
 8008758:	0940      	lsrs	r0, r0, #5
 800875a:	f7f8 fa09 	bl	8000b70 <_test_assert>
 800875e:	b108      	cbz	r0, 8008764 <rt_test_004_004_execute+0x34>
    chThdGetSelfX()->prio = prio;
    chThdGetSelfX()->realprio = prio;
    chSysUnlock();
  }
  test_end_step(4);
}
 8008760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert(chThdGetSelfX()->prio == prio + 2, "unexpected priority level");
 8008764:	69ab      	ldr	r3, [r5, #24]
 8008766:	4925      	ldr	r1, [pc, #148]	; (80087fc <rt_test_004_004_execute+0xcc>)
 8008768:	6898      	ldr	r0, [r3, #8]
 800876a:	1b80      	subs	r0, r0, r6
 800876c:	fab0 f080 	clz	r0, r0
 8008770:	0940      	lsrs	r0, r0, #5
 8008772:	f7f8 f9fd 	bl	8000b70 <_test_assert>
 8008776:	2800      	cmp	r0, #0
 8008778:	d1f2      	bne.n	8008760 <rt_test_004_004_execute+0x30>
    test_assert(chThdGetSelfX()->realprio == prio + 1, "unexpected returned real priority level");
 800877a:	69ab      	ldr	r3, [r5, #24]
 800877c:	4920      	ldr	r1, [pc, #128]	; (8008800 <rt_test_004_004_execute+0xd0>)
 800877e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008780:	1bc0      	subs	r0, r0, r7
 8008782:	fab0 f080 	clz	r0, r0
 8008786:	0940      	lsrs	r0, r0, #5
 8008788:	f7f8 f9f2 	bl	8000b70 <_test_assert>
 800878c:	2800      	cmp	r0, #0
 800878e:	d1e7      	bne.n	8008760 <rt_test_004_004_execute+0x30>
    p1 = chThdSetPriority(prio + 3);
 8008790:	1ce6      	adds	r6, r4, #3
  test_set_step(3);
 8008792:	2303      	movs	r3, #3
    p1 = chThdSetPriority(prio + 3);
 8008794:	4630      	mov	r0, r6
  test_set_step(3);
 8008796:	f8c8 3000 	str.w	r3, [r8]
    p1 = chThdSetPriority(prio + 3);
 800879a:	f7ff ffb1 	bl	8008700 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 800879e:	1a38      	subs	r0, r7, r0
 80087a0:	fab0 f080 	clz	r0, r0
 80087a4:	4914      	ldr	r1, [pc, #80]	; (80087f8 <rt_test_004_004_execute+0xc8>)
 80087a6:	0940      	lsrs	r0, r0, #5
 80087a8:	f7f8 f9e2 	bl	8000b70 <_test_assert>
 80087ac:	2800      	cmp	r0, #0
 80087ae:	d1d7      	bne.n	8008760 <rt_test_004_004_execute+0x30>
    test_assert(chThdGetSelfX()->prio == prio + 3, "unexpected priority level");
 80087b0:	69ab      	ldr	r3, [r5, #24]
 80087b2:	4912      	ldr	r1, [pc, #72]	; (80087fc <rt_test_004_004_execute+0xcc>)
 80087b4:	6898      	ldr	r0, [r3, #8]
 80087b6:	1b80      	subs	r0, r0, r6
 80087b8:	fab0 f080 	clz	r0, r0
 80087bc:	0940      	lsrs	r0, r0, #5
 80087be:	f7f8 f9d7 	bl	8000b70 <_test_assert>
 80087c2:	2800      	cmp	r0, #0
 80087c4:	d1cc      	bne.n	8008760 <rt_test_004_004_execute+0x30>
    test_assert(chThdGetSelfX()->realprio == prio + 3, "unexpected real priority level");
 80087c6:	69ab      	ldr	r3, [r5, #24]
 80087c8:	490e      	ldr	r1, [pc, #56]	; (8008804 <rt_test_004_004_execute+0xd4>)
 80087ca:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80087cc:	1b80      	subs	r0, r0, r6
 80087ce:	fab0 f080 	clz	r0, r0
 80087d2:	0940      	lsrs	r0, r0, #5
 80087d4:	f7f8 f9cc 	bl	8000b70 <_test_assert>
 80087d8:	2800      	cmp	r0, #0
 80087da:	d1c1      	bne.n	8008760 <rt_test_004_004_execute+0x30>
  test_set_step(4);
 80087dc:	2304      	movs	r3, #4
 80087de:	f8c8 3000 	str.w	r3, [r8]
 80087e2:	2320      	movs	r3, #32
 80087e4:	f383 8811 	msr	BASEPRI, r3
  return ch.rlist.current;
 80087e8:	69ab      	ldr	r3, [r5, #24]
    chThdGetSelfX()->prio = prio;
 80087ea:	609c      	str	r4, [r3, #8]
    chThdGetSelfX()->realprio = prio;
 80087ec:	63dc      	str	r4, [r3, #60]	; 0x3c
 80087ee:	f380 8811 	msr	BASEPRI, r0
  test_end_step(4);
 80087f2:	e7b5      	b.n	8008760 <rt_test_004_004_execute+0x30>
 80087f4:	200009b0 	.word	0x200009b0
 80087f8:	0800a374 	.word	0x0800a374
 80087fc:	0800a398 	.word	0x0800a398
 8008800:	0800a3b4 	.word	0x0800a3b4
 8008804:	0800a3dc 	.word	0x0800a3dc
 8008808:	2000149c 	.word	0x2000149c
 800880c:	00000000 	.word	0x00000000

08008810 <rt_test_004_003_execute>:
static void rt_test_004_003_execute(void) {
 8008810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008814:	4f1d      	ldr	r7, [pc, #116]	; (800888c <rt_test_004_003_execute+0x7c>)
  test_set_step(1);
 8008816:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8008898 <rt_test_004_003_execute+0x88>
  return chThdGetSelfX()->prio;
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	689e      	ldr	r6, [r3, #8]
    p1 = chThdSetPriority(prio + 1);
 800881e:	1c75      	adds	r5, r6, #1
  test_set_step(1);
 8008820:	2301      	movs	r3, #1
    p1 = chThdSetPriority(prio + 1);
 8008822:	4628      	mov	r0, r5
  test_set_step(1);
 8008824:	f8c8 3000 	str.w	r3, [r8]
    p1 = chThdSetPriority(prio + 1);
 8008828:	f7ff ff6a 	bl	8008700 <chThdSetPriority>
 800882c:	4604      	mov	r4, r0
    test_assert(p1 == prio, "unexpected returned priority level");
 800882e:	1b80      	subs	r0, r0, r6
 8008830:	fab0 f080 	clz	r0, r0
 8008834:	4916      	ldr	r1, [pc, #88]	; (8008890 <rt_test_004_003_execute+0x80>)
 8008836:	0940      	lsrs	r0, r0, #5
 8008838:	f7f8 f99a 	bl	8000b70 <_test_assert>
 800883c:	b108      	cbz	r0, 8008842 <rt_test_004_003_execute+0x32>
}
 800883e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008842:	69bb      	ldr	r3, [r7, #24]
    test_assert(chThdGetPriorityX() == prio + 1, "unexpected priority level");
 8008844:	4913      	ldr	r1, [pc, #76]	; (8008894 <rt_test_004_003_execute+0x84>)
 8008846:	6898      	ldr	r0, [r3, #8]
 8008848:	1b40      	subs	r0, r0, r5
 800884a:	fab0 f080 	clz	r0, r0
 800884e:	0940      	lsrs	r0, r0, #5
 8008850:	f7f8 f98e 	bl	8000b70 <_test_assert>
 8008854:	2800      	cmp	r0, #0
 8008856:	d1f2      	bne.n	800883e <rt_test_004_003_execute+0x2e>
  test_set_step(2);
 8008858:	2302      	movs	r3, #2
    p1 = chThdSetPriority(p1);
 800885a:	4620      	mov	r0, r4
  test_set_step(2);
 800885c:	f8c8 3000 	str.w	r3, [r8]
    p1 = chThdSetPriority(p1);
 8008860:	f7ff ff4e 	bl	8008700 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 8008864:	1a28      	subs	r0, r5, r0
 8008866:	fab0 f080 	clz	r0, r0
 800886a:	4909      	ldr	r1, [pc, #36]	; (8008890 <rt_test_004_003_execute+0x80>)
 800886c:	0940      	lsrs	r0, r0, #5
 800886e:	f7f8 f97f 	bl	8000b70 <_test_assert>
 8008872:	2800      	cmp	r0, #0
 8008874:	d1e3      	bne.n	800883e <rt_test_004_003_execute+0x2e>
 8008876:	69bb      	ldr	r3, [r7, #24]
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
 8008878:	4906      	ldr	r1, [pc, #24]	; (8008894 <rt_test_004_003_execute+0x84>)
 800887a:	6898      	ldr	r0, [r3, #8]
 800887c:	1b80      	subs	r0, r0, r6
 800887e:	fab0 f080 	clz	r0, r0
}
 8008882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
 8008886:	0940      	lsrs	r0, r0, #5
 8008888:	f7f8 b972 	b.w	8000b70 <_test_assert>
 800888c:	200009b0 	.word	0x200009b0
 8008890:	0800a374 	.word	0x0800a374
 8008894:	0800a398 	.word	0x0800a398
 8008898:	2000149c 	.word	0x2000149c
 800889c:	00000000 	.word	0x00000000

080088a0 <chSysRestoreStatusX.part.0>:
 *
 * @param[in] sts       the system status to be restored.
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {
 80088a0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088a2:	f3ef 8405 	mrs	r4, IPSR
  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 80088a6:	f3c4 0408 	ubfx	r4, r4, #0, #9

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 80088aa:	b11c      	cbz	r4, 80088b4 <chSysRestoreStatusX.part.0+0x14>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80088ac:	2300      	movs	r3, #0
 80088ae:	f383 8811 	msr	BASEPRI, r3
    else {
      chSchRescheduleS();
      chSysUnlock();
    }
  }
}
 80088b2:	bd10      	pop	{r4, pc}
      chSchRescheduleS();
 80088b4:	f7fb f8ac 	bl	8003a10 <chSchRescheduleS>
 80088b8:	f384 8811 	msr	BASEPRI, r4
}
 80088bc:	bd10      	pop	{r4, pc}
 80088be:	bf00      	nop

080088c0 <rt_test_002_002_execute>:
static void rt_test_002_002_execute(void) {
 80088c0:	b510      	push	{r4, lr}
  test_set_step(1);
 80088c2:	4c31      	ldr	r4, [pc, #196]	; (8008988 <rt_test_002_002_execute+0xc8>)
 80088c4:	2301      	movs	r3, #1
static void rt_test_002_002_execute(void) {
 80088c6:	b086      	sub	sp, #24
  test_set_step(1);
 80088c8:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80088ca:	f3ef 8311 	mrs	r3, BASEPRI
  if (port_irq_enabled(sts)) {
 80088ce:	b91b      	cbnz	r3, 80088d8 <rt_test_002_002_execute+0x18>
 80088d0:	f7f8 ff5e 	bl	8001790 <chSysGetStatusAndLockX.part.0>
  return sts == (syssts_t)CORTEX_BASEPRI_DISABLED;
 80088d4:	f7ff ffe4 	bl	80088a0 <chSysRestoreStatusX.part.0>
  test_set_step(2);
 80088d8:	2302      	movs	r3, #2
 80088da:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80088dc:	2320      	movs	r3, #32
 80088de:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80088e2:	f3ef 8311 	mrs	r3, BASEPRI
 80088e6:	b91b      	cbnz	r3, 80088f0 <rt_test_002_002_execute+0x30>
 80088e8:	f7f8 ff52 	bl	8001790 <chSysGetStatusAndLockX.part.0>
 80088ec:	f7ff ffd8 	bl	80088a0 <chSysRestoreStatusX.part.0>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80088f0:	2300      	movs	r3, #0
 80088f2:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 80088f6:	2303      	movs	r3, #3
 80088f8:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80088fa:	f3ef 8311 	mrs	r3, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {

  if (port_irq_enabled(port_get_irq_status())) {
 80088fe:	b913      	cbnz	r3, 8008906 <rt_test_002_002_execute+0x46>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8008900:	2320      	movs	r3, #32
 8008902:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008906:	f3ef 8311 	mrs	r3, BASEPRI
 800890a:	b913      	cbnz	r3, 8008912 <rt_test_002_002_execute+0x52>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800890c:	2320      	movs	r3, #32
 800890e:	f383 8811 	msr	BASEPRI, r3
 8008912:	2300      	movs	r3, #0
 8008914:	f383 8811 	msr	BASEPRI, r3
  test_set_step(4);
 8008918:	2204      	movs	r2, #4
 800891a:	6022      	str	r2, [r4, #0]
 800891c:	2220      	movs	r2, #32
 800891e:	f382 8811 	msr	BASEPRI, r2
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008922:	f3ef 8211 	mrs	r2, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {

  if (!port_irq_enabled(port_get_irq_status())) {
 8008926:	b10a      	cbz	r2, 800892c <rt_test_002_002_execute+0x6c>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8008928:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800892c:	f3ef 8311 	mrs	r3, BASEPRI
 8008930:	b113      	cbz	r3, 8008938 <rt_test_002_002_execute+0x78>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8008932:	2300      	movs	r3, #0
 8008934:	f383 8811 	msr	BASEPRI, r3
  test_set_step(5);
 8008938:	2205      	movs	r2, #5
 *
 * @init
 */
static inline void chVTObjectInit(virtual_timer_t *vtp) {

  vtp->func = NULL;
 800893a:	2300      	movs	r3, #0
 800893c:	9304      	str	r3, [sp, #16]
 800893e:	6022      	str	r2, [r4, #0]
 8008940:	2320      	movs	r3, #32
 8008942:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8008946:	9b04      	ldr	r3, [sp, #16]
    chVTDoResetI(vtp);
 8008948:	ac01      	add	r4, sp, #4
  if (chVTIsArmedI(vtp)) {
 800894a:	b113      	cbz	r3, 8008952 <rt_test_002_002_execute+0x92>
    chVTDoResetI(vtp);
 800894c:	4620      	mov	r0, r4
 800894e:	f7f8 fe97 	bl	8001680 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, sysinterval_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 8008952:	4620      	mov	r0, r4
 8008954:	4a0d      	ldr	r2, [pc, #52]	; (800898c <rt_test_002_002_execute+0xcc>)
 8008956:	2300      	movs	r3, #0
 8008958:	2101      	movs	r1, #1
 800895a:	f7f8 fed1 	bl	8001700 <chVTDoSetI>
 800895e:	2400      	movs	r4, #0
 8008960:	f384 8811 	msr	BASEPRI, r4
    chThdSleep(10);
 8008964:	200a      	movs	r0, #10
 8008966:	f7fa f873 	bl	8002a50 <chThdSleep>
 800896a:	2320      	movs	r3, #32
 800896c:	f383 8811 	msr	BASEPRI, r3
  b = chVTIsArmedI(vtp);
 8008970:	9804      	ldr	r0, [sp, #16]
 8008972:	f384 8811 	msr	BASEPRI, r4
    test_assert(chVTIsArmed(&vt) == false, "timer still armed");
 8008976:	fab0 f080 	clz	r0, r0
 800897a:	4905      	ldr	r1, [pc, #20]	; (8008990 <rt_test_002_002_execute+0xd0>)
 800897c:	0940      	lsrs	r0, r0, #5
 800897e:	f7f8 f8f7 	bl	8000b70 <_test_assert>
}
 8008982:	b006      	add	sp, #24
 8008984:	bd10      	pop	{r4, pc}
 8008986:	bf00      	nop
 8008988:	2000149c 	.word	0x2000149c
 800898c:	080089a1 	.word	0x080089a1
 8008990:	0800a3fc 	.word	0x0800a3fc
	...

080089a0 <vtcb>:
static void vtcb(void *p) {
 80089a0:	b508      	push	{r3, lr}
 80089a2:	2320      	movs	r3, #32
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	2200      	movs	r2, #0
 80089aa:	f382 8811 	msr	BASEPRI, r2
 80089ae:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80089b2:	f3ef 8311 	mrs	r3, BASEPRI
 80089b6:	b91b      	cbnz	r3, 80089c0 <vtcb+0x20>
 80089b8:	f7f8 feea 	bl	8001790 <chSysGetStatusAndLockX.part.0>
 80089bc:	f7ff ff70 	bl	80088a0 <chSysRestoreStatusX.part.0>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80089c0:	2300      	movs	r3, #0
 80089c2:	f383 8811 	msr	BASEPRI, r3
}
 80089c6:	bd08      	pop	{r3, pc}
	...

080089d0 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80089d0:	4a84      	ldr	r2, [pc, #528]	; (8008be4 <__early_init+0x214>)
  gpiop->OTYPER  = config->otyper;
 80089d2:	4885      	ldr	r0, [pc, #532]	; (8008be8 <__early_init+0x218>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80089d4:	6913      	ldr	r3, [r2, #16]
  gpiop->OTYPER  = config->otyper;
 80089d6:	4985      	ldr	r1, [pc, #532]	; (8008bec <__early_init+0x21c>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80089d8:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 80089dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80089de:	6113      	str	r3, [r2, #16]
 80089e0:	6913      	ldr	r3, [r2, #16]
  gpiop->PUPDR   = config->pupdr;
 80089e2:	4c83      	ldr	r4, [pc, #524]	; (8008bf0 <__early_init+0x220>)
  gpiop->OTYPER  = config->otyper;
 80089e4:	4e83      	ldr	r6, [pc, #524]	; (8008bf4 <__early_init+0x224>)
  gpiop->MODER   = config->moder;
 80089e6:	4f84      	ldr	r7, [pc, #528]	; (8008bf8 <__early_init+0x228>)
  gpiop->OTYPER  = config->otyper;
 80089e8:	4d84      	ldr	r5, [pc, #528]	; (8008bfc <__early_init+0x22c>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80089ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80089ee:	6113      	str	r3, [r2, #16]
 80089f0:	6913      	ldr	r3, [r2, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 80089f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80089f4:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80089f8:	6313      	str	r3, [r2, #48]	; 0x30
 80089fa:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80089fc:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8008a00:	6513      	str	r3, [r2, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
 8008a02:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
  gpiop->OTYPER  = config->otyper;
 8008a06:	2300      	movs	r3, #0
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8008a08:	f8d2 e050 	ldr.w	lr, [r2, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8008a0c:	6043      	str	r3, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8008a0e:	f8c0 c008 	str.w	ip, [r0, #8]
  gpiop->ODR     = config->odr;
 8008a12:	f64f 7cdf 	movw	ip, #65503	; 0xffdf
  gpiop->PUPDR   = config->pupdr;
 8008a16:	60c4      	str	r4, [r0, #12]
  gpiop->ODR     = config->odr;
 8008a18:	f8c0 c014 	str.w	ip, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8008a1c:	f44f 44ee 	mov.w	r4, #30464	; 0x7700
  gpiop->AFRH    = config->afrh;
 8008a20:	f44f 2c2a 	mov.w	ip, #696320	; 0xaa000
  gpiop->AFRL    = config->afrl;
 8008a24:	6204      	str	r4, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8008a26:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
  gpiop->OSPEEDR = config->ospeedr;
 8008a2a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  gpiop->MODER   = config->moder;
 8008a2e:	6007      	str	r7, [r0, #0]
  gpiop->PUPDR   = config->pupdr;
 8008a30:	f04f 3c55 	mov.w	ip, #1431655765	; 0x55555555
  gpiop->ODR     = config->odr;
 8008a34:	f64f 70ff 	movw	r0, #65535	; 0xffff
  gpiop->MODER   = config->moder;
 8008a38:	2780      	movs	r7, #128	; 0x80
  gpiop->OTYPER  = config->otyper;
 8008a3a:	6073      	str	r3, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8008a3c:	60b4      	str	r4, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 8008a3e:	f8c6 c00c 	str.w	ip, [r6, #12]
  gpiop->ODR     = config->odr;
 8008a42:	6170      	str	r0, [r6, #20]
  gpiop->AFRL    = config->afrl;
 8008a44:	6233      	str	r3, [r6, #32]
  gpiop->AFRH    = config->afrh;
 8008a46:	6273      	str	r3, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8008a48:	6037      	str	r7, [r6, #0]
  gpiop->OTYPER  = config->otyper;
 8008a4a:	4f6d      	ldr	r7, [pc, #436]	; (8008c00 <__early_init+0x230>)
  gpiop->PUPDR   = config->pupdr;
 8008a4c:	4e6d      	ldr	r6, [pc, #436]	; (8008c04 <__early_init+0x234>)
  gpiop->OTYPER  = config->otyper;
 8008a4e:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8008a50:	60ac      	str	r4, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8008a52:	60ee      	str	r6, [r5, #12]
  gpiop->OTYPER  = config->otyper;
 8008a54:	4e6c      	ldr	r6, [pc, #432]	; (8008c08 <__early_init+0x238>)
  gpiop->ODR     = config->odr;
 8008a56:	6168      	str	r0, [r5, #20]
  gpiop->AFRL    = config->afrl;
 8008a58:	622b      	str	r3, [r5, #32]
  gpiop->AFRH    = config->afrh;
 8008a5a:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8008a5c:	602b      	str	r3, [r5, #0]
  gpiop->OTYPER  = config->otyper;
 8008a5e:	604b      	str	r3, [r1, #4]
 8008a60:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
  gpiop->OSPEEDR = config->ospeedr;
 8008a64:	608c      	str	r4, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8008a66:	f8c1 c00c 	str.w	ip, [r1, #12]
  gpiop->ODR     = config->odr;
 8008a6a:	6148      	str	r0, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8008a6c:	620b      	str	r3, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8008a6e:	624b      	str	r3, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8008a70:	600b      	str	r3, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 8008a72:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8008a76:	607b      	str	r3, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8008a78:	60bc      	str	r4, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 8008a7a:	f8c7 c00c 	str.w	ip, [r7, #12]
  gpiop->ODR     = config->odr;
 8008a7e:	6178      	str	r0, [r7, #20]
  gpiop->AFRL    = config->afrl;
 8008a80:	623b      	str	r3, [r7, #32]
  gpiop->AFRH    = config->afrh;
 8008a82:	627b      	str	r3, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8008a84:	603b      	str	r3, [r7, #0]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8008a86:	f5a7 37d0 	sub.w	r7, r7, #106496	; 0x1a000
  gpiop->OTYPER  = config->otyper;
 8008a8a:	6073      	str	r3, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8008a8c:	60b4      	str	r4, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 8008a8e:	f8c6 c00c 	str.w	ip, [r6, #12]
  gpiop->ODR     = config->odr;
 8008a92:	6170      	str	r0, [r6, #20]
  gpiop->AFRL    = config->afrl;
 8008a94:	6233      	str	r3, [r6, #32]
  gpiop->AFRH    = config->afrh;
 8008a96:	6273      	str	r3, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8008a98:	6033      	str	r3, [r6, #0]
  gpiop->OTYPER  = config->otyper;
 8008a9a:	606b      	str	r3, [r5, #4]
  gpiop->PUPDR   = config->pupdr;
 8008a9c:	4e5b      	ldr	r6, [pc, #364]	; (8008c0c <__early_init+0x23c>)
  gpiop->OSPEEDR = config->ospeedr;
 8008a9e:	60ac      	str	r4, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8008aa0:	f8c5 c00c 	str.w	ip, [r5, #12]
  gpiop->ODR     = config->odr;
 8008aa4:	6168      	str	r0, [r5, #20]
  gpiop->AFRL    = config->afrl;
 8008aa6:	622b      	str	r3, [r5, #32]
  gpiop->AFRH    = config->afrh;
 8008aa8:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8008aaa:	602b      	str	r3, [r5, #0]
  gpiop->OTYPER  = config->otyper;
 8008aac:	604b      	str	r3, [r1, #4]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8008aae:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  gpiop->OSPEEDR = config->ospeedr;
 8008ab2:	608c      	str	r4, [r1, #8]
  PWR->CR = STM32_VOS;
 8008ab4:	f44f 4440 	mov.w	r4, #49152	; 0xc000
  gpiop->PUPDR   = config->pupdr;
 8008ab8:	60ce      	str	r6, [r1, #12]
  gpiop->ODR     = config->odr;
 8008aba:	6148      	str	r0, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8008abc:	620b      	str	r3, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8008abe:	624b      	str	r3, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8008ac0:	600b      	str	r3, [r1, #0]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8008ac2:	6415      	str	r5, [r2, #64]	; 0x40
  PWR->CR = STM32_VOS;
 8008ac4:	603c      	str	r4, [r7, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8008ac6:	6813      	ldr	r3, [r2, #0]
 8008ac8:	f043 0301 	orr.w	r3, r3, #1
 8008acc:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8008ace:	6813      	ldr	r3, [r2, #0]
 8008ad0:	0799      	lsls	r1, r3, #30
 8008ad2:	d5fc      	bpl.n	8008ace <__early_init+0xfe>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8008ad4:	6891      	ldr	r1, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8008ad6:	4b43      	ldr	r3, [pc, #268]	; (8008be4 <__early_init+0x214>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8008ad8:	f021 0103 	bic.w	r1, r1, #3
 8008adc:	6091      	str	r1, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8008ade:	689a      	ldr	r2, [r3, #8]
 8008ae0:	f012 020c 	ands.w	r2, r2, #12
 8008ae4:	d1fb      	bne.n	8008ade <__early_init+0x10e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8008ae6:	6818      	ldr	r0, [r3, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8008ae8:	493e      	ldr	r1, [pc, #248]	; (8008be4 <__early_init+0x214>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8008aea:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 8008aee:	6018      	str	r0, [r3, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8008af0:	609a      	str	r2, [r3, #8]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 8008af8:	601a      	str	r2, [r3, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8008afa:	680b      	ldr	r3, [r1, #0]
 8008afc:	039b      	lsls	r3, r3, #14
 8008afe:	d5fc      	bpl.n	8008afa <__early_init+0x12a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8008b00:	6f4a      	ldr	r2, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8008b02:	4b38      	ldr	r3, [pc, #224]	; (8008be4 <__early_init+0x214>)
  RCC->CSR |= RCC_CSR_LSION;
 8008b04:	f042 0201 	orr.w	r2, r2, #1
 8008b08:	674a      	str	r2, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8008b0a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008b0c:	0797      	lsls	r7, r2, #30
 8008b0e:	d5fc      	bpl.n	8008b0a <__early_init+0x13a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8008b10:	4a3f      	ldr	r2, [pc, #252]	; (8008c10 <__early_init+0x240>)
 8008b12:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8008b14:	6819      	ldr	r1, [r3, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8008b16:	4a3f      	ldr	r2, [pc, #252]	; (8008c14 <__early_init+0x244>)
  RCC->CR |= RCC_CR_PLLON;
 8008b18:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8008b1c:	6019      	str	r1, [r3, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8008b1e:	6853      	ldr	r3, [r2, #4]
 8008b20:	045e      	lsls	r6, r3, #17
 8008b22:	d5fc      	bpl.n	8008b1e <__early_init+0x14e>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR |= PWR_CR_ODEN;
 8008b24:	6811      	ldr	r1, [r2, #0]
  while (!(PWR->CSR & PWR_CSR_ODRDY))
 8008b26:	4b3b      	ldr	r3, [pc, #236]	; (8008c14 <__early_init+0x244>)
  PWR->CR |= PWR_CR_ODEN;
 8008b28:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8008b2c:	6011      	str	r1, [r2, #0]
  while (!(PWR->CSR & PWR_CSR_ODRDY))
 8008b2e:	685a      	ldr	r2, [r3, #4]
 8008b30:	03d5      	lsls	r5, r2, #15
 8008b32:	d5fc      	bpl.n	8008b2e <__early_init+0x15e>
      ;
  PWR->CR |= PWR_CR_ODSWEN;
 8008b34:	681a      	ldr	r2, [r3, #0]
  while (!(PWR->CSR & PWR_CSR_ODSWRDY))
 8008b36:	4937      	ldr	r1, [pc, #220]	; (8008c14 <__early_init+0x244>)
  PWR->CR |= PWR_CR_ODSWEN;
 8008b38:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008b3c:	601a      	str	r2, [r3, #0]
  while (!(PWR->CSR & PWR_CSR_ODSWRDY))
 8008b3e:	684b      	ldr	r3, [r1, #4]
 8008b40:	039c      	lsls	r4, r3, #14
 8008b42:	d5fc      	bpl.n	8008b3e <__early_init+0x16e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8008b44:	4b27      	ldr	r3, [pc, #156]	; (8008be4 <__early_init+0x214>)
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	0190      	lsls	r0, r2, #6
 8008b4a:	d5fc      	bpl.n	8008b46 <__early_init+0x176>
    ;
#endif /* STM32_ACTIVATE_PLL */

#if STM32_ACTIVATE_PLLI2S
  /* PLLI2S activation.*/
  RCC->PLLI2SCFGR = STM32_PLLI2SR | STM32_PLLI2SN | STM32_PLLI2SP |
 8008b4c:	4a32      	ldr	r2, [pc, #200]	; (8008c18 <__early_init+0x248>)
 8008b4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                    STM32_PLLI2SSRC | STM32_PLLI2SQ | STM32_PLLI2SM;
  RCC->CR |= RCC_CR_PLLI2SON;
 8008b52:	6819      	ldr	r1, [r3, #0]

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLI2SRDY))
 8008b54:	4a23      	ldr	r2, [pc, #140]	; (8008be4 <__early_init+0x214>)
  RCC->CR |= RCC_CR_PLLI2SON;
 8008b56:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8008b5a:	6019      	str	r1, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLI2SRDY))
 8008b5c:	6813      	ldr	r3, [r2, #0]
 8008b5e:	0119      	lsls	r1, r3, #4
 8008b60:	d5fc      	bpl.n	8008b5c <__early_init+0x18c>
    ;
#endif /* STM32_ACTIVATE_PLLI2S */

#if STM32_ACTIVATE_PLLSAI
  /* PLLSAI activation.*/
  RCC->PLLSAICFGR = STM32_PLLSAIR | STM32_PLLSAIN | STM32_PLLSAIP |
 8008b62:	4b2e      	ldr	r3, [pc, #184]	; (8008c1c <__early_init+0x24c>)
 8008b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                    STM32_PLLSAIQ | STM32_PLLSAIM;
  RCC->CR |= RCC_CR_PLLSAION;
 8008b68:	6811      	ldr	r1, [r2, #0]

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
 8008b6a:	4b1e      	ldr	r3, [pc, #120]	; (8008be4 <__early_init+0x214>)
  RCC->CR |= RCC_CR_PLLSAION;
 8008b6c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8008b70:	6011      	str	r1, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	0092      	lsls	r2, r2, #2
 8008b76:	d5fc      	bpl.n	8008b72 <__early_init+0x1a2>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
#if !defined(STM32F413xx)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8008b78:	4929      	ldr	r1, [pc, #164]	; (8008c20 <__early_init+0x250>)
 8008b7a:	6099      	str	r1, [r3, #8]
  /* Special case, in those devices STM32_CK48MSEL is located in the
     DCKCFGR register.*/
    dckcfgr |= STM32_CK48MSEL;
#endif
#if !defined(STM32F413xx)
    RCC->DCKCFGR = dckcfgr |
 8008b7c:	4829      	ldr	r0, [pc, #164]	; (8008c24 <__early_init+0x254>)

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8008b7e:	4a2a      	ldr	r2, [pc, #168]	; (8008c28 <__early_init+0x258>)
    RCC->DCKCFGR = dckcfgr |
 8008b80:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_CK48MSEL;
 8008b84:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8008b88:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8008b8c:	6812      	ldr	r2, [r2, #0]
 8008b8e:	4b27      	ldr	r3, [pc, #156]	; (8008c2c <__early_init+0x25c>)
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d01d      	beq.n	8008bd0 <__early_init+0x200>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8008b94:	4b26      	ldr	r3, [pc, #152]	; (8008c30 <__early_init+0x260>)
 8008b96:	f240 7205 	movw	r2, #1797	; 0x705
 8008b9a:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 8008b9c:	4a24      	ldr	r2, [pc, #144]	; (8008c30 <__early_init+0x260>)
 8008b9e:	6813      	ldr	r3, [r2, #0]
 8008ba0:	f003 030f 	and.w	r3, r3, #15
 8008ba4:	2b05      	cmp	r3, #5
 8008ba6:	d1fa      	bne.n	8008b9e <__early_init+0x1ce>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8008ba8:	4b0e      	ldr	r3, [pc, #56]	; (8008be4 <__early_init+0x214>)
 8008baa:	689a      	ldr	r2, [r3, #8]
 8008bac:	f042 0202 	orr.w	r2, r2, #2
 8008bb0:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8008bb2:	689a      	ldr	r2, [r3, #8]
 8008bb4:	f002 020c 	and.w	r2, r2, #12
 8008bb8:	2a08      	cmp	r2, #8
 8008bba:	d1fa      	bne.n	8008bb2 <__early_init+0x1e2>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8008bbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008bc2:	645a      	str	r2, [r3, #68]	; 0x44
 8008bc4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008bc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008bca:	665a      	str	r2, [r3, #100]	; 0x64
 8008bcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
 8008bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8008bd0:	4a18      	ldr	r2, [pc, #96]	; (8008c34 <__early_init+0x264>)
 8008bd2:	4b19      	ldr	r3, [pc, #100]	; (8008c38 <__early_init+0x268>)
 8008bd4:	6812      	ldr	r2, [r2, #0]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d1dc      	bne.n	8008b94 <__early_init+0x1c4>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8008bda:	4b15      	ldr	r3, [pc, #84]	; (8008c30 <__early_init+0x260>)
 8008bdc:	f240 1205 	movw	r2, #261	; 0x105
 8008be0:	601a      	str	r2, [r3, #0]
 8008be2:	e7db      	b.n	8008b9c <__early_init+0x1cc>
 8008be4:	40023800 	.word	0x40023800
 8008be8:	40020000 	.word	0x40020000
 8008bec:	40020c00 	.word	0x40020c00
 8008bf0:	64155105 	.word	0x64155105
 8008bf4:	40020400 	.word	0x40020400
 8008bf8:	2a8004a0 	.word	0x2a8004a0
 8008bfc:	40020800 	.word	0x40020800
 8008c00:	40021000 	.word	0x40021000
 8008c04:	01555555 	.word	0x01555555
 8008c08:	40021400 	.word	0x40021400
 8008c0c:	55555550 	.word	0x55555550
 8008c10:	07405a08 	.word	0x07405a08
 8008c14:	40007000 	.word	0x40007000
 8008c18:	44413004 	.word	0x44413004
 8008c1c:	44033004 	.word	0x44033004
 8008c20:	40089400 	.word	0x40089400
 8008c24:	00800003 	.word	0x00800003
 8008c28:	e0042000 	.word	0xe0042000
 8008c2c:	20006411 	.word	0x20006411
 8008c30:	40023c00 	.word	0x40023c00
 8008c34:	e000ed00 	.word	0xe000ed00
 8008c38:	410fc241 	.word	0x410fc241
 8008c3c:	00000000 	.word	0x00000000

08008c40 <VectorD8>:
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8008c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 8008c44:	4c62      	ldr	r4, [pc, #392]	; (8008dd0 <VectorD8+0x190>)
 8008c46:	6f66      	ldr	r6, [r4, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8008c48:	f8d6 800c 	ldr.w	r8, [r6, #12]
  uint16_t sr = u->SR;
 8008c4c:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 8008c4e:	05da      	lsls	r2, r3, #23
  uint16_t sr = u->SR;
 8008c50:	b29d      	uxth	r5, r3
  if (sr & USART_SR_LBD) {
 8008c52:	d476      	bmi.n	8008d42 <VectorD8+0x102>
 8008c54:	2320      	movs	r3, #32
 8008c56:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8008c5a:	f015 0f2f 	tst.w	r5, #47	; 0x2f
 8008c5e:	d044      	beq.n	8008cea <VectorD8+0xaa>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8008c60:	4f5c      	ldr	r7, [pc, #368]	; (8008dd4 <VectorD8+0x194>)
  chThdDequeueNextI(tqp, msg);
 8008c62:	f107 0908 	add.w	r9, r7, #8
 8008c66:	e008      	b.n	8008c7a <VectorD8+0x3a>
    if (sr & USART_SR_RXNE)
 8008c68:	06a8      	lsls	r0, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8008c6a:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 8008c6e:	d41e      	bmi.n	8008cae <VectorD8+0x6e>
    sr = u->SR;
 8008c70:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8008c72:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8008c76:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8008c78:	d037      	beq.n	8008cea <VectorD8+0xaa>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8008c7a:	072b      	lsls	r3, r5, #28
 8008c7c:	d0f4      	beq.n	8008c68 <VectorD8+0x28>
    sts |= SD_OVERRUN_ERROR;
 8008c7e:	f015 0f08 	tst.w	r5, #8
 8008c82:	bf0c      	ite	eq
 8008c84:	2100      	moveq	r1, #0
 8008c86:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 8008c88:	07e8      	lsls	r0, r5, #31
    sts |= SD_PARITY_ERROR;
 8008c8a:	bf48      	it	mi
 8008c8c:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8008c90:	07aa      	lsls	r2, r5, #30
    sts |= SD_FRAMING_ERROR;
 8008c92:	bf48      	it	mi
 8008c94:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8008c98:	076b      	lsls	r3, r5, #29
    sts |= SD_NOISE_ERROR;
 8008c9a:	bf48      	it	mi
 8008c9c:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
  chEvtBroadcastFlagsI(esp, flags);
 8008ca0:	4638      	mov	r0, r7
 8008ca2:	f7f8 fc5d 	bl	8001560 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 8008ca6:	06a8      	lsls	r0, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8008ca8:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 8008cac:	d5e0      	bpl.n	8008c70 <VectorD8+0x30>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8008cae:	6963      	ldr	r3, [r4, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 8008cb0:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
 8008cb4:	b3a3      	cbz	r3, 8008d20 <VectorD8+0xe0>
  if (!iqIsFullI(iqp)) {
 8008cb6:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d038      	beq.n	8008d30 <VectorD8+0xf0>
    iqp->q_counter++;
 8008cbe:	6962      	ldr	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 8008cc0:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 8008cc2:	3201      	adds	r2, #1
 8008cc4:	ea05 050a 	and.w	r5, r5, sl
 8008cc8:	6162      	str	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 8008cca:	6221      	str	r1, [r4, #32]
 8008ccc:	701d      	strb	r5, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 8008cce:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d301      	bcc.n	8008cda <VectorD8+0x9a>
      iqp->q_wrptr = iqp->q_buffer;
 8008cd6:	69a3      	ldr	r3, [r4, #24]
 8008cd8:	6223      	str	r3, [r4, #32]
  chThdDequeueNextI(tqp, msg);
 8008cda:	4648      	mov	r0, r9
 8008cdc:	f7f8 fb78 	bl	80013d0 <chThdDequeueNextI.constprop.0>
    sr = u->SR;
 8008ce0:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8008ce2:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8008ce6:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8008ce8:	d1c7      	bne.n	8008c7a <VectorD8+0x3a>
 8008cea:	2300      	movs	r3, #0
 8008cec:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8008cf0:	f018 0f80 	tst.w	r8, #128	; 0x80
 8008cf4:	d001      	beq.n	8008cfa <VectorD8+0xba>
 8008cf6:	062a      	lsls	r2, r5, #24
 8008cf8:	d432      	bmi.n	8008d60 <VectorD8+0x120>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8008cfa:	f018 0f40 	tst.w	r8, #64	; 0x40
 8008cfe:	d00b      	beq.n	8008d18 <VectorD8+0xd8>
 8008d00:	066b      	lsls	r3, r5, #25
 8008d02:	d509      	bpl.n	8008d18 <VectorD8+0xd8>
 8008d04:	2320      	movs	r3, #32
 8008d06:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 8008d0a:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d043      	beq.n	8008d9a <VectorD8+0x15a>
 8008d12:	2300      	movs	r3, #0
 8008d14:	f383 8811 	msr	BASEPRI, r3
}
 8008d18:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 8008d1c:	f7f8 b910 	b.w	8000f40 <_port_irq_epilogue>
  chEvtBroadcastFlagsI(esp, flags);
 8008d20:	2104      	movs	r1, #4
 8008d22:	4638      	mov	r0, r7
 8008d24:	f7f8 fc1c 	bl	8001560 <chEvtBroadcastFlagsI>
  if (!iqIsFullI(iqp)) {
 8008d28:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d1c6      	bne.n	8008cbe <VectorD8+0x7e>
 8008d30:	6962      	ldr	r2, [r4, #20]
 8008d32:	2a00      	cmp	r2, #0
 8008d34:	d0c3      	beq.n	8008cbe <VectorD8+0x7e>
 8008d36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008d3a:	4638      	mov	r0, r7
 8008d3c:	f7f8 fc10 	bl	8001560 <chEvtBroadcastFlagsI>
 8008d40:	e796      	b.n	8008c70 <VectorD8+0x30>
 8008d42:	2320      	movs	r3, #32
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008d4c:	1d20      	adds	r0, r4, #4
 8008d4e:	f7f8 fc07 	bl	8001560 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 8008d52:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8008d56:	6033      	str	r3, [r6, #0]
 8008d58:	2300      	movs	r3, #0
 8008d5a:	f383 8811 	msr	BASEPRI, r3
 8008d5e:	e779      	b.n	8008c54 <VectorD8+0x14>
 8008d60:	2320      	movs	r3, #32
 8008d62:	f383 8811 	msr	BASEPRI, r3
  if (!oqIsEmptyI(oqp)) {
 8008d66:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d022      	beq.n	8008db4 <VectorD8+0x174>
    oqp->q_counter++;
 8008d6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    if (oqp->q_rdptr >= oqp->q_top) {
 8008d70:	6c21      	ldr	r1, [r4, #64]	; 0x40
    b = *oqp->q_rdptr++;
 8008d72:	1c58      	adds	r0, r3, #1
    oqp->q_counter++;
 8008d74:	3201      	adds	r2, #1
 8008d76:	63a2      	str	r2, [r4, #56]	; 0x38
    b = *oqp->q_rdptr++;
 8008d78:	64a0      	str	r0, [r4, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 8008d7a:	4288      	cmp	r0, r1
    b = *oqp->q_rdptr++;
 8008d7c:	781f      	ldrb	r7, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 8008d7e:	d301      	bcc.n	8008d84 <VectorD8+0x144>
      oqp->q_rdptr = oqp->q_buffer;
 8008d80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008d82:	64a3      	str	r3, [r4, #72]	; 0x48
  chThdDequeueNextI(tqp, msg);
 8008d84:	4814      	ldr	r0, [pc, #80]	; (8008dd8 <VectorD8+0x198>)
 8008d86:	f7f8 fb23 	bl	80013d0 <chThdDequeueNextI.constprop.0>
      u->DR = b;
 8008d8a:	6077      	str	r7, [r6, #4]
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8008d92:	f018 0f40 	tst.w	r8, #64	; 0x40
 8008d96:	d0bf      	beq.n	8008d18 <VectorD8+0xd8>
 8008d98:	e7b2      	b.n	8008d00 <VectorD8+0xc0>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8008d9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d0b8      	beq.n	8008d12 <VectorD8+0xd2>
  chEvtBroadcastFlagsI(esp, flags);
 8008da0:	480c      	ldr	r0, [pc, #48]	; (8008dd4 <VectorD8+0x194>)
 8008da2:	2110      	movs	r1, #16
 8008da4:	f7f8 fbdc 	bl	8001560 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 8008da8:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8008dac:	ea08 0303 	and.w	r3, r8, r3
 8008db0:	60f3      	str	r3, [r6, #12]
 8008db2:	e7ae      	b.n	8008d12 <VectorD8+0xd2>
  if (!oqIsEmptyI(oqp)) {
 8008db4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008db6:	2a00      	cmp	r2, #0
 8008db8:	d0d9      	beq.n	8008d6e <VectorD8+0x12e>
 8008dba:	4806      	ldr	r0, [pc, #24]	; (8008dd4 <VectorD8+0x194>)
 8008dbc:	2108      	movs	r1, #8
 8008dbe:	f7f8 fbcf 	bl	8001560 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 8008dc2:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8008dc6:	ea08 0303 	and.w	r3, r8, r3
 8008dca:	60f3      	str	r3, [r6, #12]
 8008dcc:	e7de      	b.n	8008d8c <VectorD8+0x14c>
 8008dce:	bf00      	nop
 8008dd0:	200008e0 	.word	0x200008e0
 8008dd4:	200008e4 	.word	0x200008e4
 8008dd8:	20000910 	.word	0x20000910
 8008ddc:	00000000 	.word	0x00000000

08008de0 <VectorB0>:
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 8008de0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8008de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  sr  = timp->SR;
 8008de8:	6903      	ldr	r3, [r0, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 8008dea:	68c2      	ldr	r2, [r0, #12]
 8008dec:	4013      	ands	r3, r2
 8008dee:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 8008df0:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 8008df2:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 8008df4:	6102      	str	r2, [r0, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 8008df6:	d403      	bmi.n	8008e00 <VectorB0+0x20>
}
 8008df8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 8008dfc:	f7f8 b8a0 	b.w	8000f40 <_port_irq_epilogue>
 8008e00:	2320      	movs	r3, #32
 8008e02:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 8008e06:	4d23      	ldr	r5, [pc, #140]	; (8008e94 <VectorB0+0xb4>)
 8008e08:	6a47      	ldr	r7, [r0, #36]	; 0x24
 8008e0a:	69eb      	ldr	r3, [r5, #28]
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8008e0c:	6aaa      	ldr	r2, [r5, #40]	; 0x28

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 8008e0e:	6899      	ldr	r1, [r3, #8]
  return (sysinterval_t)((systime_t)(end - start));
 8008e10:	1abe      	subs	r6, r7, r2
 8008e12:	42b1      	cmp	r1, r6
 8008e14:	bf88      	it	hi
 8008e16:	f105 091c 	addhi.w	r9, r5, #28
 8008e1a:	d825      	bhi.n	8008e68 <VectorB0+0x88>
  STM32_ST_TIM->DIER = 0U;
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	f105 091c 	add.w	r9, r5, #28
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 8008e22:	f04f 0800 	mov.w	r8, #0
 8008e26:	2720      	movs	r7, #32
 8008e28:	e000      	b.n	8008e2c <VectorB0+0x4c>
 8008e2a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8008e2c:	6818      	ldr	r0, [r3, #0]
      ch.vtlist.lasttime += vtp->delta;
 8008e2e:	440a      	add	r2, r1

      /* If the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8008e30:	4548      	cmp	r0, r9
      ch.vtlist.lasttime += vtp->delta;
 8008e32:	62aa      	str	r2, [r5, #40]	; 0x28
      nowdelta -= vtp->delta;
 8008e34:	eba6 0601 	sub.w	r6, r6, r1
      fn = vtp->func;
 8008e38:	68da      	ldr	r2, [r3, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8008e3a:	f8c0 9004 	str.w	r9, [r0, #4]
      ch.vtlist.next = vtp->next;
 8008e3e:	61e8      	str	r0, [r5, #28]
      vtp->func = NULL;
 8008e40:	f8c3 800c 	str.w	r8, [r3, #12]
 8008e44:	bf08      	it	eq
 8008e46:	f8c4 800c 	streq.w	r8, [r4, #12]
 8008e4a:	f388 8811 	msr	BASEPRI, r8
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 8008e4e:	6918      	ldr	r0, [r3, #16]
 8008e50:	4790      	blx	r2
 8008e52:	f387 8811 	msr	BASEPRI, r7
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 8008e56:	69eb      	ldr	r3, [r5, #28]
    }
    while (vtp->delta <= nowdelta);
 8008e58:	6899      	ldr	r1, [r3, #8]
 8008e5a:	428e      	cmp	r6, r1
 8008e5c:	d2e5      	bcs.n	8008e2a <VectorB0+0x4a>
  return (systime_t)STM32_ST_TIM->CNT;
 8008e5e:	6a67      	ldr	r7, [r4, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8008e60:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8008e62:	1abe      	subs	r6, r7, r2
    if (nowdelta < vtp->delta) {
 8008e64:	428e      	cmp	r6, r1
 8008e66:	d2de      	bcs.n	8008e26 <VectorB0+0x46>
  }

  /* If the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8008e68:	454b      	cmp	r3, r9
 8008e6a:	d00b      	beq.n	8008e84 <VectorB0+0xa4>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 8008e6c:	6899      	ldr	r1, [r3, #8]
  ch.vtlist.lasttime += nowdelta;
 8008e6e:	62af      	str	r7, [r5, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 8008e70:	1bc9      	subs	r1, r1, r7
 8008e72:	440a      	add	r2, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8008e74:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 8008e78:	2a02      	cmp	r2, #2
 8008e7a:	bf2c      	ite	cs
 8008e7c:	18bf      	addcs	r7, r7, r2
 8008e7e:	3702      	addcc	r7, #2
 8008e80:	609a      	str	r2, [r3, #8]
 8008e82:	634f      	str	r7, [r1, #52]	; 0x34
 8008e84:	2300      	movs	r3, #0
 8008e86:	f383 8811 	msr	BASEPRI, r3
}
 8008e8a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 8008e8e:	f7f8 b857 	b.w	8000f40 <_port_irq_epilogue>
 8008e92:	bf00      	nop
 8008e94:	200009b0 	.word	0x200009b0
	...

08008ea0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8008ea0:	b4f0      	push	{r4, r5, r6, r7}
 8008ea2:	4f14      	ldr	r7, [pc, #80]	; (8008ef4 <__init_ram_areas+0x54>)
 8008ea4:	4d14      	ldr	r5, [pc, #80]	; (8008ef8 <__init_ram_areas+0x58>)
 8008ea6:	4815      	ldr	r0, [pc, #84]	; (8008efc <__init_ram_areas+0x5c>)
 8008ea8:	4b15      	ldr	r3, [pc, #84]	; (8008f00 <__init_ram_areas+0x60>)
 8008eaa:	4916      	ldr	r1, [pc, #88]	; (8008f04 <__init_ram_areas+0x64>)
 8008eac:	f107 0c70 	add.w	ip, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8008eb0:	2600      	movs	r6, #0
    while (p < rap->clear_area) {
 8008eb2:	4298      	cmp	r0, r3
 8008eb4:	d911      	bls.n	8008eda <__init_ram_areas+0x3a>
 8008eb6:	3904      	subs	r1, #4
 8008eb8:	461a      	mov	r2, r3
      *p = *tp;
 8008eba:	f851 4f04 	ldr.w	r4, [r1, #4]!
 8008ebe:	f842 4b04 	str.w	r4, [r2], #4
    while (p < rap->clear_area) {
 8008ec2:	4290      	cmp	r0, r2
 8008ec4:	d8f9      	bhi.n	8008eba <__init_ram_areas+0x1a>
 8008ec6:	1e42      	subs	r2, r0, #1
 8008ec8:	1ad2      	subs	r2, r2, r3
 8008eca:	f022 0203 	bic.w	r2, r2, #3
 8008ece:	3204      	adds	r2, #4
 8008ed0:	4413      	add	r3, r2
    while (p < rap->no_init_area) {
 8008ed2:	429d      	cmp	r5, r3
 8008ed4:	d903      	bls.n	8008ede <__init_ram_areas+0x3e>
      *p = 0;
 8008ed6:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 8008eda:	429d      	cmp	r5, r3
 8008edc:	d8fb      	bhi.n	8008ed6 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8008ede:	4567      	cmp	r7, ip
 8008ee0:	d005      	beq.n	8008eee <__init_ram_areas+0x4e>
 8008ee2:	e9d7 1304 	ldrd	r1, r3, [r7, #16]
 8008ee6:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
 8008eea:	3710      	adds	r7, #16
 8008eec:	e7e1      	b.n	8008eb2 <__init_ram_areas+0x12>
#endif
}
 8008eee:	bcf0      	pop	{r4, r5, r6, r7}
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	0800b08c 	.word	0x0800b08c
 8008ef8:	20001b98 	.word	0x20001b98
 8008efc:	20001b98 	.word	0x20001b98
 8008f00:	20001b98 	.word	0x20001b98
 8008f04:	0800b68c 	.word	0x0800b68c
	...

08008f10 <__default_exit>:
  while (true) {
 8008f10:	e7fe      	b.n	8008f10 <__default_exit>
 8008f12:	bf00      	nop
	...

08008f20 <__late_init>:
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop
	...

08008f30 <__core_init>:
}
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
